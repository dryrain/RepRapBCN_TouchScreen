file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 24/08/2015 10:53:53
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 24/08/2015 10:53:26
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     30
005100  000006  #constant  Strings1Size     30
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings11Count    1
005154  000033  #constant  Strings11Count    1
005155  000034  #constant  Strings11Size     73
005156  000034  #constant  Strings11Size     73
005157  000035  #constant  Strings24Count    1
005158  000035  #constant  Strings24Count    1
005159  000036  #constant  Strings24Size     26
005160  000036  #constant  Strings24Size     26
005161  000037  #constant  Strings25Count    1
005162  000037  #constant  Strings25Count    1
005163  000038  #constant  Strings25Size     10
005164  000038  #constant  Strings25Size     10
005165  000039  #constant  Strings26Count    1
005166  000039  #constant  Strings26Count    1
005167  000040  #constant  Strings26Size     10
005168  000040  #constant  Strings26Size     10
005169  000041  #constant  Strings27Count    1
005170  000041  #constant  Strings27Count    1
005171  000042  #constant  Strings27Size     11
005172  000042  #constant  Strings27Size     11
005173  000043  #constant  Strings7Count    0
005174  000043  #constant  Strings7Count    0
005175  000044  #constant  Strings7Size     1
005176  000044  #constant  Strings7Size     1
005177  000045  #constant  Strings8Count    0
005178  000045  #constant  Strings8Count    0
005179  000046  #constant  Strings8Size     1
005180  000046  #constant  Strings8Size     1
005181  000047  #constant  Strings38Count    0
005182  000047  #constant  Strings38Count    0
005183  000048  #constant  Strings38Size     1
005184  000048  #constant  Strings38Size     1
005185  000049  #constant  Strings39Count    0
005186  000049  #constant  Strings39Count    0
005187  000050  #constant  Strings39Size     1
005188  000050  #constant  Strings39Size     1
005189  000051  #constant  Strings40Count    1
005190  000051  #constant  Strings40Count    1
005191  000052  #constant  Strings40Size     7
005192  000052  #constant  Strings40Size     7
005193  000053  #constant  Strings41Count    1
005194  000053  #constant  Strings41Count    1
005195  000054  #constant  Strings41Size     7
005196  000054  #constant  Strings41Size     7
005197  000055  #constant  Strings42Count    1
005198  000055  #constant  Strings42Count    1
005199  000056  #constant  Strings42Size     7
005200  000056  #constant  Strings42Size     7
005201  000057  #constant  Strings43Count    0
005202  000057  #constant  Strings43Count    0
005203  000058  #constant  Strings43Size     1
005204  000058  #constant  Strings43Size     1
005205  000059  #constant  Strings44Count    0
005206  000059  #constant  Strings44Count    0
005207  000060  #constant  Strings44Size     1
005208  000060  #constant  Strings44Size     1
005209  000061  #constant  Strings45Count    0
005210  000061  #constant  Strings45Count    0
005211  000062  #constant  Strings45Size     1
005212  000062  #constant  Strings45Size     1
005213  000063  #constant  Strings51Count    0
005214  000063  #constant  Strings51Count    0
005215  000064  #constant  Strings51Size     1
005216  000064  #constant  Strings51Size     1
005217  000065  #constant  Strings52Count    0
005218  000065  #constant  Strings52Count    0
005219  000066  #constant  Strings52Size     1
005220  000066  #constant  Strings52Size     1
005221  000067  #constant  Strings19Count    1
005222  000067  #constant  Strings19Count    1
005223  000068  #constant  Strings19Size     94
005224  000068  #constant  Strings19Size     94
005225  000069  #constant  Strings29Count    1
005226  000069  #constant  Strings29Count    1
005227  000070  #constant  Strings29Size     53
005228  000070  #constant  Strings29Size     53
005229  000071  #constant  Strings30Count    1
005230  000071  #constant  Strings30Count    1
005231  000072  #constant  Strings30Size     27
005232  000072  #constant  Strings30Size     27
005233  000073  #constant  Strings31Count    1
005234  000073  #constant  Strings31Count    1
005235  000074  #constant  Strings31Size     7
005236  000074  #constant  Strings31Size     7
005237  000075  #constant  Strings32Count    1
005238  000075  #constant  Strings32Count    1
005239  000076  #constant  Strings32Size     19
005240  000076  #constant  Strings32Size     19
005241  000077  #constant  Strings49Count    1
005242  000077  #constant  Strings49Count    1
005243  000078  #constant  Strings49Size     17
005244  000078  #constant  Strings49Size     17
005245  000079  #constant  Strings50Count    0
005246  000079  #constant  Strings50Count    0
005247  000080  #constant  Strings50Size     1
005248  000080  #constant  Strings50Size     1
005249  000081  #constant  Strings13Count    1
005250  000081  #constant  Strings13Count    1
005251  000082  #constant  Strings13Size     3
005252  000082  #constant  Strings13Size     3
005253  000083  #constant  Strings46Count    0
005254  000083  #constant  Strings46Count    0
005255  000084  #constant  Strings46Size     1
005256  000084  #constant  Strings46Size     1
005257  000085  #constant  Strings47Count    1
005258  000085  #constant  Strings47Count    1
005259  000086  #constant  Strings47Size     3
005260  000086  #constant  Strings47Size     3
005261  000087  #constant  Strings48Count    0
005262  000087  #constant  Strings48Count    0
005263  000088  #constant  Strings48Size     1
005264  000088  #constant  Strings48Size     1
005265  000089  #constant  Strings53Count    1
005266  000089  #constant  Strings53Count    1
005267  000090  #constant  Strings53Size     68
005268  000090  #constant  Strings53Size     68
005269  000091  #constant  Strings5Count    0
005270  000091  #constant  Strings5Count    0
005271  000092  #constant  Strings5Size     1
005272  000092  #constant  Strings5Size     1
005273  000093  // object indexes into ImageControl
005274  000094  #CONST
005275  000338  #END
005276  000339        
005277  000340  #constant  Strings10Size     0
005278  000340  #constant  Strings10Size     0
005279  000341  #constant  Strings10StartH   0
005280  000341  #constant  Strings10StartH   0
005281  000342  #constant  Strings10StartL   0
005282  000342  #constant  Strings10StartL   0
005283  000343  #constant  Strings17Size     0
005284  000343  #constant  Strings17Size     0
005285  000344  #constant  Strings17StartH   0
005286  000344  #constant  Strings17StartH   0
005287  000345  #constant  Strings17StartL   0
005288  000345  #constant  Strings17StartL   0
005289  000346  #constant  Strings18Size     0
005290  000346  #constant  Strings18Size     0
005291  000347  #constant  Strings18StartH   0
005292  000347  #constant  Strings18StartH   0
005293  000348  #constant  Strings18StartL   0
005294  000348  #constant  Strings18StartL   0
005295  000349  #constant  Strings20Size     0
005296  000349  #constant  Strings20Size     0
005297  000350  #constant  Strings20StartH   0
005298  000350  #constant  Strings20StartH   0
005299  000351  #constant  Strings20StartL   0
005300  000351  #constant  Strings20StartL   0
005301  000352  #constant  Strings21Size     0
005302  000352  #constant  Strings21Size     0
005303  000353  #constant  Strings21StartH   0
005304  000353  #constant  Strings21StartH   0
005305  000354  #constant  Strings21StartL   0
005306  000354  #constant  Strings21StartL   0
005307  000355  #constant  Strings22Size     0
005308  000355  #constant  Strings22Size     0
005309  000356  #constant  Strings22StartH   0
005310  000356  #constant  Strings22StartH   0
005311  000357  #constant  Strings22StartL   0
005312  000357  #constant  Strings22StartL   0
005313  000358  #constant  Strings23Size     0
005314  000358  #constant  Strings23Size     0
005315  000359  #constant  Strings23StartH   0
005316  000359  #constant  Strings23StartH   0
005317  000360  #constant  Strings23StartL   0
005318  000360  #constant  Strings23StartL   0
005319  000361  #constant  Strings28Size     0
005320  000361  #constant  Strings28Size     0
005321  000362  #constant  Strings28StartH   0
005322  000362  #constant  Strings28StartH   0
005323  000363  #constant  Strings28StartL   0
005324  000363  #constant  Strings28StartL   0
005325  000364  #constant  Strings33Size     0
005326  000364  #constant  Strings33Size     0
005327  000365  #constant  Strings33StartH   0
005328  000365  #constant  Strings33StartH   0
005329  000366  #constant  Strings33StartL   0
005330  000366  #constant  Strings33StartL   0
005331  000367  #constant  Strings35Size     0
005332  000367  #constant  Strings35Size     0
005333  000368  #constant  Strings35StartH   0
005334  000368  #constant  Strings35StartH   0
005335  000369  #constant  Strings35StartL   0
005336  000369  #constant  Strings35StartL   0
005337  000370  #constant  Strings1StartH   0x0
005338  000370  #constant  Strings1StartH   0x0
005339  000371  #constant  Strings1StartL   0x0
005340  000371  #constant  Strings1StartL   0x0
005341  000372  #constant  Strings3StartH   0x0
005342  000372  #constant  Strings3StartH   0x0
005343  000373  #constant  Strings3StartL   0x200
005344  000373  #constant  Strings3StartL   0x200
005345  000374  #constant  Strings4StartH   0x0
005346  000374  #constant  Strings4StartH   0x0
005347  000375  #constant  Strings4StartL   0x400
005348  000375  #constant  Strings4StartL   0x400
005349  000376  #constant  Strings6StartH   0x0
005350  000376  #constant  Strings6StartH   0x0
005351  000377  #constant  Strings6StartL   0x600
005352  000377  #constant  Strings6StartL   0x600
005353  000378  #constant  Strings2StartH   0x0
005354  000378  #constant  Strings2StartH   0x0
005355  000379  #constant  Strings2StartL   0x800
005356  000379  #constant  Strings2StartL   0x800
005357  000380  #constant  Strings0StartH   0x0
005358  000380  #constant  Strings0StartH   0x0
005359  000381  #constant  Strings0StartL   0xA00
005360  000381  #constant  Strings0StartL   0xA00
005361  000382  #constant  Strings9StartH   0x0
005362  000382  #constant  Strings9StartH   0x0
005363  000383  #constant  Strings9StartL   0xC00
005364  000383  #constant  Strings9StartL   0xC00
005365  000384  #constant  Strings34StartH   0x0
005366  000384  #constant  Strings34StartH   0x0
005367  000385  #constant  Strings34StartL   0xE00
005368  000385  #constant  Strings34StartL   0xE00
005369  000386  #constant  Strings36StartH   0x0
005370  000386  #constant  Strings36StartH   0x0
005371  000387  #constant  Strings36StartL   0x1000
005372  000387  #constant  Strings36StartL   0x1000
005373  000388  #constant  Strings37StartH   0x0
005374  000388  #constant  Strings37StartH   0x0
005375  000389  #constant  Strings37StartL   0x1200
005376  000389  #constant  Strings37StartL   0x1200
005377  000390  #constant  Strings12StartH   0x0
005378  000390  #constant  Strings12StartH   0x0
005379  000391  #constant  Strings12StartL   0x1400
005380  000391  #constant  Strings12StartL   0x1400
005381  000392  #constant  Strings14StartH   0x0
005382  000392  #constant  Strings14StartH   0x0
005383  000393  #constant  Strings14StartL   0x1600
005384  000393  #constant  Strings14StartL   0x1600
005385  000394  #constant  Strings16StartH   0x0
005386  000394  #constant  Strings16StartH   0x0
005387  000395  #constant  Strings16StartL   0x1800
005388  000395  #constant  Strings16StartL   0x1800
005389  000396  #constant  Strings15StartH   0x0
005390  000396  #constant  Strings15StartH   0x0
005391  000397  #constant  Strings15StartL   0x1A00
005392  000397  #constant  Strings15StartL   0x1A00
005393  000398  #constant  Strings11StartH   0x0
005394  000398  #constant  Strings11StartH   0x0
005395  000399  #constant  Strings11StartL   0x1C00
005396  000399  #constant  Strings11StartL   0x1C00
005397  000400  #constant  Strings24StartH   0x0
005398  000400  #constant  Strings24StartH   0x0
005399  000401  #constant  Strings24StartL   0x1E00
005400  000401  #constant  Strings24StartL   0x1E00
005401  000402  #constant  Strings25StartH   0x0
005402  000402  #constant  Strings25StartH   0x0
005403  000403  #constant  Strings25StartL   0x2000
005404  000403  #constant  Strings25StartL   0x2000
005405  000404  #constant  Strings26StartH   0x0
005406  000404  #constant  Strings26StartH   0x0
005407  000405  #constant  Strings26StartL   0x2200
005408  000405  #constant  Strings26StartL   0x2200
005409  000406  #constant  Strings27StartH   0x0
005410  000406  #constant  Strings27StartH   0x0
005411  000407  #constant  Strings27StartL   0x2400
005412  000407  #constant  Strings27StartL   0x2400
005413  000408  #constant  Strings7StartH   0x0
005414  000408  #constant  Strings7StartH   0x0
005415  000409  #constant  Strings7StartL   0x2600
005416  000409  #constant  Strings7StartL   0x2600
005417  000410  #constant  Strings8StartH   0x0
005418  000410  #constant  Strings8StartH   0x0
005419  000411  #constant  Strings8StartL   0x2800
005420  000411  #constant  Strings8StartL   0x2800
005421  000412  #constant  Strings38StartH   0x0
005422  000412  #constant  Strings38StartH   0x0
005423  000413  #constant  Strings38StartL   0x2A00
005424  000413  #constant  Strings38StartL   0x2A00
005425  000414  #constant  Strings39StartH   0x0
005426  000414  #constant  Strings39StartH   0x0
005427  000415  #constant  Strings39StartL   0x2C00
005428  000415  #constant  Strings39StartL   0x2C00
005429  000416  #constant  Strings40StartH   0x0
005430  000416  #constant  Strings40StartH   0x0
005431  000417  #constant  Strings40StartL   0x2E00
005432  000417  #constant  Strings40StartL   0x2E00
005433  000418  #constant  Strings41StartH   0x0
005434  000418  #constant  Strings41StartH   0x0
005435  000419  #constant  Strings41StartL   0x3000
005436  000419  #constant  Strings41StartL   0x3000
005437  000420  #constant  Strings42StartH   0x0
005438  000420  #constant  Strings42StartH   0x0
005439  000421  #constant  Strings42StartL   0x3200
005440  000421  #constant  Strings42StartL   0x3200
005441  000422  #constant  Strings43StartH   0x0
005442  000422  #constant  Strings43StartH   0x0
005443  000423  #constant  Strings43StartL   0x3400
005444  000423  #constant  Strings43StartL   0x3400
005445  000424  #constant  Strings44StartH   0x0
005446  000424  #constant  Strings44StartH   0x0
005447  000425  #constant  Strings44StartL   0x3600
005448  000425  #constant  Strings44StartL   0x3600
005449  000426  #constant  Strings45StartH   0x0
005450  000426  #constant  Strings45StartH   0x0
005451  000427  #constant  Strings45StartL   0x3800
005452  000427  #constant  Strings45StartL   0x3800
005453  000428  #constant  Strings51StartH   0x0
005454  000428  #constant  Strings51StartH   0x0
005455  000429  #constant  Strings51StartL   0x3A00
005456  000429  #constant  Strings51StartL   0x3A00
005457  000430  #constant  Strings52StartH   0x0
005458  000430  #constant  Strings52StartH   0x0
005459  000431  #constant  Strings52StartL   0x3C00
005460  000431  #constant  Strings52StartL   0x3C00
005461  000432  #constant  Strings19StartH   0x0
005462  000432  #constant  Strings19StartH   0x0
005463  000433  #constant  Strings19StartL   0x3E00
005464  000433  #constant  Strings19StartL   0x3E00
005465  000434  #constant  Strings29StartH   0x0
005466  000434  #constant  Strings29StartH   0x0
005467  000435  #constant  Strings29StartL   0x4000
005468  000435  #constant  Strings29StartL   0x4000
005469  000436  #constant  Strings30StartH   0x0
005470  000436  #constant  Strings30StartH   0x0
005471  000437  #constant  Strings30StartL   0x4200
005472  000437  #constant  Strings30StartL   0x4200
005473  000438  #constant  Strings31StartH   0x0
005474  000438  #constant  Strings31StartH   0x0
005475  000439  #constant  Strings31StartL   0x4400
005476  000439  #constant  Strings31StartL   0x4400
005477  000440  #constant  Strings32StartH   0x0
005478  000440  #constant  Strings32StartH   0x0
005479  000441  #constant  Strings32StartL   0x4600
005480  000441  #constant  Strings32StartL   0x4600
005481  000442  #constant  Strings49StartH   0x0
005482  000442  #constant  Strings49StartH   0x0
005483  000443  #constant  Strings49StartL   0x4800
005484  000443  #constant  Strings49StartL   0x4800
005485  000444  #constant  Strings50StartH   0x0
005486  000444  #constant  Strings50StartH   0x0
005487  000445  #constant  Strings50StartL   0x4A00
005488  000445  #constant  Strings50StartL   0x4A00
005489  000446  #constant  Strings13StartH   0x0
005490  000446  #constant  Strings13StartH   0x0
005491  000447  #constant  Strings13StartL   0x4C00
005492  000447  #constant  Strings13StartL   0x4C00
005493  000448  #constant  Strings46StartH   0x0
005494  000448  #constant  Strings46StartH   0x0
005495  000449  #constant  Strings46StartL   0x4E00
005496  000449  #constant  Strings46StartL   0x4E00
005497  000450  #constant  Strings47StartH   0x0
005498  000450  #constant  Strings47StartH   0x0
005499  000451  #constant  Strings47StartL   0x5000
005500  000451  #constant  Strings47StartL   0x5000
005501  000452  #constant  Strings48StartH   0x0
005502  000452  #constant  Strings48StartH   0x0
005503  000453  #constant  Strings48StartL   0x5200
005504  000453  #constant  Strings48StartL   0x5200
005505  000454  #constant  Strings53StartH   0x0
005506  000454  #constant  Strings53StartH   0x0
005507  000455  #constant  Strings53StartL   0x5400
005508  000455  #constant  Strings53StartL   0x5400
005509  000456  #constant  Strings5StartH   0x0
005510  000456  #constant  Strings5StartH   0x0
005511  000457  #constant  Strings5StartL   0x5600
005512  000457  #constant  Strings5StartL   0x5600
005513  000458  #IFNOT EXISTS NOGLOBALS
005514  000459  var hndl ;
005515  000460  #ENDIF
005516  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005517  000013  #inherit "CLPrintStrings.inc"
005518  000013  #inherit "CLPrintStrings.inc"
005519  000001  func PrintStrings(var ID, var *msgid, var String)
005520  000002      var StringID, i, ch, offs32[2], res32[2];
005521  000003      StringID := oStringss[1+ID] ;
005522  000004      if (String)
005523  000005          stringsCV[ID] := -1 ;
005524  000006      else
005525  000007          stringsCV[ID] := msgid ;
005526  000008      endif
005527  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005528  000010      txt_FontID(hFonts[ID]) ;
005529  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005530  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005531  000013        
005532  000014      if (*(StringID + Ofs_String_Transparent))
005533  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005534  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005535  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005536  000018      else
005537  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005538  000020          gfx_Clipping(ON) ;
005539  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005540  000022          gfx_Clipping(OFF) ;
005541  000023        
005542  000024      endif
005543  000025        
005544  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005545  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005546  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005547  000029        
005548  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005549  000031        
005550  000032      if (String)
005551  000033          i := 0 ;
005552  000034          ch := msgid[i++] ;
005553  000035          while (ch != 0)
005554  000036              putch(ch) ;
005555  000037              ch := msgid[i++] ;
005556  000038          wend
005557  000039      else
005558  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005559  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005560  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005561  000043          uadd_3232(res32,res32,offs32) ;
005562  000044          file_Seek(hstrings, res32[1], res32[0]);
005563  000045          repeat
005564  000046              if (*(StringID + Ofs_String_Ansi))
005565  000047                  ch := file_GetC(hstrings) ;
005566  000048              else
005567  000049                  ch := file_GetW(hstrings) ;
005568  000050              endif
005569  000051              putch(ch) ;
005570  000052          until (ch == 0) ;
005571  000053      endif
005572  000054        
005573  000055  endfunc
005574  000056        
005575  000014        
005576  000015  #constant IPDatasize 22
005577  000015  #constant IPDatasize 22
005578  000016        
005579  000017  #CONST
005580  000021  #END
005581  000022        
005582  000023  #CONST
005583  000130  #END
005584  000131        
005585  000565  #END
5586  270C
5587  270D
5588  270E
5589  270F
5590  2710
5591  2711
5592  2712
5593  2713
5594  2714
5595  2715
5596  2716
5597  2717
5598  2718
5599  2719
5600  271A
5601  271B
5602  271C
5603  271D
5604  271E
5605  271F
5606  2720
5607  2721
5608  2722
5609  2723
5610  2724
5611  2725
5612  2726
5613  2727
5614  2728
5615  2729
5616  272A
5617  272B
5618  272C
5619  272D
5620  272E
5621  272F
5622  2730
5623  2731
5624  2732
5625  2733
5626  2734
5627  2735
5628  2736
5629  2737
5630  2738
5631  2739
5632  273A
5633  273B
5634  273C
5635  273D
5636  273E
5637  273F
5638  2740
5639  2741
5640  2742
5641  2743
5642  2744
5643  2745
5644  2746
5645  2747
5646  2748
5647  2749
5648  274A
5649  274B
5650  274C
5651  274D
5652  274E
5653  274F
5654  2750
5655  2751
5656  2752
5657  2753
5658  2754
5659  2755
5660  2756
5661  2757
5662  2758
5663  2759
5664  275A
5665  275B
5666  275C
5667  275D
5668  275E
5669  275F
5670  2760
5671  2761
5672  2762
5673  2763
5674  2764
5675  2765
5676  2766
5677  2767
5678  2768
5679  2769
5680  276A
5681  276B
5682  276C
5683  276D
5684  276E
5685  276F
5686  2770
5687  2771
5688  2772
5689  2773
5690  2774
5691  2775
5692  2776
5693  2777
5694  2778
5695  2779
5696  277A
5697  277B
5698  277C
5699  277D
5700  277E
5701  277F
5702  2780
5703  2781
5704  2782
5705  2783
5706  2784
5707  2785
5708  2786
5709  2787
5710  2788
5711  2789
5712  278A
5713  278B
5714  278C
5715  278D
5716  278E
5717  278F
5718  2790
5719  2791
5720  2792
5721  2793
5722  2794
5723  2795
5724  2796
5725  2797
5726  2798
5727  2799
5728  279A
5729  279B
5730  279C
5731  279D
5732  279E
5733  279F
5734  27A0
5735  27A1
5736  27A2
5737  27A3
5738  27A4
5739  27A5
5740  27A6
5741  27A7
5742  27A8
5743  27A9
5744  27AA
5745  27AB
5746  27AC
5747  27AD
5748  27AE
5749  27AF
5750  27B0
5751  27B1
5752  27B2
5753  27B3
5754  27B4
5755  27B5
5756  27B6
5757  27B7
5758  27B8
5759  27B9
5760  27BA
5761  27BB
5762  27BC
5763  27BD
5764  27BE
5765  27BF
5766  27C0
5767  27C1
5768  27C2
5769  27C3
5770  27C4
5771  27C5
5772  27C6
5773  27C7
5774  27C8
5775  27C9
5776  27CA
5777  27CB
5778  27CC
5779  27CD
5780  27CE
5781  27CF
5782  27D0
5783  27D1
5784  27D2
5785  27D3
5786  27D4
5787  27D5
5788  27D6
5789  27D7
5790  27D8
5791  27D9
5792  27DA
5793  27DB
5794  27DC
5795  27DD
5796  27DE
5797  27DF
5798  27E0
5799  27E1
5800  27E2
5801  27E3
5802  27E4
5803  27E5
5804  27E6
5805  27E7
5806  27E8
5807  27E9
5808  27EA
5809  27EB
5810  27EC
5811  27ED
5812  27EE
5813  27EF
5814  27F0
5815  27F1
5816  27F2
5817  27F3
5818  27F4
5819  27F5
5820  27F6
5821  27F7
5822  27F8
5823  27F9
5824  27FA
5825  27FB
5826  27FC
5827  27FD
5828  27FE
5829  27FF
5830  2800
5831  2801
5832  2802
5833  2803
5834  2804
5835  2805
5836  2806
5837  2807
5838  2808
5839  2809
5840  280A
5841  280B
5842  280C
5843  280D
5844  280E
5845  280F
5846  2810
5847  2811
5848  2812
5849  2813
5850  2814
5851  2815
5852  2816
5853  2817
5854  2818
5855  2819
5856  281A
5857  281B
5858  281C
5859  281D
5860  281E
5861  281F
5862  2820
5863  2821
5864  2822
5865  2823
5866  2824
5867  2825
5868  2826
5869  2827
5870  2828
5871  2829
5872  282A
5873  282B
5874  282C
5875  282D
5876  282E
5877  282F
5878  2830
5879  2831
5880  2832
5881  2833
5882  2834
5883  2835
5884  2836
5885  2837
5886  2838
5887  2839
5888  283A
5889  283B
5890  283C
5891  283D
5892  283E
5893  283F
5894  2840
5895  2841
5896  2842
5897  2843
5898  2844
5899  2845
5900  2846
5901  2847
5902  2848
5903  2849
5904  284A
5905  284B
5906  284C
5907  284D
5908  284E
5909  284F
5910  2850
5911  2851
5912  2852
5913  2853
5914  2854
5915  2855
5916  2856
5917  2857
5918  2858
5919  2859
5920  285A
5921  285B
5922  285C
5923  285D
5924  285E
5925  285F
5926  2860
5927  2861
5928  2862
5929  2863
5930  2864
5931  2865
5932  2866
5933  2867
5934  2868
5935  2869
5936  286A
5937  286B
5938  286C
5939  286D
5940  286E
5941  286F
5942  2870
5943  2871
5944  2872
5945  2873
5946  2874
5947  2875
5948  2876
5949  2877
5950  2878
5951  2879
5952  287A
5953  287B
5954  287C
5955  287D
5956  287E
5957  287F
5958  2880
5959  2881
5960  2882
5961  2883
5962  2884
5963  2885
5964  2886
5965  2887
5966  2888
5967  2889
5968  288A
5969  288B
5970  288C
5971  288D
5972  288E
5973  288F
5974  2890
5975  2891
5976  2892
5977  2893
5978  2894
5979  2895
5980  2896
5981  2897
5982  2898
5983  2899
5984  289A
5985  289B
5986  289C
5987  289D
5988  289E
5989  289F
5990  28A0
5991  28A1
5992  28A2
5993  28A3
5994  28A4
5995  28A5
5996  28A6
5997  28A7
5998  28A8
5999  28A9
6000  28AA
6001  28AB
6002  28AC
6003  28AD
6004  28AE
6005  28AF
6006  28B0
6007  28B1
6008  28B2
6009  28B3
6010  28B4
6011  28B5
6012  28B6
6013  28B7
6014  28B8
6015  28B9
6016  28BA
6017  28BB
6018  28BC
6019  28BD
6020  28BE
6021  28BF
6022  28C0
6023  28C1
6024  28C2
6025  28C3
6026  28C4
6027  28C5
6028  28C6
6029  28C7
6030  28C8
6031  28C9
6032  28CA
6033  28CB
6034  28CC
6035  28CD
6036  28CE
6037  28CF
6038  28D0
6039  28D1
6040  28D2
6041  28D3
6042  28D4
6043  28D5
6044  28D6
6045  28D7
6046  28D8
6047  28D9
6048  28DA
6049  28DB
6050  28DC
6051  28DD
6052  28DE
6053  28DF
6054  28E0
6055  28E1
6056  28E2
6057  28E3
6058  28E4
6059  28E5
6060  28E6
6061  28E7
6062  28E8
6063  28E9
6064  28EA
6065  28EB
6066  28EC
6067  28ED
6068  28EE
6069  28EF
6070  28F0
6071  28F1
6072  28F2
6073  28F3
6074  28F4
6075  28F5
6076  28F6
6077  28F7
6078  28F8
6079  28F9
6080  28FA
6081  28FB
6082  28FC
6083  28FD
6084  28FE
6085  28FF
6086  2900
6087  2901
6088  2902
6089  2903
6090  2904
6091  2905
6092  2906
6093  2907
6094  2908
6095  2909
6096  290A
6097  290B
6098  290C
6099  290D
6100  290E
6101  290F
6102  2910
6103  2911
6104  2912
6105  2913
6106  2914
6107  2915
6108  2916
6109  2917
6110  2918
6111  2919
6112  291A
6113  291B
6114  291C
6115  291D
6116  291E
6117  291F
6118  2920
6119  2921
6120  2922
6121  2923
6122  2924
6123  2925
6124  2926
6125  2927
6126  2928
6127  2929
6128  292A
6129  292B
6130  292C
6131  292D
6132  292E
6133  292F
6134  2930
6135  2931
6136  2932
6137  2933
6138  2934
6139  2935
6140  2936
6141  2937
6142  2938
6143  2939
6144  293A
6145  293B
6146  293C
6147  293D
6148  293E
6149  293F
6150  2940
6151  2941
6152  2942
6153  2943
6154  2944
6155  2945
6156  2946
6157  2947
6158  2948
6159  2949
6160  294A
6161  294B
6162  294C
6163  294D
6164  294E
6165  294F
6166  2950
6167  2951
6168  2952
6169  2953
6170  2954
6171  2955
6172  2956
6173  2957
6174  2958
6175  2959
6176  295A
6177  295B
6178  295C
6179  295D
6180  295E
6181  295F
6182  2960
6183  2961
6184  2962
6185  2963
6186  2964
6187  2965
6188  2966
6189  2967
6190  2968
6191  2969
6192  296A
6193  296B
6194  296C
6195  296D
6196  296E
6197  296F
6198  2970
6199  2971
6200  2972
6201  2973
6202  2974
6203  2975
6204  2976
6205  2977
6206  2978
6207  2979
6208  297A
6209  297B
6210  297C
6211  297D
6212  297E
6213  297F
6214  2980
6215  2981
6216  2982
6217  2983
6218  2984
6219  2985
6220  2986
6221  2987
6222  2988
6223  2989
6224  298A
6225  298B
6226  298C
6227  298D
6228  298E
6229  298F
6230  2990
6231  2991
6232  2992
6233  2993
6234  2994
6235  2995
6236  2996
6237  2997
6238  2998
6239  2999
6240  299A
6241  299B
6242  299C
6243  299D
6244  299E
6245  299F
6246  29A0
6247  29A1
6248  29A2
6249  29A3
6250  29A4
6251  29A5
6252  29A6
6253  29A7
6254  29A8
6255  29A9
6256  29AA
6257  29AB
6258  29AC
6259  29AD
6260  29AE
6261  29AF
6262  29B0
6263  29B1
6264  29B2
6265  29B3
6266  29B4
6267  29B5
6268  29B6
6269  29B7
6270  29B8
6271  29B9
6272  29BA
6273  29BB
6274  29BC
6275  29BD
6276  29BE
6277  29BF
6278  29C0
6279  29C1
6280  29C2
6281  29C3
6282  29C4
6283  29C5
6284  29C6
6285  29C7
6286  29C8
6287  29C9
6288  29CA
6289  29CB
6290  29CC
6291  29CD
6292  29CE
6293  29CF
6294  29D0
6295  29D1
6296  29D2
6297  29D3
6298  29D4
6299  29D5
6300  29D6
6301  29D7
6302  29D8
6303  29D9
6304  29DA
6305  29DB
6306  29DC
6307  29DD
6308  29DE
6309  29DF
6310  29E0
6311  29E1
6312  29E2
6313  29E3
6314  29E4
6315  29E5
6316  29E6
6317  29E7
6318  29E8
6319  29E9
6320  29EA
6321  29EB
6322  29EC
6323  29ED
6324  29EE
6325  29EF
6326  29F0
6327  29F1
6328  29F2
6329  29F3
6330  29F4
6331  29F5
6332  29F6
6333  29F7
6334  29F8
6335  29F9
6336  29FA
6337  29FB
6338  29FC
6339  29FD
6340  29FE
6341  29FF
6342  2A00
6343  2A01
6344  2A02
6345  2A03
6346  2A04
6347  2A05
6348  2A06
6349  2A07
6350  2A08
6351  2A09
6352  2A0A
6353  2A0B
6354  2A0C
6355  2A0D
6356  2A0E
6357  2A0F
6358  2A10
6359  2A11
6360  2A12
6361  2A13
6362  2A14
6363  2A15
6364  2A16
6365  2A17
6366  2A18
6367  2A19
6368  2A1A
6369  2A1B
6370  2A1C
6371  2A1D
6372  2A1E
6373  2A1F
6374  2A20
6375  2A21
6376  2A22
6377  2A23
6378  2A24
6379  2A25
6380  2A26
6381  2A27
6382  2A28
6383  2A29
6384  2A2A
6385  2A2B
6386  2A2C
6387  2A2D
6388  2A2E
6389  2A2F
6390  2A30
6391  2A31
6392  2A32
6393  2A33
6394  2A34
6395  2A35
6396  2A36
6397  2A37
6398  2A38
6399  2A39
6400  2A3A
6401  2A3B
6402  2A3C
6403  2A3D
6404  2A3E
6405  2A3F
6406  2A40
6407  2A41
6408  2A42
6409  2A43
6410  2A44
6411  2A45
6412  2A46
6413  2A47
6414  2A48
6415  2A49
6416  2A4A
6417  2A4B
6418  2A4C
6419  2A4D
6420  2A4E
6421  2A4F
6422  2A50
6423  2A51
6424  2A52
6425  2A53
6426  2A54
6427  2A55
6428  2A56
6429  2A57
6430  2A58
6431  2A59
6432  2A5A
6433  2A5B
6434  2A5C
6435  2A5D
6436  2A5E
6437  2A5F
6438  2A60
6439  2A61
6440  2A62
6441  2A63
6442  2A64
6443  2A65
6444  2A66
6445  2A67
6446  2A68
6447  2A69
6448  2A6A
6449  2A6B
6450  2A6C
6451  2A6D
6452  2A6E
6453  2A6F
6454  2A70
6455  2A71
6456  2A72
6457  2A73
6458  2A74
6459  2A75
6460  2A76
6461  2A77
6462  2A78
6463  2A79
6464  2A7A
6465  2A7B
6466  2A7C
6467  2A7D
6468  2A7E
6469  2A7F
6470  2A80
6471  2A81
6472  2A82
6473  2A83
6474  2A84
6475  2A85
6476  2A86
6477  2A87
6478  2A88
6479  2A89
6480  2A8A
6481  2A8B
6482  2A8C
6483  2A8D
6484  2A8E
6485  2A8F
6486  2A90
6487  2A91
6488  2A92
6489  2A93
6490  2A94
6491  2A95
6492  2A96
6493  2A97
6494  2A98
6495  2A99
6496  2A9A
6497  2A9B
6498  2A9C
6499  2A9D
6500  2A9E
6501  2A9F
6502  2AA0
6503  2AA1
6504  2AA2
6505  2AA3
6506  2AA4
6507  2AA5
6508  2AA6
6509  2AA7
6510  2AA8
6511  2AA9
6512  2AAA
6513  2AAB
6514  2AAC
6515  2AAD
6516  2AAE
6517  2AAF
6518  2AB0
6519  2AB1
6520  2AB2
6521  2AB3
6522  2AB4
6523  2AB5
6524  2AB6
6525  2AB7
6526  2AB8
6527  2AB9
6528  2ABA
6529  2ABB
6530  2ABC
6531  2ABD
6532  2ABE
6533  2ABF
6534  2AC0
6535  2AC1
6536  2AC2
6537  2AC3
6538  2AC4
6539  2AC5
6540  2AC6
6541  2AC7
6542  2AC8
6543  2AC9
6544  2ACA
6545  2ACB
6546  2ACC
6547  2ACD
6548  2ACE
6549  2ACF
6550  2AD0
6551  2AD1
6552  2AD2
6553  2AD3
6554  2AD4
6555  2AD5
6556  2AD6
6557  2AD7
6558  2AD8
6559  2AD9
6560  2ADA
6561  2ADB
6562  2ADC
6563  2ADD
6564  2ADE
6565  2ADF
6566  2AE0
6567  2AE1
6568  2AE2
6569  2AE3
6570  2AE4
6571  2AE5
6572  2AE6
6573  2AE7
6574  2AE8
6575  2AE9
6576  2AEA
6577  2AEB
6578  2AEC
6579  2AED
6580  2AEE
6581  2AEF
6582  2AF0
6583  2AF1
6584  2AF2
6585  2AF3
6586  2AF4
6587  2AF5
6588  2AF6
6589  2AF7
6590  2AF8
6591  2AF9
6592  2AFA
6593  2AFB
6594  2AFC
6595  2AFD
6596  2AFE
6597  2AFF
6598  2B00
6599  2B01
6600  2B02
6601  2B03
6602  2B04
6603  2B05
6604  2B06
6605  2B07
6606  2B08
6607  2B09
6608  2B0A
6609  2B0B
6610  2B0C
6611  2B0D
6612  2B0E
6613  2B0F
6614  2B10
6615  2B11
6616  2B12
6617  2B13
6618  2B14
6619  2B15
6620  2B16
6621  2B17
6622  2B18
6623  2B19
6624  2B1A
6625  2B1B
6626  2B1C
6627  2B1D
6628  2B1E
6629  2B1F
6630  2B20
6631  2B21
6632  2B22
6633  2B23
6634  2B24
6635  2B25
6636  2B26
6637  2B27
6638  2B28
6639  2B29
6640  2B2A
6641  2B2B
6642  2B2C
6643  2B2D
6644  2B2E
6645  2B2F
6646  2B30
6647  2B31
6648  2B32
6649  2B33
6650  2B34
6651  2B35
6652  2B36
6653  2B37
6654  2B38
6655  2B39
6656  2B3A
6657  2B3B
6658  2B3C
6659  2B3D
6660  2B3E
6661  2B3F
6662  2B40
6663  2B41
6664  2B42
6665  2B43
6666  2B44
6667  2B45
6668  2B46
6669  2B47
6670  2B48
6671  2B49
6672  2B4A
6673  2B4B
6674  2B4C
6675  2B4D
6676  2B4E
6677  2B4F
6678  2B50
6679  2B51
6680  2B52
6681  2B53
6682  2B54
6683  2B55
6684  2B56
6685  2B57
6686  2B58
6687  2B59
6688  2B5A
6689  2B5B
6690  2B5C
6691  2B5D
6692  2B5E
6693  2B5F
6694  2B60
6695  2B61
6696  2B62
6697  2B63
6698  2B64
6699  2B65
6700  2B66
6701  2B67
6702  2B68
6703  2B69
6704  2B6A
6705  2B6B
6706  2B6C
6707  2B6D
6708  2B6E
6709  2B6F
6710  2B70
6711  2B71
6712  2B72
6713  2B73
6714  2B74
6715  2B75
6716  2B76
6717  2B77
6718  2B78
6719  2B79
6720  2B7A
6721  2B7B
6722  2B7C
6723  2B7D
6724  2B7E
6725  2B7F
6726  2B80
6727  2B81
6728  2B82
6729  2B83
6730  2B84
6731  2B85
6732  2B86
6733  2B87
6734  2B88
6735  2B89
6736  2B8A
6737  2B8B
6738  2B8C
6739  2B8D
6740  2B8E
6741  2B8F
6742  2B90
6743  2B91
6744  2B92
6745  2B93
6746  2B94
6747  2B95
6748  2B96
6749  2B97
6750  2B98
6751  2B99
6752  2B9A
6753  2B9B
6754  2B9C
6755  2B9D
6756  2B9E
6757  2B9F
6758  2BA0
6759  2BA1
6760  2BA2
6761  2BA3
6762  2BA4
6763  2BA5
6764  2BA6
6765  2BA7
6766  2BA8
6767  2BA9
6768  2BAA
6769  2BAB
6770  2BAC
6771  2BAD
6772  2BAE
6773  2BAF
6774  2BB0
6775  2BB1
6776  2BB2
6777  2BB3
6778  2BB4
6779  2BB5
6780  2BB6
6781  2BB7
6782  2BB8
6783  2BB9
6784  2BBA
6785  2BBB
6786  2BBC
6787  2BBD
6788  2BBE
6789  2BBF
6790  2BC0
6791  2BC1
6792  2BC2
6793  2BC3
6794  2BC4
6795  2BC5
6796  2BC6
6797  2BC7
6798  2BC8
6799  2BC9
6800  2BCA
6801  2BCB
6802  2BCC
6803  2BCD
6804  2BCE
6805  2BCF
6806  2BD0
6807  2BD1
6808  2BD2
6809  2BD3
6810  2BD4
6811  2BD5
6812  2BD6
6813  2BD7
6814  2BD8
6815  2BD9
6816  2BDA
6817  2BDB
6818  2BDC
6819  2BDD
6820  2BDE
6821  2BDF
6822  2BE0
6823  2BE1
6824  2BE2
6825  2BE3
6826  2BE4
6827  2BE5
6828  2BE6
6829  2BE7
6830  2BE8
6831  2BE9
6832  2BEA
6833  2BEB
6834  2BEC
6835  2BED
6836  2BEE
6837  2BEF
6838  2BF0
6839  2BF1
6840  2BF2
6841  2BF3
6842  2BF4
6843  2BF5
6844  2BF6
6845  2BF7
6846  2BF8
6847  2BF9
6848  2BFA
6849  2BFB
6850  2BFC
6851  2BFD
6852  2BFE
6853  2BFF
6854  2C00
6855  2C01
6856  2C02
6857  2C03
6858  2C04
6859  2C05
6860  2C06
6861  2C07
6862  2C08
6863  2C09
6864  2C0A
6865  2C0B
6866  2C0C
6867  2C0D
6868  2C0E
6869  2C0F
6870  2C10
6871  2C11
6872  2C12
6873  2C13
6874  2C14
6875  2C15
6876  2C16
6877  2C17
6878  2C18
6879  2C19
6880  2C1A
6881  2C1B
6882  2C1C
6883  2C1D
6884  2C1E
6885  2C1F
6886  2C20
6887  2C21
6888  2C22
6889  2C23
6890  2C24
6891  2C25
6892  2C26
6893  2C27
6894  2C28
6895  2C29
6896  2C2A
6897  2C2B
6898  2C2C
6899  2C2D
6900  2C2E
6901  2C2F
6902  2C30
6903  2C31
6904  2C32
6905  2C33
6906  2C34
6907  2C35
6908  2C36
6909  2C37
6910  2C38
6911  2C39
6912  2C3A
6913  2C3B
6914  2C3C
6915  2C3D
6916  2C3E
6917  2C3F
6918  2C40
6919  2C41
6920  2C42
6921  2C43
6922  2C44
6923  2C45
6924  2C46
6925  2C47
6926  2C48
6927  2C49
6928  2C4A
6929  2C4B
6930  2C4C
6931  2C4D
6932  2C4E
6933  2C4F
6934  2C50
6935  2C51
6936  2C52
6937  2C53
6938  2C54
6939  2C55
6940  2C56
6941  2C57
6942  2C58
6943  2C59
6944  2C5A
6945  2C5B
6946  2C5C
6947  2C5D
6948  2C5E
6949  2C5F
6950  2C60
6951  2C61
6952  2C62
6953  2C63
6954  2C64
6955  2C65
6956  2C66
6957  2C67
6958  2C68
6959  2C69
6960  2C6A
6961  2C6B
6962  2C6C
6963  2C6D
6964  2C6E
6965  2C6F
6966  2C70
6967  2C71
6968  2C72
6969  2C73
6970  2C74
6971  2C75
6972  2C76
6973  2C77
6974  2C78
6975  2C79
6976  2C7A
6977  2C7B
6978  2C7C
6979  2C7D
6980  2C7E
6981  2C7F
6982  2C80
6983  2C81
6984  2C82
6985  2C83
6986  2C84
6987  2C85
6988  2C86
6989  2C87
6990  2C88
6991  2C89
6992  2C8A
6993  2C8B
6994  2C8C
6995  2C8D
6996  2C8E
6997  2C8F
6998  2C90
6999  2C91
7000  2C92
7001  2C93
7002  2C94
7003  2C95
7004  2C96
7005  2C97
7006  2C98
7007  2C99
7008  2C9A
7009  2C9B
7010  2C9C
7011  2C9D
7012  2C9E
7013  2C9F
7014  2CA0
7015  2CA1
7016  2CA2
7017  2CA3
7018  2CA4
7019  2CA5
7020  2CA6
7021  2CA7
7022  2CA8
7023  2CA9
7024  2CAA
7025  2CAB
7026  2CAC
7027  2CAD
7028  2CAE
7029  2CAF
7030  2CB0
7031  2CB1
7032  2CB2
7033  2CB3
7034  2CB4
7035  2CB5
7036  2CB6
7037  2CB7
7038  2CB8
7039  2CB9
7040  2CBA
7041  2CBB
7042  2CBC
7043  2CBD
7044  2CBE
7045  2CBF
7046  2CC0
7047  2CC1
7048  2CC2
7049  2CC3
7050  2CC4
7051  2CC5
7052  2CC6
7053  2CC7
7054  2CC8
7055  2CC9
7056  2CCA
7057  2CCB
7058  2CCC
7059  2CCD
7060  2CCE
7061  2CCF
7062  2CD0
7063  2CD1
7064  2CD2
7065  2CD3
7066  2CD4
7067  2CD5
7068  2CD6
7069  2CD7
7070  2CD8
7071  2CD9
7072  2CDA
7073  2CDB
7074  2CDC
7075  2CDD
7076  2CDE
7077  2CDF
7078  2CE0
7079  2CE1
7080  2CE2
7081  2CE3
7082  2CE4
7083  2CE5
7084  2CE6
7085  2CE7
7086  2CE8
7087  2CE9
7088  2CEA
7089  2CEB
7090  2CEC
7091  2CED
7092  2CEE
7093  2CEF
7094  2CF0
7095  2CF1
7096  2CF2
7097  2CF3
7098  2CF4
7099  2CF5
7100  2CF6
7101  2CF7
7102  2CF8
7103  2CF9
7104  2CFA
7105  2CFB
7106  2CFC
7107  2CFD
7108  2CFE
7109  2CFF
7110  2D00
7111  2D01
7112  2D02
7113  2D03
7114  2D04
7115  2D05
7116  2D06
7117  2D07
7118  2D08
7119  2D09
7120  2D0A
7121  2D0B
7122  2D0C
7123  2D0D
7124  2D0E
7125  2D0F
7126  2D10
7127  2D11
7128  2D12
7129  2D13
7130  2D14
7131  2D15
7132  2D16
7133  2D17
7134  2D18
7135  2D19
7136  2D1A
7137  2D1B
7138  2D1C
7139  2D1D
7140  2D1E
7141  2D1F
7142  2D20
7143  2D21
7144  2D22
7145  2D23
7146  2D24
7147  2D25
7148  2D26
7149  2D27
7150  2D28
7151  2D29
7152  2D2A
7153  2D2B
7154  2D2C
7155  2D2D
7156  2D2E
7157  2D2F
7158  2D30
7159  2D31
7160  2D32
7161  2D33
7162  2D34
7163  2D35
7164  2D36
7165  2D37
7166  2D38
7167  2D39
7168  2D3A
7169  2D3B
7170  2D3C
7171  2D3D
7172  2D3E
7173  2D3F
7174  2D40
7175  2D41
7176  2D42
7177  2D43
7178  2D44
7179  2D45
7180  2D46
7181  2D47
7182  2D48
7183  2D49
7184  2D4A
7185  2D4B
7186  2D4C
7187  2D4D
7188  2D4E
7189  2D4F
7190  2D50
7191  2D51
7192  2D52
7193  2D53
7194  2D54
7195  2D55
7196  2D56
7197  2D57
7198  2D58
7199  2D59
7200  2D5A
7201  2D5B
7202  2D5C
7203  2D5D
7204  2D5E
7205  2D5F
7206  2D60
7207  2D61
7208  2D62
7209  2D63
7210  2D64
7211  2D65
7212  2D66
7213  2D67
7214  2D68
7215  2D69
7216  2D6A
7217  2D6B
7218  2D6C
7219  2D6D
7220  2D6E
7221  2D6F
7222  2D70
7223  2D71
7224  2D72
7225  2D73
7226  2D74
7227  2D75
7228  2D76
7229  2D77
7230  2D78
7231  2D79
7232  2D7A
7233  2D7B
7234  2D7C
7235  2D7D
7236  2D7E
7237  2D7F
7238  2D80
7239  2D81
7240  2D82
7241  2D83
7242  2D84
7243  2D85
7244  2D86
7245  2D87
7246  2D88
7247  2D89
7248  2D8A
7249  2D8B
7250  2D8C
7251  2D8D
7252  2D8E
7253  2D8F
7254  2D90
7255  2D91
7256  2D92
7257  2D93
7258  2D94
7259  2D95
7260  2D96
7261  2D97
7262  2D98
7263  2D99
7264  2D9A
7265  2D9B
7266  2D9C
7267  2D9D
7268  2D9E
7269  2D9F
7270  2DA0
7271  2DA1
7272  2DA2
7273  2DA3
7274  2DA4
7275  2DA5
7276  2DA6
7277  2DA7
7278  2DA8
7279  2DA9
7280  2DAA
7281  2DAB
7282  2DAC
7283  2DAD
7284  2DAE
7285  2DAF
7286  2DB0
7287  2DB1
7288  2DB2
7289  2DB3
7290  2DB4
7291  2DB5
7292  2DB6
7293  2DB7
7294  2DB8
7295  2DB9
7296  2DBA
7297  2DBB
7298  2DBC
7299  2DBD
7300  2DBE
7301  2DBF
7302  2DC0
7303  2DC1
7304  2DC2
7305  2DC3
7306  2DC4
7307  2DC5
7308  2DC6
7309  2DC7
7310  2DC8
7311  2DC9
7312  2DCA
7313  2DCB
7314  2DCC
7315  2DCD
7316  2DCE
7317  2DCF
7318  2DD0
7319  2DD1
7320  2DD2
7321  2DD3
7322  2DD4
7323  2DD5
7324  2DD6
7325  2DD7
7326  2DD8
7327  2DD9
7328  2DDA
7329  2DDB
7330  2DDC
7331  2DDD
7332  2DDE
7333  2DDF
7334  2DE0
7335  2DE1
7336  2DE2
7337  2DE3
7338  2DE4
7339  2DE5
7340  2DE6
7341  2DE7
7342  2DE8
7343  2DE9
7344  2DEA
7345  2DEB
7346  2DEC
7347  2DED
7348  2DEE
7349  2DEF
7350  2DF0
7351  2DF1
7352  2DF2
7353  2DF3
7354  2DF4
7355  2DF5
7356  2DF6
7357  2DF7
7358  2DF8
7359  2DF9
7360  2DFA
7361  2DFB
7362  2DFC
7363  2DFD
7364  2DFE
7365  2DFF
7366  2E00
7367  2E01
7368  2E02
7369  2E03
7370  2E04
7371  2E05
7372  2E06
7373  2E07
7374  2E08
7375  2E09
7376  2E0A
7377  2E0B
7378  2E0C
7379  2E0D
7380  2E0E
7381  2E0F
7382  2E10
7383  2E11
7384  2E12
7385  2E13
7386  2E14
7387  2E15
7388  2E16
7389  2E17
7390  2E18
7391  2E19
7392  2E1A
7393  2E1B
7394  2E1C
7395  2E1D
7396  2E1E
7397  2E1F
7398  2E20
7399  2E21
7400  2E22
7401  2E23
7402  2E24
7403  2E25
7404  2E26
7405  2E27
7406  2E28
7407  2E29
7408  2E2A
7409  2E2B
7410  2E2C
7411  2E2D
7412  2E2E
7413  2E2F
7414  2E30
7415  2E31
7416  2E32
7417  2E33
7418  2E34
7419  2E35
7420  2E36
7421  2E37
7422  2E38
7423  2E39
7424  2E3A
7425  2E3B
7426  2E3C
7427  2E3D
7428  2E3E
7429  2E3F
7430  2E40
7431  2E41
7432  2E42
7433  2E43
7434  2E44
7435  2E45
7436  2E46
7437  2E47
7438  2E48
7439  2E49
7440  2E4A
7441  2E4B
7442  2E4C
7443  2E4D
7444  2E4E
7445  2E4F
7446  2E50
7447  2E51
7448  2E52
7449  2E53
7450  2E54
7451  2E55
7452  2E56
7453  2E57
7454  2E58
7455  2E59
7456  2E5A
7457  2E5B
7458  2E5C
7459  2E5D
7460  2E5E
7461  2E5F
7462  2E60
7463  2E61
7464  2E62
7465  2E63
7466  2E64
7467  2E65
7468  2E66
7469  2E67
7470  2E68
7471  2E69
7472  2E6A
7473  2E6B
7474  2E6C
7475  2E6D
7476  2E6E
7477  2E6F
7478  2E70
7479  2E71
7480  2E72
7481  2E73
7482  2E74
7483  2E75
7484  2E76
7485  2E77
7486  2E78
7487  2E79
7488  2E7A
7489  2E7B
7490  2E7C
7491  2E7D
7492  2E7E
7493  2E7F
7494  2E80
7495  2E81
7496  2E82
7497  2E83
7498  2E84
7499  2E85
7500  2E86
7501  2E87
7502  2E88
7503  2E89
7504  2E8A
7505  2E8B
7506  2E8C
7507  2E8D
7508  2E8E
7509  2E8F
7510  2E90
7511  2E91
7512  2E92
7513  2E93
7514  2E94
7515  2E95
7516  2E96
7517  2E97
7518  2E98
7519  2E99
7520  2E9A
7521  2E9B
7522  2E9C
7523  2E9D
7524  2E9E
7525  2E9F
7526  2EA0
7527  2EA1
7528  2EA2
7529  2EA3
7530  2EA4
7531  2EA5
7532  2EA6
7533  2EA7
7534  2EA8
7535  2EA9
7536  2EAA
7537  2EAB
7538  2EAC
7539  2EAD
7540  2EAE
7541  2EAF
7542  2EB0
7543  2EB1
7544  2EB2
7545  2EB3
7546  2EB4
7547  2EB5
7548  2EB6
7549  2EB7
7550  2EB8
7551  2EB9
7552  2EBA
7553  2EBB
7554  2EBC
7555  2EBD
7556  2EBE
7557  2EBF
7558  2EC0
7559  2EC1
7560  2EC2
7561  2EC3
7562  2EC4
7563  2EC5
7564  2EC6
7565  2EC7
7566  2EC8
7567  2EC9
7568  2ECA
7569  2ECB
7570  2ECC
7571  2ECD
7572  2ECE
7573  2ECF
7574  2ED0
7575  2ED1
7576  2ED2
7577  2ED3
7578  2ED4
7579  2ED5
7580  2ED6
7581  2ED7
7582  2ED8
7583  2ED9
7584  2EDA
7585  2EDB
7586  2EDC
7587  2EDD
7588  2EDE
7589  2EDF
7590  2EE0
7591  2EE1
7592  2EE2
7593  2EE3
7594  2EE4
7595  2EE5
7596  2EE6
7597  2EE7
7598  2EE8
7599  2EE9
7600  2EEA
7601  2EEB
7602  2EEC
7603  2EED
7604  2EEE
7605  2EEF
7606  2EF0
7607  2EF1
7608  2EF2
7609  2EF3
7610  2EF4
7611  2EF5
7612  2EF6
7613  2EF7
7614  2EF8
7615  2EF9
7616  2EFA
7617  2EFB
7618  2EFC
7619  2EFD
7620  2EFE
7621  2EFF
7622  2F00
7623  2F01
7624  2F02
7625  2F03
7626  2F04
7627  2F05
7628  2F06
7629  2F07
7630  2F08
7631  2F09
7632  2F0A
7633  2F0B
7634  2F0C
7635  2F0D
7636  2F0E
7637  2F0F
7638  2F10
7639  2F11
7640  2F12
7641  2F13
7642  2F14
7643  2F15
7644  2F16
7645  2F17
7646  2F18
7647  2F19
7648  2F1A
7649  2F1B
7650  2F1C
7651  2F1D
7652  2F1E
7653  2F1F
7654  2F20
7655  2F21
7656  2F22
7657  2F23
7658  2F24
7659  2F25
7660  2F26
7661  2F27
7662  2F28
7663  2F29
7664  2F2A
7665  2F2B
7666  2F2C
7667  2F2D
7668  2F2E
7669  2F2F
7670  2F30
7671  2F31
7672  2F32
7673  2F33
7674  2F34
7675  2F35
7676  2F36
7677  2F37
7678  2F38
7679  2F39
7680  2F3A
7681  2F3B
7682  2F3C
7683  2F3D
7684  2F3E
7685  2F3F
7686  2F40
7687  2F41
7688  2F42
7689  2F43
7690  2F44
7691  2F45
7692  2F46
7693  2F47
7694  2F48
7695  2F49
7696  2F4A
7697  2F4B
7698  2F4C
7699  2F4D
7700  2F4E
7701  2F4F
7702  2F50
7703  2F51
7704  2F52
7705  2F53
7706  2F54
7707  2F55
7708  2F56
7709  2F57
7710  2F58
7711  2F59
7712  2F5A
7713  2F5B
7714  2F5C
7715  2F5D
7716  2F5E
7717  2F5F
7718  2F60
7719  2F61
7720  2F62
7721  2F63
7722  2F64
7723  2F65
7724  2F66
7725  2F67
7726  2F68
7727  2F69
7728  2F6A
7729  2F6B
7730  2F6C
7731  2F6D
7732  2F6E
7733  2F6F
7734  2F70
7735  2F71
7736  2F72
7737  2F73
7738  2F74
7739  2F75
7740  2F76
7741  2F77
7742  2F78
7743  2F79
7744  2F7A
7745  2F7B
7746  2F7C
7747  2F7D
7748  2F7E
7749  2F7F
7750  2F80
7751  2F81
7752  2F82
7753  2F83
7754  2F84
7755  2F85
7756  2F86
7757  2F87
7758  2F88
7759  2F89
7760  2F8A
7761  2F8B
7762  2F8C
7763  2F8D
7764  2F8E
7765  2F8F
7766  2F90
7767  2F91
7768  2F92
7769  2F93
7770  2F94
7771  2F95
7772  2F96
7773  2F97
7774  2F98
7775  2F99
7776  2F9A
7777  2F9B
7778  2F9C
7779  2F9D
7780  2F9E
7781  2F9F
7782  2FA0
7783  2FA1
7784  2FA2
7785  2FA3
7786  2FA4
7787  2FA5
7788  2FA6
7789  2FA7
7790  2FA8
7791  2FA9
7792  2FAA
7793  2FAB
7794  2FAC
7795  2FAD
7796  2FAE
7797  2FAF
7798  2FB0
7799  2FB1
7800  2FB2
7801  2FB3
7802  2FB4
7803  2FB5
7804  2FB6
7805  2FB7
7806  2FB8
7807  2FB9
7808  2FBA
7809  2FBB
7810  2FBC
7811  2FBD
7812  2FBE
7813  2FBF
7814  2FC0
7815  2FC1
7816  2FC2
7817  2FC3
7818  2FC4
7819  2FC5
7820  2FC6
7821  2FC7
7822  2FC8
7823  2FC9
7824  2FCA
7825  2FCB
7826  2FCC
7827  2FCD
7828  2FCE
7829  2FCF
7830  2FD0
7831  2FD1
7832  2FD2
7833  2FD3
7834  2FD4
7835  2FD5
7836  2FD6
7837  2FD7
7838  2FD8
7839  2FD9
7840  2FDA
7841  2FDB
7842  2FDC
7843  2FDD
7844  2FDE
7845  2FDF
7846  2FE0
7847  2FE1
7848  2FE2
7849  2FE3
7850  2FE4
7851  2FE5
7852  2FE6
7853  2FE7
7854  2FE8
7855  2FE9
7856  2FEA
7857  2FEB
7858  2FEC
7859  2FED
7860  2FEE
7861  2FEF
7862  2FF0
7863  2FF1
7864  2FF2
7865  2FF3
7866  2FF4
7867  2FF5
7868  2FF6
7869  2FF7
7870  2FF8
7871  2FF9
7872  2FFA
7873  2FFB
7874  2FFC
7875  2FFD
7876  2FFE
7877  2FFF
7878  3000
7879  3001
7880  3002
7881  3003
7882  3004
7883  3005
7884  3006
7885  3007
7886  3008
7887  3009
7888  300A
7889  300B
7890  300C
7891  300D
7892  300E
7893  300F
7894  3010
7895  3011
7896  3012
7897  3013
7898  3014
7899  3015
7900  3016
7901  3017
7902  3018
7903  3019
7904  301A
7905  301B
7906  301C
7907  301D
7908  301E
7909  301F
7910  3020
7911  3021
7912  3022
7913  3023
7914  3024
7915  3025
7916  3026
7917  3027
7918  3028
7919  3029
7920  302A
7921  302B
7922  302C
7923  302D
7924  302E
7925  302F
7926  3030
7927  3031
7928  3032
7929  3033
7930  3034
7931  3035
7932  3036
7933  3037
7934  3038
7935  3039
7936  303A
7937  303B
7938  303C
7939  303D
7940  303E
7941  303F
7942  3040
7943  3041
7944  3042
7945  3043
7946  3044
7947  3045
7948  3046
7949  3047
7950  3048
7951  3049
7952  304A
7953  304B
7954  304C
7955  304D
7956  304E
7957  304F
7958  3050
7959  3051
7960  3052
7961  3053
7962  3054
7963  3055
7964  3056
7965  3057
7966  3058
7967  3059
7968  305A
7969  305B
7970  305C
7971  305D
7972  305E
7973  305F
7974  3060
7975  3061
7976  3062
7977  3063
7978  3064
7979  3065
7980  3066
7981  3067
7982  3068
7983  3069
7984  306A
7985  306B
7986  306C
7987  306D
7988  306E
7989  306F
7990  3070
7991  3071
7992  3072
7993  3073
7994  3074
7995  3075
7996  3076
7997  3077
7998  3078
7999  3079
8000  307A
8001  307B
8002  307C
8003  307D
8004  307E
8005  307F
8006  3080
8007  3081
8008  3082
8009  3083
8010  3084
8011  3085
8012  3086
8013  3087
8014  3088
8015  3089
8016  308A
8017  308B
8018  308C
8019  308D
8020  308E
8021  308F
8022  3090
8023  3091
8024  3092
8025  3093
8026  3094
8027  3095
8028  3096
8029  3097
8030  3098
8031  3099
8032  309A
8033  309B
8034  309C
8035  309D
8036  309E
8037  309F
8038  30A0
8039  30A1
8040  30A2
8041  30A3
8042  30A4
8043  30A5
8044  30A6
8045  30A7
8046  30A8
8047  30A9
8048  30AA
8049  30AB
8050  30AC
8051  30AD
8052  30AE
8053  30AF
8054  30B0
8055  30B1
8056  30B2
8057  30B3
8058  30B4
8059  30B5
8060  30B6
8061  30B7
8062  30B8
8063  30B9
8064  30BA
8065  30BB
8066  30BC
8067  30BD
8068  30BE
8069  30BF
8070  30C0
8071  30C1
8072  30C2
8073  30C3
8074  30C4
8075  30C5
8076  30C6
8077  30C7
8078  30C8
8079  30C9
8080  30CA
8081  30CB
8082  30CC
8083  30CD
8084  30CE
8085  30CF
8086  30D0
8087  30D1
8088  30D2
8089  30D3
8090  30D4
8091  30D5
8092  30D6
8093  30D7
8094  30D8
8095  30D9
8096  30DA
8097  30DB
8098  30DC
8099  30DD
8100  30DE
8101  30DF
8102  30E0
8103  30E1
8104  30E2
8105  30E3
8106  30E4
8107  30E5
8108  30E6
8109  30E7
8110  30E8
8111  30E9
8112  30EA
8113  30EB
8114  30EC
8115  30ED
8116  30EE
8117  30EF
8118  30F0
8119  30F1
8120  30F2
8121  30F3
8122  30F4
8123  30F5
8124  30F6
8125  30F7
8126  30F8
8127  30F9
8128  30FA
8129  30FB
8130  30FC
8131  30FD
8132  30FE
8133  30FF
8134  3100
8135  3101
8136  3102
8137  3103
8138  3104
8139  3105
8140  3106
8141  3107
8142  3108
8143  3109
8144  310A
8145  310B
8146  310C
8147  310D
8148  310E
8149  310F
8150  3110
8151  3111
8152  3112
8153  3113
8154  3114
8155  3115
8156  3116
8157  3117
8158  3118
8159  3119
8160  311A
8161  311B
8162  311C
8163  311D
8164  311E
8165  311F
8166  3120
8167  3121
8168  3122
8169  3123
8170  3124
8171  3125
8172  3126
8173  3127
8174  3128
8175  3129
8176  312A
8177  312B
8178  312C
8179  312D
8180  312E
8181  312F
8182  3130
8183  3131
8184  3132
8185  3133
8186  3134
8187  3135
8188  3136
8189  3137
8190  3138
8191  3139
8192  313A
8193  313B
8194  313C
8195  313D
8196  313E
8197  313F
8198  3140
8199  3141
8200  3142
8201  3143
8202  3144
8203  3145
8204  3146
8205  3147
8206  3148
8207  3149
8208  314A
8209  314B
8210  314C
8211  314D
8212  314E
8213  314F
8214  3150
8215  3151
8216  3152
8217  3153
8218  3154
8219  3155
8220  3156
8221  3157
8222  3158
8223  3159
8224  315A
8225  315B
8226  315C
8227  315D
8228  315E
8229  315F
8230  3160
8231  3161
8232  3162
8233  3163
8234  3164
8235  3165
8236  3166
8237  3167
8238  3168
8239  3169
8240  316A
8241  316B
8242  316C
8243  316D
8244  316E
8245  316F
8246  3170
8247  3171
8248  3172
8249  3173
8250  3174
8251  3175
8252  3176
8253  3177
8254  3178
8255  3179
8256  317A
8257  317B
8258  317C
8259  317D
8260  317E
8261  317F
8262  3180
8263  3181
8264  3182
8265  3183
8266  3184
8267  3185
8268  3186
8269  3187
8270  3188
8271  3189
8272  318A
8273  318B
8274  318C
8275  318D
8276  318E
8277  318F
8278  3190
8279  3191
8280  3192
8281  3193
8282  3194
8283  3195
8284  3196
8285  3197
8286  3198
8287  3199
8288  319A
8289  319B
8290  319C
8291  319D
8292  319E
8293  319F
8294  31A0
8295  31A1
8296  31A2
8297  31A3
8298  31A4
8299  31A5
8300  31A6
8301  31A7
8302  31A8
8303  31A9
8304  31AA
8305  31AB
8306  31AC
8307  31AD
8308  31AE
8309  31AF
8310  31B0
8311  31B1
8312  31B2
8313  31B3
8314  31B4
8315  31B5
8316  31B6
8317  31B7
8318  31B8
8319  31B9
8320  31BA
8321  31BB
8322  31BC
8323  31BD
8324  31BE
8325  31BF
8326  31C0
8327  31C1
8328  31C2
8329  31C3
8330  31C4
8331  31C5
8332  31C6
8333  31C7
8334  31C8
8335  31C9
8336  31CA
8337  31CB
8338  31CC
8339  31CD
8340  31CE
8341  31CF
8342  31D0
8343  31D1
8344  31D2
8345  31D3
8346  31D4
8347  31D5
8348  31D6
8349  31D7
8350  31D8
8351  31D9
8352  31DA
8353  31DB
8354  31DC
8355  31DD
8356  31DE
8357  31DF
8358  31E0
8359  31E1
8360  31E2
8361  31E3
8362  31E4
8363  31E5
8364  31E6
8365  31E7
8366  31E8
8367  31E9
8368  31EA
8369  31EB
8370  31EC
8371  31ED
8372  31EE
8373  31EF
8374  31F0
8375  31F1
8376  31F2
8377  31F3
8378  31F4
8379  31F5
8380  31F6
8381  31F7
8382  31F8
8383  31F9
8384  31FA
8385  31FB
8386  31FC
8387  31FD
8388  31FE
8389  31FF
8390  3200
8391  3201
8392  3202
8393  3203
8394  3204
8395  3205
8396  3206
8397  3207
8398  3208
8399  3209
8400  320A
8401  320B
8402  320C
8403  320D
8404  320E
8405  320F
8406  3210
8407  3211
8408  3212
8409  3213
8410  3214
8411  3215
8412  3216
8413  3217
8414  3218
8415  3219
8416  321A
8417  321B
8418  321C
8419  321D
8420  321E
8421  321F
8422  3220
8423  3221
8424  3222
8425  3223
8426  3224
8427  3225
8428  3226
8429  3227
8430  3228
8431  3229
8432  322A
8433  322B
8434  322C
8435  322D
8436  322E
8437  322F
8438  3230
8439  3231
8440  3232
8441  3233
8442  3234
8443  3235
8444  3236
8445  3237
8446  3238
8447  3239
8448  323A
8449  323B
8450  323C
8451  323D
8452  323E
8453  323F
8454  3240
8455  3241
8456  3242
8457  3243
8458  3244
8459  3245
8460  3246
8461  3247
8462  3248
8463  3249
8464  324A
8465  324B
8466  324C
8467  324D
8468  324E
8469  324F
8470  3250
8471  3251
8472  3252
8473  3253
8474  3254
8475  3255
8476  3256
8477  3257
8478  3258
8479  3259
8480  325A
8481  325B
8482  325C
8483  325D
8484  325E
8485  325F
8486  3260
8487  3261
8488  3262
8489  3263
8490  3264
8491  3265
8492  3266
8493  3267
8494  3268
8495  3269
8496  326A
8497  326B
8498  326C
8499  326D
8500  326E
8501  326F
8502  3270
8503  3271
8504  3272
8505  3273
8506  3274
8507  3275
8508  3276
8509  3277
8510  3278
8511  3279
8512  327A
8513  327B
8514  327C
8515  327D
8516  327E
8517  327F
8518  3280
8519  3281
8520  3282
8521  3283
8522  3284
8523  3285
8524  3286
8525  3287
8526  3288
8527  3289
8528  328A
8529  328B
8530  328C
8531  328D
8532  328E
8533  328F
8534  3290
8535  3291
8536  3292
8537  3293
8538  3294
8539  3295
8540  3296
8541  3297
8542  3298
8543  3299
8544  329A
8545  329B
8546  329C
8547  329D
8548  329E
8549  329F
8550  32A0
8551  32A1
8552  32A2
8553  32A3
8554  32A4
8555  32A5
8556  32A6
8557  32A7
8558  32A8
8559  32A9
8560  32AA
8561  32AB
8562  32AC
8563  32AD
8564  32AE
8565  32AF
8566  32B0
8567  32B1
8568  32B2
8569  32B3
8570  32B4
8571  32B5
8572  32B6
8573  32B7
8574  32B8
8575  32B9
8576  32BA
8577  32BB
8578  32BC
8579  32BD
8580  32BE
8581  32BF
8582  32C0
8583  32C1
8584  32C2
8585  32C3
8586  32C4
8587  32C5
8588  32C6
8589  32C7
8590  32C8
8591  32C9
8592  32CA
8593  32CB
8594  32CC
8595  32CD
8596  32CE
8597  32CF
8598  32D0
8599  32D1
8600  32D2
8601  32D3
8602  32D4
8603  32D5
8604  32D6
8605  32D7
8606  32D8
8607  32D9
8608  32DA
8609  32DB
8610  32DC
8611  32DD
8612  32DE
8613  32DF
8614  32E0
8615  32E1
8616  32E2
8617  32E3
8618  32E4
8619  32E5
8620  32E6
8621  32E7
8622  32E8
8623  32E9
8624  32EA
8625  32EB
8626  32EC
8627  32ED
8628  32EE
8629  32EF
8630  32F0
8631  32F1
8632  32F2
8633  32F3
8634  32F4
8635  32F5
8636  32F6
8637  32F7
8638  32F8
8639  32F9
8640  32FA
8641  32FB
8642  32FC
8643  32FD
8644  32FE
8645  32FF
8646  3300
8647  3301
8648  3302
8649  3303
8650  3304
8651  3305
8652  3306
8653  3307
8654  3308
8655  3309
8656  330A
8657  330B
8658  330C
8659  330D
8660  330E
8661  330F
8662  3310
8663  3311
8664  3312
8665  3313
8666  3314
8667  3315
8668  3316
8669  3317
8670  3318
8671  3319
8672  331A
8673  331B
8674  331C
8675  331D
8676  331E
8677  331F
8678  3320
8679  3321
8680  3322
8681  3323
8682  3324
8683  3325
8684  3326
8685  3327
8686  3328
8687  3329
8688  332A
8689  332B
8690  332C
8691  332D
8692  332E
8693  332F
8694  3330
8695  3331
8696  3332
8697  3333
8698  3334
8699  3335
8700  3336
8701  3337
8702  3338
8703  3339
8704  333A
8705  333B
8706  333C
8707  333D
8708  333E
8709  333F
8710  3340
8711  3341
8712  3342
8713  3343
8714  3344
8715  3345
8716  3346
8717  3347
8718  3348
8719  3349
8720  334A
8721  334B
8722  334C
8723  334D
8724  334E
8725  334F
8726  3350
8727  3351
8728  3352
8729  3353
8730  3354
8731  3355
8732  3356
8733  3357
8734  3358
8735  3359
8736  335A
8737  335B
8738  335C
8739  335D
8740  335E
8741  335F
8742  3360
8743  3361
8744  3362
8745  3363
8746  3364
8747  3365
8748  3366
8749  3367
8750  3368
8751  3369
8752  336A
8753  336B
8754  336C
8755  336D
8756  336E
8757  336F
8758  3370
8759  3371
8760  3372
8761  3373
8762  3374
8763  3375
8764  3376
8765  3377
8766  3378
8767  3379
8768  337A
8769  337B
8770  337C
8771  337D
8772  337E
8773  337F
8774  3380
8775  3381
8776  3382
8777  3383
8778  3384
8779  3385
8780  3386
8781  3387
8782  3388
8783  3389
8784  338A
8785  338B
8786  338C
8787  338D
8788  338E
8789  338F
8790  3390
8791  3391
8792  3392
8793  3393
8794  3394
8795  3395
8796  3396
8797  3397
8798  3398
8799  3399
8800  339A
8801  339B
8802  339C
8803  339D
8804  339E
8805  339F
8806  33A0
8807  33A1
8808  33A2
8809  33A3
8810  33A4
8811  33A5
8812  33A6
8813  33A7
8814  33A8
8815  33A9
8816  33AA
8817  33AB
8818  33AC
8819  33AD
8820  33AE
8821  33AF
8822  33B0
8823  33B1
8824  33B2
8825  33B3
8826  33B4
8827  33B5
8828  33B6
8829  33B7
8830  33B8
8831  33B9
8832  33BA
8833  33BB
8834  33BC
8835  33BD
8836  33BE
8837  33BF
8838  33C0
8839  33C1
8840  33C2
8841  33C3
8842  33C4
8843  33C5
8844  33C6
8845  33C7
8846  33C8
8847  33C9
8848  33CA
8849  33CB
8850  33CC
8851  33CD
8852  33CE
8853  33CF
8854  33D0
8855  33D1
8856  33D2
8857  33D3
8858  33D4
8859  33D5
8860  33D6
8861  33D7
8862  33D8
8863  33D9
8864  33DA
8865  33DB
8866  33DC
8867  33DD
8868  33DE
8869  33DF
8870  33E0
8871  33E1
8872  33E2
8873  33E3
8874  33E4
8875  33E5
8876  33E6
8877  33E7
8878  33E8
8879  33E9
8880  33EA
8881  33EB
8882  33EC
8883  33ED
8884  33EE
8885  33EF
8886  33F0
8887  33F1
8888  33F2
8889  33F3
8890  33F4
8891  33F5
8892  33F6
8893  33F7
8894  33F8
8895  33F9
8896  33FA
8897  33FB
8898  33FC
8899  33FD
8900  33FE
8901  33FF
8902  3400
8903  3401
8904  3402
8905  3403
8906  3404
8907  3405
8908  3406
8909  3407
8910  3408
8911  3409
8912  340A
8913  340B
8914  340C
8915  340D
8916  340E
8917  340F
8918  3410
8919  3411
8920  3412
8921  3413
8922  3414
8923  3415
8924  3416
8925  3417
8926  3418
8927  3419
8928  341A
8929  341B
8930  341C
8931  341D
8932  341E
8933  341F
8934  3420
8935  3421
8936  3422
8937  3423
8938  3424
8939  3425
8940  3426
8941  3427
8942  3428
8943  3429
8944  342A
8945  342B
8946  342C
8947  342D
8948  342E
8949  342F
8950  3430
8951  3431
8952  3432
8953  3433
8954  3434
8955  3435
8956  3436
8957  3437
8958  3438
8959  3439
8960  343A
8961  343B
8962  343C
8963  343D
8964  343E
8965  343F
8966  3440
8967  3441
8968  3442
8969  3443
8970  3444
8971  3445
8972  3446
8973  3447
8974  3448
8975  3449
8976  344A
8977  344B
8978  344C
8979  344D
8980  344E
8981  344F
8982  3450
8983  3451
8984  3452
8985  3453
8986  3454
8987  3455
8988  3456
8989  3457
8990  3458
8991  3459
8992  345A
8993  345B
8994  345C
8995  345D
8996  345E
8997  345F
8998  3460
8999  3461
9000  3462
9001  3463
9002  3464
9003  3465
9004  3466
9005  3467
9006  3468
9007  3469
9008  346A
9009  346B
9010  346C
9011  346D
9012  346E
9013  346F
9014  3470
9015  3471
9016  3472
9017  3473
9018  3474
9019  3475
9020  3476
9021  3477
9022  3478
9023  3479
9024  347A
9025  347B
9026  347C
9027  347D
9028  347E
9029  347F
9030  3480
9031  3481
9032  3482
9033  3483
9034  3484
9035  3485
9036  3486
9037  3487
9038  3488
9039  3489
9040  348A
9041  348B
9042  348C
9043  348D
9044  348E
9045  348F
9046  3490
9047  3491
9048  3492
9049  3493
9050  3494
9051  3495
9052  3496
9053  3497
9054  3498
9055  3499
9056  349A
9057  349B
9058  349C
9059  349D
9060  349E
9061  349F
9062  34A0
9063  34A1
9064  34A2
9065  34A3
9066  34A4
9067  34A5
9068  34A6
9069  34A7
9070  34A8
9071  34A9
9072  34AA
9073  34AB
9074  34AC
9075  34AD
9076  34AE
9077  34AF
9078  34B0
9079  34B1
9080  34B2
9081  34B3
9082  34B4
9083  34B5
9084  34B6
9085  34B7
9086  34B8
9087  34B9
9088  34BA
9089  34BB
9090  34BC
9091  34BD
9092  34BE
9093  34BF
9094  34C0
9095  34C1
9096  34C2
9097  34C3
9098  34C4
9099  34C5
9100  34C6
9101  34C7
9102  34C8
9103  34C9
9104  34CA
9105  34CB
9106  34CC
9107  34CD
9108  34CE
9109  34CF
9110  34D0
9111  34D1
9112  34D2
9113  34D3
9114  34D4
9115  34D5
9116  34D6
9117  34D7
9118  34D8
9119  34D9
9120  34DA
9121  34DB
9122  34DC
9123  34DD
9124  34DE
9125  34DF
9126  34E0
9127  34E1
9128  34E2
9129  34E3
9130  34E4
9131  34E5
9132  34E6
9133  34E7
9134  34E8
9135  34E9
9136  34EA
9137  34EB
9138  34EC
9139  34ED
9140  34EE
9141  34EF
9142  34F0
9143  34F1
9144  34F2
9145  34F3
9146  34F4
9147  34F5
9148  34F6
9149  34F7
9150  34F8
9151  34F9
9152  34FA
9153  34FB
9154  34FC
9155  34FD
9156  34FE
9157  34FF
9158  3500
9159  3501
9160  3502
9161  3503
9162  3504
9163  3505
9164  3506
9165  3507
9166  3508
9167  3509
9168  350A
9169  350B
9170  350C
9171  350D
9172  350E
9173  350F
9174  3510
9175  3511
9176  3512
9177  3513
9178  3514
9179  3515
9180  3516
9181  3517
9182  3518
9183  3519
9184  351A
9185  351B
9186  351C
9187  351D
9188  351E
9189  351F
9190  3520
9191  3521
9192  3522
9193  3523
9194  3524
9195  3525
9196  3526
9197  3527
9198  3528
9199  3529
9200  352A
9201  352B
9202  352C
9203  352D
9204  352E
9205  352F
9206  3530
9207  3531
9208  3532
9209  3533
9210  3534
9211  3535
9212  3536
9213  3537
9214  3538
9215  3539
9216  353A
9217  353B
9218  353C
9219  353D
9220  353E
9221  353F
9222  3540
9223  3541
9224  3542
9225  3543
9226  3544
9227  3545
9228  3546
9229  3547
9230  3548
9231  3549
9232  354A
9233  354B
9234  354C
9235  354D
9236  354E
9237  354F
9238  3550
9239  3551
9240  3552
9241  3553
9242  3554
9243  3555
9244  3556
9245  3557
9246  3558
9247  3559
9248  355A
9249  355B
9250  355C
9251  355D
9252  355E
9253  355F
9254  3560
9255  3561
9256  3562
9257  3563
9258  3564
9259  3565
9260  3566
9261  3567
9262  3568
9263  3569
9264  356A
9265  356B
9266  356C
9267  356D
9268  356E
9269  356F
9270  3570
9271  3571
9272  3572
9273  3573
9274  3574
9275  3575
9276  3576
9277  3577
9278  3578
9279  3579
9280  357A
9281  357B
9282  357C
9283  357D
9284  357E
9285  357F
9286  3580
9287  3581
9288  3582
9289  3583
9290  3584
9291  3585
9292  3586
9293  3587
9294  3588
9295  3589
9296  358A
9297  358B
9298  358C
9299  358D
9300  358E
9301  358F
9302  3590
9303  3591
9304  3592
9305  3593
9306  3594
9307  3595
9308  3596
9309  3597
9310  3598
9311  3599
9312  359A
9313  359B
9314  359C
9315  359D
9316  359E
9317  359F
9318  35A0
9319  35A1
9320  35A2
9321  35A3
9322  35A4
9323  35A5
9324  35A6
9325  35A7
9326  35A8
9327  35A9
9328  35AA
9329  35AB
9330  35AC
9331  35AD
9332  35AE
9333  35AF
9334  35B0
9335  35B1
9336  35B2
9337  35B3
9338  35B4
9339  35B5
9340  35B6
9341  35B7
9342  35B8
9343  35B9
9344  35BA
9345  35BB
9346  35BC
9347  35BD
9348  35BE
9349  35BF
9350  35C0
9351  35C1
9352  35C2
9353  35C3
9354  35C4
9355  35C5
9356  35C6
9357  35C7
9358  35C8
9359  35C9
9360  35CA
9361  35CB
9362  35CC
9363  35CD
9364  35CE
9365  35CF
9366  35D0
9367  35D1
9368  35D2
9369  35D3
9370  35D4
9371  35D5
9372  35D6
9373  35D7
9374  35D8
9375  35D9
9376  35DA
9377  35DB
9378  35DC
9379  35DD
9380  35DE
9381  35DF
9382  35E0
9383  35E1
9384  35E2
9385  35E3
9386  35E4
9387  35E5
9388  35E6
9389  35E7
9390  35E8
9391  35E9
9392  35EA
9393  35EB
9394  35EC
9395  35ED
9396  35EE
9397  35EF
9398  35F0
9399  35F1
9400  35F2
9401  35F3
9402  35F4
9403  35F5
9404  35F6
9405  35F7
9406  35F8
9407  35F9
9408  35FA
9409  35FB
9410  35FC
9411  35FD
9412  35FE
9413  35FF
9414  3600
9415  3601
9416  3602
9417  3603
9418  3604
9419  3605
9420  3606
9421  3607
9422  3608
9423  3609
9424  360A
9425  360B
9426  360C
9427  360D
9428  360E
9429  360F
9430  3610
9431  3611
9432  3612
9433  3613
9434  3614
9435  3615
9436  3616
9437  3617
9438  3618
9439  3619
9440  361A
9441  361B
9442  361C
9443  361D
9444  361E
9445  361F
9446  3620
9447  3621
9448  3622
9449  3623
9450  3624
9451  3625
9452  3626
9453  3627
9454  3628
9455  3629
9456  362A
9457  362B
9458  362C
9459  362D
9460  362E
9461  362F
9462  3630
9463  3631
9464  3632
9465  3633
9466  3634
9467  3635
9468  3636
9469  3637
9470  3638
9471  3639
9472  363A
9473  363B
9474  363C
9475  363D
9476  363E
9477  363F
9478  3640
9479  3641
9480  3642
9481  3643
9482  3644
9483  3645
9484  3646
9485  3647
9486  3648
9487  3649
9488  364A
9489  364B
9490  364C
9491  364D
9492  364E
9493  364F
9494  3650
9495  3651
9496  3652
9497  3653
9498  3654
9499  3655
9500  3656
9501  3657
9502  3658
9503  3659
9504  365A
9505  365B
9506  365C
9507  365D
9508  365E
9509  365F
9510  3660
9511  3661
9512  3662
9513  3663
9514  3664
9515  3665
9516  3666
9517  3667
9518  3668
9519  3669
9520  366A
9521  366B
9522  366C
9523  366D
9524  366E
9525  366F
9526  3670
9527  3671
9528  3672
9529  3673
9530  3674
9531  3675
9532  3676
9533  3677
9534  3678
9535  3679
9536  367A
9537  367B
9538  367C
9539  367D
9540  367E
9541  367F
9542  3680
9543  3681
9544  3682
9545  3683
9546  3684
9547  3685
9548  3686
9549  3687
9550  3688
9551  3689
9552  368A
9553  368B
9554  368C
9555  368D
9556  368E
9557  368F
9558  3690
9559  3691
9560  3692
9561  3693
9562  3694
9563  3695
9564  3696
9565  3697
9566  3698
9567  3699
9568  369A
9569  369B
9570  369C
9571  369D
9572  369E
9573  369F
9574  36A0
9575  36A1
9576  36A2
9577  36A3
9578  36A4
9579  36A5
9580  36A6
9581  36A7
9582  36A8
9583  36A9
9584  36AA
9585  36AB
9586  36AC
9587  36AD
9588  36AE
9589  36AF
9590  36B0
9591  36B1
9592  36B2
9593  36B3
9594  36B4
9595  36B5
9596  36B6
9597  36B7
9598  36B8
9599  36B9
9600  36BA
9601  36BB
9602  36BC
9603  36BD
9604  36BE
9605  36BF
9606  36C0
9607  36C1
9608  36C2
9609  36C3
9610  36C4
9611  36C5
9612  36C6
9613  36C7
9614  36C8
9615  36C9
9616  36CA
9617  36CB
9618  36CC
9619  36CD
9620  36CE
9621  36CF
9622  36D0
9623  36D1
9624  36D2
9625  36D3
9626  36D4
9627  36D5
9628  36D6
9629  36D7
9630  36D8
9631  36D9
9632  36DA
9633  36DB
9634  36DC
9635  36DD
9636  36DE
9637  36DF
9638  36E0
9639  36E1
9640  36E2
9641  36E3
9642  36E4
9643  36E5
9644  36E6
9645  36E7
9646  36E8
9647  36E9
9648  36EA
9649  36EB
9650  36EC
9651  36ED
9652  36EE
9653  36EF
9654  36F0
9655  36F1
9656  36F2
9657  36F3
9658  36F4
9659  36F5
9660  36F6
9661  36F7
9662  36F8
9663  36F9
9664  36FA
9665  36FB
9666  36FC
9667  36FD
9668  36FE
9669  36FF
9670  3700
9671  3701
9672  3702
9673  3703
9674  3704
9675  3705
9676  3706
9677  3707
9678  3708
9679  3709
9680  370A
9681  370B
9682  370C
9683  370D
9684  370E
9685  370F
9686  3710
9687  3711
9688  3712
9689  3713
9690  3714
9691  3715
9692  3716
9693  3717
9694  3718
9695  3719
9696  371A
9697  371B
9698  371C
9699  371D
9700  371E
9701  371F
9702  3720
9703  3721
9704  3722
9705  3723
9706  3724
9707  3725
9708  3726
9709  3727
9710  3728
9711  3729
9712  372A
9713  372B
9714  372C
9715  372D
9716  372E
9717  372F
9718  3730
9719  3731
9720  3732
9721  3733
9722  3734
9723  3735
9724  3736
9725  3737
9726  3738
9727  3739
9728  373A
9729  373B
9730  373C
9731  373D
9732  373E
9733  373F
9734  3740
9735  3741
9736  3742
9737  3743
9738  3744
9739  3745
9740  3746
9741  3747
9742  3748
9743  3749
9744  374A
9745  374B
9746  374C
9747  374D
9748  374E
9749  374F
9750  3750
9751  3751
9752  3752
9753  3753
9754  3754
9755  3755
9756  3756
9757  3757
9758  3758
9759  3759
9760  375A
9761  375B
9762  375C
9763  375D
9764  375E
9765  375F
9766  3760
9767  3761
9768  3762
9769  3763
9770  3764
9771  3765
9772  3766
9773  3767
9774  3768
9775  3769
9776  376A
9777  376B
9778  376C
9779  376D
9780  376E
9781  376F
9782  3770
9783  3771
9784  3772
9785  3773
9786  3774
9787  3775
9788  3776
9789  3777
9790  3778
9791  3779
9792  377A
9793  377B
9794  377C
9795  377D
9796  377E
9797  377F
9798  3780
9799  3781
9800  3782
9801  3783
9802  3784
9803  3785
9804  3786
9805  3787
9806  3788
9807  3789
9808  378A
9809  378B
9810  378C
9811  378D
9812  378E
9813  378F
9814  3790
9815  3791
9816  3792
9817  3793
9818  3794
9819  3795
9820  3796
9821  3797
9822  3798
9823  3799
9824  379A
9825  379B
9826  379C
9827  379D
9828  379E
9829  379F
9830  37A0
9831  37A1
9832  37A2
9833  37A3
9834  37A4
9835  37A5
9836  37A6
9837  37A7
9838  37A8
9839  37A9
9840  37AA
9841  37AB
9842  37AC
9843  37AD
9844  37AE
9845  37AF
9846  37B0
9847  37B1
9848  37B2
9849  37B3
9850  37B4
9851  37B5
9852  37B6
9853  37B7
9854  37B8
9855  37B9
9856  37BA
9857  37BB
9858  37BC
9859  37BD
9860  37BE
9861  37BF
9862  37C0
9863  37C1
9864  37C2
9865  37C3
9866  37C4
9867  37C5
9868  37C6
9869  37C7
9870  37C8
9871  37C9
9872  37CA
9873  37CB
9874  37CC
9875  37CD
9876  37CE
9877  37CF
9878  37D0
9879  37D1
9880  37D2
9881  37D3
9882  37D4
9883  37D5
9884  37D6
9885  37D7
9886  37D8
9887  37D9
9888  37DA
9889  37DB
9890  37DC
9891  37DD
9892  37DE
9893  37DF
9894  37E0
9895  37E1
9896  37E2
9897  37E3
9898  37E4
9899  37E5
9900  37E6
9901  37E7
9902  37E8
9903  37E9
9904  37EA
9905  37EB
9906  37EC
9907  37ED
9908  37EE
9909  37EF
9910  37F0
9911  37F1
9912  37F2
9913  37F3
9914  37F4
9915  37F5
9916  37F6
9917  37F7
9918  37F8
9919  37F9
9920  37FA
9921  37FB
9922  37FC
9923  37FD
9924  37FE
9925  37FF
9926  3800
9927  3801
9928  3802
9929  3803
9930  3804
9931  3805
9932  3806
9933  3807
9934  3808
9935  3809
9936  380A
9937  380B
9938  380C
9939  380D
9940  380E
9941  380F
9942  3810
9943  3811
9944  3812
9945  3813
9946  3814
9947  3815
9948  3816
9949  3817
9950  3818
9951  3819
9952  381A
9953  381B
9954  381C
9955  381D
9956  381E
9957  381F
9958  3820
9959  3821
9960  3822
9961  3823
9962  3824
9963  3825
9964  3826
9965  3827
9966  3828
9967  3829
9968  382A
9969  382B
9970  382C
9971  382D
9972  382E
9973  382F
9974  3830
9975  3831
9976  3832
9977  3833
9978  3834
9979  3835
9980  3836
9981  3837
9982  3838
9983  3839
9984  383A
9985  383B
9986  383C
9987  383D
9988  383E
9989  383F
9990  3840
9991  3841
9992  3842
9993  3843
9994  3844
9995  3845
9996  3846
9997  3847
9998  3848
9999  3849
10000  384A
10001  384B
10002  384C
10003  384D
10004  384E
10005  384F
10006  3850
10007  3851
10008  3852
10009  3853
10010  3854
10011  3855
10012  3856
10013  3857
10014  3858
10015  3859
10016  385A
10017  385B
10018  385C
10019  385D
10020  385E
10021  385F
10022  3860
10023  3861
10024  3862
10025  3863
10026  3864
10027  3865
10028  3866
10029  3867
10030  3868
10031  3869
10032  386A
10033  386B
10034  386C
10035  386D
10036  386E
10037  386F
10038  3870
10039  3871
10040  3872
10041  3873
10042  3874
10043  3875
10044  3876
10045  3877
10046  3878
10047  3879
10048  387A
10049  387B
10050  387C
10051  387D
10052  387E
10053  387F
10054  3880
10055  3881
10056  3882
10057  3883
10058  3884
10059  3885
10060  3886
10061  3887
10062  3888
10063  3889
10064  388A
10065  388B
10066  388C
10067  388D
10068  388E
10069  388F
10070  3890
10071  3891
10072  3892
10073  3893
10074  3894
10075  3895
10076  3896
10077  3897
10078  3898
10079  3899
10080  389A
10081  389B
10082  389C
10083  389D
10084  389E
10085  389F
10086  38A0
10087  38A1
10088  38A2
10089  38A3
10090  38A4
10091  38A5
10092  38A6
10093  38A7
10094  38A8
10095  38A9
10096  38AA
10097  38AB
10098  38AC
10099  38AD
10100  38AE
10101  38AF
10102  38B0
10103  38B1
10104  38B2
10105  38B3
10106  38B4
10107  38B5
10108  38B6
10109  38B7
10110  38B8
10111  38B9
10112  38BA
10113  38BB
10114  38BC
10115  38BD
10116  38BE
10117  38BF
10118  38C0
10119  38C1
10120  38C2
10121  38C3
10122  38C4
10123  38C5
10124  38C6
10125  38C7
10126  38C8
10127  38C9
10128  38CA
10129  38CB
10130  38CC
10131  38CD
10132  38CE
10133  38CF
10134  38D0
10135  38D1
10136  38D2
10137  38D3
10138  38D4
10139  38D5
10140  38D6
10141  38D7
10142  38D8
10143  38D9
10144  38DA
10145  38DB
10146  38DC
10147  38DD
10148  38DE
10149  38DF
10150  38E0
10151  38E1
10152  38E2
10153  38E3
10154  38E4
10155  38E5
10156  38E6
10157  38E7
10158  38E8
10159  38E9
10160  38EA
10161  38EB
10162  38EC
10163  38ED
10164  38EE
10165  38EF
10166  38F0
10167  38F1
10168  38F2
10169  38F3
10170  38F4
10171  38F5
10172  38F6
10173  38F7
10174  38F8
10175  38F9
10176  38FA
10177  38FB
10178  38FC
10179  38FD
10180  38FE
10181  38FF
10182  3900
10183  3901
10184  3902
10185  3903
10186  3904
10187  3905
10188  3906
10189  3907
10190  3908
10191  3909
10192  390A
10193  390B
10194  390C
10195  390D
10196  390E
10197  390F
10198  3910
10199  3911
10200  3912
10201  3913
10202  3914
10203  3915
10204  3916
10205  3917
10206  3918
10207  3919
10208  391A
10209  391B
10210  391C
10211  391D
10212  391E
10213  391F
10214  3920
10215  3921
10216  3922
10217  3923
10218  3924
10219  3925
10220  3926
10221  3927
10222  3928
10223  3929
10224  392A
10225  392B
10226  392C
10227  392D
10228  392E
10229  392F
10230  3930
10231  3931
10232  3932
10233  3933
10234  3934
10235  3935
10236  3936
10237  3937
10238  3938
10239  3939
10240  393A
10241  393B
10242  393C
10243  393D
10244  393E
10245  393F
10246  3940
10247  3941
10248  3942
10249  3943
10250  3944
10251  3945
10252  3946
10253  3947
10254  3948
10255  3949
10256  394A
10257  394B
10258  394C
10259  394D
10260  394E
10261  394F
10262  3950
10263  3951
10264  3952
10265  3953
10266  3954
10267  3955
10268  3956
10269  3957
10270  3958
10271  3959
10272  395A
10273  395B
10274  395C
10275  395D
10276  395E
10277  395F
10278  3960
10279  3961
10280  3962
10281  3963
10282  3964
10283  3965
10284  3966
10285  3967
10286  3968
10287  3969
10288  396A
10289  396B
10290  396C
10291  396D
10292  396E
10293  396F
10294  3970
10295  3971
10296  3972
10297  3973
10298  3974
10299  3975
10300  3976
10301  3977
10302  3978
10303  3979
10304  397A
10305  397B
10306  397C
10307  397D
10308  397E
10309  397F
10310  3980
10311  3981
10312  3982
10313  3983
10314  3984
10315  3985
10316  3986
10317  3987
10318  3988
10319  3989
10320  398A
10321  398B
10322  398C
10323  398D
10324  398E
10325  398F
10326  3990
10327  3991
10328  3992
10329  3993
10330  3994
10331  3995
10332  3996
10333  3997
10334  3998
10335  3999
10336  399A
10337  399B
10338  399C
10339  399D
10340  399E
10341  399F
10342  39A0
10343  39A1
10344  39A2
10345  39A3
10346  39A4
10347  39A5
10348  39A6
10349  39A7
10350  39A8
10351  39A9
10352  39AA
10353  39AB
10354  39AC
10355  39AD
10356  39AE
10357  39AF
10358  39B0
10359  39B1
10360  39B2
10361  39B3
10362  39B4
10363  39B5
10364  39B6
10365  39B7
10366  39B8
10367  39B9
10368  39BA
10369  39BB
10370  39BC
10371  39BD
10372  39BE
10373  39BF
10374  39C0
10375  39C1
10376  39C2
10377  39C3
10378  39C4
10379  39C5
10380  39C6
10381  39C7
10382  39C8
10383  39C9
10384  39CA
10385  39CB
10386  39CC
10387  39CD
10388  39CE
10389  39CF
10390  39D0
10391  39D1
10392  39D2
10393  39D3
10394  39D4
10395  39D5
10396  39D6
10397  39D7
10398  39D8
10399  39D9
10400  39DA
10401  39DB
10402  39DC
10403  39DD
10404  39DE
10405  39DF
10406  39E0
10407  39E1
10408  39E2
10409  39E3
10410  39E4
10411  39E5
10412  39E6
10413  39E7
10414  39E8
10415  39E9
10416  39EA
10417  39EB
10418  39EC
10419  39ED
10420  39EE
10421  39EF
10422  39F0
10423  39F1
10424  39F2
10425  39F3
10426  39F4
10427  39F5
10428  39F6
10429  39F7
10430  39F8
10431  39F9
10432  39FA
10433  39FB
10434  39FC
10435  39FD
10436  39FE
10437  39FF
10438  3A00
10439  3A01
10440  3A02
10441  3A03
10442  3A04
10443  3A05
10444  3A06
10445  3A07
10446  3A08
10447  3A09
10448  3A0A
10449  3A0B
10450  3A0C
10451  3A0D
10452  3A0E
10453  3A0F
10454  3A10
10455  3A11
10456  3A12
10457  3A13
10458  3A14
10459  3A15
10460  3A16
10461  3A17
10462  3A18
10463  3A19
10464  3A1A
10465  3A1B
10466  3A1C
10467  3A1D
10468  3A1E
10469  3A1F
10470  3A20
10471  3A21
10472  3A22
10473  3A23
10474  3A24
10475  3A25
10476  3A26
10477  3A27
10478  3A28
10479  3A29
10480  3A2A
10481  3A2B
10482  3A2C
10483  3A2D
10484  3A2E
10485  3A2F
10486  3A30
10487  3A31
10488  3A32
10489  3A33
10490  3A34
10491  3A35
10492  3A36
10493  3A37
10494  3A38
10495  3A39
10496  3A3A
10497  3A3B
10498  3A3C
10499  3A3D
10500  3A3E
10501  3A3F
10502  3A40
10503  3A41
10504  3A42
10505  3A43
10506  3A44
10507  3A45
10508  3A46
10509  3A47
10510  3A48
10511  3A49
10512  3A4A
10513  3A4B
10514  3A4C
10515  3A4D
10516  3A4E
10517  3A4F
10518  3A50
10519  3A51
10520  3A52
10521  3A53
10522  3A54
10523  3A55
10524  3A56
10525  3A57
10526  3A58
10527  3A59
10528  3A5A
10529  3A5B
10530  3A5C
10531  3A5D
10532  3A5E
10533  3A5F
10534  3A60
10535  3A61
10536  3A62
10537  3A63
10538  3A64
10539  3A65
10540  3A66
10541  3A67
10542  3A68
10543  3A69
10544  3A6A
10545  3A6B
10546  3A6C
10547  3A6D
10548  3A6E
10549  3A6F
10550  3A70
10551  3A71
10552  3A72
10553  3A73
10554  3A74
10555  3A75
10556  3A76
10557  3A77
10558  3A78
10559  3A79
10560  3A7A
10561  3A7B
10562  3A7C
10563  3A7D
10564  3A7E
10565  3A7F
10566  3A80
10567  3A81
10568  3A82
10569  3A83
10570  3A84
10571  3A85
10572  3A86
10573  3A87
10574  3A88
10575  3A89
10576  3A8A
10577  3A8B
10578  3A8C
10579  3A8D
10580  3A8E
10581  3A8F
10582  3A90
10583  3A91
10584  3A92
10585  3A93
10586  3A94
10587  3A95
10588  3A96
10589  3A97
10590  3A98
10591  3A99
10592  3A9A
10593  3A9B
10594  3A9C
10595  3A9D
10596  3A9E
10597  3A9F
10598  3AA0
10599  3AA1
10600  3AA2
10601  3AA3
10602  3AA4
10603  3AA5
10604  3AA6
10605  3AA7
10606  3AA8
10607  3AA9
10608  3AAA
10609  3AAB
10610  3AAC
10611  3AAD
10612  3AAE
10613  3AAF
10614  3AB0
10615  3AB1
10616  3AB2
10617  3AB3
10618  3AB4
10619  3AB5
10620  3AB6
10621  3AB7
10622  3AB8
10623  3AB9
10624  3ABA
10625  3ABB
10626  3ABC
10627  3ABD
10628  3ABE
10629  3ABF
10630  3AC0
10631  3AC1
10632  3AC2
10633  3AC3
10634  3AC4
10635  3AC5
10636  3AC6
10637  3AC7
10638  3AC8
10639  3AC9
10640  3ACA
10641  3ACB
10642  3ACC
10643  3ACD
10644  3ACE
10645  3ACF
10646  3AD0
10647  3AD1
10648  3AD2
10649  3AD3
10650  3AD4
10651  3AD5
10652  3AD6
10653  3AD7
10654  3AD8
10655  3AD9
10656  3ADA
10657  3ADB
10658  3ADC
10659  3ADD
10660  3ADE
10661  3ADF
10662  3AE0
10663  3AE1
10664  3AE2
10665  3AE3
10666  3AE4
10667  3AE5
10668  3AE6
10669  3AE7
10670  3AE8
10671  3AE9
10672  3AEA
10673  3AEB
10674  3AEC
10675  3AED
10676  3AEE
10677  3AEF
10678  3AF0
10679  3AF1
10680  3AF2
10681  3AF3
10682  3AF4
10683  3AF5
10684  3AF6
10685  3AF7
10686  3AF8
10687  3AF9
10688  3AFA
10689  3AFB
10690  3AFC
10691  3AFD
10692  3AFE
10693  3AFF
10694  3B00
10695  3B01
10696  3B02
10697  3B03
10698  3B04
10699  3B05
10700  3B06
10701  3B07
10702  3B08
10703  3B09
10704  3B0A
10705  3B0B
10706  3B0C
10707  3B0D
10708  3B0E
10709  3B0F
10710  3B10
10711  3B11
10712  3B12
10713  3B13
10714  3B14
10715  3B15
10716  3B16
10717  3B17
10718  3B18
10719  3B19
10720  3B1A
10721  3B1B
10722  3B1C
10723  3B1D
10724  3B1E
10725  3B1F
10726  3B20
10727  3B21
10728  3B22
10729  3B23
10730  3B24
10731  3B25
10732  3B26
10733  3B27
10734  3B28
10735  3B29
10736  3B2A
10737  3B2B
10738  3B2C
10739  3B2D
10740  3B2E
10741  3B2F
10742  3B30
10743  3B31
10744  3B32
10745  3B33
10746  3B34
10747  3B35
10748  3B36
10749  3B37
10750  3B38
10751  3B39
10752  3B3A
10753  3B3B
10754  3B3C
10755  3B3D
10756  3B3E
10757  3B3F
10758  3B40
10759  3B41
10760  3B42
10761  3B43
10762  3B44
10763  3B45
10764  3B46
10765  3B47
10766  3B48
10767  3B49
10768  3B4A
10769  3B4B
10770  3B4C
10771  3B4D
10772  3B4E
10773  3B4F
10774  3B50
10775  3B51
10776  3B52
10777  3B53
10778  3B54
10779  3B55
10780  3B56
10781  3B57
10782  3B58
10783  3B59
10784  3B5A
10785  3B5B
10786  3B5C
10787  3B5D
10788  3B5E
10789  3B5F
10790  3B60
10791  3B61
10792  3B62
10793  3B63
10794  3B64
10795  3B65
10796  3B66
10797  3B67
10798  3B68
10799  3B69
10800  3B6A
10801  3B6B
10802  3B6C
10803  3B6D
10804  3B6E
10805  3B6F
10806  3B70
10807  3B71
10808  3B72
10809  3B73
10810  3B74
10811  3B75
10812  3B76
10813  3B77
10814  3B78
10815  3B79
10816  3B7A
10817  3B7B
10818  3B7C
10819  3B7D
10820  3B7E
10821  3B7F
10822  3B80
10823  3B81
10824  3B82
10825  3B83
10826  3B84
10827  3B85
10828  3B86
10829  3B87
10830  3B88
10831  3B89
10832  3B8A
10833  3B8B
10834  3B8C
10835  3B8D
10836  3B8E
10837  3B8F
10838  3B90
10839  3B91
10840  3B92
10841  3B93
10842  3B94
10843  3B95
10844  3B96
10845  3B97
10846  3B98
10847  3B99
10848  3B9A
10849  3B9B
10850  3B9C
10851  3B9D
10852  3B9E
10853  3B9F
10854  3BA0
10855  3BA1
10856  3BA2
10857  3BA3
10858  3BA4
10859  3BA5
10860  3BA6
10861  3BA7
10862  3BA8
10863  3BA9
10864  3BAA
10865  3BAB
10866  3BAC
10867  3BAD
10868  3BAE
10869  3BAF
10870  3BB0
10871  3BB1
10872  3BB2
10873  3BB3
10874  3BB4
10875  3BB5
10876  3BB6
10877  3BB7
10878  3BB8
10879  3BB9
10880  3BBA
10881  3BBB
10882  3BBC
10883  3BBD
10884  3BBE
10885  3BBF
10886  3BC0
10887  3BC1
10888  3BC2
10889  3BC3
10890  3BC4
10891  3BC5
10892  3BC6
10893  3BC7
10894  3BC8
10895  3BC9
10896  3BCA
10897  3BCB
10898  3BCC
10899  3BCD
10900  3BCE
10901  3BCF
10902  3BD0
10903  3BD1
10904  3BD2
10905  3BD3
10906  3BD4
10907  3BD5
10908  3BD6
10909  3BD7
10910  3BD8
10911  3BD9
10912  3BDA
10913  3BDB
10914  3BDC
10915  3BDD
10916  3BDE
10917  3BDF
10918  3BE0
10919  3BE1
10920  3BE2
10921  3BE3
10922  3BE4
10923  3BE5
10924  3BE6
10925  3BE7
10926  3BE8
10927  3BE9
10928  3BEA
10929  3BEB
10930  3BEC
10931  3BED
10932  3BEE
10933  3BEF
10934  3BF0
10935  3BF1
10936  3BF2
10937  3BF3
10938  3BF4
10939  3BF5
10940  3BF6
10941  3BF7
10942  3BF8
10943  3BF9
10944  3BFA
10945  3BFB
10946  3BFC
10947  3BFD
10948  3BFE
10949  3BFF
10950  3C00
10951  3C01
10952  3C02
10953  3C03
10954  3C04
10955  3C05
10956  3C06
10957  3C07
10958  3C08
10959  3C09
10960  3C0A
10961  3C0B
10962  3C0C
10963  3C0D
10964  3C0E
10965  3C0F
10966  3C10
10967  3C11
10968  3C12
10969  3C13
10970  3C14
10971  3C15
10972  3C16
10973  3C17
10974  3C18
10975  3C19
10976  3C1A
10977  3C1B
10978  3C1C
10979  3C1D
10980  3C1E
10981  3C1F
10982  3C20
10983  3C21
10984  3C22
10985  3C23
10986  3C24
10987  3C25
10988  3C26
10989  3C27
10990  3C28
10991  3C29
10992  3C2A
10993  3C2B
10994  3C2C
10995  3C2D
10996  3C2E
10997  3C2F
10998  3C30
10999  3C31
11000  3C32
11001  3C33
11002  3C34
11003  3C35
11004  3C36
11005  3C37
11006  3C38
11007  3C39
11008  3C3A
11009  3C3B
11010  3C3C
11011  3C3D
11012  3C3E
11013  3C3F
11014  3C40
11015  3C41
11016  3C42
11017  3C43
11018  3C44
11019  3C45
11020  3C46
11021  3C47
11022  3C48
11023  3C49
11024  3C4A
11025  3C4B
11026  3C4C
11027  3C4D
11028  3C4E
11029  3C4F
11030  3C50
11031  3C51
11032  3C52
11033  3C53
11034  3C54
11035  3C55
11036  3C56
11037  3C57
11038  3C58
11039  3C59
11040  3C5A
11041  3C5B
11042  3C5C
11043  3C5D
11044  3C5E
11045  3C5F
11046  3C60
11047  3C61
11048  3C62
11049  3C63
11050  3C64
11051  3C65
11052  3C66
11053  3C67
11054  3C68
11055  3C69
11056  3C6A
11057  3C6B
11058  3C6C
11059  3C6D
11060  3C6E
11061  3C6F
11062  3C70
11063  3C71
11064  3C72
11065  3C73
11066  3C74
11067  3C75
11068  3C76
11069  3C77
11070  3C78
11071  3C79
11072  3C7A
11073  3C7B
11074  3C7C
11075  3C7D
11076  3C7E
11077  3C7F
11078  3C80
11079  3C81
11080  3C82
11081  3C83
11082  3C84
11083  3C85
11084  3C86
11085  3C87
11086  3C88
11087  3C89
11088  3C8A
11089  3C8B
11090  3C8C
11091  3C8D
11092  3C8E
11093  3C8F
11094  3C90
11095  3C91
11096  3C92
11097  3C93
11098  3C94
11099  3C95
11100  3C96
11101  3C97
11102  3C98
11103  3C99
11104  3C9A
11105  3C9B
11106  3C9C
11107  3C9D
11108  3C9E
11109  3C9F
11110  3CA0
11111  3CA1
11112  3CA2
11113  3CA3
11114  3CA4
11115  3CA5
11116  3CA6
11117  3CA7
11118  3CA8
11119  3CA9
11120  3CAA
11121  3CAB
11122  3CAC
11123  3CAD
11124  3CAE
11125  3CAF
11126  3CB0
11127  3CB1
11128  3CB2
11129  3CB3
11130  3CB4
11131  3CB5
11132  3CB6
11133  3CB7
11134  3CB8
11135  3CB9
11136  3CBA
11137  3CBB
11138  3CBC
11139  3CBD
11140  3CBE
11141  3CBF
11142  3CC0
11143  3CC1
11144  3CC2
11145  3CC3
11146  3CC4
11147  3CC5
11148  3CC6
11149  3CC7
11150  3CC8
11151  3CC9
11152  3CCA
11153  3CCB
11154  3CCC
11155  3CCD
11156  3CCE
11157  3CCF
11158  3CD0
11159  3CD1
11160  3CD2
11161  3CD3
11162  3CD4
11163  3CD5
11164  3CD6
11165  3CD7
11166  3CD8
11167  3CD9
11168  3CDA
11169  3CDB
11170  3CDC
11171  3CDD
11172  3CDE
11173  3CDF
11174  3CE0
11175  3CE1
11176  3CE2
11177  3CE3
11178  3CE4
11179  3CE5
11180  3CE6
11181  3CE7
11182  3CE8
11183  3CE9
11184  3CEA
11185  3CEB
11186  3CEC
11187  3CED
11188  3CEE
11189  3CEF
11190  3CF0
11191  3CF1
11192  3CF2
11193  3CF3
11194  3CF4
11195  3CF5
11196  3CF6
11197  3CF7
11198  3CF8
11199  3CF9
11200  3CFA
11201  3CFB
11202  3CFC
11203  3CFD
11204  3CFE
11205  3CFF
11206  3D00
11207  3D01
11208  3D02
11209  3D03
11210  3D04
11211  3D05
11212  3D06
11213  3D07
11214  3D08
11215  3D09
11216  3D0A
11217  3D0B
11218  3D0C
11219  3D0D
11220  3D0E
11221  3D0F
11222  3D10
11223  3D11
11224  3D12
11225  3D13
11226  3D14
11227  3D15
11228  3D16
11229  3D17
11230  3D18
11231  3D19
11232  3D1A
11233  3D1B
11234  3D1C
11235  3D1D
11236  3D1E
11237  3D1F
11238  3D20
11239  3D21
11240  3D22
11241  3D23
11242  3D24
11243  3D25
11244  3D26
11245  3D27
11246  3D28
11247  3D29
11248  3D2A
11249  3D2B
11250  3D2C
11251  3D2D
11252  3D2E
11253  3D2F
11254  3D30
11255  3D31
11256  3D32
11257  3D33
11258  3D34
11259  3D35
11260  3D36
11261  3D37
11262  3D38
11263  3D39
11264  3D3A
11265  3D3B
11266  3D3C
11267  3D3D
11268  3D3E
11269  3D3F
11270  3D40
11271  3D41
11272  3D42
11273  3D43
11274  3D44
11275  3D45
11276  3D46
11277  3D47
11278  3D48
11279  3D49
11280  3D4A
11281  3D4B
11282  3D4C
11283  3D4D
11284  3D4E
11285  3D4F
11286  3D50
11287  3D51
11288  3D52
11289  3D53
11290  3D54
11291  3D55
11292  3D56
11293  3D57
11294  3D58
11295  3D59
11296  3D5A
11297  3D5B
11298  3D5C
11299  3D5D
11300  3D5E
11301  3D5F
11302  3D60
11303  3D61
11304  3D62
11305  3D63
11306  3D64
11307  3D65
11308  3D66
11309  3D67
11310  3D68
11311  3D69
11312  3D6A
11313  3D6B
11314  3D6C
11315  3D6D
11316  3D6E
11317  3D6F
11318  3D70
11319  3D71
11320  3D72
11321  3D73
11322  3D74
11323  3D75
11324  3D76
11325  3D77
11326  3D78
11327  3D79
11328  3D7A
11329  3D7B
11330  3D7C
11331  3D7D
11332  3D7E
11333  3D7F
11334  3D80
11335  3D81
11336  3D82
11337  3D83
11338  3D84
11339  3D85
11340  3D86
11341  3D87
11342  3D88
11343  3D89
11344  3D8A
11345  3D8B
11346  3D8C
11347  3D8D
11348  3D8E
11349  3D8F
11350  3D90
11351  3D91
11352  3D92
11353  3D93
11354  3D94
11355  3D95
11356  3D96
11357  3D97
11358  3D98
11359  3D99
11360  3D9A
11361  3D9B
11362  3D9C
11363  3D9D
11364  3D9E
11365  3D9F
11366  3DA0
11367  3DA1
11368  3DA2
11369  3DA3
11370  3DA4
11371  3DA5
11372  3DA6
11373  3DA7
11374  3DA8
11375  3DA9
11376  3DAA
11377  3DAB
11378  3DAC
11379  3DAD
11380  3DAE
11381  3DAF
11382  3DB0
11383  3DB1
11384  3DB2
11385  3DB3
11386  3DB4
11387  3DB5
11388  3DB6
11389  3DB7
11390  3DB8
11391  3DB9
11392  3DBA
11393  3DBB
11394  3DBC
11395  3DBD
11396  3DBE
11397  3DBF
11398  3DC0
11399  3DC1
11400  3DC2
11401  3DC3
11402  3DC4
11403  3DC5
11404  3DC6
11405  3DC7
11406  3DC8
11407  3DC9
11408  3DCA
11409  3DCB
11410  3DCC
11411  3DCD
11412  3DCE
11413  3DCF
11414  3DD0
11415  3DD1
11416  3DD2
11417  3DD3
11418  3DD4
11419  3DD5
11420  3DD6
11421  3DD7
11422  3DD8
11423  3DD9
11424  3DDA
11425  3DDB
11426  3DDC
11427  3DDD
11428  3DDE
11429  3DDF
11430  3DE0
11431  3DE1
11432  3DE2
11433  3DE3
11434  3DE4
11435  3DE5
11436  3DE6
11437  3DE7
11438  3DE8
11439  3DE9
11440  3DEA
11441  3DEB
11442  3DEC
11443  3DED
11444  3DEE
11445  3DEF
11446  3DF0
11447  3DF1
11448  3DF2
11449  3DF3
11450  3DF4
11451  3DF5
11452  3DF6
11453  3DF7
11454  3DF8
11455  3DF9
11456  3DFA
11457  3DFB
11458  3DFC
11459  3DFD
11460  3DFE
11461  3DFF
11462  3E00
11463  3E01
11464  3E02
11465  3E03
11466  3E04
11467  3E05
11468  3E06
11469  3E07
11470  3E08
11471  3E09
11472  3E0A
11473  3E0B
11474  3E0C
11475  3E0D
11476  3E0E
11477  3E0F
11478  3E10
11479  3E11
11480  3E12
11481  3E13
11482  3E14
11483  3E15
11484  3E16
11485  3E17
11486  3E18
11487  3E19
11488  3E1A
11489  3E1B
11490  3E1C
11491  3E1D
11492  3E1E
11493  3E1F
11494  3E20
11495  3E21
11496  3E22
11497  3E23
11498  3E24
11499  3E25
11500  3E26
11501  3E27
11502  3E28
11503  3E29
11504  3E2A
11505  3E2B
11506  3E2C
11507  3E2D
11508  3E2E
11509  3E2F
11510  3E30
11511  3E31
11512  3E32
11513  3E33
11514  3E34
11515  3E35
11516  3E36
11517  3E37
11518  3E38
11519  3E39
11520  3E3A
11521  3E3B
11522  3E3C
11523  3E3D
11524  3E3E
11525  3E3F
11526  3E40
11527  3E41
11528  3E42
11529  3E43
11530  3E44
11531  3E45
11532  3E46
11533  3E47
11534  3E48
11535  3E49
11536  3E4A
11537  3E4B
11538  3E4C
11539  3E4D
11540  3E4E
11541  3E4F
11542  3E50
11543  3E51
11544  3E52
11545  3E53
11546  3E54
11547  3E55
11548  3E56
11549  3E57
11550  3E58
11551  3E59
11552  3E5A
11553  3E5B
11554  3E5C
11555  3E5D
11556  3E5E
11557  3E5F
11558  3E60
11559  3E61
11560  3E62
11561  3E63
11562  3E64
11563  3E65
11564  3E66
11565  3E67
11566  3E68
11567  3E69
11568  3E6A
11569  3E6B
11570  3E6C
11571  3E6D
11572  3E6E
11573  3E6F
11574  3E70
11575  3E71
11576  3E72
11577  3E73
11578  3E74
11579  3E75
11580  3E76
11581  3E77
11582  3E78
11583  3E79
11584  3E7A
11585  3E7B
11586  3E7C
11587  3E7D
11588  3E7E
11589  3E7F
11590  3E80
11591  3E81
11592  3E82
11593  3E83
11594  3E84
11595  3E85
11596  3E86
11597  3E87
11598  3E88
11599  3E89
11600  3E8A
11601  3E8B
11602  3E8C
11603  3E8D
11604  3E8E
11605  3E8F
11606  3E90
11607  3E91
11608  3E92
11609  3E93
11610  3E94
11611  3E95
11612  3E96
11613  3E97
11614  3E98
11615  3E99
11616  3E9A
11617  3E9B
11618  3E9C
11619  3E9D
11620  3E9E
11621  3E9F
11622  3EA0
11623  3EA1
11624  3EA2
11625  3EA3
11626  3EA4
11627  3EA5
11628  3EA6
11629  3EA7
11630  3EA8
11631  3EA9
11632  3EAA
11633  3EAB
11634  3EAC
11635  3EAD
11636  3EAE
11637  3EAF
11638  3EB0
11639  3EB1
11640  3EB2
11641  3EB3
11642  3EB4
11643  3EB5
11644  3EB6
11645  3EB7
11646  3EB8
11647  3EB9
11648  3EBA
11649  3EBB
11650  3EBC
11651  3EBD
11652  3EBE
11653  3EBF
11654  3EC0
11655  3EC1
11656  3EC2
11657  3EC3
11658  3EC4
11659  3EC5
11660  3EC6
11661  3EC7
11662  3EC8
11663  3EC9
11664  3ECA
11665  3ECB
11666  3ECC
11667  3ECD
11668  3ECE
11669  3ECF
11670  3ED0
11671  3ED1
11672  3ED2
11673  3ED3
11674  3ED4
11675  3ED5
11676  3ED6
11677  3ED7
11678  3ED8
11679  3ED9
11680  3EDA
11681  3EDB
11682  3EDC
11683  3EDD
11684  3EDE
11685  3EDF
11686  3EE0
11687  3EE1
11688  3EE2
11689  3EE3
11690  3EE4
11691  3EE5
11692  3EE6
11693  3EE7
11694  3EE8
11695  3EE9
11696  3EEA
11697  3EEB
11698  3EEC
11699  3EED
11700  3EEE
11701  3EEF
11702  3EF0
11703  3EF1
11704  3EF2
11705  3EF3
11706  3EF4
11707  3EF5
11708  3EF6
11709  3EF7
11710  3EF8
11711  3EF9
11712  3EFA
11713  3EFB
11714  3EFC
11715  3EFD
11716  3EFE
11717  3EFF
11718  3F00
11719  3F01
11720  3F02
11721  3F03
11722  3F04
11723  3F05
11724  3F06
11725  3F07
11726  3F08
11727  3F09
11728  3F0A
11729  3F0B
11730  3F0C
11731  3F0D
11732  3F0E
11733  3F0F
11734  3F10
11735  3F11
11736  3F12
11737  3F13
11738  3F14
11739  3F15
11740  3F16
11741  3F17
11742  3F18
11743  3F19
11744  3F1A
11745  3F1B
11746  3F1C
11747  3F1D
11748  3F1E
11749  3F1F
11750  3F20
11751  3F21
11752  3F22
11753  3F23
11754  3F24
11755  3F25
11756  3F26
11757  3F27
11758  3F28
11759  3F29
11760  3F2A
11761  3F2B
11762  3F2C
11763  3F2D
11764  3F2E
11765  3F2F
11766  3F30
11767  3F31
11768  3F32
11769  3F33
11770  3F34
11771  3F35
11772  3F36
11773  3F37
11774  3F38
11775  3F39
11776  3F3A
11777  3F3B
11778  3F3C
11779  3F3D
11780  3F3E
11781  3F3F
11782  3F40
11783  3F41
11784  3F42
11785  3F43
11786  3F44
11787  3F45
11788  3F46
11789  3F47
11790  3F48
11791  3F49
11792  3F4A
11793  3F4B
11794  3F4C
11795  3F4D
11796  3F4E
11797  3F4F
11798  3F50
11799  3F51
11800  3F52
11801  3F53
11802  3F54
11803  3F55
11804  3F56
11805  3F57
11806  3F58
11807  3F59
11808  3F5A
11809  3F5B
11810  3F5C
11811  3F5D
11812  3F5E
11813  3F5F
11814  3F60
11815  3F61
11816  3F62
11817  3F63
11818  3F64
11819  3F65
11820  3F66
11821  3F67
11822  3F68
11823  3F69
11824  3F6A
11825  3F6B
11826  3F6C
11827  3F6D
11828  3F6E
11829  3F6F
11830  3F70
11831  3F71
11832  3F72
11833  3F73
11834  3F74
11835  3F75
11836  3F76
11837  3F77
11838  3F78
11839  3F79
11840  3F7A
11841  3F7B
11842  3F7C
11843  3F7D
11844  3F7E
11845  3F7F
11846  3F80
11847  3F81
11848  3F82
11849  3F83
11850  3F84
11851  3F85
11852  3F86
11853  3F87
11854  3F88
11855  3F89
11856  3F8A
11857  3F8B
11858  3F8C
11859  3F8D
11860  3F8E
11861  3F8F
11862  3F90
11863  3F91
11864  3F92
11865  3F93
11866  3F94
11867  3F95
11868  3F96
11869  3F97
11870  3F98
11871  3F99
11872  3F9A
11873  3F9B
11874  3F9C
11875  3F9D
11876  3F9E
11877  3F9F
11878  3FA0
11879  3FA1
11880  3FA2
11881  3FA3
11882  3FA4
11883  3FA5
11884  3FA6
11885  3FA7
11886  3FA8
11887  3FA9
11888  3FAA
11889  3FAB
11890  3FAC
11891  3FAD
11892  3FAE
11893  3FAF
11894  3FB0
11895  3FB1
11896  3FB2
11897  3FB3
11898  3FB4
11899  3FB5
11900  3FB6
11901  3FB7
11902  3FB8
11903  3FB9
11904  3FBA
11905  3FBB
11906  3FBC
11907  3FBD
11908  3FBE
11909  3FBF
11910  3FC0
11911  3FC1
11912  3FC2
11913  3FC3
11914  3FC4
11915  3FC5
11916  3FC6
11917  3FC7
11918  3FC8
11919  3FC9
11920  3FCA
11921  3FCB
11922  3FCC
11923  3FCD
11924  3FCE
11925  3FCF
11926  3FD0
11927  3FD1
11928  3FD2
11929  3FD3
11930  3FD4
11931  3FD5
11932  3FD6
11933  3FD7
11934  3FD8
11935  3FD9
11936  3FDA
11937  3FDB
11938  3FDC
11939  3FDD
11940  3FDE
11941  3FDF
11942  3FE0
11943  3FE1
11944  3FE2
11945  3FE3
11946  3FE4
11947  3FE5
11948  3FE6
11949  3FE7
11950  3FE8
11951  3FE9
11952  3FEA
11953  3FEB
11954  3FEC
11955  3FED
11956  3FEE
11957  3FEF
11958  3FF0
11959  3FF1
11960  3FF2
11961  3FF3
11962  3FF4
11963  3FF5
11964  3FF6
11965  3FF7
11966  3FF8
11967  3FF9
11968  3FFA
11969  3FFB
11970  3FFC
11971  3FFD
11972  3FFE
11973  3FFF
11974  4000
11975  4001
11976  4002
11977  4003
11978  4004
11979  4005
11980  4006
11981  4007
11982  4008
11983  4009
11984  400A
11985  400B
11986  400C
11987  400D
11988  400E
11989  400F
11990  4010
11991  4011
11992  4012
11993  4013
11994  4014
11995  4015
11996  4016
11997  4017
11998  4018
11999  4019
12000  401A
12001  401B
12002  401C
12003  401D
12004  401E
12005  401F
12006  4020
12007  4021
12008  4022
12009  4023
12010  4024
12011  4025
12012  4026
12013  4027
12014  4028
12015  4029
12016  402A
12017  402B
12018  402C
12019  402D
12020  402E
12021  402F
12022  4030
12023  4031
12024  4032
12025  4033
12026  4034
12027  4035
12028  4036
12029  4037
12030  4038
12031  4039
12032  403A
12033  403B
12034  403C
12035  403D
12036  403E
12037  403F
12038  4040
12039  4041
12040  4042
12041  4043
12042  4044
12043  4045
12044  4046
12045  4047
12046  4048
12047  4049
12048  404A
12049  404B
12050  404C
12051  404D
12052  404E
12053  404F
12054  4050
12055  4051
12056  4052
12057  4053
12058  4054
12059  4055
12060  4056
12061  4057
12062  4058
12063  4059
12064  405A
12065  405B
12066  405C
12067  405D
12068  405E
12069  405F
12070  4060
12071  4061
12072  4062
12073  4063
12074  4064
12075  4065
12076  4066
12077  4067
12078  4068
12079  4069
12080  406A
12081  406B
12082  406C
12083  406D
12084  406E
12085  406F
12086  4070
12087  4071
12088  4072
12089  4073
12090  4074
12091  4075
12092  4076
12093  4077
12094  4078
12095  4079
12096  407A
12097  407B
12098  407C
12099  407D
12100  407E
12101  407F
12102  4080
12103  4081
12104  4082
12105  4083
12106  4084
12107  4085
12108  4086
12109  4087
12110  4088
12111  4089
12112  408A
12113  408B
12114  408C
12115  408D
12116  408E
12117  408F
12118  4090
12119  4091
12120  4092
12121  4093
12122  4094
12123  4095
12124  4096
12125  4097
12126  4098
12127  4099
12128  409A
12129  409B
12130  409C
12131  409D
12132  409E
12133  409F
12134  40A0
12135  40A1
12136  40A2
12137  40A3
12138  40A4
12139  40A5
12140  40A6
12141  40A7
12142  40A8
12143  40A9
12144  40AA
12145  40AB
12146  40AC
12147  40AD
12148  40AE
12149  40AF
12150  40B0
12151  40B1
12152  40B2
12153  40B3
12154  40B4
12155  40B5
12156  40B6
12157  40B7
12158  40B8
12159  40B9
12160  40BA
12161  40BB
12162  40BC
12163  40BD
12164  40BE
12165  40BF
12166  40C0
12167  40C1
12168  40C2
12169  40C3
12170  40C4
12171  40C5
12172  40C6
12173  40C7
12174  40C8
12175  40C9
12176  40CA
12177  40CB
12178  40CC
12179  40CD
12180  40CE
12181  40CF
12182  40D0
12183  40D1
12184  40D2
12185  40D3
12186  40D4
12187  40D5
12188  40D6
12189  40D7
12190  40D8
12191  40D9
12192  40DA
12193  40DB
12194  40DC
12195  40DD
12196  40DE
12197  40DF
12198  40E0
12199  40E1
12200  40E2
12201  40E3
12202  40E4
12203  40E5
12204  40E6
12205  40E7
12206  40E8
12207  40E9
12208  40EA
12209  40EB
12210  40EC
12211  40ED
12212  40EE
12213  40EF
12214  40F0
12215  40F1
12216  40F2
12217  40F3
12218  40F4
12219  40F5
12220  40F6
12221  40F7
12222  40F8
12223  40F9
12224  40FA
12225  40FB
12226  40FC
12227  40FD
12228  40FE
12229  40FF
12230  4100
12231  4101
12232  4102
12233  4103
12234  4104
12235  4105
12236  4106
12237  4107
12238  4108
12239  4109
12240  410A
12241  410B
12242  410C
12243  410D
12244  410E
12245  410F
12246  4110
12247  4111
12248  4112
12249  4113
12250  4114
12251  4115
12252  4116
12253  4117
12254  4118
12255  4119
12256  411A
12257  411B
12258  411C
12259  411D
12260  411E
12261  411F
12262  4120
12263  4121
12264  4122
12265  4123
12266  4124
12267  4125
12268  4126
12269  4127
12270  4128
12271  4129
12272  412A
12273  412B
12274  412C
12275  412D
12276  412E
12277  412F
12278  4130
12279  4131
12280  4132
12281  4133
12282  4134
12283  4135
12284  4136
12285  4137
12286  4138
12287  4139
12288  413A
12289  413B
12290  413C
12291  413D
12292  413E
12293  413F
12294  4140
12295  4141
12296  4142
12297  4143
12298  4144
12299  4145
12300  4146
12301  4147
12302  4148
12303  4149
12304  414A
12305  414B
12306  414C
12307  414D
12308  414E
12309  414F
12310  4150
12311  4151
12312  4152
12313  4153
12314  4154
12315  4155
12316  4156
12317  4157
12318  4158
12319  4159
12320  415A
12321  415B
12322  415C
12323  415D
12324  415E
12325  415F
12326  4160
12327  4161
12328  4162
12329  4163
12330  4164
12331  4165
12332  4166
12333  4167
12334  4168
12335  4169
12336  416A
12337  416B
12338  416C
12339  416D
12340  416E
12341  416F
12342  4170
12343  4171
12344  4172
12345  4173
12346  4174
12347  4175
12348  4176
12349  4177
12350  4178
12351  4179
12352  417A
12353  417B
12354  417C
12355  417D
12356  417E
12357  417F
12358  4180
12359  4181
12360  4182
12361  4183
12362  4184
12363  4185
12364  4186
12365  4187
12366  4188
12367  4189
12368  418A
12369  418B
12370  418C
12371  418D
12372  418E
12373  418F
12374  4190
12375  4191
12376  4192
12377  4193
12378  4194
12379  4195
12380  4196
12381  4197
12382  4198
12383  4199
12384  419A
12385  419B
12386  419C
12387  419D
12388  419E
12389  419F
12390  41A0
12391  41A1
12392  41A2
12393  41A3
12394  41A4
12395  41A5
12396  41A6
12397  41A7
12398  41A8
12399  41A9
12400  41AA
12401  41AB
12402  41AC
12403  41AD
12404  41AE
12405  41AF
12406  41B0
12407  41B1
12408  41B2
12409  41B3
12410  41B4
12411  41B5
12412  41B6
12413  41B7
12414  41B8
12415  41B9
12416  41BA
12417  41BB
12418  41BC
12419  41BD
12420  41BE
12421  41BF
12422  41C0
12423  41C1
12424  41C2
12425  41C3
12426  41C4
12427  41C5
12428  41C6
12429  41C7
12430  41C8
12431  41C9
12432  41CA
12433  41CB
12434  41CC
12435  41CD
12436  41CE
12437  41CF
12438  41D0
12439  41D1
12440  41D2
12441  41D3
12442  41D4
12443  41D5
12444  41D6
12445  41D7
12446  41D8
12447  41D9
12448  41DA
12449  41DB
12450  41DC
12451  41DD
12452  41DE
12453  41DF
12454  41E0
12455  41E1
12456  41E2
12457  41E3
12458  41E4
12459  41E5
12460  41E6
12461  41E7
12462  41E8
12463  41E9
12464  41EA
12465  41EB
12466  41EC
12467  41ED
12468  41EE
12469  41EF
12470  41F0
12471  41F1
12472  41F2
12473  41F3
12474  41F4
12475  41F5
12476  41F6
12477  41F7
12478  41F8
12479  41F9
12480  41FA
12481  41FB
12482  41FC
12483  41FD
12484  41FE
12485  41FF
12486  4200
12487  4201
12488  4202
12489  4203
12490  4204
12491  4205
12492  4206
12493  4207
12494  4208
12495  4209
12496  420A
12497  420B
12498  420C
12499  420D
12500  420E
12501  420F
12502  4210
12503  4211
12504  4212
12505  4213
12506  4214
12507  4215
12508  4216
12509  4217
12510  4218
12511  4219
12512  421A
12513  421B
12514  421C
12515  421D
12516  421E
12517  421F
12518  4220
12519  4221
12520  4222
12521  4223
12522  4224
12523  4225
12524  4226
12525  4227
12526  4228
12527  4229
12528  422A
12529  422B
12530  422C
12531  422D
12532  422E
12533  422F
12534  4230
12535  4231
12536  4232
12537  4233
12538  4234
12539  4235
12540  4236
12541  4237
12542  4238
12543  4239
12544  423A
12545  423B
12546  423C
12547  423D
12548  423E
12549  423F
12550  4240
12551  4241
12552  4242
12553  4243
12554  4244
12555  4245
12556  4246
12557  4247
12558  4248
12559  4249
12560  424A
12561  424B
12562  424C
12563  424D
12564  424E
12565  424F
12566  4250
12567  4251
12568  4252
12569  4253
12570  4254
12571  4255
12572  4256
12573  4257
12574  4258
12575  4259
12576  425A
12577  425B
12578  425C
12579  425D
12580  425E
12581  425F
12582  4260
12583  4261
12584  4262
12585  4263
12586  4264
12587  4265
12588  4266
12589  4267
12590  4268
12591  4269
12592  426A
12593  426B
12594  426C
12595  426D
12596  426E
12597  426F
12598  4270
12599  4271
12600  4272
12601  4273
12602  4274
12603  4275
12604  4276
12605  4277
12606  4278
12607  4279
12608  427A
12609  427B
12610  427C
12611  427D
12612  427E
12613  427F
12614  4280
12615  4281
12616  4282
12617  4283
12618  4284
12619  4285
12620  4286
12621  4287
12622  4288
12623  4289
12624  428A
12625  428B
12626  428C
12627  428D
12628  428E
12629  428F
12630  4290
12631  4291
12632  4292
12633  4293
12634  4294
12635  4295
12636  4296
12637  4297
12638  4298
12639  4299
12640  429A
12641  429B
12642  429C
12643  429D
12644  429E
12645  429F
12646  42A0
12647  42A1
12648  42A2
12649  42A3
12650  42A4
12651  42A5
12652  42A6
12653  42A7
12654  42A8
12655  42A9
12656  42AA
12657  42AB
12658  42AC
12659  42AD
12660  42AE
12661  42AF
12662  42B0
12663  42B1
12664  42B2
12665  42B3
12666  42B4
12667  42B5
12668  42B6
12669  42B7
12670  42B8
12671  42B9
12672  42BA
12673  42BB
12674  42BC
12675  42BD
12676  42BE
12677  42BF
12678  42C0
12679  42C1
12680  42C2
12681  42C3
12682  42C4
12683  42C5
12684  42C6
12685  42C7
12686  42C8
12687  42C9
12688  42CA
12689  42CB
12690  42CC
12691  42CD
12692  42CE
12693  42CF
12694  42D0
12695  42D1
12696  42D2
12697  42D3
12698  42D4
12699  42D5
12700  42D6
12701  42D7
12702  42D8
12703  42D9
12704  42DA
12705  42DB
12706  42DC
12707  42DD
12708  42DE
12709  42DF
12710  42E0
12711  42E1
12712  42E2
12713  42E3
12714  42E4
12715  42E5
12716  42E6
12717  42E7
12718  42E8
12719  42E9
12720  42EA
12721  42EB
12722  42EC
12723  42ED
12724  42EE
12725  42EF
12726  42F0
12727  42F1
12728  42F2
12729  42F3
12730  42F4
12731  42F5
12732  42F6
12733  42F7
12734  42F8
12735  42F9
12736  42FA
12737  42FB
12738  42FC
12739  42FD
12740  42FE
12741  42FF
12742  4300
12743  4301
12744  4302
12745  4303
12746  4304
12747  4305
12748  4306
12749  4307
12750  4308
12751  4309
12752  430A
12753  430B
12754  430C
12755  430D
12756  430E
12757  430F
12758  4310
12759  4311
12760  4312
12761  4313
12762  4314
12763  4315
12764  4316
12765  4317
12766  4318
12767  4319
12768  431A
12769  431B
12770  431C
12771  431D
12772  431E
12773  431F
12774  4320
12775  4321
12776  4322
12777  4323
12778  4324
12779  4325
12780  4326
12781  4327
12782  4328
12783  4329
12784  432A
12785  432B
12786  432C
12787  432D
12788  432E
12789  432F
12790  4330
12791  4331
12792  4332
12793  4333
12794  4334
12795  4335
12796  4336
12797  4337
12798  4338
12799  4339
12800  433A
12801  433B
12802  433C
12803  433D
12804  433E
12805  433F
12806  4340
12807  4341
12808  4342
12809  4343
12810  4344
12811  4345
12812  4346
12813  4347
12814  4348
12815  4349
12816  434A
12817  434B
12818  434C
12819  434D
12820  434E
12821  434F
12822  4350
12823  4351
12824  4352
12825  4353
12826  4354
12827  4355
12828  4356
12829  4357
12830  4358
12831  4359
12832  435A
12833  435B
12834  435C
12835  435D
12836  435E
12837  435F
12838  4360
12839  4361
12840  4362
12841  4363
12842  4364
12843  4365
12844  4366
12845  4367
12846  4368
12847  4369
12848  436A
12849  436B
12850  436C
12851  436D
12852  436E
12853  436F
12854  4370
12855  4371
12856  4372
12857  4373
12858  4374
12859  4375
12860  4376
12861  4377
12862  4378
12863  4379
12864  437A
12865  437B
12866  437C
12867  437D
12868  437E
12869  437F
12870  4380
12871  4381
12872  4382
12873  4383
12874  4384
12875  4385
12876  4386
12877  4387
12878  4388
12879  4389
12880  438A
12881  438B
12882  438C
12883  438D
12884  438E
12885  438F
12886  4390
12887  4391
12888  4392
12889  4393
12890  4394
12891  4395
12892  4396
12893  4397
12894  4398
12895  4399
12896  439A
12897  439B
12898  439C
12899  439D
12900  439E
12901  439F
12902  43A0
12903  43A1
12904  43A2
12905  43A3
12906  43A4
12907  43A5
12908  43A6
12909  43A7
12910  43A8
12911  43A9
12912  43AA
12913  43AB
12914  43AC
12915  43AD
12916  43AE
12917  43AF
12918  43B0
12919  43B1
12920  43B2
12921  43B3
12922  43B4
12923  43B5
12924  43B6
12925  43B7
12926  43B8
12927  43B9
12928  43BA
12929  43BB
12930  43BC
12931  43BD
12932  43BE
12933  43BF
12934  43C0
12935  43C1
12936  43C2
12937  43C3
12938  43C4
12939  43C5
12940  43C6
12941  43C7
12942  43C8
12943  43C9
12944  43CA
12945  43CB
12946  43CC
12947  43CD
12948  43CE
12949  43CF
12950  43D0
12951  43D1
12952  43D2
12953  43D3
12954  43D4
12955  43D5
12956  43D6
12957  43D7
12958  43D8
12959  43D9
12960  43DA
12961  43DB
12962  43DC
12963  43DD
12964  43DE
12965  43DF
12966  43E0
12967  43E1
12968  43E2
12969  43E3
12970  43E4
12971  43E5
12972  43E6
12973  43E7
12974  43E8
12975  43E9
12976  43EA
12977  43EB
12978  43EC
12979  43ED
12980  43EE
12981  43EF
12982  43F0
12983  43F1
12984  43F2
12985  43F3
12986  43F4
12987  43F5
12988  43F6
12989  43F7
12990  43F8
12991  43F9
12992  43FA
12993  43FB
12994  43FC
12995  43FD
12996  43FE
12997  43FF
12998  4400
12999  4401
13000  4402
13001  4403
13002  4404
13003  4405
13004  4406
13005  4407
13006  4408
13007  4409
13008  440A
13009  440B
13010  440C
13011  440D
13012  440E
13013  440F
13014  4410
13015  4411
13016  4412
13017  4413
13018  4414
13019  4415
13020  4416
13021  4417
13022  4418
13023  4419
13024  441A
13025  441B
13026  441C
13027  441D
13028  441E
13029  441F
13030  4420
13031  4421
13032  4422
13033  4423
13034  4424
13035  4425
13036  4426
13037  4427
13038  4428
13039  4429
13040  442A
13041  442B
13042  442C
13043  442D
13044  442E
13045  442F
13046  4430
13047  4431
13048  4432
13049  4433
13050  4434
13051  4435
13052  4436
13053  4437
13054  4438
13055  4439
13056  443A
13057  443B
13058  443C
13059  443D
13060  443E
13061  443F
13062  4440
13063  4441
13064  4442
13065  4443
13066  4444
13067  4445
13068  4446
13069  4447
13070  4448
13071  4449
13072  444A
13073  444B
13074  444C
13075  444D
13076  444E
13077  444F
13078  4450
13079  4451
13080  4452
13081  4453
13082  4454
13083  4455
13084  4456
13085  4457
13086  4458
13087  4459
13088  445A
13089  445B
13090  445C
13091  445D
13092  445E
13093  445F
13094  4460
13095  4461
13096  4462
13097  4463
13098  4464
13099  4465
13100  4466
13101  4467
13102  4468
13103  4469
13104  446A
13105  446B
13106  446C
13107  446D
13108  446E
13109  446F
13110  4470
13111  4471
13112  4472
13113  4473
13114  4474
13115  4475
13116  4476
13117  4477
13118  4478
13119  4479
13120  447A
13121  447B
13122  447C
13123  447D
13124  447E
13125  447F
13126  4480
13127  4481
13128  4482
13129  4483
13130  4484
13131  4485
13132  4486
13133  4487
13134  4488
13135  4489
13136  448A
13137  448B
13138  448C
13139  448D
13140  448E
13141  448F
13142  4490
13143  4491
13144  4492
13145  4493
13146  4494
13147  4495
13148  4496
13149  4497
13150  4498
13151  4499
13152  449A
13153  449B
13154  449C
13155  449D
13156  449E
13157  449F
13158  44A0
13159  44A1
13160  44A2
13161  44A3
13162  44A4
13163  44A5
13164  44A6
13165  44A7
13166  44A8
13167  44A9
13168  44AA
13169  44AB
13170  44AC
13171  44AD
13172  44AE
13173  44AF
13174  44B0
13175  44B1
13176  44B2
13177  44B3
13178  44B4
13179  44B5
13180  44B6
13181  44B7
13182  44B8
13183  44B9
13184  44BA
13185  44BB
13186  44BC
13187  44BD
13188  44BE
13189  44BF
13190  44C0
13191  44C1
13192  44C2
13193  44C3
13194  44C4
13195  44C5
13196  44C6
13197  44C7
13198  44C8
13199  44C9
13200  44CA
13201  44CB
13202  44CC
13203  44CD
13204  44CE
13205  44CF
13206  44D0
13207  44D1
13208  44D2
13209  44D3
13210  44D4
13211  44D5
13212  44D6
13213  44D7
13214  44D8
13215  44D9
13216  44DA
13217  44DB
13218  44DC
13219  44DD
13220  44DE
13221  44DF
13222  44E0
13223  44E1
13224  44E2
13225  44E3
13226  44E4
13227  44E5
13228  44E6
13229  44E7
13230  44E8
13231  44E9
13232  44EA
13233  44EB
13234  44EC
13235  44ED
13236  44EE
13237  44EF
13238  44F0
13239  44F1
13240  44F2
13241  44F3
13242  44F4
13243  44F5
13244  44F6
13245  44F7
13246  44F8
13247  44F9
13248  44FA
13249  44FB
13250  44FC
13251  44FD
13252  44FE
13253  44FF
13254  4500
13255  4501
13256  4502
13257  4503
13258  4504
13259  4505
13260  4506
13261  4507
13262  4508
13263  4509
13264  450A
13265  450B
13266  450C
13267  450D
13268  450E
13269  450F
13270  4510
13271  4511
13272  4512
13273  4513
13274  4514
13275  4515
13276  4516
13277  4517
13278  4518
13279  4519
13280  451A
13281  451B
13282  451C
13283  451D
13284  451E
13285  451F
13286  4520
13287  4521
13288  4522
13289  4523
13290  4524
13291  4525
13292  4526
13293  4527
13294  4528
13295  4529
13296  452A
13297  452B
13298  452C
13299  452D
13300  452E
13301  452F
13302  4530
13303  4531
13304  4532
13305  4533
13306  4534
13307  4535
13308  4536
13309  4537
13310  4538
13311  4539
13312  453A
13313  453B
13314  453C
13315  453D
13316  453E
13317  453F
13318  4540
13319  4541
13320  4542
13321  4543
13322  4544
13323  4545
13324  4546
13325  4547
13326  4548
13327  4549
13328  454A
13329  454B
13330  454C
13331  454D
13332  454E
13333  454F
13334  4550
13335  4551
13336  4552
13337  4553
13338  4554
13339  4555
13340  4556
13341  4557
13342  4558
13343  4559
13344  455A
13345  455B
13346  455C
13347  455D
13348  455E
13349  455F
13350  4560
13351  4561
13352  4562
13353  4563
13354  4564
13355  4565
13356  4566
13357  4567
13358  4568
13359  4569
13360  456A
13361  456B
13362  456C
13363  456D
13364  456E
13365  456F
13366  4570
13367  4571
13368  4572
13369  4573
13370  4574
13371  4575
13372  4576
13373  4577
13374  4578
13375  4579
13376  457A
13377  457B
13378  457C
13379  457D
13380  457E
13381  457F
13382  4580
13383  4581
13384  4582
13385  4583
13386  4584
13387  4585
13388  4586
13389  4587
13390  4588
13391  4589
13392  458A
13393  458B
13394  458C
13395  458D
13396  458E
13397  458F
13398  4590
13399  4591
13400  4592
13401  4593
13402  4594
13403  4595
13404  4596
13405  4597
13406  4598
13407  4599
13408  459A
13409  459B
13410  459C
13411  459D
13412  459E
13413  459F
13414  45A0
13415  45A1
13416  45A2
13417  45A3
13418  45A4
13419  45A5
13420  45A6
13421  45A7
13422  45A8
13423  45A9
13424  45AA
13425  45AB
13426  45AC
13427  45AD
13428  45AE
13429  45AF
13430  45B0
13431  45B1
13432  45B2
13433  45B3
13434  45B4
13435  45B5
13436  45B6
13437  45B7
13438  45B8
13439  45B9
13440  45BA
13441  45BB
13442  45BC
13443  45BD
13444  45BE
13445  45BF
13446  45C0
13447  45C1
13448  45C2
13449  45C3
13450  45C4
13451  45C5
13452  45C6
13453  45C7
13454  45C8
13455  45C9
13456  45CA
13457  45CB
13458  45CC
13459  45CD
13460  45CE
13461  45CF
13462  45D0
13463  45D1
13464  45D2
13465  45D3
13466  45D4
13467  45D5
13468  45D6
13469  45D7
13470  45D8
13471  45D9
13472  45DA
13473  45DB
13474  45DC
13475  45DD
13476  45DE
13477  45DF
13478  45E0
13479  45E1
13480  45E2
13481  45E3
13482  45E4
13483  45E5
13484  45E6
13485  45E7
13486  45E8
13487  45E9
13488  45EA
13489  45EB
13490  45EC
13491  45ED
13492  45EE
13493  45EF
13494  45F0
13495  45F1
13496  45F2
13497  45F3
13498  45F4
13499  45F5
13500  45F6
13501  45F7
13502  45F8
13503  45F9
13504  45FA
13505  45FB
13506  45FC
13507  45FD
13508  45FE
13509  45FF
13510  4600
13511  4601
13512  4602
13513  4603
13514  4604
13515  4605
13516  4606
13517  4607
13518  4608
13519  4609
13520  460A
13521  460B
13522  460C
13523  460D
13524  460E
13525  460F
13526  4610
13527  4611
13528  4612
13529  4613
13530  4614
13531  4615
13532  4616
13533  4617
13534  4618
13535  4619
13536  461A
13537  461B
13538  461C
13539  461D
13540  461E
13541  461F
13542  4620
13543  4621
13544  4622
13545  4623
13546  4624
13547  4625
13548  4626
13549  4627
13550  4628
13551  4629
13552  462A
13553  462B
13554  462C
13555  462D
13556  462E
13557  462F
13558  4630
13559  4631
13560  4632
13561  4633
13562  4634
13563  4635
13564  4636
13565  4637
13566  4638
13567  4639
13568  463A
13569  463B
13570  463C
13571  463D
13572  463E
13573  463F
13574  4640
13575  4641
13576  4642
13577  4643
13578  4644
13579  4645
13580  4646
13581  4647
13582  4648
13583  4649
13584  464A
13585  464B
13586  464C
13587  464D
13588  464E
13589  464F
13590  4650
13591  4651
13592  4652
13593  4653
13594  4654
13595  4655
13596  4656
13597  4657
13598  4658
13599  4659
13600  465A
13601  465B
13602  465C
13603  465D
13604  465E
13605  465F
13606  4660
13607  4661
13608  4662
13609  4663
13610  4664
13611  4665
13612  4666
13613  4667
13614  4668
13615  4669
13616  466A
13617  466B
13618  466C
13619  466D
13620  466E
13621  466F
13622  4670
13623  4671
13624  4672
13625  4673
13626  4674
13627  4675
13628  4676
13629  4677
13630  4678
13631  4679
13632  467A
13633  467B
13634  467C
13635  467D
13636  467E
13637  467F
13638  4680
13639  4681
13640  4682
13641  4683
13642  4684
13643  4685
13644  4686
13645  4687
13646  4688
13647  4689
13648  468A
13649  468B
13650  468C
13651  468D
13652  468E
13653  468F
13654  4690
13655  4691
13656  4692
13657  4693
13658  4694
13659  4695
13660  4696
13661  4697
13662  4698
13663  4699
13664  469A
13665  469B
13666  469C
13667  469D
13668  469E
13669  469F
13670  46A0
13671  46A1
13672  46A2
13673  46A3
13674  46A4
13675  46A5
13676  46A6
13677  46A7
13678  46A8
13679  46A9
13680  46AA
13681  46AB
13682  46AC
13683  46AD
13684  46AE
13685  46AF
13686  46B0
13687  46B1
13688  46B2
13689  46B3
13690  46B4
13691  46B5
13692  46B6
13693  46B7
13694  46B8
13695  46B9
13696  46BA
13697  46BB
13698  46BC
13699  46BD
13700  46BE
13701  46BF
13702  46C0
13703  46C1
13704  46C2
13705  46C3
13706  46C4
13707  46C5
13708  46C6
13709  46C7
13710  46C8
13711  46C9
13712  46CA
13713  46CB
13714  46CC
13715  46CD
13716  46CE
13717  46CF
13718  46D0
13719  46D1
13720  46D2
13721  46D3
13722  46D4
13723  46D5
13724  46D6
13725  46D7
13726  46D8
13727  46D9
13728  46DA
13729  46DB
13730  46DC
13731  46DD
13732  46DE
13733  46DF
13734  46E0
13735  46E1
13736  46E2
13737  46E3
13738  46E4
13739  46E5
13740  46E6
13741  46E7
13742  46E8
13743  46E9
13744  46EA
13745  46EB
13746  46EC
13747  46ED
13748  46EE
13749  46EF
13750  46F0
13751  46F1
13752  46F2
13753  46F3
13754  46F4
13755  46F5
13756  46F6
13757  46F7
13758  46F8
13759  46F9
13760  46FA
13761  46FB
13762  46FC
13763  46FD
13764  46FE
13765  46FF
13766  4700
13767  4701
13768  4702
13769  4703
13770  4704
13771  4705
13772  4706
13773  4707
13774  4708
13775  4709
13776  470A
13777  470B
13778  470C
13779  470D
13780  470E
13781  470F
13782  4710
13783  4711
13784  4712
13785  4713
13786  4714
13787  4715
13788  4716
13789  4717
13790  4718
13791  4719
13792  471A
13793  471B
13794  471C
13795  471D
13796  471E
13797  471F
13798  4720
13799  4721
13800  4722
13801  4723
13802  4724
13803  4725
13804  4726
13805  4727
13806  4728
13807  4729
13808  472A
13809  472B
13810  472C
13811  472D
13812  472E
13813  472F
13814  4730
13815  4731
13816  4732
13817  4733
13818  4734
13819  4735
13820  4736
13821  4737
13822  4738
13823  4739
13824  473A
13825  473B
13826  473C
13827  473D
13828  473E
13829  473F
13830  4740
13831  4741
13832  4742
13833  4743
13834  4744
13835  4745
13836  4746
13837  4747
13838  4748
13839  4749
13840  474A
13841  474B
13842  474C
13843  474D
13844  474E
13845  474F
13846  4750
13847  4751
13848  4752
13849  4753
13850  4754
13851  4755
13852  4756
13853  4757
13854  4758
13855  4759
13856  475A
13857  475B
13858  475C
13859  475D
13860  475E
13861  475F
13862  4760
13863  4761
13864  4762
13865  4763
13866  4764
13867  4765
13868  4766
13869  4767
13870  4768
13871  4769
13872  476A
13873  476B
13874  476C
13875  476D
13876  476E
13877  476F
13878  4770
13879  4771
13880  4772
13881  4773
13882  4774
13883  4775
13884  4776
13885  4777
13886  4778
13887  4779
13888  477A
13889  477B
13890  477C
13891  477D
13892  477E
13893  477F
13894  4780
13895  4781
13896  4782
13897  4783
13898  4784
13899  4785
13900  4786
13901  4787
13902  4788
13903  4789
13904  478A
13905  478B
13906  478C
13907  478D
13908  478E
13909  478F
13910  4790
13911  4791
13912  4792
13913  4793
13914  4794
13915  4795
13916  4796
13917  4797
13918  4798
13919  4799
13920  479A
13921  479B
13922  479C
13923  479D
13924  479E
13925  479F
13926  47A0
13927  47A1
13928  47A2
13929  47A3
13930  47A4
13931  47A5
13932  47A6
13933  47A7
13934  47A8
13935  47A9
13936  47AA
13937  47AB
13938  47AC
13939  47AD
13940  47AE
13941  47AF
13942  47B0
13943  47B1
13944  47B2
13945  47B3
13946  47B4
13947  47B5
13948  47B6
13949  47B7
13950  47B8
13951  47B9
13952  47BA
13953  47BB
13954  47BC
13955  47BD
13956  47BE
13957  47BF
13958  47C0
13959  47C1
13960  47C2
13961  47C3
13962  47C4
13963  47C5
13964  47C6
13965  47C7
13966  47C8
13967  47C9
13968  47CA
13969  47CB
13970  47CC
13971  47CD
13972  47CE
13973  47CF
13974  47D0
13975  47D1
13976  47D2
13977  47D3
13978  47D4
13979  47D5
13980  47D6
13981  47D7
13982  47D8
13983  47D9
13984  47DA
13985  47DB
13986  47DC
13987  47DD
13988  47DE
13989  47DF
13990  47E0
13991  47E1
13992  47E2
13993  47E3
13994  47E4
13995  47E5
13996  47E6
13997  47E7
13998  47E8
13999  47E9
14000  47EA
14001  47EB
14002  47EC
14003  47ED
14004  47EE
14005  47EF
14006  47F0
14007  47F1
14008  47F2
14009  47F3
14010  47F4
14011  47F5
14012  47F6
14013  47F7
14014  47F8
14015  47F9
14016  47FA
14017  47FB
14018  47FC
14019  47FD
14020  47FE
14021  47FF
14022  4800
14023  4801
14024  4802
14025  4803
14026  4804
14027  4805
14028  4806
14029  4807
14030  4808
14031  4809
14032  480A
14033  480B
14034  480C
14035  480D
14036  480E
14037  480F
14038  4810
14039  4811
14040  4812
14041  4813
14042  4814
14043  4815
14044  4816
14045  4817
14046  4818
14047  4819
14048  481A
14049  481B
14050  481C
14051  481D
14052  481E
14053  481F
14054  4820
14055  4821
14056  4822
14057  4823
14058  4824
14059  4825
14060  4826
14061  4827
14062  4828
14063  4829
14064  482A
14065  482B
14066  482C
14067  482D
14068  482E
14069  482F
14070  4830
14071  4831
14072  4832
14073  4833
14074  4834
14075  4835
14076  4836
14077  4837
14078  4838
14079  4839
14080  483A
14081  483B
14082  483C
14083  483D
14084  483E
14085  483F
14086  4840
14087  4841
14088  4842
14089  4843
14090  4844
14091  4845
14092  4846
14093  4847
14094  4848
14095  4849
14096  484A
14097  484B
14098  484C
14099  484D
14100  484E
14101  484F
14102  4850
14103  4851
14104  4852
14105  4853
14106  4854
14107  4855
14108  4856
14109  4857
14110  4858
14111  4859
14112  485A
14113  485B
14114  485C
14115  485D
14116  485E
14117  485F
14118  4860
14119  4861
14120  4862
14121  4863
14122  4864
14123  4865
14124  4866
14125  4867
14126  4868
14127  4869
14128  486A
14129  486B
14130  486C
14131  486D
14132  486E
14133  486F
14134  4870
14135  4871
14136  4872
14137  4873
14138  4874
14139  4875
14140  4876
14141  4877
14142  4878
14143  4879
14144  487A
14145  487B
14146  487C
14147  487D
14148  487E
14149  487F
14150  4880
14151  4881
14152  4882
14153  4883
14154  4884
14155  4885
14156  4886
14157  4887
14158  4888
14159  4889
14160  488A
14161  488B
14162  488C
14163  488D
14164  488E
14165  488F
14166  4890
14167  4891
14168  4892
14169  4893
14170  4894
14171  4895
14172  4896
14173  4897
14174  4898
14175  4899
14176  489A
14177  489B
14178  489C
14179  489D
14180  489E
14181  489F
14182  48A0
14183  48A1
14184  48A2
14185  48A3
14186  48A4
14187  48A5
14188  48A6
14189  48A7
14190  48A8
14191  48A9
14192  48AA
14193  48AB
14194  48AC
14195  48AD
14196  48AE
14197  48AF
14198  48B0
14199  48B1
14200  48B2
14201  48B3
14202  48B4
14203  48B5
14204  48B6
14205  48B7
14206  48B8
14207  48B9
14208  48BA
14209  48BB
14210  48BC
14211  48BD
14212  48BE
14213  48BF
14214  48C0
14215  48C1
14216  48C2
14217  48C3
14218  48C4
14219  48C5
14220  48C6
14221  48C7
14222  48C8
14223  48C9
14224  48CA
14225  48CB
14226  48CC
14227  48CD
14228  48CE
14229  48CF
14230  48D0
14231  48D1
14232  48D2
14233  48D3
14234  48D4
14235  48D5
14236  48D6
14237  48D7
14238  48D8
14239  48D9
14240  48DA
14241  48DB
14242  48DC
14243  48DD
14244  48DE
14245  48DF
14246  48E0
14247  48E1
14248  48E2
14249  48E3
14250  48E4
14251  48E5
14252  48E6
14253  48E7
14254  48E8
14255  48E9
14256  48EA
14257  48EB
14258  48EC
14259  48ED
14260  48EE
14261  48EF
14262  48F0
14263  48F1
14264  48F2
14265  48F3
14266  48F4
14267  48F5
14268  48F6
14269  48F7
14270  48F8
14271  48F9
14272  48FA
14273  48FB
14274  48FC
14275  48FD
14276  48FE
14277  48FF
14278  4900
14279  4901
14280  4902
14281  4903
14282  4904
14283  4905
14284  4906
14285  4907
14286  4908
14287  4909
14288  490A
14289  490B
14290  490C
14291  490D
14292  490E
14293  490F
14294  4910
14295  4911
14296  4912
14297  4913
14298  4914
14299  4915
14300  4916
14301  4917
14302  4918
14303  4919
14304  491A
14305  491B
14306  491C
14307  491D
14308  491E
14309  491F
14310  4920
14311  4921
14312  4922
14313  4923
14314  4924
14315  4925
14316  4926
14317  4927
14318  4928
14319  4929
14320  492A
14321  492B
14322  492C
14323  492D
14324  492E
14325  492F
14326  4930
14327  4931
14328  4932
14329  4933
14330  4934
14331  4935
14332  4936
14333  4937
14334  4938
14335  4939
14336  493A
14337  493B
14338  493C
14339  493D
14340  493E
14341  493F
14342  4940
14343  4941
14344  4942
14345  4943
14346  4944
14347  4945
14348  4946
14349  4947
14350  4948
14351  4949
14352  494A
14353  494B
14354  494C
14355  494D
14356  494E
14357  494F
14358  4950
14359  4951
14360  4952
14361  4953
14362  4954
14363  4955
14364  4956
14365  4957
14366  4958
14367  4959
14368  495A
14369  495B
14370  495C
14371  495D
14372  495E
14373  495F
14374  4960
14375  4961
14376  4962
14377  4963
14378  4964
14379  4965
14380  4966
14381  4967
14382  4968
14383  4969
14384  496A
14385  496B
14386  496C
14387  496D
14388  496E
14389  496F
14390  4970
14391  4971
14392  4972
14393  4973
14394  4974
14395  4975
14396  4976
14397  4977
14398  4978
14399  4979
14400  497A
14401  497B
14402  497C
14403  497D
14404  497E
14405  497F
14406  4980
14407  4981
14408  4982
14409  4983
14410  4984
14411  4985
14412  4986
14413  4987
14414  4988
14415  4989
14416  498A
14417  498B
14418  498C
14419  498D
14420  498E
14421  498F
14422  4990
14423  4991
14424  4992
14425  4993
14426  4994
14427  4995
14428  4996
14429  4997
14430  4998
14431  4999
14432  499A
14433  499B
14434  499C
14435  499D
14436  499E
14437  499F
14438  49A0
14439  49A1
14440  49A2
14441  49A3
14442  49A4
14443  49A5
14444  49A6
14445  49A7
14446  49A8
14447  49A9
14448  49AA
14449  49AB
14450  49AC
14451  49AD
14452  49AE
14453  49AF
14454  49B0
14455  49B1
14456  49B2
14457  49B3
14458  49B4
14459  49B5
14460  49B6
14461  49B7
14462  49B8
14463  49B9
14464  49BA
14465  49BB
14466  49BC
14467  49BD
14468  49BE
14469  49BF
14470  49C0
14471  49C1
14472  49C2
14473  49C3
14474  49C4
14475  49C5
14476  49C6
14477  49C7
14478  49C8
14479  49C9
14480  49CA
14481  49CB
14482  49CC
14483  49CD
14484  49CE
14485  49CF
14486  49D0
14487  49D1
14488  49D2
14489  49D3
14490  49D4
14491  49D5
14492  49D6
14493  49D7
14494  49D8
14495  49D9
14496  49DA
14497  49DB
14498  49DC
14499  49DD
14500  49DE
14501  49DF
14502  49E0
14503  49E1
14504  49E2
14505  49E3
14506  49E4
14507  49E5
14508  49E6
14509  49E7
14510  49E8
14511  49E9
14512  49EA
14513  49EB
14514  49EC
14515  49ED
14516  49EE
14517  49EF
14518  49F0
14519  49F1
14520  49F2
14521  49F3
14522  49F4
14523  49F5
14524  49F6
14525  49F7
14526  49F8
14527  49F9
14528  49FA
14529  49FB
14530  49FC
14531  49FD
14532  49FE
14533  49FF
14534  4A00
14535  4A01
14536  4A02
14537  4A03
14538  4A04
14539  4A05
14540  4A06
14541  4A07
14542  4A08
14543  4A09
14544  4A0A
14545  4A0B
14546  4A0C
14547  4A0D
14548  4A0E
14549  4A0F
14550  4A10
14551  4A11
14552  4A12
14553  4A13
14554  4A14
14555  4A15
14556  4A16
14557  4A17
14558  4A18
14559  4A19
14560  4A1A
14561  4A1B
14562  4A1C
14563  4A1D
14564  4A1E
14565  4A1F
14566  4A20
14567  4A21
14568  4A22
14569  4A23
14570  4A24
14571  4A25
14572  4A26
14573  4A27
14574  4A28
14575  4A29
14576  4A2A
14577  4A2B
14578  4A2C
14579  4A2D
14580  4A2E
14581  4A2F
14582  4A30
14583  4A31
14584  4A32
14585  4A33
14586  4A34
14587  4A35
14588  4A36
14589  4A37
14590  4A38
14591  4A39
14592  4A3A
14593  4A3B
14594  4A3C
14595  4A3D
14596  4A3E
14597  4A3F
14598  4A40
14599  4A41
14600  4A42
14601  4A43
14602  4A44
14603  4A45
14604  4A46
14605  4A47
14606  4A48
14607  4A49
14608  4A4A
14609  4A4B
14610  4A4C
14611  4A4D
14612  4A4E
14613  4A4F
14614  4A50
14615  4A51
14616  4A52
14617  4A53
14618  4A54
14619  4A55
14620  4A56
14621  4A57
14622  4A58
14623  4A59
14624  4A5A
14625  4A5B
14626  4A5C
14627  4A5D
14628  4A5E
14629  4A5F
14630  4A60
14631  4A61
14632  4A62
14633  4A63
14634  4A64
14635  4A65
14636  4A66
14637  4A67
14638  4A68
14639  4A69
14640  4A6A
14641  4A6B
14642  4A6C
14643  4A6D
14644  4A6E
14645  4A6F
14646  4A70
14647  4A71
14648  4A72
14649  4A73
14650  4A74
14651  4A75
14652  4A76
14653  4A77
14654  4A78
14655  4A79
14656  4A7A
14657  4A7B
14658  4A7C
14659  4A7D
14660  4A7E
14661  4A7F
14662  4A80
14663  4A81
14664  4A82
14665  4A83
14666  4A84
14667  4A85
14668  4A86
14669  4A87
14670  4A88
14671  4A89
14672  4A8A
14673  4A8B
14674  4A8C
14675  4A8D
14676  4A8E
14677  4A8F
14678  4A90
14679  4A91
14680  4A92
14681  4A93
14682  4A94
14683  4A95
14684  4A96
14685  4A97
14686  4A98
14687  4A99
14688  4A9A
14689  4A9B
14690  4A9C
14691  4A9D
14692  4A9E
14693  4A9F
14694  4AA0
14695  4AA1
14696  4AA2
14697  4AA3
14698  4AA4
14699  4AA5
14700  4AA6
14701  4AA7
14702  4AA8
14703  4AA9
14704  4AAA
14705  4AAB
14706  4AAC
14707  4AAD
14708  4AAE
14709  4AAF
14710  4AB0
14711  4AB1
14712  4AB2
14713  4AB3
14714  4AB4
14715  4AB5
14716  4AB6
14717  4AB7
14718  4AB8
14719  4AB9
14720  4ABA
14721  4ABB
14722  4ABC
14723  4ABD
14724  4ABE
14725  4ABF
14726  4AC0
14727  4AC1
14728  4AC2
14729  4AC3
14730  4AC4
14731  4AC5
14732  4AC6
14733  4AC7
14734  4AC8
14735  4AC9
14736  4ACA
14737  4ACB
14738  4ACC
14739  4ACD
14740  4ACE
14741  4ACF
14742  4AD0
14743  4AD1
14744  4AD2
14745  4AD3
14746  4AD4
14747  4AD5
14748  4AD6
14749  4AD7
14750  4AD8
14751  4AD9
14752  4ADA
14753  4ADB
14754  4ADC
14755  4ADD
14756  4ADE
14757  4ADF
14758  4AE0
14759  4AE1
14760  4AE2
14761  4AE3
14762  4AE4
14763  4AE5
14764  4AE6
14765  4AE7
14766  4AE8
14767  4AE9
14768  4AEA
14769  4AEB
14770  4AEC
14771  4AED
14772  4AEE
14773  4AEF
14774  4AF0
14775  4AF1
14776  4AF2
14777  4AF3
14778  4AF4
14779  4AF5
14780  4AF6
14781  4AF7
14782  4AF8
14783  4AF9
14784  4AFA
14785  4AFB
14786  4AFC
14787  4AFD
14788  4AFE
14789  4AFF
14790  4B00
14791  4B01
14792  4B02
14793  4B03
14794  4B04
14795  4B05
14796  4B06
14797  4B07
14798  4B08
14799  4B09
14800  4B0A
14801  4B0B
14802  4B0C
14803  4B0D
14804  4B0E
14805  4B0F
14806  4B10
14807  4B11
14808  4B12
14809  4B13
14810  4B14
14811  4B15
14812  4B16
14813  4B17
14814  4B18
14815  4B19
14816  4B1A
14817  4B1B
14818  4B1C
14819  4B1D
14820  4B1E
14821  4B1F
14822  4B20
14823  4B21
14824  4B22
14825  4B23
14826  4B24
14827  4B25
14828  4B26
14829  4B27
14830  4B28
14831  4B29
14832  4B2A
14833  4B2B
14834  4B2C
14835  4B2D
14836  4B2E
14837  4B2F
14838  4B30
14839  4B31
14840  4B32
14841  4B33
14842  4B34
14843  4B35
14844  4B36
14845  4B37
14846  4B38
14847  4B39
14848  4B3A
14849  4B3B
14850  4B3C
14851  4B3D
14852  4B3E
14853  4B3F
14854  4B40
14855  4B41
14856  4B42
14857  4B43
14858  4B44
14859  4B45
14860  4B46
14861  4B47
14862  4B48
14863  4B49
14864  4B4A
14865  4B4B
14866  4B4C
14867  4B4D
14868  4B4E
14869  4B4F
14870  4B50
14871  4B51
14872  4B52
14873  4B53
14874  4B54
14875  4B55
14876  4B56
14877  4B57
14878  4B58
14879  4B59
14880  4B5A
14881  4B5B
14882  4B5C
14883  4B5D
14884  4B5E
14885  4B5F
14886  4B60
14887  4B61
14888  4B62
14889  4B63
14890  4B64
14891  4B65
14892  4B66
14893  4B67
14894  4B68
14895  4B69
14896  4B6A
14897  4B6B
14898  4B6C
14899  4B6D
14900  4B6E
14901  4B6F
14902  4B70
14903  4B71
14904  4B72
14905  4B73
14906  4B74
14907  4B75
14908  4B76
14909  4B77
14910  4B78
14911  4B79
14912  4B7A
14913  4B7B
14914  4B7C
14915  4B7D
14916  4B7E
14917  4B7F
14918  4B80
14919  4B81
14920  4B82
14921  4B83
14922  4B84
14923  4B85
14924  4B86
14925  4B87
14926  4B88
14927  4B89
14928  4B8A
14929  4B8B
14930  4B8C
14931  4B8D
14932  4B8E
14933  4B8F
14934  4B90
14935  4B91
14936  4B92
14937  4B93
14938  4B94
14939  4B95
14940  4B96
14941  4B97
14942  4B98
14943  4B99
14944  4B9A
14945  4B9B
14946  4B9C
14947  4B9D
14948  4B9E
14949  4B9F
14950  4BA0
14951  4BA1
14952  4BA2
14953  4BA3
14954  4BA4
14955  4BA5
14956  4BA6
14957  4BA7
14958  4BA8
14959  4BA9
14960  4BAA
14961  4BAB
14962  4BAC
14963  4BAD
14964  4BAE
14965  4BAF
14966  4BB0
14967  4BB1
14968  4BB2
14969  4BB3
14970  4BB4
14971  4BB5
14972  4BB6
14973  4BB7
14974  4BB8
14975  4BB9
14976  4BBA
14977  4BBB
14978  4BBC
14979  4BBD
14980  4BBE
14981  4BBF
14982  4BC0
14983  4BC1
14984  4BC2
14985  4BC3
14986  4BC4
14987  4BC5
14988  4BC6
14989  4BC7
14990  4BC8
14991  4BC9
14992  4BCA
14993  4BCB
14994  4BCC
14995  4BCD
14996  4BCE
14997  4BCF
14998  4BD0
14999  4BD1
15000  4BD2
15001  4BD3
15002  4BD4
15003  4BD5
15004  4BD6
15005  4BD7
15006  4BD8
15007  4BD9
15008  4BDA
15009  4BDB
15010  4BDC
15011  4BDD
15012  4BDE
15013  4BDF
15014  4BE0
15015  4BE1
15016  4BE2
15017  4BE3
15018  4BE4
15019  4BE5
15020  4BE6
15021  4BE7
15022  4BE8
15023  4BE9
15024  4BEA
15025  4BEB
15026  4BEC
15027  4BED
15028  4BEE
15029  4BEF
15030  4BF0
15031  4BF1
15032  4BF2
15033  4BF3
15034  4BF4
15035  4BF5
15036  4BF6
15037  4BF7
15038  4BF8
15039  4BF9
15040  4BFA
15041  4BFB
15042  4BFC
15043  4BFD
15044  4BFE
15045  4BFF
15046  4C00
15047  4C01
15048  4C02
15049  4C03
15050  4C04
15051  4C05
15052  4C06
15053  4C07
15054  4C08
15055  4C09
15056  4C0A
15057  4C0B
15058  4C0C
15059  4C0D
15060  4C0E
15061  4C0F
15062  4C10
15063  4C11
15064  4C12
15065  4C13
15066  4C14
15067  4C15
15068  4C16
15069  4C17
15070  4C18
15071  4C19
15072  4C1A
15073  4C1B
15074  4C1C
15075  4C1D
15076  4C1E
15077  4C1F
15078  4C20
15079  4C21
15080  4C22
15081  4C23
15082  4C24
15083  4C25
15084  4C26
15085  4C27
15086  4C28
15087  4C29
15088  4C2A
15089  4C2B
15090  4C2C
15091  4C2D
15092  4C2E
15093  4C2F
15094  4C30
15095  4C31
15096  4C32
15097  4C33
15098  4C34
15099  4C35
15100  4C36
15101  4C37
15102  4C38
15103  4C39
15104  4C3A
15105  4C3B
15106  4C3C
15107  4C3D
15108  4C3E
15109  4C3F
15110  4C40
15111  4C41
15112  4C42
15113  4C43
15114  4C44
15115  4C45
15116  4C46
15117  4C47
15118  4C48
15119  4C49
15120  4C4A
15121  4C4B
15122  4C4C
15123  4C4D
15124  4C4E
15125  4C4F
15126  4C50
15127  4C51
15128  4C52
15129  4C53
15130  4C54
15131  4C55
15132  4C56
15133  4C57
15134  4C58
15135  4C59
15136  4C5A
15137  4C5B
15138  4C5C
15139  4C5D
15140  4C5E
15141  4C5F
15142  4C60
15143  4C61
15144  4C62
15145  4C63
15146  4C64
15147  4C65
15148  4C66
15149  4C67
15150  4C68
15151  4C69
15152  4C6A
15153  4C6B
15154  4C6C
15155  4C6D
15156  4C6E
15157  4C6F
15158  4C70
15159  4C71
15160  4C72
15161  4C73
15162  4C74
15163  4C75
15164  4C76
15165  4C77
15166  4C78
15167  4C79
15168  4C7A
15169  4C7B
15170  4C7C
15171  4C7D
15172  4C7E
15173  4C7F
15174  4C80
15175  4C81
15176  4C82
15177  4C83
15178  4C84
15179  4C85
15180  4C86
15181  4C87
15182  4C88
15183  4C89
15184  4C8A
15185  4C8B
15186  4C8C
15187  4C8D
15188  4C8E
15189  4C8F
15190  4C90
15191  4C91
15192  4C92
15193  4C93
15194  4C94
15195  4C95
15196  4C96
15197  4C97
15198  4C98
15199  4C99
15200  4C9A
15201  4C9B
15202  4C9C
15203  4C9D
15204  4C9E
15205  4C9F
15206  4CA0
15207  4CA1
15208  4CA2
15209  4CA3
15210  4CA4
15211  4CA5
15212  4CA6
15213  4CA7
15214  4CA8
15215  4CA9
15216  4CAA
15217  4CAB
15218  4CAC
15219  4CAD
15220  4CAE
15221  4CAF
15222  4CB0
15223  4CB1
15224  4CB2
15225  4CB3
15226  4CB4
15227  4CB5
15228  4CB6
15229  4CB7
15230  4CB8
15231  4CB9
15232  4CBA
15233  4CBB
15234  4CBC
15235  4CBD
15236  4CBE
15237  4CBF
15238  4CC0
15239  4CC1
15240  4CC2
15241  4CC3
15242  4CC4
15243  4CC5
15244  4CC6
15245  4CC7
15246  4CC8
15247  4CC9
15248  4CCA
15249  4CCB
15250  4CCC
15251  4CCD
15252  4CCE
15253  4CCF
15254  4CD0
15255  4CD1
15256  4CD2
15257  4CD3
15258  4CD4
15259  4CD5
15260  4CD6
15261  4CD7
15262  4CD8
15263  4CD9
15264  4CDA
15265  4CDB
15266  4CDC
15267  4CDD
15268  4CDE
15269  4CDF
15270  4CE0
15271  4CE1
15272  4CE2
15273  4CE3
15274  4CE4
15275  4CE5
15276  4CE6
15277  4CE7
15278  4CE8
15279  4CE9
15280  4CEA
15281  4CEB
15282  4CEC
15283  4CED
15284  4CEE
15285  4CEF
15286  4CF0
15287  4CF1
15288  4CF2
15289  4CF3
15290  4CF4
15291  4CF5
15292  4CF6
15293  4CF7
15294  4CF8
15295  4CF9
15296  4CFA
15297  4CFB
15298  4CFC
15299  4CFD
15300  4CFE
15301  4CFF
15302  4D00
15303  4D01
15304  4D02
15305  4D03
15306  4D04
15307  4D05
15308  4D06
15309  4D07
15310  4D08
15311  4D09
15312  4D0A
15313  4D0B
15314  4D0C
15315  4D0D
15316  4D0E
15317  4D0F
15318  4D10
15319  4D11
15320  4D12
15321  4D13
15322  4D14
15323  4D15
15324  4D16
15325  4D17
15326  4D18
15327  4D19
15328  4D1A
15329  4D1B
15330  4D1C
15331  4D1D
15332  4D1E
15333  4D1F
15334  4D20
15335  4D21
15336  4D22
15337  4D23
15338  4D24
15339  4D25
15340  4D26
15341  4D27
15342  4D28
15343  4D29
15344  4D2A
15345  4D2B
15346  4D2C
15347  4D2D
15348  4D2E
15349  4D2F
15350  4D30
15351  4D31
15352  4D32
15353  4D33
15354  4D34
15355  4D35
15356  4D36
15357  4D37
15358  4D38
15359  4D39
15360  4D3A
15361  4D3B
15362  4D3C
15363  4D3D
15364  4D3E
15365  4D3F
15366  4D40
15367  4D41
15368  4D42
15369  4D43
15370  4D44
15371  4D45
15372  4D46
15373  4D47
15374  4D48
15375  4D49
15376  4D4A
15377  4D4B
15378  4D4C
15379  4D4D
15380  4D4E
15381  4D4F
15382  4D50
15383  4D51
15384  4D52
15385  4D53
15386  4D54
15387  4D55
15388  4D56
15389  4D57
15390  4D58
15391  4D59
15392  4D5A
15393  4D5B
15394  4D5C
15395  4D5D
15396  4D5E
15397  4D5F
15398  4D60
15399  4D61
15400  4D62
15401  4D63
15402  4D64
15403  4D65
15404  4D66
15405  4D67
15406  4D68
15407  4D69
15408  4D6A
15409  4D6B
15410  4D6C
15411  4D6D
15412  4D6E
15413  4D6F
15414  4D70
15415  4D71
15416  4D72
15417  4D73
15418  4D74
15419  4D75
15420  4D76
15421  4D77
15422  4D78
15423  4D79
15424  4D7A
15425  4D7B
15426  4D7C
15427  4D7D
15428  4D7E
15429  4D7F
15430  4D80
15431  4D81
15432  4D82
15433  4D83
15434  4D84
15435  4D85
15436  4D86
15437  4D87
15438  4D88
15439  4D89
15440  4D8A
15441  4D8B
15442  4D8C
15443  4D8D
15444  4D8E
15445  4D8F
15446  4D90
15447  4D91
15448  4D92
15449  4D93
15450  4D94
15451  4D95
15452  4D96
15453  4D97
15454  4D98
15455  4D99
15456  4D9A
15457  4D9B
15458  4D9C
15459  4D9D
15460  4D9E
15461  4D9F
15462  4DA0
15463  4DA1
15464  4DA2
15465  4DA3
15466  4DA4
15467  4DA5
15468  4DA6
15469  4DA7
15470  4DA8
15471  4DA9
15472  4DAA
15473  4DAB
15474  4DAC
15475  4DAD
15476  4DAE
15477  4DAF
15478  4DB0
15479  4DB1
15480  4DB2
15481  4DB3
15482  4DB4
15483  4DB5
15484  4DB6
15485  4DB7
15486  4DB8
15487  4DB9
15488  4DBA
15489  4DBB
15490  4DBC
15491  4DBD
15492  4DBE
15493  4DBF
15494  4DC0
15495  4DC1
15496  4DC2
15497  4DC3
15498  4DC4
15499  4DC5
15500  4DC6
15501  4DC7
15502  4DC8
15503  4DC9
15504  4DCA
15505  4DCB
15506  4DCC
15507  4DCD
15508  4DCE
15509  4DCF
15510  4DD0
15511  4DD1
15512  4DD2
15513  4DD3
15514  4DD4
15515  4DD5
15516  4DD6
15517  4DD7
15518  4DD8
15519  4DD9
15520  4DDA
15521  4DDB
15522  4DDC
15523  4DDD
15524  4DDE
15525  4DDF
15526  4DE0
15527  4DE1
15528  4DE2
15529  4DE3
15530  4DE4
15531  4DE5
15532  4DE6
15533  4DE7
15534  4DE8
15535  4DE9
15536  4DEA
15537  4DEB
15538  4DEC
15539  4DED
15540  4DEE
15541  4DEF
15542  4DF0
15543  4DF1
15544  4DF2
15545  4DF3
15546  4DF4
15547  4DF5
15548  4DF6
15549  4DF7
15550  4DF8
15551  4DF9
15552  4DFA
15553  4DFB
15554  4DFC
15555  4DFD
15556  4DFE
15557  4DFF
15558  4E00
15559  4E01
15560  4E02
15561  4E03
15562  4E04
15563  4E05
15564  4E06
15565  4E07
15566  4E08
15567  4E09
15568  4E0A
15569  4E0B
15570  4E0C
15571  4E0D
15572  4E0E
15573  4E0F
15574  4E10
15575  4E11
015576  000566        
015577  000567  var hFonts[54] ;
015578  000568  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15579  2778
15580  2779
15581  277A
15582  277B
15583  277C
15584  277D
15585  277E
15586  277F
15587  2780
15588  2781
15589  2782
15590  2783
15591  2784
15592  2785
15593  2786
15594  2787
15595  2788
15596  2789
15597  278A
15598  278B
15599  278C
15600  278D
15601  278E
15602  278F
15603  2790
15604  2791
15605  2792
15606  2793
15607  2794
15608  2795
15609  2796
15610  2797
15611  2798
15612  2799
15613  279A
15614  279B
15615  279C
15616  279D
15617  279E
15618  279F
15619  27A0
15620  27A1
15621  27A2
15622  27A3
15623  27A4
15624  27A5
15625  27A6
15626  27A7
15627  27A8
15628  27A9
15629  27AA
15630  27AB
15631  27AC
15632  27AD
15633  27AE
15634  27AF
15635  27B0
15636  27B1
15637  27B2
15638  27B3
15639  27B4
15640  27B5
15641  27B6
15642  27B7
15643  27B8
15644  27B9
15645  27BA
15646  27BB
15647  27BC
15648  27BD
15649  27BE
15650  27BF
15651  27C0
15652  27C1
15653  27C2
15654  27C3
15655  27C4
15656  27C5
15657  27C6
15658  27C7
15659  27C8
15660  27C9
15661  27CA
15662  27CB
15663  27CC
15664  27CD
15665  27CE
15666  27CF
15667  27D0
15668  27D1
15669  27D2
15670  27D3
15671  27D4
15672  27D5
15673  27D6
15674  27D7
15675  27D8
15676  27D9
15677  27DA
15678  27DB
15679  27DC
15680  27DD
15681  27DE
15682  27DF
15683  27E0
15684  27E1
15685  27E2
15686  27E3
015687  000569  // Start P2.inc
015688  000570  var oObjects[MaxTotObjects+1] ;                 // address of objects
015689  000571  var CurrentForm ;
015690  000572  var TouchXpos, TouchYpos ;
015691  000573  var InputType, TouchState, CurInputData, pInputIndex ;
015692  000574  var comRX[40], cmd[CMDLenMAX] ;
015693  000575        
015694  000576  var InputCS, OutputCS ;
015695  000577        
015696  000578        
015697  000579        
015698  000580  func seroutCS(var op)
015699  000581      serout(op) ;
015700  000582      OutputCS ^= op ;
015701  000583  endfunc
015702  000584        
015703  000585  func nak0()
015704  000586      serout(NAK) ;
015705  000587      InputCS := 0 ;
015706  000588  endfunc
015707  000589        
015708  000590  func seroutOcs()
015709  000591      serout(OutputCS) ;
015710  000592      OutputCS := 0 ;
015711  000593  endfunc
015712  000594        
015713  000595  func SendReport(var id, var objt, var objn, var val)
015714  000596      seroutCS(id) ;
015715  000597      seroutCS(objt) ;
015716  000598      seroutCS(objn) ;
015717  000599      seroutCS(val >> 8) ; // first 8 bits
015718  000600      seroutCS(val) ;
015719  000601      seroutOcs() ;
015720  000602  endfunc
015721  000603        
015722  000604        
015723  000605  func ReadObject(var ObjectType, var ObjectIdx)
015724  000606      var j, k, Objects ;
015725  000607      Objects := *(oObjects+ObjectType) ;
015726  000608        
015727  000609      j := 2 + ObjectIdx * 2 + Objects ;
015728  000610       if (ObjectType == tForm)
015729  000611          k := CurrentForm ;
015730  000612      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015731  000613          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015732  000614      else if (ObjectType == tStrings)
015733  000615          k := stringsCV[ObjectIdx];
015734  000616          else
015735  000617          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015736  000618          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015737  000619                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015738  000620      endif
015739  000621      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015740  000622  endfunc
015741  000623        
015742  000624        
015743  000625  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015744  000626      var i, j, k, Objects ;
015745  000627      ObjectType &= 0x3f ;
015746  000628      if (ObjectType == tForm)
015747  000629          ActivateForm(ObjectIdx) ;
015748  000630      else
015749  000631          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015750  000632          i := *(Objects) ;
015751  000633          switch (ObjectType)
015752  000634              case tWinButton :
015753  000635                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015754  000636                  break ;
015755  000637              case tUserButton :
015756  000638                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015757  000639                  break ;
015758  000640              default : j := -1 ;
015759  000641          endswitch
015760  000642          if (j != -1)
015761  000643              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015762  000644              NewVal := NewVal << 1 ;
015763  000645              if (OVF())      // button group index change
015764  000646                  if (*(j+InputData+Ofs_IPD_P1))
015765  000647                      k &= 1 ;    // mask off old group index for momentary
015766  000648                  else
015767  000649                      k &= 3 ;    // mask off old group index for toggle
015768  000650                  endif
015769  000651              else            // normal set
015770  000652                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015771  000653                  k &= 0xfffc ;    // retain only group index for state set
015772  000654              endif
015773  000655              NewVal |= k ;
015774  000656          endif
015775  000657           if (ObjectType == tLeddigits)
015776  000658              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015777  000659              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015778  000660          else if (ObjectType == tStrings)
015779  000661              PrintStrings(ObjectIdx, NewVal, 0);
015780  000662          else
015781  000663              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015782  000664              img_Show(hndl, i) ; // will only display if form is current
015783  000665          endif
015784  000666      endif
015785  000667  endfunc
015786  000668        
015787  000669  func TurnOffButtons(var group)
015788  000670      var j, k, l;
015789  000671      for (j := 0; j < nInputs; j++)
015790  000672          k := j*IPDatasize ;
015791  000673          if (*(InputData+k+Ofs_IPD_P2) == group)
015792  000674              l := -1 ;
015793  000675               if (*(InputData+k) == tWinButton)
015794  000676                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015795  000677                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015796  000678                  img_Show(hndl, l);      // only shows on current form
015797  000679              else if (*(InputData+k) == tUserButton)
015798  000680                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015799  000681                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015800  000682                  img_Show(hndl, l);      // only shows on current form
015801  000683              endif
015802  000684          endif
015803  000685      next
015804  000686  endfunc
015805  000687        
015806  000688        
015807  000689  // WARNING, this code will crash if newval exceeds maximum displayable number
015808  000690  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015809  000691      var i, j, k, l, lb, newval ;
015810  000692      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015811  000693      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015812  000694      i := -1 ;
015813  000695      j := *(typeptr) ;
015814  000696      repeat
015815  000697          typeptr += 2 ;
015816  000698          i++ ;
015817  000699          until (*(typeptr) == imgidx);
015818  000700      j := setptr + i*10 ;
015819  000701        
015820  000702      imgidx++ ;
015821  000703      l := 1 ;
015822  000704      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015823  000705          l *= 10 ;
015824  000706      next
015825  000707      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015826  000708      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015827  000709          k := newval / l ;
015828  000710          newval -= k * l ;
015829  000711          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015830  000712              if (k == 0)
015831  000713                  k := 10 ;
015832  000714              else
015833  000715                  lb := 0 ;
015834  000716              endif
015835  000717          endif
015836  000718          l /= 10 ;
015837  000719          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015838  000720          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015839  000721          img_Show(hndl, imgidx);
015840  000722      next
015841  000723  endfunc
015842  000724        
015843  000725        
015844  000726  func ActivateForm(var newform)
015845  000727      var i, j, *p ;
015846  000728        
015847  000729      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015848  000730          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015849  000731              if (img_GetWord(hndl, i, IMAGE_TAG))
015850  000732                  img_Disable(hndl,i) ;
015851  000733              endif
015852  000734          next
015853  000735      endif
015854  000736      CurrentForm := newform ;
015855  000737      // display newform image or clear to image color
015856  000738      if (FormBGcolors[CurrentForm] != ColorBGimage)
015857  000739          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015858  000740          gfx_Cls() ;
015859  000741          DoGFXObjects() ;                                    // display GFX 'widgets'
015860  000742      endif
015861  000743        
015862  000744      // enable inputs
015863  000745      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015864  000746          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015865  000747          if (j)
015866  000748              j-- ;
015867  000749              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015868  000750              //if (j != tKeyboard)
015869  000751              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015870  000752                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015871  000753              endif
015872  000754              img_Show(hndl,i) ; // show initialy, if required
015873  000755              if (j == tForm)
015874  000756                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015875  000757              else if (j == tLeddigits)
015876  000758                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015877  000759              endif
015878  000760          endif
015879  000761      next
015880  000762      for (i := 0; i < nStrings; i++)
015881  000763          if (stringsCV[i] != -1)
015882  000764              WriteObject(tStrings, i, stringsCV[i]) ;
015883  000765          endif
015884  000766      next
015885  000767        
015886  000768  endfunc
015887  000769        
015888  000770  func UpdateObjects(var newval)
015889  000771      var IPidx, otherOBJ ;
015890  000772      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015891  000773        
015892  000774          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015893  000775              img_Show(hndl, *(pInputIndex));      // only shows on current form
015894  000776          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015895  000777              if (*(CurInputData+Ofs_IPD_P1))
015896  000778                  newval &= 1;
015897  000779              else
015898  000780                  newval &= 3;
015899  000781              endif
015900  000782              if (newval > 1) newval := 1;
015901  000783          endif
015902  000784          IPidx := *(CurInputData+TouchState) ;
015903  000785          while(IPidx != 0)
015904  000786              otherOBJ := IPidx + InputData;
015905  000787              if (*(otherOBJ) == OT_REPORT)
015906  000788          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015907  000789              else if (*(otherOBJ) == OT_MAGIC)
015908  000790                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015909  000791                  IPidx(newval) ;
015910  000792              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015911  000793                  if (*(otherOBJ) == OT_ACTIVATE)
015912  000794                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015913  000795                      InputType := tForm ;
015914  000796                  else if (*(otherOBJ) == OT_SETCONST)
015915  000797                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015916  000798                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015917  000799                  else if (*(otherOBJ) == OT_SETANOTHER)
015918  000800                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015919  000801                  else if (*(otherOBJ) == OT_PREVFRAME)
015920  000802                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015921  000803                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015922  000804                      endif
015923  000805                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015924  000806                  else if (*(otherOBJ) == OT_NEXTFRAME)
015925  000807                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015926  000808                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015927  000809                      endif
015928  000810                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015929  000811                  else if (*(otherOBJ) == OT_PREVSTRING)
015930  000812                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015931  000813                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015932  000814                      endif
015933  000815                  else if (*(otherOBJ) == OT_NEXTSTRING)
015934  000816                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015935  000817                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015936  000818                      endif
015937  000819                  endif
015938  000820              endif
015939  000821              IPidx := *(otherOBJ+TouchState) ;
015940  000822          wend
015941  000823      endif
015942  000824  endfunc
015943  000825        
015944  000826  // End P2.inc
015945  000827  func DoGFXObjects()
015946  000828  endfunc
015947  000829        
015948  000830  // Start P3.inc
015949  000831  func main()
015950  000832      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015951  000833        
015952  000834      putstr("Mounting...\n");
015953  000835      if (!(file_Mount()))
015954  000836          while(!(file_Mount()))
015955  000837              putstr("Drive not mounted...");
015956  000838              pause(200);
015957  000839              gfx_Cls();
015958  000840              pause(200);
015959  000841          wend
015960  000842      endif
015961  000843  //    gfx_MoveTo(0, 0);
015962  000844  //    print(mem_Heap()," ") ;
015963  000845  //    gfx_TransparentColour(0x0020);
015964  000846  //    gfx_Transparency(ON);
015965  000847        
015966  000848      gfx_ScreenMode(LANDSCAPE) ;
015967  000849        
015968  000850      // open image control
015969  000851      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015970  000852        
015971  000853      // init 'constants'
015972  000854  // End P3.inc
015973  000855        
015974  000856      oObjects[tDipSwitch] := oDipSwitchs ;
015975  000857      oObjects[tKnob] := oKnobs ;
015976  000858      oObjects[tRockerSwitch] := oRockerSwitchs ;
015977  000859      oObjects[tRotarySwitch] := oRotarySwitchs ;
015978  000860      oObjects[tGSlider] := oGSliders ;
015979  000861      oObjects[tTrackbar] := oTrackbars ;
015980  000862      oObjects[tWinButton] := oWinButtons ;
015981  000863      oObjects[tAngularmeter] := oAngularmeters ;
015982  000864      oObjects[tCoolgauge] := oCoolgauges ;
015983  000865      oObjects[tCustomdigits] := oCustomdigitss ;
015984  000866      oObjects[tForm] := oForms ;
015985  000867      oObjects[tGauge] := oGauges ;
015986  000868      oObjects[tImage] := oImages ;
015987  000869      oObjects[tKeyboard] := oKeyboards ;
015988  000870      oObjects[tLed] := oLeds ;
015989  000871      oObjects[tLeddigits] := oLeddigitss ;
015990  000872      oObjects[tMeter] := oMeters ;
015991  000873      oObjects[tStrings] := oStringss ;
015992  000874      oObjects[tThermometer] := oThermometers ;
015993  000875      oObjects[tUserled] := oUserleds ;
015994  000876      oObjects[tVideo] := oVideos ;
015995  000877      oObjects[tStaticText] := oStaticTexts ;
015996  000878      oObjects[tSounds] := oSoundss ;
015997  000879      oObjects[tTimer] := oTimers ;
015998  000880      oObjects[tSpectrum] := oSpectrums ;
015999  000881      oObjects[tTank] := oTanks ;
016000  000882      oObjects[tUserImages] := oUserImagess ;
016001  000883      oObjects[tPinOutput] := oPinOutputs ;
016002  000884      oObjects[tPinInput] := oPinInputs ;
016003  000885      oObjects[t4Dbutton] := o4Dbuttons ;
016004  000886      oObjects[tAniButton] := oAniButtons ;
016005  000887      oObjects[tColorPicker] := oColorPickers ;
016006  000888      oObjects[tUserButton] := oUserButtons ;
016007  000889      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
016008  000890      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
016009  000891      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
016010  000892      hFonts[3] := FONT3 ;
016011  000893      hFonts[4] := FONT3 ;
016012  000894      hFonts[5] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
016013  000895      hFonts[6] := FONT3 ;
016014  000896      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
016015  000897      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
016016  000898      hFonts[13] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
016017  000899      hFonts[14] := FONT3 ;
016018  000900      hFonts[15] := FONT3 ;
016019  000901      hFonts[16] := FONT3 ;
016020  000902      hFonts[24] := FONT3 ;
016021  000903      hFonts[25] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
016022  000904      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
016023  000905      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
016024  000906      hFonts[49] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
016025  000907      hFonts[50] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
016026  000908      hFonts[51] := FONT3 ;
016027  000909      hFonts[52] := FONT3 ;
016028  000910      hFonts[7] := hFonts[37] ;
016029  000911      hFonts[8] := hFonts[37] ;
016030  000912      hFonts[9] := hFonts[0] ;
016031  000913      hFonts[19] := hFonts[11] ;
016032  000914      hFonts[26] := hFonts[25] ;
016033  000915      hFonts[27] := hFonts[25] ;
016034  000916      hFonts[29] := hFonts[11] ;
016035  000917      hFonts[30] := hFonts[11] ;
016036  000918      hFonts[32] := hFonts[31] ;
016037  000919      hFonts[34] := hFonts[0] ;
016038  000920      hFonts[36] := hFonts[0] ;
016039  000921      hFonts[38] := hFonts[37] ;
016040  000922      hFonts[39] := hFonts[37] ;
016041  000923      hFonts[40] := hFonts[0] ;
016042  000924      hFonts[41] := hFonts[0] ;
016043  000925      hFonts[42] := hFonts[0] ;
016044  000926      hFonts[43] := hFonts[37] ;
016045  000927      hFonts[44] := hFonts[37] ;
016046  000928      hFonts[45] := hFonts[37] ;
016047  000929      hFonts[46] := hFonts[13] ;
016048  000930      hFonts[47] := hFonts[13] ;
016049  000931      hFonts[48] := hFonts[13] ;
016050  000932      hFonts[53] := hFonts[50] ;
016051  000933  // Start P4.inc
016052  000934      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
016053  000935      // init comms
016054  000936      com_Init(comRX,CMDLenMAX,0);
016055  000937      com_SetBaud(COM0,19886);
016056  000938      com_TXbuffer(comTX, 100, 0);
016057  000939      snd_BufSize(2) ;
016058  000940      // tag 'real' objects
016059  000941      for (i := 0; i <= MaxTotObjects; i++)
016060  000942          if (   (i != tSounds)
016061  000943              && (i != tTimer)
016062  000944              && (i != tPinOutput)
016063  000945              && (i != tPinInput) )
016064  000946              TouchXpos := oObjects[i] ;
016065  000947              TouchYpos := *(TouchXpos) ;
016066  000948              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
016067  000949                  oldn := *(TouchXpos+ImageTouched*2) ;
016068  000950                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
016069  000951                  if (oldn != -1)
016070  000952                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
016071  000953                      img_Disable(hndl, oldn) ;
016072  000954                  endif
016073  000955              next
016074  000956          endif
016075  000957      next
016076  000958        
016077  000959      // display initial form
016078  000960      CurrentForm := -1 ;
016079  000961      ActivateForm(0) ; // need to change this according to first actual form
016080  000962        
016081  000963  // End P4.inc
016082  000964  // Start P5.inc
016083  000965      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016084  000966      oldn := -1 ;
016085  000967      repeat
016086  000968        
016087  000969          // check comms for command, how to NAK invalid command
016088  000970          if (com_Count() != 0)
016089  000971              i := serin() ;
016090  000972              InputCS ^= i ;               // update checksum
016091  000973              if (   (cmdi > 2)
016092  000974                  && (cmd[0] == WRITE_STRU) )
016093  000975                  j := (cmdi-1) >> 1 + 2 ;
016094  000976                  if (j == CMDLenMAX)    // max length exceeded
016095  000977                      nak0() ;
016096  000978                      cmdi := -1 ;
016097  000979                  else if (cmdi & 1)
016098  000980                      cmd[j] := i ;
016099  000981                      if (cmd[2] == 0)    // if string complete
016100  000982                          if (InputCS)
016101  000983                              nak0() ;
016102  000984                          else
016103  000985                              if (cmd[0] == WRITE_STRU)
016104  000986                              cmd[j] := 0 ;                     // terminate it
016105  000987                              PrintStrings(cmd[1], &cmd[3], 1) ;
016106  000988                              serout(ACK) ;
016107  000989                              else
016108  000990                              endif
016109  000991                          endif
016110  000992                          cmdi := -1 ;
016111  000993                      endif
016112  000994                  else
016113  000995                      cmd[j] := cmd[j] << 8 + i ;
016114  000996                      cmd[2]-- ;          // dec length
016115  000997                  endif
016116  000998                  cmdi++ ;
016117  000999              else // not unicode string
016118  001000                  cmd[cmdi++] := i ;
016119  001001                   if (cmd[0] == WRITE_STR)                  // Ansi String
016120  001002                      if (cmdi == CMDLenMAX)      // max length exceeded
016121  001003                          nak0() ;
016122  001004                          cmdi := 0 ;
016123  001005                      else if (cmdi > 2)
016124  001006                          if (cmd[2] == -1)
016125  001007                              if (InputCS)
016126  001008                                  nak0() ;
016127  001009                              else
016128  001010                                  if (cmd[0] == WRITE_STR)
016129  001011                                  cmd[cmdi-1] := 0 ;                     // terminate it
016130  001012                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016131  001013                                  serout(ACK) ;
016132  001014                                  else
016133  001015                                  endif
016134  001016                              endif
016135  001017                              cmdi := 0 ;
016136  001018                          else
016137  001019                              cmd[2]-- ;          // dec length
016138  001020                          endif
016139  001021                      endif
016140  001022                  else if (   (cmd[0] == READ_OBJ)
016141  001023                           && (cmdi == 4)         )
016142  001024                      if (InputCS)
016143  001025                          nak0() ;
016144  001026                      else
016145  001027                          ReadObject(cmd[1], cmd[2]) ;
016146  001028                      endif
016147  001029                      cmdi := 0 ;
016148  001030                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016149  001031                           && (cmdi == 6)          )
016150  001032                      if (InputCS)
016151  001033                          nak0() ;
016152  001034                      else
016153  001035                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016154  001036                          serout(ACK) ;
016155  001037                      endif
016156  001038                      cmdi := 0 ;
016157  001039                  else if (   (cmd[0] == WRITE_CONTRAST)
016158  001040                           && (cmdi == 3)         )
016159  001041                      if (InputCS)
016160  001042                          nak0() ;
016161  001043                      else
016162  001044                          gfx_Contrast(cmd[1]) ;
016163  001045                          serout(ACK) ;
016164  001046                      endif
016165  001047                      cmdi := 0 ;
016166  001048                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016167  001049                      nak0() ;
016168  001050                      cmdi := 0 ;
016169  001051                  endif
016170  001052              endif   // not unicode string
016171  001053          endif   // a character is available
016172  001054        
016173  001055        
016174  001056      // touch code processing
016175  001057        
016176  001058          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016177  001059          ImageTouched := img_Touched(hndl,-1) ;
016178  001060          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016179  001061              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016180  001062                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016181  001063              endif
016182  001064              if (TouchStatus != TOUCH_RELEASED)        // if not released
016183  001065                  if (oldn != -1)
016184  001066                      ImageTouched := oldn ;
016185  001067                  else
016186  001068                      if (oldn != ImageTouched)
016187  001069                  oldn := ImageTouched ;
016188  001070                          TouchStatus := TOUCH_PRESSED ;
016189  001071                      endif
016190  001072                  endif
016191  001073                  TouchXpos  := touch_Get(TOUCH_GETX);
016192  001074                  TouchYpos  := touch_Get(TOUCH_GETY);
016193  001075                  TouchState := Ofs_IPD_DOWN ;
016194  001076              else
016195  001077                  ImageTouched := oldn ;                     // simulate release of what we touched
016196  001078                  oldn := -1 ;                    // prevent double release
016197  001079                  TouchState := Ofs_IPD_RELEASE ;
016198  001080              endif
016199  001081              if (ImageTouched != -1)
016200  001082                          CurInputData := InputControls[ImageTouched] + InputData;
016201  001083                          InputType := *(CurInputData) ;
016202  001084                          i := InputType ;
016203  001085                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016204  001086                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016205  001087              endif
016206  001088          endif
016207  001089   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016208  001090        
016209  001091          sys_EventsResume() ;
016210  001092      forever
016211  001093        
016212  001094  cDipswitch:
016213  001095        
016214  001096  cKnob:
016215  001097        
016216  001098  cRockerswitch:
016217  001099        
016218  001100  cRotaryswitch:
016219  001101        
016220  001102  cSlider:
016221  001103  cTrackbar:
016222  001104        
016223  001105  c4DButton:
016224  001106  cUserButton:
016225  001107      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016226  001108      goto gbutton ;
016227  001109  cWinbutton:
016228  001110      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016229  001111  gbutton:
016230  001112      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016231  001113      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016232  001114          if (TouchStatus == TOUCH_RELEASED)
016233  001115              i &= 0xfffe ;
016234  001116              TouchState == Ofs_IPD_DOWN ;
016235  001117          else
016236  001118              i |= 1 ;
016237  001119              TouchState == Ofs_IPD_RELEASE ;
016238  001120          endif
016239  001121      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016240  001122          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016241  001123              if ((i & 3) == 3)
016242  001124                  i &= 0xfffc ;
016243  001125              else
016244  001126                  i++ ;
016245  001127              endif
016246  001128          else
016247  001129              i |= 1 ;                                      // make down regardless of current state
016248  001130          endif
016249  001131      else                        // group action, up all other buttons on touch press, reports 0 for button down
016250  001132          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016251  001133              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016252  001134          endif
016253  001135          i := (i & 0xfffc) | 2 ;
016254  001136      endif
016255  001137        
016256  001138      UpdateObjects(i) ;
016257  001139  endsub ;
016258  001140        
016259  001141  cAniButton:
016260  001142        
016261  001143  cColorPicker:
016262  001144        
016263  001145  endfunc
016264  001146  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 791 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 727 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13162  0x0000336a (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 114)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 12)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12530  0x000030f2 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 39)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 27)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9873  0x00002691FormBGcolors                        9873  0x00002691 (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          97  0x00000061FormEndIndex                          97  0x00000061 (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 204)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              110  0x0000006e (const ??? 0)  (usage 3)
iForm11                               97  0x00000061 (const ??? 0)  (usage 3)
iForm12                               46  0x0000002e (const ??? 0)  (usage 3)
iForm14                               53  0x00000035 (const ??? 0)  (usage 3)
iForm16                              172  0x000000ac (const ??? 0)  (usage 3)
iForm17                              177  0x000000b1 (const ??? 0)  (usage 3)
iForm18                              180  0x000000b4 (const ??? 0)  (usage 3)
iForm19                               66  0x00000042 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               70  0x00000046 (const ??? 0)  (usage 3)
iForm21                               74  0x0000004a (const ??? 0)  (usage 3)
iForm23                               84  0x00000054 (const ??? 0)  (usage 3)
iForm24                               88  0x00000058 (const ??? 0)  (usage 3)
iForm25                              183  0x000000b7 (const ??? 0)  (usage 3)
iForm26                               92  0x0000005c (const ??? 0)  (usage 3)
iForm27                               99  0x00000063 (const ??? 0)  (usage 3)
iForm28                              120  0x00000078 (const ??? 0)  (usage 3)
iForm29                              127  0x0000007f (const ??? 0)  (usage 3)
iForm30                              136  0x00000088 (const ??? 0)  (usage 3)
iForm31                              140  0x0000008c (const ??? 0)  (usage 3)
iForm32                              144  0x00000090 (const ??? 0)  (usage 3)
iForm33                              148  0x00000094 (const ??? 0)  (usage 3)
iForm34                              159  0x0000009f (const ??? 0)  (usage 3)
iForm35                              163  0x000000a3 (const ??? 0)  (usage 3)
iForm38                              187  0x000000bb (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              198  0x000000c6 (const ??? 0)  (usage 3)
iForm41                              224  0x000000e0 (const ??? 0)  (usage 3)
iForm5                                15  0x0000000f (const ??? 0)  (usage 3)
iForm6                                18  0x00000012 (const ??? 0)  (usage 3)
iForm7                               167  0x000000a7 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        187  0x000000bbInputControls                        187  0x000000bb (mem) word[242] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            671  0x0000029fInputData                            671  0x0000029f (mem) word[3685] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          89  0x00000059 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext10                         57  0x00000039 (const ??? 0)  (usage 3)
iStatictext11                        228  0x000000e4 (const ??? 0)  (usage 3)
iStatictext12                        240  0x000000f0 (const ??? 0)  (usage 3)
iStatictext13                        242  0x000000f2 (const ??? 0)  (usage 3)
iStatictext19                         59  0x0000003b (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext3                          96  0x00000060 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext5                         176  0x000000b0 (const ??? 0)  (usage 3)
iStatictext6                         199  0x000000c7 (const ??? 0)  (usage 3)
iStatictext7                         170  0x000000aa (const ??? 0)  (usage 3)
iStatictext8                          76  0x0000004c (const ??? 0)  (usage 3)
iStatictext9                          58  0x0000003a (const ??? 0)  (usage 3)
iStrings0                           8041  0x00001f69iStrings0                           8041  0x00001f69 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           8067  0x00001f83iStrings1                           8067  0x00001f83 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8301  0x0000206diStrings11                          8301  0x0000206d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8327  0x00002087iStrings12                          8327  0x00002087 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8353  0x000020a1iStrings13                          8353  0x000020a1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8379  0x000020bbiStrings14                          8379  0x000020bb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8405  0x000020d5iStrings15                          8405  0x000020d5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8431  0x000020efiStrings16                          8431  0x000020ef (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8457  0x00002109iStrings19                          8457  0x00002109 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           8093  0x00001f9diStrings2                           8093  0x00001f9d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8483  0x00002123iStrings24                          8483  0x00002123 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8509  0x0000213diStrings25                          8509  0x0000213d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8535  0x00002157iStrings26                          8535  0x00002157 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8561  0x00002171iStrings27                          8561  0x00002171 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8587  0x0000218biStrings29                          8587  0x0000218b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           8119  0x00001fb7iStrings3                           8119  0x00001fb7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8613  0x000021a5iStrings30                          8613  0x000021a5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8639  0x000021bfiStrings31                          8639  0x000021bf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8665  0x000021d9iStrings32                          8665  0x000021d9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8691  0x000021f3iStrings34                          8691  0x000021f3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8717  0x0000220diStrings36                          8717  0x0000220d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8743  0x00002227iStrings37                          8743  0x00002227 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8769  0x00002241iStrings38                          8769  0x00002241 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8795  0x0000225biStrings39                          8795  0x0000225b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           8145  0x00001fd1iStrings4                           8145  0x00001fd1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8821  0x00002275iStrings40                          8821  0x00002275 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8847  0x0000228fiStrings41                          8847  0x0000228f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8873  0x000022a9iStrings42                          8873  0x000022a9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8899  0x000022c3iStrings43                          8899  0x000022c3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8925  0x000022ddiStrings44                          8925  0x000022dd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8951  0x000022f7iStrings45                          8951  0x000022f7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8977  0x00002311iStrings46                          8977  0x00002311 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          9003  0x0000232biStrings47                          9003  0x0000232b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          9029  0x00002345iStrings48                          9029  0x00002345 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          9055  0x0000235fiStrings49                          9055  0x0000235f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           8171  0x00001febiStrings5                           8171  0x00001feb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9081  0x00002379iStrings50                          9081  0x00002379 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9107  0x00002393iStrings51                          9107  0x00002393 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9133  0x000023adiStrings52                          9133  0x000023ad (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9159  0x000023c7iStrings53                          9159  0x000023c7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           8197  0x00002005iStrings6                           8197  0x00002005 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           8223  0x0000201fiStrings7                           8223  0x0000201f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           8249  0x00002039iStrings8                           8249  0x00002039 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8275  0x00002053iStrings9                           8275  0x00002053 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton100                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton101                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton102                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton103                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton104                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton105                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton106                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton107                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton108                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton109                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton11                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton110                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton111                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton112                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton113                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton114                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton115                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton116                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton117                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton118                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton119                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton12                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton120                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton121                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton122                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton123                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton124                       195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton125                       196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton126                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton127                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton128                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton129                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton13                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton130                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton131                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton132                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton133                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton134                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton135                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton136                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton137                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton138                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton139                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton141                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton142                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton143                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton144                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton145                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton146                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton147                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton148                       227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton149                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton151                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton152                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton153                       235  0x000000eb (const ??? 0)  (usage 3)
iUserbutton154                       236  0x000000ec (const ??? 0)  (usage 3)
iUserbutton155                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton156                       238  0x000000ee (const ??? 0)  (usage 3)
iUserbutton157                       239  0x000000ef (const ??? 0)  (usage 3)
iUserbutton158                       241  0x000000f1 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton17                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton21                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton22                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton23                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton24                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton25                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton26                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton27                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton28                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton29                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton31                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton32                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton33                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton34                        229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton35                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton36                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton37                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton38                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton39                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton41                        173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton42                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton43                        178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton44                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton45                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton46                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton47                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton48                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton49                        169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton52                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton53                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton54                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton55                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton56                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton57                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton58                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton59                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton65                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton66                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton67                        225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton68                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton69                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton71                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton72                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton73                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton74                        230  0x000000e6 (const ??? 0)  (usage 3)
iUserbutton75                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton76                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton77                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton78                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton79                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton81                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton82                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton83                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton84                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton85                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton86                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton87                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton88                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton89                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton91                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton92                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton93                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton94                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton95                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton96                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton97                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton98                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton99                        107  0x0000006b (const ??? 0)  (usage 3)
iUserimages0                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages1                          69  0x00000045 (const ??? 0)  (usage 3)
iUserimages10                         95  0x0000005f (const ??? 0)  (usage 3)
iUserimages11                        226  0x000000e2 (const ??? 0)  (usage 3)
iUserimages12                        175  0x000000af (const ??? 0)  (usage 3)
iUserimages13                         77  0x0000004d (const ??? 0)  (usage 3)
iUserimages14                        125  0x0000007d (const ??? 0)  (usage 3)
iUserimages15                        126  0x0000007e (const ??? 0)  (usage 3)
iUserimages16                         91  0x0000005b (const ??? 0)  (usage 3)
iUserimages17                        231  0x000000e7 (const ??? 0)  (usage 3)
iUserimages18                        232  0x000000e8 (const ??? 0)  (usage 3)
iUserimages2                          98  0x00000062 (const ??? 0)  (usage 3)
iUserimages3                         137  0x00000089 (const ??? 0)  (usage 3)
iUserimages4                         142  0x0000008e (const ??? 0)  (usage 3)
iUserimages5                         146  0x00000092 (const ??? 0)  (usage 3)
iUserimages6                         168  0x000000a8 (const ??? 0)  (usage 3)
iUserimages7                         139  0x0000008b (const ??? 0)  (usage 3)
iUserimages8                         143  0x0000008f (const ??? 0)  (usage 3)
iUserimages9                         147  0x00000093 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9963  0x000026ebkKeyboardKeystrokes                 9963  0x000026eb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13508  0x000034c4 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10529  0x00002921 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14630  0x00003926 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              335  0x0000014f (const dword)  (usage 3)
nObjects                             243  0x000000f3 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9541  0x00002545o4Dbuttons                          9541  0x00002545 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9217  0x00002401oAngularmeters                      9217  0x00002401 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9543  0x00002547oAniButtons                         9543  0x00002547 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9545  0x00002549oColorPickers                       9545  0x00002549 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9219  0x00002403oCoolgauges                         9219  0x00002403 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9221  0x00002405oCustomdigitss                      9221  0x00002405 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9185  0x000023e1oDipSwitchs                         9185  0x000023e1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9223  0x00002407oForms                              9223  0x00002407 (mem) word[46] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9315  0x00002463oGauges                             9315  0x00002463 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9193  0x000023e9oGSliders                           9193  0x000023e9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9317  0x00002465oImages                             9317  0x00002465 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9319  0x00002467oKeyboards                          9319  0x00002467 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9187  0x000023e3oKnobs                              9187  0x000023e3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9967  0x000026efoLedDigitsn                         9967  0x000026ef (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9323  0x0000246boLeddigitss                         9323  0x0000246b (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9321  0x00002469oLeds                               9321  0x00002469 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9331  0x00002473oMeters                             9331  0x00002473 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9539  0x00002543oPinInputs                          9539  0x00002543 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9871  0x0000268foPinOutputs                         9871  0x0000268f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9189  0x000023e5oRockerSwitchs                      9189  0x000023e5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9191  0x000023e7oRotarySwitchs                      9191  0x000023e7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9495  0x00002517oScopes                             9495  0x00002517 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9869  0x0000268doSoundss                            9869  0x0000268d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9493  0x00002515oSpectrums                          9493  0x00002515 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9451  0x000024eboStaticTexts                        9451  0x000024eb (mem) word[21] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9333  0x00002475oStringss                           9333  0x00002475 (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 423)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9497  0x00002519oTanks                              9497  0x00002519 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9443  0x000024e3oThermometers                       9443  0x000024e3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9867  0x0000268boTimers                             9867  0x0000268b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9195  0x000023eboTrackbars                          9195  0x000023eb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9547  0x0000254boUserButtons                        9547  0x0000254b (mem) word[160] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9499  0x0000251boUserImagess                        9499  0x0000251b (mem) word[20] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9445  0x000024e5oUserleds                           9445  0x000024e5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9447  0x000024e7oVideos                             9447  0x000024e7 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9197  0x000023edoWinButtons                         9197  0x000023ed (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14665  0x00003949 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14377  0x00003829 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9965  0x000026edrKeyboardRoutines                   9965  0x000026ed (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14563  0x000038e3 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14646  0x00003936 (User func) args[1] r=0  (usage 15)
seroutOcs                          14613  0x00003915 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Size                          0  0x00000000 (const dword)  (not used)
Strings10StartH                        0  0x00000000 (const dword)  (not used)
Strings10StartL                        0  0x00000000 (const dword)  (not used)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Size                          0  0x00000000 (const dword)  (not used)
Strings17StartH                        0  0x00000000 (const dword)  (not used)
Strings17StartL                        0  0x00000000 (const dword)  (not used)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         94  0x0000005e (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         27  0x0000001b (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         68  0x00000044 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     22016  0x00005600 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      9728  0x00002600 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     10240  0x00002800 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13822  0x000035fe (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 492)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12531  0x000030f3 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 129)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        14022  0x000036c6 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
