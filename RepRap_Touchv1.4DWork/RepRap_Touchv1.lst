file I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 06/07/2015 17:39:37
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 06/07/2015 17:39:10
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    0
005098  000005  #constant  Strings1Count    0
005099  000006  #constant  Strings1Size     1
005100  000006  #constant  Strings1Size     1
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings20Count    1
005106  000009  #constant  Strings20Count    1
005107  000010  #constant  Strings20Size     35
005108  000010  #constant  Strings20Size     35
005109  000011  #constant  Strings4Count    1
005110  000011  #constant  Strings4Count    1
005111  000012  #constant  Strings4Size     25
005112  000012  #constant  Strings4Size     25
005113  000013  #constant  Strings6Count    1
005114  000013  #constant  Strings6Count    1
005115  000014  #constant  Strings6Size     31
005116  000014  #constant  Strings6Size     31
005117  000015  #constant  Strings2Count    0
005118  000015  #constant  Strings2Count    0
005119  000016  #constant  Strings2Size     1
005120  000016  #constant  Strings2Size     1
005121  000017  #constant  Strings0Count    1
005122  000017  #constant  Strings0Count    1
005123  000018  #constant  Strings0Size     7
005124  000018  #constant  Strings0Size     7
005125  000019  #constant  Strings9Count    0
005126  000019  #constant  Strings9Count    0
005127  000020  #constant  Strings9Size     1
005128  000020  #constant  Strings9Size     1
005129  000021  #constant  Strings34Count    0
005130  000021  #constant  Strings34Count    0
005131  000022  #constant  Strings34Size     1
005132  000022  #constant  Strings34Size     1
005133  000023  #constant  Strings36Count    0
005134  000023  #constant  Strings36Count    0
005135  000024  #constant  Strings36Size     1
005136  000024  #constant  Strings36Size     1
005137  000025  #constant  Strings37Count    0
005138  000025  #constant  Strings37Count    0
005139  000026  #constant  Strings37Size     1
005140  000026  #constant  Strings37Size     1
005141  000027  #constant  Strings12Count    1
005142  000027  #constant  Strings12Count    1
005143  000028  #constant  Strings12Size     15
005144  000028  #constant  Strings12Size     15
005145  000029  #constant  Strings14Count    1
005146  000029  #constant  Strings14Count    1
005147  000030  #constant  Strings14Size     23
005148  000030  #constant  Strings14Size     23
005149  000031  #constant  Strings16Count    0
005150  000031  #constant  Strings16Count    0
005151  000032  #constant  Strings16Size     1
005152  000032  #constant  Strings16Size     1
005153  000033  #constant  Strings15Count    1
005154  000033  #constant  Strings15Count    1
005155  000034  #constant  Strings15Size     24
005156  000034  #constant  Strings15Size     24
005157  000035  #constant  Strings21Count    1
005158  000035  #constant  Strings21Count    1
005159  000036  #constant  Strings21Size     35
005160  000036  #constant  Strings21Size     35
005161  000037  #constant  Strings11Count    1
005162  000037  #constant  Strings11Count    1
005163  000038  #constant  Strings11Size     33
005164  000038  #constant  Strings11Size     33
005165  000039  #constant  Strings22Count    1
005166  000039  #constant  Strings22Count    1
005167  000040  #constant  Strings22Size     20
005168  000040  #constant  Strings22Size     20
005169  000041  #constant  Strings23Count    1
005170  000041  #constant  Strings23Count    1
005171  000042  #constant  Strings23Size     17
005172  000042  #constant  Strings23Size     17
005173  000043  #constant  Strings24Count    1
005174  000043  #constant  Strings24Count    1
005175  000044  #constant  Strings24Size     26
005176  000044  #constant  Strings24Size     26
005177  000045  #constant  Strings25Count    1
005178  000045  #constant  Strings25Count    1
005179  000046  #constant  Strings25Size     10
005180  000046  #constant  Strings25Size     10
005181  000047  #constant  Strings26Count    1
005182  000047  #constant  Strings26Count    1
005183  000048  #constant  Strings26Size     10
005184  000048  #constant  Strings26Size     10
005185  000049  #constant  Strings27Count    1
005186  000049  #constant  Strings27Count    1
005187  000050  #constant  Strings27Size     11
005188  000050  #constant  Strings27Size     11
005189  000051  #constant  Strings5Count    1
005190  000051  #constant  Strings5Count    1
005191  000052  #constant  Strings5Size     37
005192  000052  #constant  Strings5Size     37
005193  000053  #constant  Strings28Count    1
005194  000053  #constant  Strings28Count    1
005195  000054  #constant  Strings28Size     40
005196  000054  #constant  Strings28Size     40
005197  000055  #constant  Strings35Count    1
005198  000055  #constant  Strings35Count    1
005199  000056  #constant  Strings35Size     36
005200  000056  #constant  Strings35Size     36
005201  000057  #constant  Strings33Count    1
005202  000057  #constant  Strings33Count    1
005203  000058  #constant  Strings33Size     33
005204  000058  #constant  Strings33Size     33
005205  000059  #constant  Strings10Count    1
005206  000059  #constant  Strings10Count    1
005207  000060  #constant  Strings10Size     15
005208  000060  #constant  Strings10Size     15
005209  000061  #constant  Strings7Count    0
005210  000061  #constant  Strings7Count    0
005211  000062  #constant  Strings7Size     1
005212  000062  #constant  Strings7Size     1
005213  000063  #constant  Strings8Count    0
005214  000063  #constant  Strings8Count    0
005215  000064  #constant  Strings8Size     1
005216  000064  #constant  Strings8Size     1
005217  000065  #constant  Strings38Count    0
005218  000065  #constant  Strings38Count    0
005219  000066  #constant  Strings38Size     1
005220  000066  #constant  Strings38Size     1
005221  000067  #constant  Strings39Count    0
005222  000067  #constant  Strings39Count    0
005223  000068  #constant  Strings39Size     1
005224  000068  #constant  Strings39Size     1
005225  000069  #constant  Strings40Count    1
005226  000069  #constant  Strings40Count    1
005227  000070  #constant  Strings40Size     7
005228  000070  #constant  Strings40Size     7
005229  000071  #constant  Strings41Count    1
005230  000071  #constant  Strings41Count    1
005231  000072  #constant  Strings41Size     7
005232  000072  #constant  Strings41Size     7
005233  000073  #constant  Strings42Count    1
005234  000073  #constant  Strings42Count    1
005235  000074  #constant  Strings42Size     7
005236  000074  #constant  Strings42Size     7
005237  000075  #constant  Strings43Count    0
005238  000075  #constant  Strings43Count    0
005239  000076  #constant  Strings43Size     1
005240  000076  #constant  Strings43Size     1
005241  000077  #constant  Strings44Count    0
005242  000077  #constant  Strings44Count    0
005243  000078  #constant  Strings44Size     1
005244  000078  #constant  Strings44Size     1
005245  000079  #constant  Strings45Count    0
005246  000079  #constant  Strings45Count    0
005247  000080  #constant  Strings45Size     1
005248  000080  #constant  Strings45Size     1
005249  000081  #constant  Strings51Count    0
005250  000081  #constant  Strings51Count    0
005251  000082  #constant  Strings51Size     1
005252  000082  #constant  Strings51Size     1
005253  000083  #constant  Strings52Count    0
005254  000083  #constant  Strings52Count    0
005255  000084  #constant  Strings52Size     1
005256  000084  #constant  Strings52Size     1
005257  000085  #constant  Strings17Count    1
005258  000085  #constant  Strings17Count    1
005259  000086  #constant  Strings17Size     65
005260  000086  #constant  Strings17Size     65
005261  000087  #constant  Strings18Count    1
005262  000087  #constant  Strings18Count    1
005263  000088  #constant  Strings18Size     42
005264  000088  #constant  Strings18Size     42
005265  000089  #constant  Strings19Count    1
005266  000089  #constant  Strings19Count    1
005267  000090  #constant  Strings19Size     45
005268  000090  #constant  Strings19Size     45
005269  000091  #constant  Strings29Count    1
005270  000091  #constant  Strings29Count    1
005271  000092  #constant  Strings29Size     65
005272  000092  #constant  Strings29Size     65
005273  000093  #constant  Strings30Count    1
005274  000093  #constant  Strings30Count    1
005275  000094  #constant  Strings30Size     45
005276  000094  #constant  Strings30Size     45
005277  000095  #constant  Strings31Count    1
005278  000095  #constant  Strings31Count    1
005279  000096  #constant  Strings31Size     7
005280  000096  #constant  Strings31Size     7
005281  000097  #constant  Strings32Count    1
005282  000097  #constant  Strings32Count    1
005283  000098  #constant  Strings32Size     19
005284  000098  #constant  Strings32Size     19
005285  000099  #constant  Strings49Count    1
005286  000099  #constant  Strings49Count    1
005287  000100  #constant  Strings49Size     17
005288  000100  #constant  Strings49Size     17
005289  000101  #constant  Strings50Count    1
005290  000101  #constant  Strings50Count    1
005291  000102  #constant  Strings50Size     20
005292  000102  #constant  Strings50Size     20
005293  000103  #constant  Strings13Count    1
005294  000103  #constant  Strings13Count    1
005295  000104  #constant  Strings13Size     3
005296  000104  #constant  Strings13Size     3
005297  000105  #constant  Strings46Count    0
005298  000105  #constant  Strings46Count    0
005299  000106  #constant  Strings46Size     1
005300  000106  #constant  Strings46Size     1
005301  000107  #constant  Strings47Count    1
005302  000107  #constant  Strings47Count    1
005303  000108  #constant  Strings47Size     3
005304  000108  #constant  Strings47Size     3
005305  000109  #constant  Strings48Count    0
005306  000109  #constant  Strings48Count    0
005307  000110  #constant  Strings48Size     1
005308  000110  #constant  Strings48Size     1
005309  000111  // object indexes into ImageControl
005310  000112  #CONST
005311  000308  #END
005312  000309        
005313  000310  #constant  Strings1StartH   0x0
005314  000310  #constant  Strings1StartH   0x0
005315  000311  #constant  Strings1StartL   0x0
005316  000311  #constant  Strings1StartL   0x0
005317  000312  #constant  Strings3StartH   0x0
005318  000312  #constant  Strings3StartH   0x0
005319  000313  #constant  Strings3StartL   0x200
005320  000313  #constant  Strings3StartL   0x200
005321  000314  #constant  Strings20StartH   0x0
005322  000314  #constant  Strings20StartH   0x0
005323  000315  #constant  Strings20StartL   0x400
005324  000315  #constant  Strings20StartL   0x400
005325  000316  #constant  Strings4StartH   0x0
005326  000316  #constant  Strings4StartH   0x0
005327  000317  #constant  Strings4StartL   0x600
005328  000317  #constant  Strings4StartL   0x600
005329  000318  #constant  Strings6StartH   0x0
005330  000318  #constant  Strings6StartH   0x0
005331  000319  #constant  Strings6StartL   0x800
005332  000319  #constant  Strings6StartL   0x800
005333  000320  #constant  Strings2StartH   0x0
005334  000320  #constant  Strings2StartH   0x0
005335  000321  #constant  Strings2StartL   0xA00
005336  000321  #constant  Strings2StartL   0xA00
005337  000322  #constant  Strings0StartH   0x0
005338  000322  #constant  Strings0StartH   0x0
005339  000323  #constant  Strings0StartL   0xC00
005340  000323  #constant  Strings0StartL   0xC00
005341  000324  #constant  Strings9StartH   0x0
005342  000324  #constant  Strings9StartH   0x0
005343  000325  #constant  Strings9StartL   0xE00
005344  000325  #constant  Strings9StartL   0xE00
005345  000326  #constant  Strings34StartH   0x0
005346  000326  #constant  Strings34StartH   0x0
005347  000327  #constant  Strings34StartL   0x1000
005348  000327  #constant  Strings34StartL   0x1000
005349  000328  #constant  Strings36StartH   0x0
005350  000328  #constant  Strings36StartH   0x0
005351  000329  #constant  Strings36StartL   0x1200
005352  000329  #constant  Strings36StartL   0x1200
005353  000330  #constant  Strings37StartH   0x0
005354  000330  #constant  Strings37StartH   0x0
005355  000331  #constant  Strings37StartL   0x1400
005356  000331  #constant  Strings37StartL   0x1400
005357  000332  #constant  Strings12StartH   0x0
005358  000332  #constant  Strings12StartH   0x0
005359  000333  #constant  Strings12StartL   0x1600
005360  000333  #constant  Strings12StartL   0x1600
005361  000334  #constant  Strings14StartH   0x0
005362  000334  #constant  Strings14StartH   0x0
005363  000335  #constant  Strings14StartL   0x1800
005364  000335  #constant  Strings14StartL   0x1800
005365  000336  #constant  Strings16StartH   0x0
005366  000336  #constant  Strings16StartH   0x0
005367  000337  #constant  Strings16StartL   0x1A00
005368  000337  #constant  Strings16StartL   0x1A00
005369  000338  #constant  Strings15StartH   0x0
005370  000338  #constant  Strings15StartH   0x0
005371  000339  #constant  Strings15StartL   0x1C00
005372  000339  #constant  Strings15StartL   0x1C00
005373  000340  #constant  Strings21StartH   0x0
005374  000340  #constant  Strings21StartH   0x0
005375  000341  #constant  Strings21StartL   0x1E00
005376  000341  #constant  Strings21StartL   0x1E00
005377  000342  #constant  Strings11StartH   0x0
005378  000342  #constant  Strings11StartH   0x0
005379  000343  #constant  Strings11StartL   0x2000
005380  000343  #constant  Strings11StartL   0x2000
005381  000344  #constant  Strings22StartH   0x0
005382  000344  #constant  Strings22StartH   0x0
005383  000345  #constant  Strings22StartL   0x2200
005384  000345  #constant  Strings22StartL   0x2200
005385  000346  #constant  Strings23StartH   0x0
005386  000346  #constant  Strings23StartH   0x0
005387  000347  #constant  Strings23StartL   0x2400
005388  000347  #constant  Strings23StartL   0x2400
005389  000348  #constant  Strings24StartH   0x0
005390  000348  #constant  Strings24StartH   0x0
005391  000349  #constant  Strings24StartL   0x2600
005392  000349  #constant  Strings24StartL   0x2600
005393  000350  #constant  Strings25StartH   0x0
005394  000350  #constant  Strings25StartH   0x0
005395  000351  #constant  Strings25StartL   0x2800
005396  000351  #constant  Strings25StartL   0x2800
005397  000352  #constant  Strings26StartH   0x0
005398  000352  #constant  Strings26StartH   0x0
005399  000353  #constant  Strings26StartL   0x2A00
005400  000353  #constant  Strings26StartL   0x2A00
005401  000354  #constant  Strings27StartH   0x0
005402  000354  #constant  Strings27StartH   0x0
005403  000355  #constant  Strings27StartL   0x2C00
005404  000355  #constant  Strings27StartL   0x2C00
005405  000356  #constant  Strings5StartH   0x0
005406  000356  #constant  Strings5StartH   0x0
005407  000357  #constant  Strings5StartL   0x2E00
005408  000357  #constant  Strings5StartL   0x2E00
005409  000358  #constant  Strings28StartH   0x0
005410  000358  #constant  Strings28StartH   0x0
005411  000359  #constant  Strings28StartL   0x3000
005412  000359  #constant  Strings28StartL   0x3000
005413  000360  #constant  Strings35StartH   0x0
005414  000360  #constant  Strings35StartH   0x0
005415  000361  #constant  Strings35StartL   0x3200
005416  000361  #constant  Strings35StartL   0x3200
005417  000362  #constant  Strings33StartH   0x0
005418  000362  #constant  Strings33StartH   0x0
005419  000363  #constant  Strings33StartL   0x3400
005420  000363  #constant  Strings33StartL   0x3400
005421  000364  #constant  Strings10StartH   0x0
005422  000364  #constant  Strings10StartH   0x0
005423  000365  #constant  Strings10StartL   0x3600
005424  000365  #constant  Strings10StartL   0x3600
005425  000366  #constant  Strings7StartH   0x0
005426  000366  #constant  Strings7StartH   0x0
005427  000367  #constant  Strings7StartL   0x3800
005428  000367  #constant  Strings7StartL   0x3800
005429  000368  #constant  Strings8StartH   0x0
005430  000368  #constant  Strings8StartH   0x0
005431  000369  #constant  Strings8StartL   0x3A00
005432  000369  #constant  Strings8StartL   0x3A00
005433  000370  #constant  Strings38StartH   0x0
005434  000370  #constant  Strings38StartH   0x0
005435  000371  #constant  Strings38StartL   0x3C00
005436  000371  #constant  Strings38StartL   0x3C00
005437  000372  #constant  Strings39StartH   0x0
005438  000372  #constant  Strings39StartH   0x0
005439  000373  #constant  Strings39StartL   0x3E00
005440  000373  #constant  Strings39StartL   0x3E00
005441  000374  #constant  Strings40StartH   0x0
005442  000374  #constant  Strings40StartH   0x0
005443  000375  #constant  Strings40StartL   0x4000
005444  000375  #constant  Strings40StartL   0x4000
005445  000376  #constant  Strings41StartH   0x0
005446  000376  #constant  Strings41StartH   0x0
005447  000377  #constant  Strings41StartL   0x4200
005448  000377  #constant  Strings41StartL   0x4200
005449  000378  #constant  Strings42StartH   0x0
005450  000378  #constant  Strings42StartH   0x0
005451  000379  #constant  Strings42StartL   0x4400
005452  000379  #constant  Strings42StartL   0x4400
005453  000380  #constant  Strings43StartH   0x0
005454  000380  #constant  Strings43StartH   0x0
005455  000381  #constant  Strings43StartL   0x4600
005456  000381  #constant  Strings43StartL   0x4600
005457  000382  #constant  Strings44StartH   0x0
005458  000382  #constant  Strings44StartH   0x0
005459  000383  #constant  Strings44StartL   0x4800
005460  000383  #constant  Strings44StartL   0x4800
005461  000384  #constant  Strings45StartH   0x0
005462  000384  #constant  Strings45StartH   0x0
005463  000385  #constant  Strings45StartL   0x4A00
005464  000385  #constant  Strings45StartL   0x4A00
005465  000386  #constant  Strings51StartH   0x0
005466  000386  #constant  Strings51StartH   0x0
005467  000387  #constant  Strings51StartL   0x4C00
005468  000387  #constant  Strings51StartL   0x4C00
005469  000388  #constant  Strings52StartH   0x0
005470  000388  #constant  Strings52StartH   0x0
005471  000389  #constant  Strings52StartL   0x4E00
005472  000389  #constant  Strings52StartL   0x4E00
005473  000390  #constant  Strings17StartH   0x0
005474  000390  #constant  Strings17StartH   0x0
005475  000391  #constant  Strings17StartL   0x5000
005476  000391  #constant  Strings17StartL   0x5000
005477  000392  #constant  Strings18StartH   0x0
005478  000392  #constant  Strings18StartH   0x0
005479  000393  #constant  Strings18StartL   0x5200
005480  000393  #constant  Strings18StartL   0x5200
005481  000394  #constant  Strings19StartH   0x0
005482  000394  #constant  Strings19StartH   0x0
005483  000395  #constant  Strings19StartL   0x5400
005484  000395  #constant  Strings19StartL   0x5400
005485  000396  #constant  Strings29StartH   0x0
005486  000396  #constant  Strings29StartH   0x0
005487  000397  #constant  Strings29StartL   0x5600
005488  000397  #constant  Strings29StartL   0x5600
005489  000398  #constant  Strings30StartH   0x0
005490  000398  #constant  Strings30StartH   0x0
005491  000399  #constant  Strings30StartL   0x5800
005492  000399  #constant  Strings30StartL   0x5800
005493  000400  #constant  Strings31StartH   0x0
005494  000400  #constant  Strings31StartH   0x0
005495  000401  #constant  Strings31StartL   0x5A00
005496  000401  #constant  Strings31StartL   0x5A00
005497  000402  #constant  Strings32StartH   0x0
005498  000402  #constant  Strings32StartH   0x0
005499  000403  #constant  Strings32StartL   0x5C00
005500  000403  #constant  Strings32StartL   0x5C00
005501  000404  #constant  Strings49StartH   0x0
005502  000404  #constant  Strings49StartH   0x0
005503  000405  #constant  Strings49StartL   0x5E00
005504  000405  #constant  Strings49StartL   0x5E00
005505  000406  #constant  Strings50StartH   0x0
005506  000406  #constant  Strings50StartH   0x0
005507  000407  #constant  Strings50StartL   0x6000
005508  000407  #constant  Strings50StartL   0x6000
005509  000408  #constant  Strings13StartH   0x0
005510  000408  #constant  Strings13StartH   0x0
005511  000409  #constant  Strings13StartL   0x6200
005512  000409  #constant  Strings13StartL   0x6200
005513  000410  #constant  Strings46StartH   0x0
005514  000410  #constant  Strings46StartH   0x0
005515  000411  #constant  Strings46StartL   0x6400
005516  000411  #constant  Strings46StartL   0x6400
005517  000412  #constant  Strings47StartH   0x0
005518  000412  #constant  Strings47StartH   0x0
005519  000413  #constant  Strings47StartL   0x6600
005520  000413  #constant  Strings47StartL   0x6600
005521  000414  #constant  Strings48StartH   0x0
005522  000414  #constant  Strings48StartH   0x0
005523  000415  #constant  Strings48StartL   0x6800
005524  000415  #constant  Strings48StartL   0x6800
005525  000416  #IFNOT EXISTS NOGLOBALS
005526  000417  var hndl ;
005527  000418  #ENDIF
005528  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005529  000013  #inherit "CLPrintStrings.inc"
005530  000013  #inherit "CLPrintStrings.inc"
005531  000001  func PrintStrings(var ID, var *msgid, var String)
005532  000002      var StringID, i, ch, offs32[2], res32[2];
005533  000003      StringID := oStringss[1+ID] ;
005534  000004      if (String)
005535  000005          stringsCV[ID] := -1 ;
005536  000006      else
005537  000007          stringsCV[ID] := msgid ;
005538  000008      endif
005539  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005540  000010      txt_FontID(hFonts[ID]) ;
005541  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005542  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005543  000013        
005544  000014      if (*(StringID + Ofs_String_Transparent))
005545  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005546  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005547  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005548  000018      else
005549  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005550  000020          gfx_Clipping(ON) ;
005551  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005552  000022          gfx_Clipping(OFF) ;
005553  000023        
005554  000024      endif
005555  000025        
005556  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005557  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005558  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005559  000029        
005560  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005561  000031        
005562  000032      if (String)
005563  000033          i := 0 ;
005564  000034          ch := msgid[i++] ;
005565  000035          while (ch != 0)
005566  000036              putch(ch) ;
005567  000037              ch := msgid[i++] ;
005568  000038          wend
005569  000039      else
005570  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005571  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005572  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005573  000043          uadd_3232(res32,res32,offs32) ;
005574  000044          file_Seek(hstrings, res32[1], res32[0]);
005575  000045          repeat
005576  000046              if (*(StringID + Ofs_String_Ansi))
005577  000047                  ch := file_GetC(hstrings) ;
005578  000048              else
005579  000049                  ch := file_GetW(hstrings) ;
005580  000050              endif
005581  000051              putch(ch) ;
005582  000052          until (ch == 0) ;
005583  000053      endif
005584  000054        
005585  000055  endfunc
005586  000056        
005587  000014        
005588  000015  #constant IPDatasize 22
005589  000015  #constant IPDatasize 22
005590  000016        
005591  000017  #CONST
005592  000021  #END
005593  000022        
005594  000023  #CONST
005595  000130  #END
005596  000131        
005597  000550  #END
5598  2624
5599  2625
5600  2626
5601  2627
5602  2628
5603  2629
5604  262A
5605  262B
5606  262C
5607  262D
5608  262E
5609  262F
5610  2630
5611  2631
5612  2632
5613  2633
5614  2634
5615  2635
5616  2636
5617  2637
5618  2638
5619  2639
5620  263A
5621  263B
5622  263C
5623  263D
5624  263E
5625  263F
5626  2640
5627  2641
5628  2642
5629  2643
5630  2644
5631  2645
5632  2646
5633  2647
5634  2648
5635  2649
5636  264A
5637  264B
5638  264C
5639  264D
5640  264E
5641  264F
5642  2650
5643  2651
5644  2652
5645  2653
5646  2654
5647  2655
5648  2656
5649  2657
5650  2658
5651  2659
5652  265A
5653  265B
5654  265C
5655  265D
5656  265E
5657  265F
5658  2660
5659  2661
5660  2662
5661  2663
5662  2664
5663  2665
5664  2666
5665  2667
5666  2668
5667  2669
5668  266A
5669  266B
5670  266C
5671  266D
5672  266E
5673  266F
5674  2670
5675  2671
5676  2672
5677  2673
5678  2674
5679  2675
5680  2676
5681  2677
5682  2678
5683  2679
5684  267A
5685  267B
5686  267C
5687  267D
5688  267E
5689  267F
5690  2680
5691  2681
5692  2682
5693  2683
5694  2684
5695  2685
5696  2686
5697  2687
5698  2688
5699  2689
5700  268A
5701  268B
5702  268C
5703  268D
5704  268E
5705  268F
5706  2690
5707  2691
5708  2692
5709  2693
5710  2694
5711  2695
5712  2696
5713  2697
5714  2698
5715  2699
5716  269A
5717  269B
5718  269C
5719  269D
5720  269E
5721  269F
5722  26A0
5723  26A1
5724  26A2
5725  26A3
5726  26A4
5727  26A5
5728  26A6
5729  26A7
5730  26A8
5731  26A9
5732  26AA
5733  26AB
5734  26AC
5735  26AD
5736  26AE
5737  26AF
5738  26B0
5739  26B1
5740  26B2
5741  26B3
5742  26B4
5743  26B5
5744  26B6
5745  26B7
5746  26B8
5747  26B9
5748  26BA
5749  26BB
5750  26BC
5751  26BD
5752  26BE
5753  26BF
5754  26C0
5755  26C1
5756  26C2
5757  26C3
5758  26C4
5759  26C5
5760  26C6
5761  26C7
5762  26C8
5763  26C9
5764  26CA
5765  26CB
5766  26CC
5767  26CD
5768  26CE
5769  26CF
5770  26D0
5771  26D1
5772  26D2
5773  26D3
5774  26D4
5775  26D5
5776  26D6
5777  26D7
5778  26D8
5779  26D9
5780  26DA
5781  26DB
5782  26DC
5783  26DD
5784  26DE
5785  26DF
5786  26E0
5787  26E1
5788  26E2
5789  26E3
5790  26E4
5791  26E5
5792  26E6
5793  26E7
5794  26E8
5795  26E9
5796  26EA
5797  26EB
5798  26EC
5799  26ED
5800  26EE
5801  26EF
5802  26F0
5803  26F1
5804  26F2
5805  26F3
5806  26F4
5807  26F5
5808  26F6
5809  26F7
5810  26F8
5811  26F9
5812  26FA
5813  26FB
5814  26FC
5815  26FD
5816  26FE
5817  26FF
5818  2700
5819  2701
5820  2702
5821  2703
5822  2704
5823  2705
5824  2706
5825  2707
5826  2708
5827  2709
5828  270A
5829  270B
5830  270C
5831  270D
5832  270E
5833  270F
5834  2710
5835  2711
5836  2712
5837  2713
5838  2714
5839  2715
5840  2716
5841  2717
5842  2718
5843  2719
5844  271A
5845  271B
5846  271C
5847  271D
5848  271E
5849  271F
5850  2720
5851  2721
5852  2722
5853  2723
5854  2724
5855  2725
5856  2726
5857  2727
5858  2728
5859  2729
5860  272A
5861  272B
5862  272C
5863  272D
5864  272E
5865  272F
5866  2730
5867  2731
5868  2732
5869  2733
5870  2734
5871  2735
5872  2736
5873  2737
5874  2738
5875  2739
5876  273A
5877  273B
5878  273C
5879  273D
5880  273E
5881  273F
5882  2740
5883  2741
5884  2742
5885  2743
5886  2744
5887  2745
5888  2746
5889  2747
5890  2748
5891  2749
5892  274A
5893  274B
5894  274C
5895  274D
5896  274E
5897  274F
5898  2750
5899  2751
5900  2752
5901  2753
5902  2754
5903  2755
5904  2756
5905  2757
5906  2758
5907  2759
5908  275A
5909  275B
5910  275C
5911  275D
5912  275E
5913  275F
5914  2760
5915  2761
5916  2762
5917  2763
5918  2764
5919  2765
5920  2766
5921  2767
5922  2768
5923  2769
5924  276A
5925  276B
5926  276C
5927  276D
5928  276E
5929  276F
5930  2770
5931  2771
5932  2772
5933  2773
5934  2774
5935  2775
5936  2776
5937  2777
5938  2778
5939  2779
5940  277A
5941  277B
5942  277C
5943  277D
5944  277E
5945  277F
5946  2780
5947  2781
5948  2782
5949  2783
5950  2784
5951  2785
5952  2786
5953  2787
5954  2788
5955  2789
5956  278A
5957  278B
5958  278C
5959  278D
5960  278E
5961  278F
5962  2790
5963  2791
5964  2792
5965  2793
5966  2794
5967  2795
5968  2796
5969  2797
5970  2798
5971  2799
5972  279A
5973  279B
5974  279C
5975  279D
5976  279E
5977  279F
5978  27A0
5979  27A1
5980  27A2
5981  27A3
5982  27A4
5983  27A5
5984  27A6
5985  27A7
5986  27A8
5987  27A9
5988  27AA
5989  27AB
5990  27AC
5991  27AD
5992  27AE
5993  27AF
5994  27B0
5995  27B1
5996  27B2
5997  27B3
5998  27B4
5999  27B5
6000  27B6
6001  27B7
6002  27B8
6003  27B9
6004  27BA
6005  27BB
6006  27BC
6007  27BD
6008  27BE
6009  27BF
6010  27C0
6011  27C1
6012  27C2
6013  27C3
6014  27C4
6015  27C5
6016  27C6
6017  27C7
6018  27C8
6019  27C9
6020  27CA
6021  27CB
6022  27CC
6023  27CD
6024  27CE
6025  27CF
6026  27D0
6027  27D1
6028  27D2
6029  27D3
6030  27D4
6031  27D5
6032  27D6
6033  27D7
6034  27D8
6035  27D9
6036  27DA
6037  27DB
6038  27DC
6039  27DD
6040  27DE
6041  27DF
6042  27E0
6043  27E1
6044  27E2
6045  27E3
6046  27E4
6047  27E5
6048  27E6
6049  27E7
6050  27E8
6051  27E9
6052  27EA
6053  27EB
6054  27EC
6055  27ED
6056  27EE
6057  27EF
6058  27F0
6059  27F1
6060  27F2
6061  27F3
6062  27F4
6063  27F5
6064  27F6
6065  27F7
6066  27F8
6067  27F9
6068  27FA
6069  27FB
6070  27FC
6071  27FD
6072  27FE
6073  27FF
6074  2800
6075  2801
6076  2802
6077  2803
6078  2804
6079  2805
6080  2806
6081  2807
6082  2808
6083  2809
6084  280A
6085  280B
6086  280C
6087  280D
6088  280E
6089  280F
6090  2810
6091  2811
6092  2812
6093  2813
6094  2814
6095  2815
6096  2816
6097  2817
6098  2818
6099  2819
6100  281A
6101  281B
6102  281C
6103  281D
6104  281E
6105  281F
6106  2820
6107  2821
6108  2822
6109  2823
6110  2824
6111  2825
6112  2826
6113  2827
6114  2828
6115  2829
6116  282A
6117  282B
6118  282C
6119  282D
6120  282E
6121  282F
6122  2830
6123  2831
6124  2832
6125  2833
6126  2834
6127  2835
6128  2836
6129  2837
6130  2838
6131  2839
6132  283A
6133  283B
6134  283C
6135  283D
6136  283E
6137  283F
6138  2840
6139  2841
6140  2842
6141  2843
6142  2844
6143  2845
6144  2846
6145  2847
6146  2848
6147  2849
6148  284A
6149  284B
6150  284C
6151  284D
6152  284E
6153  284F
6154  2850
6155  2851
6156  2852
6157  2853
6158  2854
6159  2855
6160  2856
6161  2857
6162  2858
6163  2859
6164  285A
6165  285B
6166  285C
6167  285D
6168  285E
6169  285F
6170  2860
6171  2861
6172  2862
6173  2863
6174  2864
6175  2865
6176  2866
6177  2867
6178  2868
6179  2869
6180  286A
6181  286B
6182  286C
6183  286D
6184  286E
6185  286F
6186  2870
6187  2871
6188  2872
6189  2873
6190  2874
6191  2875
6192  2876
6193  2877
6194  2878
6195  2879
6196  287A
6197  287B
6198  287C
6199  287D
6200  287E
6201  287F
6202  2880
6203  2881
6204  2882
6205  2883
6206  2884
6207  2885
6208  2886
6209  2887
6210  2888
6211  2889
6212  288A
6213  288B
6214  288C
6215  288D
6216  288E
6217  288F
6218  2890
6219  2891
6220  2892
6221  2893
6222  2894
6223  2895
6224  2896
6225  2897
6226  2898
6227  2899
6228  289A
6229  289B
6230  289C
6231  289D
6232  289E
6233  289F
6234  28A0
6235  28A1
6236  28A2
6237  28A3
6238  28A4
6239  28A5
6240  28A6
6241  28A7
6242  28A8
6243  28A9
6244  28AA
6245  28AB
6246  28AC
6247  28AD
6248  28AE
6249  28AF
6250  28B0
6251  28B1
6252  28B2
6253  28B3
6254  28B4
6255  28B5
6256  28B6
6257  28B7
6258  28B8
6259  28B9
6260  28BA
6261  28BB
6262  28BC
6263  28BD
6264  28BE
6265  28BF
6266  28C0
6267  28C1
6268  28C2
6269  28C3
6270  28C4
6271  28C5
6272  28C6
6273  28C7
6274  28C8
6275  28C9
6276  28CA
6277  28CB
6278  28CC
6279  28CD
6280  28CE
6281  28CF
6282  28D0
6283  28D1
6284  28D2
6285  28D3
6286  28D4
6287  28D5
6288  28D6
6289  28D7
6290  28D8
6291  28D9
6292  28DA
6293  28DB
6294  28DC
6295  28DD
6296  28DE
6297  28DF
6298  28E0
6299  28E1
6300  28E2
6301  28E3
6302  28E4
6303  28E5
6304  28E6
6305  28E7
6306  28E8
6307  28E9
6308  28EA
6309  28EB
6310  28EC
6311  28ED
6312  28EE
6313  28EF
6314  28F0
6315  28F1
6316  28F2
6317  28F3
6318  28F4
6319  28F5
6320  28F6
6321  28F7
6322  28F8
6323  28F9
6324  28FA
6325  28FB
6326  28FC
6327  28FD
6328  28FE
6329  28FF
6330  2900
6331  2901
6332  2902
6333  2903
6334  2904
6335  2905
6336  2906
6337  2907
6338  2908
6339  2909
6340  290A
6341  290B
6342  290C
6343  290D
6344  290E
6345  290F
6346  2910
6347  2911
6348  2912
6349  2913
6350  2914
6351  2915
6352  2916
6353  2917
6354  2918
6355  2919
6356  291A
6357  291B
6358  291C
6359  291D
6360  291E
6361  291F
6362  2920
6363  2921
6364  2922
6365  2923
6366  2924
6367  2925
6368  2926
6369  2927
6370  2928
6371  2929
6372  292A
6373  292B
6374  292C
6375  292D
6376  292E
6377  292F
6378  2930
6379  2931
6380  2932
6381  2933
6382  2934
6383  2935
6384  2936
6385  2937
6386  2938
6387  2939
6388  293A
6389  293B
6390  293C
6391  293D
6392  293E
6393  293F
6394  2940
6395  2941
6396  2942
6397  2943
6398  2944
6399  2945
6400  2946
6401  2947
6402  2948
6403  2949
6404  294A
6405  294B
6406  294C
6407  294D
6408  294E
6409  294F
6410  2950
6411  2951
6412  2952
6413  2953
6414  2954
6415  2955
6416  2956
6417  2957
6418  2958
6419  2959
6420  295A
6421  295B
6422  295C
6423  295D
6424  295E
6425  295F
6426  2960
6427  2961
6428  2962
6429  2963
6430  2964
6431  2965
6432  2966
6433  2967
6434  2968
6435  2969
6436  296A
6437  296B
6438  296C
6439  296D
6440  296E
6441  296F
6442  2970
6443  2971
6444  2972
6445  2973
6446  2974
6447  2975
6448  2976
6449  2977
6450  2978
6451  2979
6452  297A
6453  297B
6454  297C
6455  297D
6456  297E
6457  297F
6458  2980
6459  2981
6460  2982
6461  2983
6462  2984
6463  2985
6464  2986
6465  2987
6466  2988
6467  2989
6468  298A
6469  298B
6470  298C
6471  298D
6472  298E
6473  298F
6474  2990
6475  2991
6476  2992
6477  2993
6478  2994
6479  2995
6480  2996
6481  2997
6482  2998
6483  2999
6484  299A
6485  299B
6486  299C
6487  299D
6488  299E
6489  299F
6490  29A0
6491  29A1
6492  29A2
6493  29A3
6494  29A4
6495  29A5
6496  29A6
6497  29A7
6498  29A8
6499  29A9
6500  29AA
6501  29AB
6502  29AC
6503  29AD
6504  29AE
6505  29AF
6506  29B0
6507  29B1
6508  29B2
6509  29B3
6510  29B4
6511  29B5
6512  29B6
6513  29B7
6514  29B8
6515  29B9
6516  29BA
6517  29BB
6518  29BC
6519  29BD
6520  29BE
6521  29BF
6522  29C0
6523  29C1
6524  29C2
6525  29C3
6526  29C4
6527  29C5
6528  29C6
6529  29C7
6530  29C8
6531  29C9
6532  29CA
6533  29CB
6534  29CC
6535  29CD
6536  29CE
6537  29CF
6538  29D0
6539  29D1
6540  29D2
6541  29D3
6542  29D4
6543  29D5
6544  29D6
6545  29D7
6546  29D8
6547  29D9
6548  29DA
6549  29DB
6550  29DC
6551  29DD
6552  29DE
6553  29DF
6554  29E0
6555  29E1
6556  29E2
6557  29E3
6558  29E4
6559  29E5
6560  29E6
6561  29E7
6562  29E8
6563  29E9
6564  29EA
6565  29EB
6566  29EC
6567  29ED
6568  29EE
6569  29EF
6570  29F0
6571  29F1
6572  29F2
6573  29F3
6574  29F4
6575  29F5
6576  29F6
6577  29F7
6578  29F8
6579  29F9
6580  29FA
6581  29FB
6582  29FC
6583  29FD
6584  29FE
6585  29FF
6586  2A00
6587  2A01
6588  2A02
6589  2A03
6590  2A04
6591  2A05
6592  2A06
6593  2A07
6594  2A08
6595  2A09
6596  2A0A
6597  2A0B
6598  2A0C
6599  2A0D
6600  2A0E
6601  2A0F
6602  2A10
6603  2A11
6604  2A12
6605  2A13
6606  2A14
6607  2A15
6608  2A16
6609  2A17
6610  2A18
6611  2A19
6612  2A1A
6613  2A1B
6614  2A1C
6615  2A1D
6616  2A1E
6617  2A1F
6618  2A20
6619  2A21
6620  2A22
6621  2A23
6622  2A24
6623  2A25
6624  2A26
6625  2A27
6626  2A28
6627  2A29
6628  2A2A
6629  2A2B
6630  2A2C
6631  2A2D
6632  2A2E
6633  2A2F
6634  2A30
6635  2A31
6636  2A32
6637  2A33
6638  2A34
6639  2A35
6640  2A36
6641  2A37
6642  2A38
6643  2A39
6644  2A3A
6645  2A3B
6646  2A3C
6647  2A3D
6648  2A3E
6649  2A3F
6650  2A40
6651  2A41
6652  2A42
6653  2A43
6654  2A44
6655  2A45
6656  2A46
6657  2A47
6658  2A48
6659  2A49
6660  2A4A
6661  2A4B
6662  2A4C
6663  2A4D
6664  2A4E
6665  2A4F
6666  2A50
6667  2A51
6668  2A52
6669  2A53
6670  2A54
6671  2A55
6672  2A56
6673  2A57
6674  2A58
6675  2A59
6676  2A5A
6677  2A5B
6678  2A5C
6679  2A5D
6680  2A5E
6681  2A5F
6682  2A60
6683  2A61
6684  2A62
6685  2A63
6686  2A64
6687  2A65
6688  2A66
6689  2A67
6690  2A68
6691  2A69
6692  2A6A
6693  2A6B
6694  2A6C
6695  2A6D
6696  2A6E
6697  2A6F
6698  2A70
6699  2A71
6700  2A72
6701  2A73
6702  2A74
6703  2A75
6704  2A76
6705  2A77
6706  2A78
6707  2A79
6708  2A7A
6709  2A7B
6710  2A7C
6711  2A7D
6712  2A7E
6713  2A7F
6714  2A80
6715  2A81
6716  2A82
6717  2A83
6718  2A84
6719  2A85
6720  2A86
6721  2A87
6722  2A88
6723  2A89
6724  2A8A
6725  2A8B
6726  2A8C
6727  2A8D
6728  2A8E
6729  2A8F
6730  2A90
6731  2A91
6732  2A92
6733  2A93
6734  2A94
6735  2A95
6736  2A96
6737  2A97
6738  2A98
6739  2A99
6740  2A9A
6741  2A9B
6742  2A9C
6743  2A9D
6744  2A9E
6745  2A9F
6746  2AA0
6747  2AA1
6748  2AA2
6749  2AA3
6750  2AA4
6751  2AA5
6752  2AA6
6753  2AA7
6754  2AA8
6755  2AA9
6756  2AAA
6757  2AAB
6758  2AAC
6759  2AAD
6760  2AAE
6761  2AAF
6762  2AB0
6763  2AB1
6764  2AB2
6765  2AB3
6766  2AB4
6767  2AB5
6768  2AB6
6769  2AB7
6770  2AB8
6771  2AB9
6772  2ABA
6773  2ABB
6774  2ABC
6775  2ABD
6776  2ABE
6777  2ABF
6778  2AC0
6779  2AC1
6780  2AC2
6781  2AC3
6782  2AC4
6783  2AC5
6784  2AC6
6785  2AC7
6786  2AC8
6787  2AC9
6788  2ACA
6789  2ACB
6790  2ACC
6791  2ACD
6792  2ACE
6793  2ACF
6794  2AD0
6795  2AD1
6796  2AD2
6797  2AD3
6798  2AD4
6799  2AD5
6800  2AD6
6801  2AD7
6802  2AD8
6803  2AD9
6804  2ADA
6805  2ADB
6806  2ADC
6807  2ADD
6808  2ADE
6809  2ADF
6810  2AE0
6811  2AE1
6812  2AE2
6813  2AE3
6814  2AE4
6815  2AE5
6816  2AE6
6817  2AE7
6818  2AE8
6819  2AE9
6820  2AEA
6821  2AEB
6822  2AEC
6823  2AED
6824  2AEE
6825  2AEF
6826  2AF0
6827  2AF1
6828  2AF2
6829  2AF3
6830  2AF4
6831  2AF5
6832  2AF6
6833  2AF7
6834  2AF8
6835  2AF9
6836  2AFA
6837  2AFB
6838  2AFC
6839  2AFD
6840  2AFE
6841  2AFF
6842  2B00
6843  2B01
6844  2B02
6845  2B03
6846  2B04
6847  2B05
6848  2B06
6849  2B07
6850  2B08
6851  2B09
6852  2B0A
6853  2B0B
6854  2B0C
6855  2B0D
6856  2B0E
6857  2B0F
6858  2B10
6859  2B11
6860  2B12
6861  2B13
6862  2B14
6863  2B15
6864  2B16
6865  2B17
6866  2B18
6867  2B19
6868  2B1A
6869  2B1B
6870  2B1C
6871  2B1D
6872  2B1E
6873  2B1F
6874  2B20
6875  2B21
6876  2B22
6877  2B23
6878  2B24
6879  2B25
6880  2B26
6881  2B27
6882  2B28
6883  2B29
6884  2B2A
6885  2B2B
6886  2B2C
6887  2B2D
6888  2B2E
6889  2B2F
6890  2B30
6891  2B31
6892  2B32
6893  2B33
6894  2B34
6895  2B35
6896  2B36
6897  2B37
6898  2B38
6899  2B39
6900  2B3A
6901  2B3B
6902  2B3C
6903  2B3D
6904  2B3E
6905  2B3F
6906  2B40
6907  2B41
6908  2B42
6909  2B43
6910  2B44
6911  2B45
6912  2B46
6913  2B47
6914  2B48
6915  2B49
6916  2B4A
6917  2B4B
6918  2B4C
6919  2B4D
6920  2B4E
6921  2B4F
6922  2B50
6923  2B51
6924  2B52
6925  2B53
6926  2B54
6927  2B55
6928  2B56
6929  2B57
6930  2B58
6931  2B59
6932  2B5A
6933  2B5B
6934  2B5C
6935  2B5D
6936  2B5E
6937  2B5F
6938  2B60
6939  2B61
6940  2B62
6941  2B63
6942  2B64
6943  2B65
6944  2B66
6945  2B67
6946  2B68
6947  2B69
6948  2B6A
6949  2B6B
6950  2B6C
6951  2B6D
6952  2B6E
6953  2B6F
6954  2B70
6955  2B71
6956  2B72
6957  2B73
6958  2B74
6959  2B75
6960  2B76
6961  2B77
6962  2B78
6963  2B79
6964  2B7A
6965  2B7B
6966  2B7C
6967  2B7D
6968  2B7E
6969  2B7F
6970  2B80
6971  2B81
6972  2B82
6973  2B83
6974  2B84
6975  2B85
6976  2B86
6977  2B87
6978  2B88
6979  2B89
6980  2B8A
6981  2B8B
6982  2B8C
6983  2B8D
6984  2B8E
6985  2B8F
6986  2B90
6987  2B91
6988  2B92
6989  2B93
6990  2B94
6991  2B95
6992  2B96
6993  2B97
6994  2B98
6995  2B99
6996  2B9A
6997  2B9B
6998  2B9C
6999  2B9D
7000  2B9E
7001  2B9F
7002  2BA0
7003  2BA1
7004  2BA2
7005  2BA3
7006  2BA4
7007  2BA5
7008  2BA6
7009  2BA7
7010  2BA8
7011  2BA9
7012  2BAA
7013  2BAB
7014  2BAC
7015  2BAD
7016  2BAE
7017  2BAF
7018  2BB0
7019  2BB1
7020  2BB2
7021  2BB3
7022  2BB4
7023  2BB5
7024  2BB6
7025  2BB7
7026  2BB8
7027  2BB9
7028  2BBA
7029  2BBB
7030  2BBC
7031  2BBD
7032  2BBE
7033  2BBF
7034  2BC0
7035  2BC1
7036  2BC2
7037  2BC3
7038  2BC4
7039  2BC5
7040  2BC6
7041  2BC7
7042  2BC8
7043  2BC9
7044  2BCA
7045  2BCB
7046  2BCC
7047  2BCD
7048  2BCE
7049  2BCF
7050  2BD0
7051  2BD1
7052  2BD2
7053  2BD3
7054  2BD4
7055  2BD5
7056  2BD6
7057  2BD7
7058  2BD8
7059  2BD9
7060  2BDA
7061  2BDB
7062  2BDC
7063  2BDD
7064  2BDE
7065  2BDF
7066  2BE0
7067  2BE1
7068  2BE2
7069  2BE3
7070  2BE4
7071  2BE5
7072  2BE6
7073  2BE7
7074  2BE8
7075  2BE9
7076  2BEA
7077  2BEB
7078  2BEC
7079  2BED
7080  2BEE
7081  2BEF
7082  2BF0
7083  2BF1
7084  2BF2
7085  2BF3
7086  2BF4
7087  2BF5
7088  2BF6
7089  2BF7
7090  2BF8
7091  2BF9
7092  2BFA
7093  2BFB
7094  2BFC
7095  2BFD
7096  2BFE
7097  2BFF
7098  2C00
7099  2C01
7100  2C02
7101  2C03
7102  2C04
7103  2C05
7104  2C06
7105  2C07
7106  2C08
7107  2C09
7108  2C0A
7109  2C0B
7110  2C0C
7111  2C0D
7112  2C0E
7113  2C0F
7114  2C10
7115  2C11
7116  2C12
7117  2C13
7118  2C14
7119  2C15
7120  2C16
7121  2C17
7122  2C18
7123  2C19
7124  2C1A
7125  2C1B
7126  2C1C
7127  2C1D
7128  2C1E
7129  2C1F
7130  2C20
7131  2C21
7132  2C22
7133  2C23
7134  2C24
7135  2C25
7136  2C26
7137  2C27
7138  2C28
7139  2C29
7140  2C2A
7141  2C2B
7142  2C2C
7143  2C2D
7144  2C2E
7145  2C2F
7146  2C30
7147  2C31
7148  2C32
7149  2C33
7150  2C34
7151  2C35
7152  2C36
7153  2C37
7154  2C38
7155  2C39
7156  2C3A
7157  2C3B
7158  2C3C
7159  2C3D
7160  2C3E
7161  2C3F
7162  2C40
7163  2C41
7164  2C42
7165  2C43
7166  2C44
7167  2C45
7168  2C46
7169  2C47
7170  2C48
7171  2C49
7172  2C4A
7173  2C4B
7174  2C4C
7175  2C4D
7176  2C4E
7177  2C4F
7178  2C50
7179  2C51
7180  2C52
7181  2C53
7182  2C54
7183  2C55
7184  2C56
7185  2C57
7186  2C58
7187  2C59
7188  2C5A
7189  2C5B
7190  2C5C
7191  2C5D
7192  2C5E
7193  2C5F
7194  2C60
7195  2C61
7196  2C62
7197  2C63
7198  2C64
7199  2C65
7200  2C66
7201  2C67
7202  2C68
7203  2C69
7204  2C6A
7205  2C6B
7206  2C6C
7207  2C6D
7208  2C6E
7209  2C6F
7210  2C70
7211  2C71
7212  2C72
7213  2C73
7214  2C74
7215  2C75
7216  2C76
7217  2C77
7218  2C78
7219  2C79
7220  2C7A
7221  2C7B
7222  2C7C
7223  2C7D
7224  2C7E
7225  2C7F
7226  2C80
7227  2C81
7228  2C82
7229  2C83
7230  2C84
7231  2C85
7232  2C86
7233  2C87
7234  2C88
7235  2C89
7236  2C8A
7237  2C8B
7238  2C8C
7239  2C8D
7240  2C8E
7241  2C8F
7242  2C90
7243  2C91
7244  2C92
7245  2C93
7246  2C94
7247  2C95
7248  2C96
7249  2C97
7250  2C98
7251  2C99
7252  2C9A
7253  2C9B
7254  2C9C
7255  2C9D
7256  2C9E
7257  2C9F
7258  2CA0
7259  2CA1
7260  2CA2
7261  2CA3
7262  2CA4
7263  2CA5
7264  2CA6
7265  2CA7
7266  2CA8
7267  2CA9
7268  2CAA
7269  2CAB
7270  2CAC
7271  2CAD
7272  2CAE
7273  2CAF
7274  2CB0
7275  2CB1
7276  2CB2
7277  2CB3
7278  2CB4
7279  2CB5
7280  2CB6
7281  2CB7
7282  2CB8
7283  2CB9
7284  2CBA
7285  2CBB
7286  2CBC
7287  2CBD
7288  2CBE
7289  2CBF
7290  2CC0
7291  2CC1
7292  2CC2
7293  2CC3
7294  2CC4
7295  2CC5
7296  2CC6
7297  2CC7
7298  2CC8
7299  2CC9
7300  2CCA
7301  2CCB
7302  2CCC
7303  2CCD
7304  2CCE
7305  2CCF
7306  2CD0
7307  2CD1
7308  2CD2
7309  2CD3
7310  2CD4
7311  2CD5
7312  2CD6
7313  2CD7
7314  2CD8
7315  2CD9
7316  2CDA
7317  2CDB
7318  2CDC
7319  2CDD
7320  2CDE
7321  2CDF
7322  2CE0
7323  2CE1
7324  2CE2
7325  2CE3
7326  2CE4
7327  2CE5
7328  2CE6
7329  2CE7
7330  2CE8
7331  2CE9
7332  2CEA
7333  2CEB
7334  2CEC
7335  2CED
7336  2CEE
7337  2CEF
7338  2CF0
7339  2CF1
7340  2CF2
7341  2CF3
7342  2CF4
7343  2CF5
7344  2CF6
7345  2CF7
7346  2CF8
7347  2CF9
7348  2CFA
7349  2CFB
7350  2CFC
7351  2CFD
7352  2CFE
7353  2CFF
7354  2D00
7355  2D01
7356  2D02
7357  2D03
7358  2D04
7359  2D05
7360  2D06
7361  2D07
7362  2D08
7363  2D09
7364  2D0A
7365  2D0B
7366  2D0C
7367  2D0D
7368  2D0E
7369  2D0F
7370  2D10
7371  2D11
7372  2D12
7373  2D13
7374  2D14
7375  2D15
7376  2D16
7377  2D17
7378  2D18
7379  2D19
7380  2D1A
7381  2D1B
7382  2D1C
7383  2D1D
7384  2D1E
7385  2D1F
7386  2D20
7387  2D21
7388  2D22
7389  2D23
7390  2D24
7391  2D25
7392  2D26
7393  2D27
7394  2D28
7395  2D29
7396  2D2A
7397  2D2B
7398  2D2C
7399  2D2D
7400  2D2E
7401  2D2F
7402  2D30
7403  2D31
7404  2D32
7405  2D33
7406  2D34
7407  2D35
7408  2D36
7409  2D37
7410  2D38
7411  2D39
7412  2D3A
7413  2D3B
7414  2D3C
7415  2D3D
7416  2D3E
7417  2D3F
7418  2D40
7419  2D41
7420  2D42
7421  2D43
7422  2D44
7423  2D45
7424  2D46
7425  2D47
7426  2D48
7427  2D49
7428  2D4A
7429  2D4B
7430  2D4C
7431  2D4D
7432  2D4E
7433  2D4F
7434  2D50
7435  2D51
7436  2D52
7437  2D53
7438  2D54
7439  2D55
7440  2D56
7441  2D57
7442  2D58
7443  2D59
7444  2D5A
7445  2D5B
7446  2D5C
7447  2D5D
7448  2D5E
7449  2D5F
7450  2D60
7451  2D61
7452  2D62
7453  2D63
7454  2D64
7455  2D65
7456  2D66
7457  2D67
7458  2D68
7459  2D69
7460  2D6A
7461  2D6B
7462  2D6C
7463  2D6D
7464  2D6E
7465  2D6F
7466  2D70
7467  2D71
7468  2D72
7469  2D73
7470  2D74
7471  2D75
7472  2D76
7473  2D77
7474  2D78
7475  2D79
7476  2D7A
7477  2D7B
7478  2D7C
7479  2D7D
7480  2D7E
7481  2D7F
7482  2D80
7483  2D81
7484  2D82
7485  2D83
7486  2D84
7487  2D85
7488  2D86
7489  2D87
7490  2D88
7491  2D89
7492  2D8A
7493  2D8B
7494  2D8C
7495  2D8D
7496  2D8E
7497  2D8F
7498  2D90
7499  2D91
7500  2D92
7501  2D93
7502  2D94
7503  2D95
7504  2D96
7505  2D97
7506  2D98
7507  2D99
7508  2D9A
7509  2D9B
7510  2D9C
7511  2D9D
7512  2D9E
7513  2D9F
7514  2DA0
7515  2DA1
7516  2DA2
7517  2DA3
7518  2DA4
7519  2DA5
7520  2DA6
7521  2DA7
7522  2DA8
7523  2DA9
7524  2DAA
7525  2DAB
7526  2DAC
7527  2DAD
7528  2DAE
7529  2DAF
7530  2DB0
7531  2DB1
7532  2DB2
7533  2DB3
7534  2DB4
7535  2DB5
7536  2DB6
7537  2DB7
7538  2DB8
7539  2DB9
7540  2DBA
7541  2DBB
7542  2DBC
7543  2DBD
7544  2DBE
7545  2DBF
7546  2DC0
7547  2DC1
7548  2DC2
7549  2DC3
7550  2DC4
7551  2DC5
7552  2DC6
7553  2DC7
7554  2DC8
7555  2DC9
7556  2DCA
7557  2DCB
7558  2DCC
7559  2DCD
7560  2DCE
7561  2DCF
7562  2DD0
7563  2DD1
7564  2DD2
7565  2DD3
7566  2DD4
7567  2DD5
7568  2DD6
7569  2DD7
7570  2DD8
7571  2DD9
7572  2DDA
7573  2DDB
7574  2DDC
7575  2DDD
7576  2DDE
7577  2DDF
7578  2DE0
7579  2DE1
7580  2DE2
7581  2DE3
7582  2DE4
7583  2DE5
7584  2DE6
7585  2DE7
7586  2DE8
7587  2DE9
7588  2DEA
7589  2DEB
7590  2DEC
7591  2DED
7592  2DEE
7593  2DEF
7594  2DF0
7595  2DF1
7596  2DF2
7597  2DF3
7598  2DF4
7599  2DF5
7600  2DF6
7601  2DF7
7602  2DF8
7603  2DF9
7604  2DFA
7605  2DFB
7606  2DFC
7607  2DFD
7608  2DFE
7609  2DFF
7610  2E00
7611  2E01
7612  2E02
7613  2E03
7614  2E04
7615  2E05
7616  2E06
7617  2E07
7618  2E08
7619  2E09
7620  2E0A
7621  2E0B
7622  2E0C
7623  2E0D
7624  2E0E
7625  2E0F
7626  2E10
7627  2E11
7628  2E12
7629  2E13
7630  2E14
7631  2E15
7632  2E16
7633  2E17
7634  2E18
7635  2E19
7636  2E1A
7637  2E1B
7638  2E1C
7639  2E1D
7640  2E1E
7641  2E1F
7642  2E20
7643  2E21
7644  2E22
7645  2E23
7646  2E24
7647  2E25
7648  2E26
7649  2E27
7650  2E28
7651  2E29
7652  2E2A
7653  2E2B
7654  2E2C
7655  2E2D
7656  2E2E
7657  2E2F
7658  2E30
7659  2E31
7660  2E32
7661  2E33
7662  2E34
7663  2E35
7664  2E36
7665  2E37
7666  2E38
7667  2E39
7668  2E3A
7669  2E3B
7670  2E3C
7671  2E3D
7672  2E3E
7673  2E3F
7674  2E40
7675  2E41
7676  2E42
7677  2E43
7678  2E44
7679  2E45
7680  2E46
7681  2E47
7682  2E48
7683  2E49
7684  2E4A
7685  2E4B
7686  2E4C
7687  2E4D
7688  2E4E
7689  2E4F
7690  2E50
7691  2E51
7692  2E52
7693  2E53
7694  2E54
7695  2E55
7696  2E56
7697  2E57
7698  2E58
7699  2E59
7700  2E5A
7701  2E5B
7702  2E5C
7703  2E5D
7704  2E5E
7705  2E5F
7706  2E60
7707  2E61
7708  2E62
7709  2E63
7710  2E64
7711  2E65
7712  2E66
7713  2E67
7714  2E68
7715  2E69
7716  2E6A
7717  2E6B
7718  2E6C
7719  2E6D
7720  2E6E
7721  2E6F
7722  2E70
7723  2E71
7724  2E72
7725  2E73
7726  2E74
7727  2E75
7728  2E76
7729  2E77
7730  2E78
7731  2E79
7732  2E7A
7733  2E7B
7734  2E7C
7735  2E7D
7736  2E7E
7737  2E7F
7738  2E80
7739  2E81
7740  2E82
7741  2E83
7742  2E84
7743  2E85
7744  2E86
7745  2E87
7746  2E88
7747  2E89
7748  2E8A
7749  2E8B
7750  2E8C
7751  2E8D
7752  2E8E
7753  2E8F
7754  2E90
7755  2E91
7756  2E92
7757  2E93
7758  2E94
7759  2E95
7760  2E96
7761  2E97
7762  2E98
7763  2E99
7764  2E9A
7765  2E9B
7766  2E9C
7767  2E9D
7768  2E9E
7769  2E9F
7770  2EA0
7771  2EA1
7772  2EA2
7773  2EA3
7774  2EA4
7775  2EA5
7776  2EA6
7777  2EA7
7778  2EA8
7779  2EA9
7780  2EAA
7781  2EAB
7782  2EAC
7783  2EAD
7784  2EAE
7785  2EAF
7786  2EB0
7787  2EB1
7788  2EB2
7789  2EB3
7790  2EB4
7791  2EB5
7792  2EB6
7793  2EB7
7794  2EB8
7795  2EB9
7796  2EBA
7797  2EBB
7798  2EBC
7799  2EBD
7800  2EBE
7801  2EBF
7802  2EC0
7803  2EC1
7804  2EC2
7805  2EC3
7806  2EC4
7807  2EC5
7808  2EC6
7809  2EC7
7810  2EC8
7811  2EC9
7812  2ECA
7813  2ECB
7814  2ECC
7815  2ECD
7816  2ECE
7817  2ECF
7818  2ED0
7819  2ED1
7820  2ED2
7821  2ED3
7822  2ED4
7823  2ED5
7824  2ED6
7825  2ED7
7826  2ED8
7827  2ED9
7828  2EDA
7829  2EDB
7830  2EDC
7831  2EDD
7832  2EDE
7833  2EDF
7834  2EE0
7835  2EE1
7836  2EE2
7837  2EE3
7838  2EE4
7839  2EE5
7840  2EE6
7841  2EE7
7842  2EE8
7843  2EE9
7844  2EEA
7845  2EEB
7846  2EEC
7847  2EED
7848  2EEE
7849  2EEF
7850  2EF0
7851  2EF1
7852  2EF2
7853  2EF3
7854  2EF4
7855  2EF5
7856  2EF6
7857  2EF7
7858  2EF8
7859  2EF9
7860  2EFA
7861  2EFB
7862  2EFC
7863  2EFD
7864  2EFE
7865  2EFF
7866  2F00
7867  2F01
7868  2F02
7869  2F03
7870  2F04
7871  2F05
7872  2F06
7873  2F07
7874  2F08
7875  2F09
7876  2F0A
7877  2F0B
7878  2F0C
7879  2F0D
7880  2F0E
7881  2F0F
7882  2F10
7883  2F11
7884  2F12
7885  2F13
7886  2F14
7887  2F15
7888  2F16
7889  2F17
7890  2F18
7891  2F19
7892  2F1A
7893  2F1B
7894  2F1C
7895  2F1D
7896  2F1E
7897  2F1F
7898  2F20
7899  2F21
7900  2F22
7901  2F23
7902  2F24
7903  2F25
7904  2F26
7905  2F27
7906  2F28
7907  2F29
7908  2F2A
7909  2F2B
7910  2F2C
7911  2F2D
7912  2F2E
7913  2F2F
7914  2F30
7915  2F31
7916  2F32
7917  2F33
7918  2F34
7919  2F35
7920  2F36
7921  2F37
7922  2F38
7923  2F39
7924  2F3A
7925  2F3B
7926  2F3C
7927  2F3D
7928  2F3E
7929  2F3F
7930  2F40
7931  2F41
7932  2F42
7933  2F43
7934  2F44
7935  2F45
7936  2F46
7937  2F47
7938  2F48
7939  2F49
7940  2F4A
7941  2F4B
7942  2F4C
7943  2F4D
7944  2F4E
7945  2F4F
7946  2F50
7947  2F51
7948  2F52
7949  2F53
7950  2F54
7951  2F55
7952  2F56
7953  2F57
7954  2F58
7955  2F59
7956  2F5A
7957  2F5B
7958  2F5C
7959  2F5D
7960  2F5E
7961  2F5F
7962  2F60
7963  2F61
7964  2F62
7965  2F63
7966  2F64
7967  2F65
7968  2F66
7969  2F67
7970  2F68
7971  2F69
7972  2F6A
7973  2F6B
7974  2F6C
7975  2F6D
7976  2F6E
7977  2F6F
7978  2F70
7979  2F71
7980  2F72
7981  2F73
7982  2F74
7983  2F75
7984  2F76
7985  2F77
7986  2F78
7987  2F79
7988  2F7A
7989  2F7B
7990  2F7C
7991  2F7D
7992  2F7E
7993  2F7F
7994  2F80
7995  2F81
7996  2F82
7997  2F83
7998  2F84
7999  2F85
8000  2F86
8001  2F87
8002  2F88
8003  2F89
8004  2F8A
8005  2F8B
8006  2F8C
8007  2F8D
8008  2F8E
8009  2F8F
8010  2F90
8011  2F91
8012  2F92
8013  2F93
8014  2F94
8015  2F95
8016  2F96
8017  2F97
8018  2F98
8019  2F99
8020  2F9A
8021  2F9B
8022  2F9C
8023  2F9D
8024  2F9E
8025  2F9F
8026  2FA0
8027  2FA1
8028  2FA2
8029  2FA3
8030  2FA4
8031  2FA5
8032  2FA6
8033  2FA7
8034  2FA8
8035  2FA9
8036  2FAA
8037  2FAB
8038  2FAC
8039  2FAD
8040  2FAE
8041  2FAF
8042  2FB0
8043  2FB1
8044  2FB2
8045  2FB3
8046  2FB4
8047  2FB5
8048  2FB6
8049  2FB7
8050  2FB8
8051  2FB9
8052  2FBA
8053  2FBB
8054  2FBC
8055  2FBD
8056  2FBE
8057  2FBF
8058  2FC0
8059  2FC1
8060  2FC2
8061  2FC3
8062  2FC4
8063  2FC5
8064  2FC6
8065  2FC7
8066  2FC8
8067  2FC9
8068  2FCA
8069  2FCB
8070  2FCC
8071  2FCD
8072  2FCE
8073  2FCF
8074  2FD0
8075  2FD1
8076  2FD2
8077  2FD3
8078  2FD4
8079  2FD5
8080  2FD6
8081  2FD7
8082  2FD8
8083  2FD9
8084  2FDA
8085  2FDB
8086  2FDC
8087  2FDD
8088  2FDE
8089  2FDF
8090  2FE0
8091  2FE1
8092  2FE2
8093  2FE3
8094  2FE4
8095  2FE5
8096  2FE6
8097  2FE7
8098  2FE8
8099  2FE9
8100  2FEA
8101  2FEB
8102  2FEC
8103  2FED
8104  2FEE
8105  2FEF
8106  2FF0
8107  2FF1
8108  2FF2
8109  2FF3
8110  2FF4
8111  2FF5
8112  2FF6
8113  2FF7
8114  2FF8
8115  2FF9
8116  2FFA
8117  2FFB
8118  2FFC
8119  2FFD
8120  2FFE
8121  2FFF
8122  3000
8123  3001
8124  3002
8125  3003
8126  3004
8127  3005
8128  3006
8129  3007
8130  3008
8131  3009
8132  300A
8133  300B
8134  300C
8135  300D
8136  300E
8137  300F
8138  3010
8139  3011
8140  3012
8141  3013
8142  3014
8143  3015
8144  3016
8145  3017
8146  3018
8147  3019
8148  301A
8149  301B
8150  301C
8151  301D
8152  301E
8153  301F
8154  3020
8155  3021
8156  3022
8157  3023
8158  3024
8159  3025
8160  3026
8161  3027
8162  3028
8163  3029
8164  302A
8165  302B
8166  302C
8167  302D
8168  302E
8169  302F
8170  3030
8171  3031
8172  3032
8173  3033
8174  3034
8175  3035
8176  3036
8177  3037
8178  3038
8179  3039
8180  303A
8181  303B
8182  303C
8183  303D
8184  303E
8185  303F
8186  3040
8187  3041
8188  3042
8189  3043
8190  3044
8191  3045
8192  3046
8193  3047
8194  3048
8195  3049
8196  304A
8197  304B
8198  304C
8199  304D
8200  304E
8201  304F
8202  3050
8203  3051
8204  3052
8205  3053
8206  3054
8207  3055
8208  3056
8209  3057
8210  3058
8211  3059
8212  305A
8213  305B
8214  305C
8215  305D
8216  305E
8217  305F
8218  3060
8219  3061
8220  3062
8221  3063
8222  3064
8223  3065
8224  3066
8225  3067
8226  3068
8227  3069
8228  306A
8229  306B
8230  306C
8231  306D
8232  306E
8233  306F
8234  3070
8235  3071
8236  3072
8237  3073
8238  3074
8239  3075
8240  3076
8241  3077
8242  3078
8243  3079
8244  307A
8245  307B
8246  307C
8247  307D
8248  307E
8249  307F
8250  3080
8251  3081
8252  3082
8253  3083
8254  3084
8255  3085
8256  3086
8257  3087
8258  3088
8259  3089
8260  308A
8261  308B
8262  308C
8263  308D
8264  308E
8265  308F
8266  3090
8267  3091
8268  3092
8269  3093
8270  3094
8271  3095
8272  3096
8273  3097
8274  3098
8275  3099
8276  309A
8277  309B
8278  309C
8279  309D
8280  309E
8281  309F
8282  30A0
8283  30A1
8284  30A2
8285  30A3
8286  30A4
8287  30A5
8288  30A6
8289  30A7
8290  30A8
8291  30A9
8292  30AA
8293  30AB
8294  30AC
8295  30AD
8296  30AE
8297  30AF
8298  30B0
8299  30B1
8300  30B2
8301  30B3
8302  30B4
8303  30B5
8304  30B6
8305  30B7
8306  30B8
8307  30B9
8308  30BA
8309  30BB
8310  30BC
8311  30BD
8312  30BE
8313  30BF
8314  30C0
8315  30C1
8316  30C2
8317  30C3
8318  30C4
8319  30C5
8320  30C6
8321  30C7
8322  30C8
8323  30C9
8324  30CA
8325  30CB
8326  30CC
8327  30CD
8328  30CE
8329  30CF
8330  30D0
8331  30D1
8332  30D2
8333  30D3
8334  30D4
8335  30D5
8336  30D6
8337  30D7
8338  30D8
8339  30D9
8340  30DA
8341  30DB
8342  30DC
8343  30DD
8344  30DE
8345  30DF
8346  30E0
8347  30E1
8348  30E2
8349  30E3
8350  30E4
8351  30E5
8352  30E6
8353  30E7
8354  30E8
8355  30E9
8356  30EA
8357  30EB
8358  30EC
8359  30ED
8360  30EE
8361  30EF
8362  30F0
8363  30F1
8364  30F2
8365  30F3
8366  30F4
8367  30F5
8368  30F6
8369  30F7
8370  30F8
8371  30F9
8372  30FA
8373  30FB
8374  30FC
8375  30FD
8376  30FE
8377  30FF
8378  3100
8379  3101
8380  3102
8381  3103
8382  3104
8383  3105
8384  3106
8385  3107
8386  3108
8387  3109
8388  310A
8389  310B
8390  310C
8391  310D
8392  310E
8393  310F
8394  3110
8395  3111
8396  3112
8397  3113
8398  3114
8399  3115
8400  3116
8401  3117
8402  3118
8403  3119
8404  311A
8405  311B
8406  311C
8407  311D
8408  311E
8409  311F
8410  3120
8411  3121
8412  3122
8413  3123
8414  3124
8415  3125
8416  3126
8417  3127
8418  3128
8419  3129
8420  312A
8421  312B
8422  312C
8423  312D
8424  312E
8425  312F
8426  3130
8427  3131
8428  3132
8429  3133
8430  3134
8431  3135
8432  3136
8433  3137
8434  3138
8435  3139
8436  313A
8437  313B
8438  313C
8439  313D
8440  313E
8441  313F
8442  3140
8443  3141
8444  3142
8445  3143
8446  3144
8447  3145
8448  3146
8449  3147
8450  3148
8451  3149
8452  314A
8453  314B
8454  314C
8455  314D
8456  314E
8457  314F
8458  3150
8459  3151
8460  3152
8461  3153
8462  3154
8463  3155
8464  3156
8465  3157
8466  3158
8467  3159
8468  315A
8469  315B
8470  315C
8471  315D
8472  315E
8473  315F
8474  3160
8475  3161
8476  3162
8477  3163
8478  3164
8479  3165
8480  3166
8481  3167
8482  3168
8483  3169
8484  316A
8485  316B
8486  316C
8487  316D
8488  316E
8489  316F
8490  3170
8491  3171
8492  3172
8493  3173
8494  3174
8495  3175
8496  3176
8497  3177
8498  3178
8499  3179
8500  317A
8501  317B
8502  317C
8503  317D
8504  317E
8505  317F
8506  3180
8507  3181
8508  3182
8509  3183
8510  3184
8511  3185
8512  3186
8513  3187
8514  3188
8515  3189
8516  318A
8517  318B
8518  318C
8519  318D
8520  318E
8521  318F
8522  3190
8523  3191
8524  3192
8525  3193
8526  3194
8527  3195
8528  3196
8529  3197
8530  3198
8531  3199
8532  319A
8533  319B
8534  319C
8535  319D
8536  319E
8537  319F
8538  31A0
8539  31A1
8540  31A2
8541  31A3
8542  31A4
8543  31A5
8544  31A6
8545  31A7
8546  31A8
8547  31A9
8548  31AA
8549  31AB
8550  31AC
8551  31AD
8552  31AE
8553  31AF
8554  31B0
8555  31B1
8556  31B2
8557  31B3
8558  31B4
8559  31B5
8560  31B6
8561  31B7
8562  31B8
8563  31B9
8564  31BA
8565  31BB
8566  31BC
8567  31BD
8568  31BE
8569  31BF
8570  31C0
8571  31C1
8572  31C2
8573  31C3
8574  31C4
8575  31C5
8576  31C6
8577  31C7
8578  31C8
8579  31C9
8580  31CA
8581  31CB
8582  31CC
8583  31CD
8584  31CE
8585  31CF
8586  31D0
8587  31D1
8588  31D2
8589  31D3
8590  31D4
8591  31D5
8592  31D6
8593  31D7
8594  31D8
8595  31D9
8596  31DA
8597  31DB
8598  31DC
8599  31DD
8600  31DE
8601  31DF
8602  31E0
8603  31E1
8604  31E2
8605  31E3
8606  31E4
8607  31E5
8608  31E6
8609  31E7
8610  31E8
8611  31E9
8612  31EA
8613  31EB
8614  31EC
8615  31ED
8616  31EE
8617  31EF
8618  31F0
8619  31F1
8620  31F2
8621  31F3
8622  31F4
8623  31F5
8624  31F6
8625  31F7
8626  31F8
8627  31F9
8628  31FA
8629  31FB
8630  31FC
8631  31FD
8632  31FE
8633  31FF
8634  3200
8635  3201
8636  3202
8637  3203
8638  3204
8639  3205
8640  3206
8641  3207
8642  3208
8643  3209
8644  320A
8645  320B
8646  320C
8647  320D
8648  320E
8649  320F
8650  3210
8651  3211
8652  3212
8653  3213
8654  3214
8655  3215
8656  3216
8657  3217
8658  3218
8659  3219
8660  321A
8661  321B
8662  321C
8663  321D
8664  321E
8665  321F
8666  3220
8667  3221
8668  3222
8669  3223
8670  3224
8671  3225
8672  3226
8673  3227
8674  3228
8675  3229
8676  322A
8677  322B
8678  322C
8679  322D
8680  322E
8681  322F
8682  3230
8683  3231
8684  3232
8685  3233
8686  3234
8687  3235
8688  3236
8689  3237
8690  3238
8691  3239
8692  323A
8693  323B
8694  323C
8695  323D
8696  323E
8697  323F
8698  3240
8699  3241
8700  3242
8701  3243
8702  3244
8703  3245
8704  3246
8705  3247
8706  3248
8707  3249
8708  324A
8709  324B
8710  324C
8711  324D
8712  324E
8713  324F
8714  3250
8715  3251
8716  3252
8717  3253
8718  3254
8719  3255
8720  3256
8721  3257
8722  3258
8723  3259
8724  325A
8725  325B
8726  325C
8727  325D
8728  325E
8729  325F
8730  3260
8731  3261
8732  3262
8733  3263
8734  3264
8735  3265
8736  3266
8737  3267
8738  3268
8739  3269
8740  326A
8741  326B
8742  326C
8743  326D
8744  326E
8745  326F
8746  3270
8747  3271
8748  3272
8749  3273
8750  3274
8751  3275
8752  3276
8753  3277
8754  3278
8755  3279
8756  327A
8757  327B
8758  327C
8759  327D
8760  327E
8761  327F
8762  3280
8763  3281
8764  3282
8765  3283
8766  3284
8767  3285
8768  3286
8769  3287
8770  3288
8771  3289
8772  328A
8773  328B
8774  328C
8775  328D
8776  328E
8777  328F
8778  3290
8779  3291
8780  3292
8781  3293
8782  3294
8783  3295
8784  3296
8785  3297
8786  3298
8787  3299
8788  329A
8789  329B
8790  329C
8791  329D
8792  329E
8793  329F
8794  32A0
8795  32A1
8796  32A2
8797  32A3
8798  32A4
8799  32A5
8800  32A6
8801  32A7
8802  32A8
8803  32A9
8804  32AA
8805  32AB
8806  32AC
8807  32AD
8808  32AE
8809  32AF
8810  32B0
8811  32B1
8812  32B2
8813  32B3
8814  32B4
8815  32B5
8816  32B6
8817  32B7
8818  32B8
8819  32B9
8820  32BA
8821  32BB
8822  32BC
8823  32BD
8824  32BE
8825  32BF
8826  32C0
8827  32C1
8828  32C2
8829  32C3
8830  32C4
8831  32C5
8832  32C6
8833  32C7
8834  32C8
8835  32C9
8836  32CA
8837  32CB
8838  32CC
8839  32CD
8840  32CE
8841  32CF
8842  32D0
8843  32D1
8844  32D2
8845  32D3
8846  32D4
8847  32D5
8848  32D6
8849  32D7
8850  32D8
8851  32D9
8852  32DA
8853  32DB
8854  32DC
8855  32DD
8856  32DE
8857  32DF
8858  32E0
8859  32E1
8860  32E2
8861  32E3
8862  32E4
8863  32E5
8864  32E6
8865  32E7
8866  32E8
8867  32E9
8868  32EA
8869  32EB
8870  32EC
8871  32ED
8872  32EE
8873  32EF
8874  32F0
8875  32F1
8876  32F2
8877  32F3
8878  32F4
8879  32F5
8880  32F6
8881  32F7
8882  32F8
8883  32F9
8884  32FA
8885  32FB
8886  32FC
8887  32FD
8888  32FE
8889  32FF
8890  3300
8891  3301
8892  3302
8893  3303
8894  3304
8895  3305
8896  3306
8897  3307
8898  3308
8899  3309
8900  330A
8901  330B
8902  330C
8903  330D
8904  330E
8905  330F
8906  3310
8907  3311
8908  3312
8909  3313
8910  3314
8911  3315
8912  3316
8913  3317
8914  3318
8915  3319
8916  331A
8917  331B
8918  331C
8919  331D
8920  331E
8921  331F
8922  3320
8923  3321
8924  3322
8925  3323
8926  3324
8927  3325
8928  3326
8929  3327
8930  3328
8931  3329
8932  332A
8933  332B
8934  332C
8935  332D
8936  332E
8937  332F
8938  3330
8939  3331
8940  3332
8941  3333
8942  3334
8943  3335
8944  3336
8945  3337
8946  3338
8947  3339
8948  333A
8949  333B
8950  333C
8951  333D
8952  333E
8953  333F
8954  3340
8955  3341
8956  3342
8957  3343
8958  3344
8959  3345
8960  3346
8961  3347
8962  3348
8963  3349
8964  334A
8965  334B
8966  334C
8967  334D
8968  334E
8969  334F
8970  3350
8971  3351
8972  3352
8973  3353
8974  3354
8975  3355
8976  3356
8977  3357
8978  3358
8979  3359
8980  335A
8981  335B
8982  335C
8983  335D
8984  335E
8985  335F
8986  3360
8987  3361
8988  3362
8989  3363
8990  3364
8991  3365
8992  3366
8993  3367
8994  3368
8995  3369
8996  336A
8997  336B
8998  336C
8999  336D
9000  336E
9001  336F
9002  3370
9003  3371
9004  3372
9005  3373
9006  3374
9007  3375
9008  3376
9009  3377
9010  3378
9011  3379
9012  337A
9013  337B
9014  337C
9015  337D
9016  337E
9017  337F
9018  3380
9019  3381
9020  3382
9021  3383
9022  3384
9023  3385
9024  3386
9025  3387
9026  3388
9027  3389
9028  338A
9029  338B
9030  338C
9031  338D
9032  338E
9033  338F
9034  3390
9035  3391
9036  3392
9037  3393
9038  3394
9039  3395
9040  3396
9041  3397
9042  3398
9043  3399
9044  339A
9045  339B
9046  339C
9047  339D
9048  339E
9049  339F
9050  33A0
9051  33A1
9052  33A2
9053  33A3
9054  33A4
9055  33A5
9056  33A6
9057  33A7
9058  33A8
9059  33A9
9060  33AA
9061  33AB
9062  33AC
9063  33AD
9064  33AE
9065  33AF
9066  33B0
9067  33B1
9068  33B2
9069  33B3
9070  33B4
9071  33B5
9072  33B6
9073  33B7
9074  33B8
9075  33B9
9076  33BA
9077  33BB
9078  33BC
9079  33BD
9080  33BE
9081  33BF
9082  33C0
9083  33C1
9084  33C2
9085  33C3
9086  33C4
9087  33C5
9088  33C6
9089  33C7
9090  33C8
9091  33C9
9092  33CA
9093  33CB
9094  33CC
9095  33CD
9096  33CE
9097  33CF
9098  33D0
9099  33D1
9100  33D2
9101  33D3
9102  33D4
9103  33D5
9104  33D6
9105  33D7
9106  33D8
9107  33D9
9108  33DA
9109  33DB
9110  33DC
9111  33DD
9112  33DE
9113  33DF
9114  33E0
9115  33E1
9116  33E2
9117  33E3
9118  33E4
9119  33E5
9120  33E6
9121  33E7
9122  33E8
9123  33E9
9124  33EA
9125  33EB
9126  33EC
9127  33ED
9128  33EE
9129  33EF
9130  33F0
9131  33F1
9132  33F2
9133  33F3
9134  33F4
9135  33F5
9136  33F6
9137  33F7
9138  33F8
9139  33F9
9140  33FA
9141  33FB
9142  33FC
9143  33FD
9144  33FE
9145  33FF
9146  3400
9147  3401
9148  3402
9149  3403
9150  3404
9151  3405
9152  3406
9153  3407
9154  3408
9155  3409
9156  340A
9157  340B
9158  340C
9159  340D
9160  340E
9161  340F
9162  3410
9163  3411
9164  3412
9165  3413
9166  3414
9167  3415
9168  3416
9169  3417
9170  3418
9171  3419
9172  341A
9173  341B
9174  341C
9175  341D
9176  341E
9177  341F
9178  3420
9179  3421
9180  3422
9181  3423
9182  3424
9183  3425
9184  3426
9185  3427
9186  3428
9187  3429
9188  342A
9189  342B
9190  342C
9191  342D
9192  342E
9193  342F
9194  3430
9195  3431
9196  3432
9197  3433
9198  3434
9199  3435
9200  3436
9201  3437
9202  3438
9203  3439
9204  343A
9205  343B
9206  343C
9207  343D
9208  343E
9209  343F
9210  3440
9211  3441
9212  3442
9213  3443
9214  3444
9215  3445
9216  3446
9217  3447
9218  3448
9219  3449
9220  344A
9221  344B
9222  344C
9223  344D
9224  344E
9225  344F
9226  3450
9227  3451
9228  3452
9229  3453
9230  3454
9231  3455
9232  3456
9233  3457
9234  3458
9235  3459
9236  345A
9237  345B
9238  345C
9239  345D
9240  345E
9241  345F
9242  3460
9243  3461
9244  3462
9245  3463
9246  3464
9247  3465
9248  3466
9249  3467
9250  3468
9251  3469
9252  346A
9253  346B
9254  346C
9255  346D
9256  346E
9257  346F
9258  3470
9259  3471
9260  3472
9261  3473
9262  3474
9263  3475
9264  3476
9265  3477
9266  3478
9267  3479
9268  347A
9269  347B
9270  347C
9271  347D
9272  347E
9273  347F
9274  3480
9275  3481
9276  3482
9277  3483
9278  3484
9279  3485
9280  3486
9281  3487
9282  3488
9283  3489
9284  348A
9285  348B
9286  348C
9287  348D
9288  348E
9289  348F
9290  3490
9291  3491
9292  3492
9293  3493
9294  3494
9295  3495
9296  3496
9297  3497
9298  3498
9299  3499
9300  349A
9301  349B
9302  349C
9303  349D
9304  349E
9305  349F
9306  34A0
9307  34A1
9308  34A2
9309  34A3
9310  34A4
9311  34A5
9312  34A6
9313  34A7
9314  34A8
9315  34A9
9316  34AA
9317  34AB
9318  34AC
9319  34AD
9320  34AE
9321  34AF
9322  34B0
9323  34B1
9324  34B2
9325  34B3
9326  34B4
9327  34B5
9328  34B6
9329  34B7
9330  34B8
9331  34B9
9332  34BA
9333  34BB
9334  34BC
9335  34BD
9336  34BE
9337  34BF
9338  34C0
9339  34C1
9340  34C2
9341  34C3
9342  34C4
9343  34C5
9344  34C6
9345  34C7
9346  34C8
9347  34C9
9348  34CA
9349  34CB
9350  34CC
9351  34CD
9352  34CE
9353  34CF
9354  34D0
9355  34D1
9356  34D2
9357  34D3
9358  34D4
9359  34D5
9360  34D6
9361  34D7
9362  34D8
9363  34D9
9364  34DA
9365  34DB
9366  34DC
9367  34DD
9368  34DE
9369  34DF
9370  34E0
9371  34E1
9372  34E2
9373  34E3
9374  34E4
9375  34E5
9376  34E6
9377  34E7
9378  34E8
9379  34E9
9380  34EA
9381  34EB
9382  34EC
9383  34ED
9384  34EE
9385  34EF
9386  34F0
9387  34F1
9388  34F2
9389  34F3
9390  34F4
9391  34F5
9392  34F6
9393  34F7
9394  34F8
9395  34F9
9396  34FA
9397  34FB
9398  34FC
9399  34FD
9400  34FE
9401  34FF
9402  3500
9403  3501
9404  3502
9405  3503
9406  3504
9407  3505
9408  3506
9409  3507
9410  3508
9411  3509
9412  350A
9413  350B
9414  350C
9415  350D
9416  350E
9417  350F
9418  3510
9419  3511
9420  3512
9421  3513
9422  3514
9423  3515
9424  3516
9425  3517
9426  3518
9427  3519
9428  351A
9429  351B
9430  351C
9431  351D
9432  351E
9433  351F
9434  3520
9435  3521
9436  3522
9437  3523
9438  3524
9439  3525
9440  3526
9441  3527
9442  3528
9443  3529
9444  352A
9445  352B
9446  352C
9447  352D
9448  352E
9449  352F
9450  3530
9451  3531
9452  3532
9453  3533
9454  3534
9455  3535
9456  3536
9457  3537
9458  3538
9459  3539
9460  353A
9461  353B
9462  353C
9463  353D
9464  353E
9465  353F
9466  3540
9467  3541
9468  3542
9469  3543
9470  3544
9471  3545
9472  3546
9473  3547
9474  3548
9475  3549
9476  354A
9477  354B
9478  354C
9479  354D
9480  354E
9481  354F
9482  3550
9483  3551
9484  3552
9485  3553
9486  3554
9487  3555
9488  3556
9489  3557
9490  3558
9491  3559
9492  355A
9493  355B
9494  355C
9495  355D
9496  355E
9497  355F
9498  3560
9499  3561
9500  3562
9501  3563
9502  3564
9503  3565
9504  3566
9505  3567
9506  3568
9507  3569
9508  356A
9509  356B
9510  356C
9511  356D
9512  356E
9513  356F
9514  3570
9515  3571
9516  3572
9517  3573
9518  3574
9519  3575
9520  3576
9521  3577
9522  3578
9523  3579
9524  357A
9525  357B
9526  357C
9527  357D
9528  357E
9529  357F
9530  3580
9531  3581
9532  3582
9533  3583
9534  3584
9535  3585
9536  3586
9537  3587
9538  3588
9539  3589
9540  358A
9541  358B
9542  358C
9543  358D
9544  358E
9545  358F
9546  3590
9547  3591
9548  3592
9549  3593
9550  3594
9551  3595
9552  3596
9553  3597
9554  3598
9555  3599
9556  359A
9557  359B
9558  359C
9559  359D
9560  359E
9561  359F
9562  35A0
9563  35A1
9564  35A2
9565  35A3
9566  35A4
9567  35A5
9568  35A6
9569  35A7
9570  35A8
9571  35A9
9572  35AA
9573  35AB
9574  35AC
9575  35AD
9576  35AE
9577  35AF
9578  35B0
9579  35B1
9580  35B2
9581  35B3
9582  35B4
9583  35B5
9584  35B6
9585  35B7
9586  35B8
9587  35B9
9588  35BA
9589  35BB
9590  35BC
9591  35BD
9592  35BE
9593  35BF
9594  35C0
9595  35C1
9596  35C2
9597  35C3
9598  35C4
9599  35C5
9600  35C6
9601  35C7
9602  35C8
9603  35C9
9604  35CA
9605  35CB
9606  35CC
9607  35CD
9608  35CE
9609  35CF
9610  35D0
9611  35D1
9612  35D2
9613  35D3
9614  35D4
9615  35D5
9616  35D6
9617  35D7
9618  35D8
9619  35D9
9620  35DA
9621  35DB
9622  35DC
9623  35DD
9624  35DE
9625  35DF
9626  35E0
9627  35E1
9628  35E2
9629  35E3
9630  35E4
9631  35E5
9632  35E6
9633  35E7
9634  35E8
9635  35E9
9636  35EA
9637  35EB
9638  35EC
9639  35ED
9640  35EE
9641  35EF
9642  35F0
9643  35F1
9644  35F2
9645  35F3
9646  35F4
9647  35F5
9648  35F6
9649  35F7
9650  35F8
9651  35F9
9652  35FA
9653  35FB
9654  35FC
9655  35FD
9656  35FE
9657  35FF
9658  3600
9659  3601
9660  3602
9661  3603
9662  3604
9663  3605
9664  3606
9665  3607
9666  3608
9667  3609
9668  360A
9669  360B
9670  360C
9671  360D
9672  360E
9673  360F
9674  3610
9675  3611
9676  3612
9677  3613
9678  3614
9679  3615
9680  3616
9681  3617
9682  3618
9683  3619
9684  361A
9685  361B
9686  361C
9687  361D
9688  361E
9689  361F
9690  3620
9691  3621
9692  3622
9693  3623
9694  3624
9695  3625
9696  3626
9697  3627
9698  3628
9699  3629
9700  362A
9701  362B
9702  362C
9703  362D
9704  362E
9705  362F
9706  3630
9707  3631
9708  3632
9709  3633
9710  3634
9711  3635
9712  3636
9713  3637
9714  3638
9715  3639
9716  363A
9717  363B
9718  363C
9719  363D
9720  363E
9721  363F
9722  3640
9723  3641
9724  3642
9725  3643
9726  3644
9727  3645
9728  3646
9729  3647
9730  3648
9731  3649
9732  364A
9733  364B
9734  364C
9735  364D
9736  364E
9737  364F
9738  3650
9739  3651
9740  3652
9741  3653
9742  3654
9743  3655
9744  3656
9745  3657
9746  3658
9747  3659
9748  365A
9749  365B
9750  365C
9751  365D
9752  365E
9753  365F
9754  3660
9755  3661
9756  3662
9757  3663
9758  3664
9759  3665
9760  3666
9761  3667
9762  3668
9763  3669
9764  366A
9765  366B
9766  366C
9767  366D
9768  366E
9769  366F
9770  3670
9771  3671
9772  3672
9773  3673
9774  3674
9775  3675
9776  3676
9777  3677
9778  3678
9779  3679
9780  367A
9781  367B
9782  367C
9783  367D
9784  367E
9785  367F
9786  3680
9787  3681
9788  3682
9789  3683
9790  3684
9791  3685
9792  3686
9793  3687
9794  3688
9795  3689
9796  368A
9797  368B
9798  368C
9799  368D
9800  368E
9801  368F
9802  3690
9803  3691
9804  3692
9805  3693
9806  3694
9807  3695
9808  3696
9809  3697
9810  3698
9811  3699
9812  369A
9813  369B
9814  369C
9815  369D
9816  369E
9817  369F
9818  36A0
9819  36A1
9820  36A2
9821  36A3
9822  36A4
9823  36A5
9824  36A6
9825  36A7
9826  36A8
9827  36A9
9828  36AA
9829  36AB
9830  36AC
9831  36AD
9832  36AE
9833  36AF
9834  36B0
9835  36B1
9836  36B2
9837  36B3
9838  36B4
9839  36B5
9840  36B6
9841  36B7
9842  36B8
9843  36B9
9844  36BA
9845  36BB
9846  36BC
9847  36BD
9848  36BE
9849  36BF
9850  36C0
9851  36C1
9852  36C2
9853  36C3
9854  36C4
9855  36C5
9856  36C6
9857  36C7
9858  36C8
9859  36C9
9860  36CA
9861  36CB
9862  36CC
9863  36CD
9864  36CE
9865  36CF
9866  36D0
9867  36D1
9868  36D2
9869  36D3
9870  36D4
9871  36D5
9872  36D6
9873  36D7
9874  36D8
9875  36D9
9876  36DA
9877  36DB
9878  36DC
9879  36DD
9880  36DE
9881  36DF
9882  36E0
9883  36E1
9884  36E2
9885  36E3
9886  36E4
9887  36E5
9888  36E6
9889  36E7
9890  36E8
9891  36E9
9892  36EA
9893  36EB
9894  36EC
9895  36ED
9896  36EE
9897  36EF
9898  36F0
9899  36F1
9900  36F2
9901  36F3
9902  36F4
9903  36F5
9904  36F6
9905  36F7
9906  36F8
9907  36F9
9908  36FA
9909  36FB
9910  36FC
9911  36FD
9912  36FE
9913  36FF
9914  3700
9915  3701
9916  3702
9917  3703
9918  3704
9919  3705
9920  3706
9921  3707
9922  3708
9923  3709
9924  370A
9925  370B
9926  370C
9927  370D
9928  370E
9929  370F
9930  3710
9931  3711
9932  3712
9933  3713
9934  3714
9935  3715
9936  3716
9937  3717
9938  3718
9939  3719
9940  371A
9941  371B
9942  371C
9943  371D
9944  371E
9945  371F
9946  3720
9947  3721
9948  3722
9949  3723
9950  3724
9951  3725
9952  3726
9953  3727
9954  3728
9955  3729
9956  372A
9957  372B
9958  372C
9959  372D
9960  372E
9961  372F
9962  3730
9963  3731
9964  3732
9965  3733
9966  3734
9967  3735
9968  3736
9969  3737
9970  3738
9971  3739
9972  373A
9973  373B
9974  373C
9975  373D
9976  373E
9977  373F
9978  3740
9979  3741
9980  3742
9981  3743
9982  3744
9983  3745
9984  3746
9985  3747
9986  3748
9987  3749
9988  374A
9989  374B
9990  374C
9991  374D
9992  374E
9993  374F
9994  3750
9995  3751
9996  3752
9997  3753
9998  3754
9999  3755
10000  3756
10001  3757
10002  3758
10003  3759
10004  375A
10005  375B
10006  375C
10007  375D
10008  375E
10009  375F
10010  3760
10011  3761
10012  3762
10013  3763
10014  3764
10015  3765
10016  3766
10017  3767
10018  3768
10019  3769
10020  376A
10021  376B
10022  376C
10023  376D
10024  376E
10025  376F
10026  3770
10027  3771
10028  3772
10029  3773
10030  3774
10031  3775
10032  3776
10033  3777
10034  3778
10035  3779
10036  377A
10037  377B
10038  377C
10039  377D
10040  377E
10041  377F
10042  3780
10043  3781
10044  3782
10045  3783
10046  3784
10047  3785
10048  3786
10049  3787
10050  3788
10051  3789
10052  378A
10053  378B
10054  378C
10055  378D
10056  378E
10057  378F
10058  3790
10059  3791
10060  3792
10061  3793
10062  3794
10063  3795
10064  3796
10065  3797
10066  3798
10067  3799
10068  379A
10069  379B
10070  379C
10071  379D
10072  379E
10073  379F
10074  37A0
10075  37A1
10076  37A2
10077  37A3
10078  37A4
10079  37A5
10080  37A6
10081  37A7
10082  37A8
10083  37A9
10084  37AA
10085  37AB
10086  37AC
10087  37AD
10088  37AE
10089  37AF
10090  37B0
10091  37B1
10092  37B2
10093  37B3
10094  37B4
10095  37B5
10096  37B6
10097  37B7
10098  37B8
10099  37B9
10100  37BA
10101  37BB
10102  37BC
10103  37BD
10104  37BE
10105  37BF
10106  37C0
10107  37C1
10108  37C2
10109  37C3
10110  37C4
10111  37C5
10112  37C6
10113  37C7
10114  37C8
10115  37C9
10116  37CA
10117  37CB
10118  37CC
10119  37CD
10120  37CE
10121  37CF
10122  37D0
10123  37D1
10124  37D2
10125  37D3
10126  37D4
10127  37D5
10128  37D6
10129  37D7
10130  37D8
10131  37D9
10132  37DA
10133  37DB
10134  37DC
10135  37DD
10136  37DE
10137  37DF
10138  37E0
10139  37E1
10140  37E2
10141  37E3
10142  37E4
10143  37E5
10144  37E6
10145  37E7
10146  37E8
10147  37E9
10148  37EA
10149  37EB
10150  37EC
10151  37ED
10152  37EE
10153  37EF
10154  37F0
10155  37F1
10156  37F2
10157  37F3
10158  37F4
10159  37F5
10160  37F6
10161  37F7
10162  37F8
10163  37F9
10164  37FA
10165  37FB
10166  37FC
10167  37FD
10168  37FE
10169  37FF
10170  3800
10171  3801
10172  3802
10173  3803
10174  3804
10175  3805
10176  3806
10177  3807
10178  3808
10179  3809
10180  380A
10181  380B
10182  380C
10183  380D
10184  380E
10185  380F
10186  3810
10187  3811
10188  3812
10189  3813
10190  3814
10191  3815
10192  3816
10193  3817
10194  3818
10195  3819
10196  381A
10197  381B
10198  381C
10199  381D
10200  381E
10201  381F
10202  3820
10203  3821
10204  3822
10205  3823
10206  3824
10207  3825
10208  3826
10209  3827
10210  3828
10211  3829
10212  382A
10213  382B
10214  382C
10215  382D
10216  382E
10217  382F
10218  3830
10219  3831
10220  3832
10221  3833
10222  3834
10223  3835
10224  3836
10225  3837
10226  3838
10227  3839
10228  383A
10229  383B
10230  383C
10231  383D
10232  383E
10233  383F
10234  3840
10235  3841
10236  3842
10237  3843
10238  3844
10239  3845
10240  3846
10241  3847
10242  3848
10243  3849
10244  384A
10245  384B
10246  384C
10247  384D
10248  384E
10249  384F
10250  3850
10251  3851
10252  3852
10253  3853
10254  3854
10255  3855
10256  3856
10257  3857
10258  3858
10259  3859
10260  385A
10261  385B
10262  385C
10263  385D
10264  385E
10265  385F
10266  3860
10267  3861
10268  3862
10269  3863
10270  3864
10271  3865
10272  3866
10273  3867
10274  3868
10275  3869
10276  386A
10277  386B
10278  386C
10279  386D
10280  386E
10281  386F
10282  3870
10283  3871
10284  3872
10285  3873
10286  3874
10287  3875
10288  3876
10289  3877
10290  3878
10291  3879
10292  387A
10293  387B
10294  387C
10295  387D
10296  387E
10297  387F
10298  3880
10299  3881
10300  3882
10301  3883
10302  3884
10303  3885
10304  3886
10305  3887
10306  3888
10307  3889
10308  388A
10309  388B
10310  388C
10311  388D
10312  388E
10313  388F
10314  3890
10315  3891
10316  3892
10317  3893
10318  3894
10319  3895
10320  3896
10321  3897
10322  3898
10323  3899
10324  389A
10325  389B
10326  389C
10327  389D
10328  389E
10329  389F
10330  38A0
10331  38A1
10332  38A2
10333  38A3
10334  38A4
10335  38A5
10336  38A6
10337  38A7
10338  38A8
10339  38A9
10340  38AA
10341  38AB
10342  38AC
10343  38AD
10344  38AE
10345  38AF
10346  38B0
10347  38B1
10348  38B2
10349  38B3
10350  38B4
10351  38B5
10352  38B6
10353  38B7
10354  38B8
10355  38B9
10356  38BA
10357  38BB
10358  38BC
10359  38BD
10360  38BE
10361  38BF
10362  38C0
10363  38C1
10364  38C2
10365  38C3
10366  38C4
10367  38C5
10368  38C6
10369  38C7
10370  38C8
10371  38C9
10372  38CA
10373  38CB
10374  38CC
10375  38CD
10376  38CE
10377  38CF
10378  38D0
10379  38D1
10380  38D2
10381  38D3
10382  38D4
10383  38D5
10384  38D6
10385  38D7
10386  38D8
10387  38D9
10388  38DA
10389  38DB
10390  38DC
10391  38DD
10392  38DE
10393  38DF
10394  38E0
10395  38E1
10396  38E2
10397  38E3
10398  38E4
10399  38E5
10400  38E6
10401  38E7
10402  38E8
10403  38E9
10404  38EA
10405  38EB
10406  38EC
10407  38ED
10408  38EE
10409  38EF
10410  38F0
10411  38F1
10412  38F2
10413  38F3
10414  38F4
10415  38F5
10416  38F6
10417  38F7
10418  38F8
10419  38F9
10420  38FA
10421  38FB
10422  38FC
10423  38FD
10424  38FE
10425  38FF
10426  3900
10427  3901
10428  3902
10429  3903
10430  3904
10431  3905
10432  3906
10433  3907
10434  3908
10435  3909
10436  390A
10437  390B
10438  390C
10439  390D
10440  390E
10441  390F
10442  3910
10443  3911
10444  3912
10445  3913
10446  3914
10447  3915
10448  3916
10449  3917
10450  3918
10451  3919
10452  391A
10453  391B
10454  391C
10455  391D
10456  391E
10457  391F
10458  3920
10459  3921
10460  3922
10461  3923
10462  3924
10463  3925
10464  3926
10465  3927
10466  3928
10467  3929
10468  392A
10469  392B
10470  392C
10471  392D
10472  392E
10473  392F
10474  3930
10475  3931
10476  3932
10477  3933
10478  3934
10479  3935
10480  3936
10481  3937
10482  3938
10483  3939
10484  393A
10485  393B
10486  393C
10487  393D
10488  393E
10489  393F
10490  3940
10491  3941
10492  3942
10493  3943
10494  3944
10495  3945
10496  3946
10497  3947
10498  3948
10499  3949
10500  394A
10501  394B
10502  394C
10503  394D
10504  394E
10505  394F
10506  3950
10507  3951
10508  3952
10509  3953
10510  3954
10511  3955
10512  3956
10513  3957
10514  3958
10515  3959
10516  395A
10517  395B
10518  395C
10519  395D
10520  395E
10521  395F
10522  3960
10523  3961
10524  3962
10525  3963
10526  3964
10527  3965
10528  3966
10529  3967
10530  3968
10531  3969
10532  396A
10533  396B
10534  396C
10535  396D
10536  396E
10537  396F
10538  3970
10539  3971
10540  3972
10541  3973
10542  3974
10543  3975
10544  3976
10545  3977
10546  3978
10547  3979
10548  397A
10549  397B
10550  397C
10551  397D
10552  397E
10553  397F
10554  3980
10555  3981
10556  3982
10557  3983
10558  3984
10559  3985
10560  3986
10561  3987
10562  3988
10563  3989
10564  398A
10565  398B
10566  398C
10567  398D
10568  398E
10569  398F
10570  3990
10571  3991
10572  3992
10573  3993
10574  3994
10575  3995
10576  3996
10577  3997
10578  3998
10579  3999
10580  399A
10581  399B
10582  399C
10583  399D
10584  399E
10585  399F
10586  39A0
10587  39A1
10588  39A2
10589  39A3
10590  39A4
10591  39A5
10592  39A6
10593  39A7
10594  39A8
10595  39A9
10596  39AA
10597  39AB
10598  39AC
10599  39AD
10600  39AE
10601  39AF
10602  39B0
10603  39B1
10604  39B2
10605  39B3
10606  39B4
10607  39B5
10608  39B6
10609  39B7
10610  39B8
10611  39B9
10612  39BA
10613  39BB
10614  39BC
10615  39BD
10616  39BE
10617  39BF
10618  39C0
10619  39C1
10620  39C2
10621  39C3
10622  39C4
10623  39C5
10624  39C6
10625  39C7
10626  39C8
10627  39C9
10628  39CA
10629  39CB
10630  39CC
10631  39CD
10632  39CE
10633  39CF
10634  39D0
10635  39D1
10636  39D2
10637  39D3
10638  39D4
10639  39D5
10640  39D6
10641  39D7
10642  39D8
10643  39D9
10644  39DA
10645  39DB
10646  39DC
10647  39DD
10648  39DE
10649  39DF
10650  39E0
10651  39E1
10652  39E2
10653  39E3
10654  39E4
10655  39E5
10656  39E6
10657  39E7
10658  39E8
10659  39E9
10660  39EA
10661  39EB
10662  39EC
10663  39ED
10664  39EE
10665  39EF
10666  39F0
10667  39F1
10668  39F2
10669  39F3
10670  39F4
10671  39F5
10672  39F6
10673  39F7
10674  39F8
10675  39F9
10676  39FA
10677  39FB
10678  39FC
10679  39FD
10680  39FE
10681  39FF
10682  3A00
10683  3A01
10684  3A02
10685  3A03
10686  3A04
10687  3A05
10688  3A06
10689  3A07
10690  3A08
10691  3A09
10692  3A0A
10693  3A0B
10694  3A0C
10695  3A0D
10696  3A0E
10697  3A0F
10698  3A10
10699  3A11
10700  3A12
10701  3A13
10702  3A14
10703  3A15
10704  3A16
10705  3A17
10706  3A18
10707  3A19
10708  3A1A
10709  3A1B
10710  3A1C
10711  3A1D
10712  3A1E
10713  3A1F
10714  3A20
10715  3A21
10716  3A22
10717  3A23
10718  3A24
10719  3A25
10720  3A26
10721  3A27
10722  3A28
10723  3A29
10724  3A2A
10725  3A2B
10726  3A2C
10727  3A2D
10728  3A2E
10729  3A2F
10730  3A30
10731  3A31
10732  3A32
10733  3A33
10734  3A34
10735  3A35
10736  3A36
10737  3A37
10738  3A38
10739  3A39
10740  3A3A
10741  3A3B
10742  3A3C
10743  3A3D
10744  3A3E
10745  3A3F
10746  3A40
10747  3A41
10748  3A42
10749  3A43
10750  3A44
10751  3A45
10752  3A46
10753  3A47
10754  3A48
10755  3A49
10756  3A4A
10757  3A4B
10758  3A4C
10759  3A4D
10760  3A4E
10761  3A4F
10762  3A50
10763  3A51
10764  3A52
10765  3A53
10766  3A54
10767  3A55
10768  3A56
10769  3A57
10770  3A58
10771  3A59
10772  3A5A
10773  3A5B
10774  3A5C
10775  3A5D
10776  3A5E
10777  3A5F
10778  3A60
10779  3A61
10780  3A62
10781  3A63
10782  3A64
10783  3A65
10784  3A66
10785  3A67
10786  3A68
10787  3A69
10788  3A6A
10789  3A6B
10790  3A6C
10791  3A6D
10792  3A6E
10793  3A6F
10794  3A70
10795  3A71
10796  3A72
10797  3A73
10798  3A74
10799  3A75
10800  3A76
10801  3A77
10802  3A78
10803  3A79
10804  3A7A
10805  3A7B
10806  3A7C
10807  3A7D
10808  3A7E
10809  3A7F
10810  3A80
10811  3A81
10812  3A82
10813  3A83
10814  3A84
10815  3A85
10816  3A86
10817  3A87
10818  3A88
10819  3A89
10820  3A8A
10821  3A8B
10822  3A8C
10823  3A8D
10824  3A8E
10825  3A8F
10826  3A90
10827  3A91
10828  3A92
10829  3A93
10830  3A94
10831  3A95
10832  3A96
10833  3A97
10834  3A98
10835  3A99
10836  3A9A
10837  3A9B
10838  3A9C
10839  3A9D
10840  3A9E
10841  3A9F
10842  3AA0
10843  3AA1
10844  3AA2
10845  3AA3
10846  3AA4
10847  3AA5
10848  3AA6
10849  3AA7
10850  3AA8
10851  3AA9
10852  3AAA
10853  3AAB
10854  3AAC
10855  3AAD
10856  3AAE
10857  3AAF
10858  3AB0
10859  3AB1
10860  3AB2
10861  3AB3
10862  3AB4
10863  3AB5
10864  3AB6
10865  3AB7
10866  3AB8
10867  3AB9
10868  3ABA
10869  3ABB
10870  3ABC
10871  3ABD
10872  3ABE
10873  3ABF
10874  3AC0
10875  3AC1
10876  3AC2
10877  3AC3
10878  3AC4
10879  3AC5
10880  3AC6
10881  3AC7
10882  3AC8
10883  3AC9
10884  3ACA
10885  3ACB
10886  3ACC
10887  3ACD
10888  3ACE
10889  3ACF
10890  3AD0
10891  3AD1
10892  3AD2
10893  3AD3
10894  3AD4
10895  3AD5
10896  3AD6
10897  3AD7
10898  3AD8
10899  3AD9
10900  3ADA
10901  3ADB
10902  3ADC
10903  3ADD
10904  3ADE
10905  3ADF
10906  3AE0
10907  3AE1
10908  3AE2
10909  3AE3
10910  3AE4
10911  3AE5
10912  3AE6
10913  3AE7
10914  3AE8
10915  3AE9
10916  3AEA
10917  3AEB
10918  3AEC
10919  3AED
10920  3AEE
10921  3AEF
10922  3AF0
10923  3AF1
10924  3AF2
10925  3AF3
10926  3AF4
10927  3AF5
10928  3AF6
10929  3AF7
10930  3AF8
10931  3AF9
10932  3AFA
10933  3AFB
10934  3AFC
10935  3AFD
10936  3AFE
10937  3AFF
10938  3B00
10939  3B01
10940  3B02
10941  3B03
10942  3B04
10943  3B05
10944  3B06
10945  3B07
10946  3B08
10947  3B09
10948  3B0A
10949  3B0B
10950  3B0C
10951  3B0D
10952  3B0E
10953  3B0F
10954  3B10
10955  3B11
10956  3B12
10957  3B13
10958  3B14
10959  3B15
10960  3B16
10961  3B17
10962  3B18
10963  3B19
10964  3B1A
10965  3B1B
10966  3B1C
10967  3B1D
10968  3B1E
10969  3B1F
10970  3B20
10971  3B21
10972  3B22
10973  3B23
10974  3B24
10975  3B25
10976  3B26
10977  3B27
10978  3B28
10979  3B29
10980  3B2A
10981  3B2B
10982  3B2C
10983  3B2D
10984  3B2E
10985  3B2F
10986  3B30
10987  3B31
10988  3B32
10989  3B33
10990  3B34
10991  3B35
10992  3B36
10993  3B37
10994  3B38
10995  3B39
10996  3B3A
10997  3B3B
10998  3B3C
10999  3B3D
11000  3B3E
11001  3B3F
11002  3B40
11003  3B41
11004  3B42
11005  3B43
11006  3B44
11007  3B45
11008  3B46
11009  3B47
11010  3B48
11011  3B49
11012  3B4A
11013  3B4B
11014  3B4C
11015  3B4D
11016  3B4E
11017  3B4F
11018  3B50
11019  3B51
11020  3B52
11021  3B53
11022  3B54
11023  3B55
11024  3B56
11025  3B57
11026  3B58
11027  3B59
11028  3B5A
11029  3B5B
11030  3B5C
11031  3B5D
11032  3B5E
11033  3B5F
11034  3B60
11035  3B61
11036  3B62
11037  3B63
11038  3B64
11039  3B65
11040  3B66
11041  3B67
11042  3B68
11043  3B69
11044  3B6A
11045  3B6B
11046  3B6C
11047  3B6D
11048  3B6E
11049  3B6F
11050  3B70
11051  3B71
11052  3B72
11053  3B73
11054  3B74
11055  3B75
11056  3B76
11057  3B77
11058  3B78
11059  3B79
11060  3B7A
11061  3B7B
11062  3B7C
11063  3B7D
11064  3B7E
11065  3B7F
11066  3B80
11067  3B81
11068  3B82
11069  3B83
11070  3B84
11071  3B85
11072  3B86
11073  3B87
11074  3B88
11075  3B89
11076  3B8A
11077  3B8B
11078  3B8C
11079  3B8D
11080  3B8E
11081  3B8F
11082  3B90
11083  3B91
11084  3B92
11085  3B93
11086  3B94
11087  3B95
11088  3B96
11089  3B97
11090  3B98
11091  3B99
11092  3B9A
11093  3B9B
11094  3B9C
11095  3B9D
11096  3B9E
11097  3B9F
11098  3BA0
11099  3BA1
11100  3BA2
11101  3BA3
11102  3BA4
11103  3BA5
11104  3BA6
11105  3BA7
11106  3BA8
11107  3BA9
11108  3BAA
11109  3BAB
11110  3BAC
11111  3BAD
11112  3BAE
11113  3BAF
11114  3BB0
11115  3BB1
11116  3BB2
11117  3BB3
11118  3BB4
11119  3BB5
11120  3BB6
11121  3BB7
11122  3BB8
11123  3BB9
11124  3BBA
11125  3BBB
11126  3BBC
11127  3BBD
11128  3BBE
11129  3BBF
11130  3BC0
11131  3BC1
11132  3BC2
11133  3BC3
11134  3BC4
11135  3BC5
11136  3BC6
11137  3BC7
11138  3BC8
11139  3BC9
11140  3BCA
11141  3BCB
11142  3BCC
11143  3BCD
11144  3BCE
11145  3BCF
11146  3BD0
11147  3BD1
11148  3BD2
11149  3BD3
11150  3BD4
11151  3BD5
11152  3BD6
11153  3BD7
11154  3BD8
11155  3BD9
11156  3BDA
11157  3BDB
11158  3BDC
11159  3BDD
11160  3BDE
11161  3BDF
11162  3BE0
11163  3BE1
11164  3BE2
11165  3BE3
11166  3BE4
11167  3BE5
11168  3BE6
11169  3BE7
11170  3BE8
11171  3BE9
11172  3BEA
11173  3BEB
11174  3BEC
11175  3BED
11176  3BEE
11177  3BEF
11178  3BF0
11179  3BF1
11180  3BF2
11181  3BF3
11182  3BF4
11183  3BF5
11184  3BF6
11185  3BF7
11186  3BF8
11187  3BF9
11188  3BFA
11189  3BFB
11190  3BFC
11191  3BFD
11192  3BFE
11193  3BFF
11194  3C00
11195  3C01
11196  3C02
11197  3C03
11198  3C04
11199  3C05
11200  3C06
11201  3C07
11202  3C08
11203  3C09
11204  3C0A
11205  3C0B
11206  3C0C
11207  3C0D
11208  3C0E
11209  3C0F
11210  3C10
11211  3C11
11212  3C12
11213  3C13
11214  3C14
11215  3C15
11216  3C16
11217  3C17
11218  3C18
11219  3C19
11220  3C1A
11221  3C1B
11222  3C1C
11223  3C1D
11224  3C1E
11225  3C1F
11226  3C20
11227  3C21
11228  3C22
11229  3C23
11230  3C24
11231  3C25
11232  3C26
11233  3C27
11234  3C28
11235  3C29
11236  3C2A
11237  3C2B
11238  3C2C
11239  3C2D
11240  3C2E
11241  3C2F
11242  3C30
11243  3C31
11244  3C32
11245  3C33
11246  3C34
11247  3C35
11248  3C36
11249  3C37
11250  3C38
11251  3C39
11252  3C3A
11253  3C3B
11254  3C3C
11255  3C3D
11256  3C3E
11257  3C3F
11258  3C40
11259  3C41
11260  3C42
11261  3C43
11262  3C44
11263  3C45
11264  3C46
11265  3C47
11266  3C48
11267  3C49
11268  3C4A
11269  3C4B
11270  3C4C
11271  3C4D
11272  3C4E
11273  3C4F
11274  3C50
11275  3C51
11276  3C52
11277  3C53
11278  3C54
11279  3C55
11280  3C56
11281  3C57
11282  3C58
11283  3C59
11284  3C5A
11285  3C5B
11286  3C5C
11287  3C5D
11288  3C5E
11289  3C5F
11290  3C60
11291  3C61
11292  3C62
11293  3C63
11294  3C64
11295  3C65
11296  3C66
11297  3C67
11298  3C68
11299  3C69
11300  3C6A
11301  3C6B
11302  3C6C
11303  3C6D
11304  3C6E
11305  3C6F
11306  3C70
11307  3C71
11308  3C72
11309  3C73
11310  3C74
11311  3C75
11312  3C76
11313  3C77
11314  3C78
11315  3C79
11316  3C7A
11317  3C7B
11318  3C7C
11319  3C7D
11320  3C7E
11321  3C7F
11322  3C80
11323  3C81
11324  3C82
11325  3C83
11326  3C84
11327  3C85
11328  3C86
11329  3C87
11330  3C88
11331  3C89
11332  3C8A
11333  3C8B
11334  3C8C
11335  3C8D
11336  3C8E
11337  3C8F
11338  3C90
11339  3C91
11340  3C92
11341  3C93
11342  3C94
11343  3C95
11344  3C96
11345  3C97
11346  3C98
11347  3C99
11348  3C9A
11349  3C9B
11350  3C9C
11351  3C9D
11352  3C9E
11353  3C9F
11354  3CA0
11355  3CA1
11356  3CA2
11357  3CA3
11358  3CA4
11359  3CA5
11360  3CA6
11361  3CA7
11362  3CA8
11363  3CA9
11364  3CAA
11365  3CAB
11366  3CAC
11367  3CAD
11368  3CAE
11369  3CAF
11370  3CB0
11371  3CB1
11372  3CB2
11373  3CB3
11374  3CB4
11375  3CB5
11376  3CB6
11377  3CB7
11378  3CB8
11379  3CB9
11380  3CBA
11381  3CBB
11382  3CBC
11383  3CBD
11384  3CBE
11385  3CBF
11386  3CC0
11387  3CC1
11388  3CC2
11389  3CC3
11390  3CC4
11391  3CC5
11392  3CC6
11393  3CC7
11394  3CC8
11395  3CC9
11396  3CCA
11397  3CCB
11398  3CCC
11399  3CCD
11400  3CCE
11401  3CCF
11402  3CD0
11403  3CD1
11404  3CD2
11405  3CD3
11406  3CD4
11407  3CD5
11408  3CD6
11409  3CD7
11410  3CD8
11411  3CD9
11412  3CDA
11413  3CDB
11414  3CDC
11415  3CDD
11416  3CDE
11417  3CDF
11418  3CE0
11419  3CE1
11420  3CE2
11421  3CE3
11422  3CE4
11423  3CE5
11424  3CE6
11425  3CE7
11426  3CE8
11427  3CE9
11428  3CEA
11429  3CEB
11430  3CEC
11431  3CED
11432  3CEE
11433  3CEF
11434  3CF0
11435  3CF1
11436  3CF2
11437  3CF3
11438  3CF4
11439  3CF5
11440  3CF6
11441  3CF7
11442  3CF8
11443  3CF9
11444  3CFA
11445  3CFB
11446  3CFC
11447  3CFD
11448  3CFE
11449  3CFF
11450  3D00
11451  3D01
11452  3D02
11453  3D03
11454  3D04
11455  3D05
11456  3D06
11457  3D07
11458  3D08
11459  3D09
11460  3D0A
11461  3D0B
11462  3D0C
11463  3D0D
11464  3D0E
11465  3D0F
11466  3D10
11467  3D11
11468  3D12
11469  3D13
11470  3D14
11471  3D15
11472  3D16
11473  3D17
11474  3D18
11475  3D19
11476  3D1A
11477  3D1B
11478  3D1C
11479  3D1D
11480  3D1E
11481  3D1F
11482  3D20
11483  3D21
11484  3D22
11485  3D23
11486  3D24
11487  3D25
11488  3D26
11489  3D27
11490  3D28
11491  3D29
11492  3D2A
11493  3D2B
11494  3D2C
11495  3D2D
11496  3D2E
11497  3D2F
11498  3D30
11499  3D31
11500  3D32
11501  3D33
11502  3D34
11503  3D35
11504  3D36
11505  3D37
11506  3D38
11507  3D39
11508  3D3A
11509  3D3B
11510  3D3C
11511  3D3D
11512  3D3E
11513  3D3F
11514  3D40
11515  3D41
11516  3D42
11517  3D43
11518  3D44
11519  3D45
11520  3D46
11521  3D47
11522  3D48
11523  3D49
11524  3D4A
11525  3D4B
11526  3D4C
11527  3D4D
11528  3D4E
11529  3D4F
11530  3D50
11531  3D51
11532  3D52
11533  3D53
11534  3D54
11535  3D55
11536  3D56
11537  3D57
11538  3D58
11539  3D59
11540  3D5A
11541  3D5B
11542  3D5C
11543  3D5D
11544  3D5E
11545  3D5F
11546  3D60
11547  3D61
11548  3D62
11549  3D63
11550  3D64
11551  3D65
11552  3D66
11553  3D67
11554  3D68
11555  3D69
11556  3D6A
11557  3D6B
11558  3D6C
11559  3D6D
11560  3D6E
11561  3D6F
11562  3D70
11563  3D71
11564  3D72
11565  3D73
11566  3D74
11567  3D75
11568  3D76
11569  3D77
11570  3D78
11571  3D79
11572  3D7A
11573  3D7B
11574  3D7C
11575  3D7D
11576  3D7E
11577  3D7F
11578  3D80
11579  3D81
11580  3D82
11581  3D83
11582  3D84
11583  3D85
11584  3D86
11585  3D87
11586  3D88
11587  3D89
11588  3D8A
11589  3D8B
11590  3D8C
11591  3D8D
11592  3D8E
11593  3D8F
11594  3D90
11595  3D91
11596  3D92
11597  3D93
11598  3D94
11599  3D95
11600  3D96
11601  3D97
11602  3D98
11603  3D99
11604  3D9A
11605  3D9B
11606  3D9C
11607  3D9D
11608  3D9E
11609  3D9F
11610  3DA0
11611  3DA1
11612  3DA2
11613  3DA3
11614  3DA4
11615  3DA5
11616  3DA6
11617  3DA7
11618  3DA8
11619  3DA9
11620  3DAA
11621  3DAB
11622  3DAC
11623  3DAD
11624  3DAE
11625  3DAF
11626  3DB0
11627  3DB1
11628  3DB2
11629  3DB3
11630  3DB4
11631  3DB5
11632  3DB6
11633  3DB7
11634  3DB8
11635  3DB9
11636  3DBA
11637  3DBB
11638  3DBC
11639  3DBD
11640  3DBE
11641  3DBF
11642  3DC0
11643  3DC1
11644  3DC2
11645  3DC3
11646  3DC4
11647  3DC5
11648  3DC6
11649  3DC7
11650  3DC8
11651  3DC9
11652  3DCA
11653  3DCB
11654  3DCC
11655  3DCD
11656  3DCE
11657  3DCF
11658  3DD0
11659  3DD1
11660  3DD2
11661  3DD3
11662  3DD4
11663  3DD5
11664  3DD6
11665  3DD7
11666  3DD8
11667  3DD9
11668  3DDA
11669  3DDB
11670  3DDC
11671  3DDD
11672  3DDE
11673  3DDF
11674  3DE0
11675  3DE1
11676  3DE2
11677  3DE3
11678  3DE4
11679  3DE5
11680  3DE6
11681  3DE7
11682  3DE8
11683  3DE9
11684  3DEA
11685  3DEB
11686  3DEC
11687  3DED
11688  3DEE
11689  3DEF
11690  3DF0
11691  3DF1
11692  3DF2
11693  3DF3
11694  3DF4
11695  3DF5
11696  3DF6
11697  3DF7
11698  3DF8
11699  3DF9
11700  3DFA
11701  3DFB
11702  3DFC
11703  3DFD
11704  3DFE
11705  3DFF
11706  3E00
11707  3E01
11708  3E02
11709  3E03
11710  3E04
11711  3E05
11712  3E06
11713  3E07
11714  3E08
11715  3E09
11716  3E0A
11717  3E0B
11718  3E0C
11719  3E0D
11720  3E0E
11721  3E0F
11722  3E10
11723  3E11
11724  3E12
11725  3E13
11726  3E14
11727  3E15
11728  3E16
11729  3E17
11730  3E18
11731  3E19
11732  3E1A
11733  3E1B
11734  3E1C
11735  3E1D
11736  3E1E
11737  3E1F
11738  3E20
11739  3E21
11740  3E22
11741  3E23
11742  3E24
11743  3E25
11744  3E26
11745  3E27
11746  3E28
11747  3E29
11748  3E2A
11749  3E2B
11750  3E2C
11751  3E2D
11752  3E2E
11753  3E2F
11754  3E30
11755  3E31
11756  3E32
11757  3E33
11758  3E34
11759  3E35
11760  3E36
11761  3E37
11762  3E38
11763  3E39
11764  3E3A
11765  3E3B
11766  3E3C
11767  3E3D
11768  3E3E
11769  3E3F
11770  3E40
11771  3E41
11772  3E42
11773  3E43
11774  3E44
11775  3E45
11776  3E46
11777  3E47
11778  3E48
11779  3E49
11780  3E4A
11781  3E4B
11782  3E4C
11783  3E4D
11784  3E4E
11785  3E4F
11786  3E50
11787  3E51
11788  3E52
11789  3E53
11790  3E54
11791  3E55
11792  3E56
11793  3E57
11794  3E58
11795  3E59
11796  3E5A
11797  3E5B
11798  3E5C
11799  3E5D
11800  3E5E
11801  3E5F
11802  3E60
11803  3E61
11804  3E62
11805  3E63
11806  3E64
11807  3E65
11808  3E66
11809  3E67
11810  3E68
11811  3E69
11812  3E6A
11813  3E6B
11814  3E6C
11815  3E6D
11816  3E6E
11817  3E6F
11818  3E70
11819  3E71
11820  3E72
11821  3E73
11822  3E74
11823  3E75
11824  3E76
11825  3E77
11826  3E78
11827  3E79
11828  3E7A
11829  3E7B
11830  3E7C
11831  3E7D
11832  3E7E
11833  3E7F
11834  3E80
11835  3E81
11836  3E82
11837  3E83
11838  3E84
11839  3E85
11840  3E86
11841  3E87
11842  3E88
11843  3E89
11844  3E8A
11845  3E8B
11846  3E8C
11847  3E8D
11848  3E8E
11849  3E8F
11850  3E90
11851  3E91
11852  3E92
11853  3E93
11854  3E94
11855  3E95
11856  3E96
11857  3E97
11858  3E98
11859  3E99
11860  3E9A
11861  3E9B
11862  3E9C
11863  3E9D
11864  3E9E
11865  3E9F
11866  3EA0
11867  3EA1
11868  3EA2
11869  3EA3
11870  3EA4
11871  3EA5
11872  3EA6
11873  3EA7
11874  3EA8
11875  3EA9
11876  3EAA
11877  3EAB
11878  3EAC
11879  3EAD
11880  3EAE
11881  3EAF
11882  3EB0
11883  3EB1
11884  3EB2
11885  3EB3
11886  3EB4
11887  3EB5
11888  3EB6
11889  3EB7
11890  3EB8
11891  3EB9
11892  3EBA
11893  3EBB
11894  3EBC
11895  3EBD
11896  3EBE
11897  3EBF
11898  3EC0
11899  3EC1
11900  3EC2
11901  3EC3
11902  3EC4
11903  3EC5
11904  3EC6
11905  3EC7
11906  3EC8
11907  3EC9
11908  3ECA
11909  3ECB
11910  3ECC
11911  3ECD
11912  3ECE
11913  3ECF
11914  3ED0
11915  3ED1
11916  3ED2
11917  3ED3
11918  3ED4
11919  3ED5
11920  3ED6
11921  3ED7
11922  3ED8
11923  3ED9
11924  3EDA
11925  3EDB
11926  3EDC
11927  3EDD
11928  3EDE
11929  3EDF
11930  3EE0
11931  3EE1
11932  3EE2
11933  3EE3
11934  3EE4
11935  3EE5
11936  3EE6
11937  3EE7
11938  3EE8
11939  3EE9
11940  3EEA
11941  3EEB
11942  3EEC
11943  3EED
11944  3EEE
11945  3EEF
11946  3EF0
11947  3EF1
11948  3EF2
11949  3EF3
11950  3EF4
11951  3EF5
11952  3EF6
11953  3EF7
11954  3EF8
11955  3EF9
11956  3EFA
11957  3EFB
11958  3EFC
11959  3EFD
11960  3EFE
11961  3EFF
11962  3F00
11963  3F01
11964  3F02
11965  3F03
11966  3F04
11967  3F05
11968  3F06
11969  3F07
11970  3F08
11971  3F09
11972  3F0A
11973  3F0B
11974  3F0C
11975  3F0D
11976  3F0E
11977  3F0F
11978  3F10
11979  3F11
11980  3F12
11981  3F13
11982  3F14
11983  3F15
11984  3F16
11985  3F17
11986  3F18
11987  3F19
11988  3F1A
11989  3F1B
11990  3F1C
11991  3F1D
11992  3F1E
11993  3F1F
11994  3F20
11995  3F21
11996  3F22
11997  3F23
11998  3F24
11999  3F25
12000  3F26
12001  3F27
12002  3F28
12003  3F29
12004  3F2A
12005  3F2B
12006  3F2C
12007  3F2D
12008  3F2E
12009  3F2F
12010  3F30
12011  3F31
12012  3F32
12013  3F33
12014  3F34
12015  3F35
12016  3F36
12017  3F37
12018  3F38
12019  3F39
12020  3F3A
12021  3F3B
12022  3F3C
12023  3F3D
12024  3F3E
12025  3F3F
12026  3F40
12027  3F41
12028  3F42
12029  3F43
12030  3F44
12031  3F45
12032  3F46
12033  3F47
12034  3F48
12035  3F49
12036  3F4A
12037  3F4B
12038  3F4C
12039  3F4D
12040  3F4E
12041  3F4F
12042  3F50
12043  3F51
12044  3F52
12045  3F53
12046  3F54
12047  3F55
12048  3F56
12049  3F57
12050  3F58
12051  3F59
12052  3F5A
12053  3F5B
12054  3F5C
12055  3F5D
12056  3F5E
12057  3F5F
12058  3F60
12059  3F61
12060  3F62
12061  3F63
12062  3F64
12063  3F65
12064  3F66
12065  3F67
12066  3F68
12067  3F69
12068  3F6A
12069  3F6B
12070  3F6C
12071  3F6D
12072  3F6E
12073  3F6F
12074  3F70
12075  3F71
12076  3F72
12077  3F73
12078  3F74
12079  3F75
12080  3F76
12081  3F77
12082  3F78
12083  3F79
12084  3F7A
12085  3F7B
12086  3F7C
12087  3F7D
12088  3F7E
12089  3F7F
12090  3F80
12091  3F81
12092  3F82
12093  3F83
12094  3F84
12095  3F85
12096  3F86
12097  3F87
12098  3F88
12099  3F89
12100  3F8A
12101  3F8B
12102  3F8C
12103  3F8D
12104  3F8E
12105  3F8F
12106  3F90
12107  3F91
12108  3F92
12109  3F93
12110  3F94
12111  3F95
12112  3F96
12113  3F97
12114  3F98
12115  3F99
12116  3F9A
12117  3F9B
12118  3F9C
12119  3F9D
12120  3F9E
12121  3F9F
12122  3FA0
12123  3FA1
12124  3FA2
12125  3FA3
12126  3FA4
12127  3FA5
12128  3FA6
12129  3FA7
12130  3FA8
12131  3FA9
12132  3FAA
12133  3FAB
12134  3FAC
12135  3FAD
12136  3FAE
12137  3FAF
12138  3FB0
12139  3FB1
12140  3FB2
12141  3FB3
12142  3FB4
12143  3FB5
12144  3FB6
12145  3FB7
12146  3FB8
12147  3FB9
12148  3FBA
12149  3FBB
12150  3FBC
12151  3FBD
12152  3FBE
12153  3FBF
12154  3FC0
12155  3FC1
12156  3FC2
12157  3FC3
12158  3FC4
12159  3FC5
12160  3FC6
12161  3FC7
12162  3FC8
12163  3FC9
12164  3FCA
12165  3FCB
12166  3FCC
12167  3FCD
12168  3FCE
12169  3FCF
12170  3FD0
12171  3FD1
12172  3FD2
12173  3FD3
12174  3FD4
12175  3FD5
12176  3FD6
12177  3FD7
12178  3FD8
12179  3FD9
12180  3FDA
12181  3FDB
12182  3FDC
12183  3FDD
12184  3FDE
12185  3FDF
12186  3FE0
12187  3FE1
12188  3FE2
12189  3FE3
12190  3FE4
12191  3FE5
12192  3FE6
12193  3FE7
12194  3FE8
12195  3FE9
12196  3FEA
12197  3FEB
12198  3FEC
12199  3FED
12200  3FEE
12201  3FEF
12202  3FF0
12203  3FF1
12204  3FF2
12205  3FF3
12206  3FF4
12207  3FF5
12208  3FF6
12209  3FF7
12210  3FF8
12211  3FF9
12212  3FFA
12213  3FFB
12214  3FFC
12215  3FFD
12216  3FFE
12217  3FFF
12218  4000
12219  4001
12220  4002
12221  4003
12222  4004
12223  4005
12224  4006
12225  4007
12226  4008
12227  4009
12228  400A
12229  400B
12230  400C
12231  400D
12232  400E
12233  400F
12234  4010
12235  4011
12236  4012
12237  4013
12238  4014
12239  4015
12240  4016
12241  4017
12242  4018
12243  4019
12244  401A
12245  401B
12246  401C
12247  401D
12248  401E
12249  401F
12250  4020
12251  4021
12252  4022
12253  4023
12254  4024
12255  4025
12256  4026
12257  4027
12258  4028
12259  4029
12260  402A
12261  402B
12262  402C
12263  402D
12264  402E
12265  402F
12266  4030
12267  4031
12268  4032
12269  4033
12270  4034
12271  4035
12272  4036
12273  4037
12274  4038
12275  4039
12276  403A
12277  403B
12278  403C
12279  403D
12280  403E
12281  403F
12282  4040
12283  4041
12284  4042
12285  4043
12286  4044
12287  4045
12288  4046
12289  4047
12290  4048
12291  4049
12292  404A
12293  404B
12294  404C
12295  404D
12296  404E
12297  404F
12298  4050
12299  4051
12300  4052
12301  4053
12302  4054
12303  4055
12304  4056
12305  4057
12306  4058
12307  4059
12308  405A
12309  405B
12310  405C
12311  405D
12312  405E
12313  405F
12314  4060
12315  4061
12316  4062
12317  4063
12318  4064
12319  4065
12320  4066
12321  4067
12322  4068
12323  4069
12324  406A
12325  406B
12326  406C
12327  406D
12328  406E
12329  406F
12330  4070
12331  4071
12332  4072
12333  4073
12334  4074
12335  4075
12336  4076
12337  4077
12338  4078
12339  4079
12340  407A
12341  407B
12342  407C
12343  407D
12344  407E
12345  407F
12346  4080
12347  4081
12348  4082
12349  4083
12350  4084
12351  4085
12352  4086
12353  4087
12354  4088
12355  4089
12356  408A
12357  408B
12358  408C
12359  408D
12360  408E
12361  408F
12362  4090
12363  4091
12364  4092
12365  4093
12366  4094
12367  4095
12368  4096
12369  4097
12370  4098
12371  4099
12372  409A
12373  409B
12374  409C
12375  409D
12376  409E
12377  409F
12378  40A0
12379  40A1
12380  40A2
12381  40A3
12382  40A4
12383  40A5
12384  40A6
12385  40A7
12386  40A8
12387  40A9
12388  40AA
12389  40AB
12390  40AC
12391  40AD
12392  40AE
12393  40AF
12394  40B0
12395  40B1
12396  40B2
12397  40B3
12398  40B4
12399  40B5
12400  40B6
12401  40B7
12402  40B8
12403  40B9
12404  40BA
12405  40BB
12406  40BC
12407  40BD
12408  40BE
12409  40BF
12410  40C0
12411  40C1
12412  40C2
12413  40C3
12414  40C4
12415  40C5
12416  40C6
12417  40C7
12418  40C8
12419  40C9
12420  40CA
12421  40CB
12422  40CC
12423  40CD
12424  40CE
12425  40CF
12426  40D0
12427  40D1
12428  40D2
12429  40D3
12430  40D4
12431  40D5
12432  40D6
12433  40D7
12434  40D8
12435  40D9
12436  40DA
12437  40DB
12438  40DC
12439  40DD
12440  40DE
12441  40DF
12442  40E0
12443  40E1
12444  40E2
12445  40E3
12446  40E4
12447  40E5
12448  40E6
12449  40E7
12450  40E8
12451  40E9
12452  40EA
12453  40EB
12454  40EC
12455  40ED
12456  40EE
12457  40EF
12458  40F0
12459  40F1
12460  40F2
12461  40F3
12462  40F4
12463  40F5
12464  40F6
12465  40F7
12466  40F8
12467  40F9
12468  40FA
12469  40FB
12470  40FC
12471  40FD
12472  40FE
12473  40FF
12474  4100
12475  4101
12476  4102
12477  4103
12478  4104
12479  4105
12480  4106
12481  4107
12482  4108
12483  4109
12484  410A
12485  410B
12486  410C
12487  410D
12488  410E
12489  410F
12490  4110
12491  4111
12492  4112
12493  4113
12494  4114
12495  4115
12496  4116
12497  4117
12498  4118
12499  4119
12500  411A
12501  411B
12502  411C
12503  411D
12504  411E
12505  411F
12506  4120
12507  4121
12508  4122
12509  4123
12510  4124
12511  4125
12512  4126
12513  4127
12514  4128
12515  4129
12516  412A
12517  412B
12518  412C
12519  412D
12520  412E
12521  412F
12522  4130
12523  4131
12524  4132
12525  4133
12526  4134
12527  4135
12528  4136
12529  4137
12530  4138
12531  4139
12532  413A
12533  413B
12534  413C
12535  413D
12536  413E
12537  413F
12538  4140
12539  4141
12540  4142
12541  4143
12542  4144
12543  4145
12544  4146
12545  4147
12546  4148
12547  4149
12548  414A
12549  414B
12550  414C
12551  414D
12552  414E
12553  414F
12554  4150
12555  4151
12556  4152
12557  4153
12558  4154
12559  4155
12560  4156
12561  4157
12562  4158
12563  4159
12564  415A
12565  415B
12566  415C
12567  415D
12568  415E
12569  415F
12570  4160
12571  4161
12572  4162
12573  4163
12574  4164
12575  4165
12576  4166
12577  4167
12578  4168
12579  4169
12580  416A
12581  416B
12582  416C
12583  416D
12584  416E
12585  416F
12586  4170
12587  4171
12588  4172
12589  4173
12590  4174
12591  4175
12592  4176
12593  4177
12594  4178
12595  4179
12596  417A
12597  417B
12598  417C
12599  417D
12600  417E
12601  417F
12602  4180
12603  4181
12604  4182
12605  4183
12606  4184
12607  4185
12608  4186
12609  4187
12610  4188
12611  4189
12612  418A
12613  418B
12614  418C
12615  418D
12616  418E
12617  418F
12618  4190
12619  4191
12620  4192
12621  4193
12622  4194
12623  4195
12624  4196
12625  4197
12626  4198
12627  4199
12628  419A
12629  419B
12630  419C
12631  419D
12632  419E
12633  419F
12634  41A0
12635  41A1
12636  41A2
12637  41A3
12638  41A4
12639  41A5
12640  41A6
12641  41A7
12642  41A8
12643  41A9
12644  41AA
12645  41AB
12646  41AC
12647  41AD
12648  41AE
12649  41AF
12650  41B0
12651  41B1
12652  41B2
12653  41B3
12654  41B4
12655  41B5
12656  41B6
12657  41B7
12658  41B8
12659  41B9
12660  41BA
12661  41BB
12662  41BC
12663  41BD
12664  41BE
12665  41BF
12666  41C0
12667  41C1
12668  41C2
12669  41C3
12670  41C4
12671  41C5
12672  41C6
12673  41C7
12674  41C8
12675  41C9
12676  41CA
12677  41CB
12678  41CC
12679  41CD
12680  41CE
12681  41CF
12682  41D0
12683  41D1
12684  41D2
12685  41D3
12686  41D4
12687  41D5
12688  41D6
12689  41D7
12690  41D8
12691  41D9
12692  41DA
12693  41DB
12694  41DC
12695  41DD
12696  41DE
12697  41DF
12698  41E0
12699  41E1
12700  41E2
12701  41E3
12702  41E4
12703  41E5
12704  41E6
12705  41E7
12706  41E8
12707  41E9
12708  41EA
12709  41EB
12710  41EC
12711  41ED
12712  41EE
12713  41EF
12714  41F0
12715  41F1
12716  41F2
12717  41F3
12718  41F4
12719  41F5
12720  41F6
12721  41F7
12722  41F8
12723  41F9
12724  41FA
12725  41FB
12726  41FC
12727  41FD
12728  41FE
12729  41FF
12730  4200
12731  4201
12732  4202
12733  4203
12734  4204
12735  4205
12736  4206
12737  4207
12738  4208
12739  4209
12740  420A
12741  420B
12742  420C
12743  420D
12744  420E
12745  420F
12746  4210
12747  4211
12748  4212
12749  4213
12750  4214
12751  4215
12752  4216
12753  4217
12754  4218
12755  4219
12756  421A
12757  421B
12758  421C
12759  421D
12760  421E
12761  421F
12762  4220
12763  4221
12764  4222
12765  4223
12766  4224
12767  4225
12768  4226
12769  4227
12770  4228
12771  4229
12772  422A
12773  422B
12774  422C
12775  422D
12776  422E
12777  422F
12778  4230
12779  4231
12780  4232
12781  4233
12782  4234
12783  4235
12784  4236
12785  4237
12786  4238
12787  4239
12788  423A
12789  423B
12790  423C
12791  423D
12792  423E
12793  423F
12794  4240
12795  4241
12796  4242
12797  4243
12798  4244
12799  4245
12800  4246
12801  4247
12802  4248
12803  4249
12804  424A
12805  424B
12806  424C
12807  424D
12808  424E
12809  424F
12810  4250
12811  4251
12812  4252
12813  4253
12814  4254
12815  4255
12816  4256
12817  4257
12818  4258
12819  4259
12820  425A
12821  425B
12822  425C
12823  425D
12824  425E
12825  425F
12826  4260
12827  4261
12828  4262
12829  4263
12830  4264
12831  4265
12832  4266
12833  4267
12834  4268
12835  4269
12836  426A
12837  426B
12838  426C
12839  426D
12840  426E
12841  426F
12842  4270
12843  4271
12844  4272
12845  4273
12846  4274
12847  4275
12848  4276
12849  4277
12850  4278
12851  4279
12852  427A
12853  427B
12854  427C
12855  427D
12856  427E
12857  427F
12858  4280
12859  4281
12860  4282
12861  4283
12862  4284
12863  4285
12864  4286
12865  4287
12866  4288
12867  4289
12868  428A
12869  428B
12870  428C
12871  428D
12872  428E
12873  428F
12874  4290
12875  4291
12876  4292
12877  4293
12878  4294
12879  4295
12880  4296
12881  4297
12882  4298
12883  4299
12884  429A
12885  429B
12886  429C
12887  429D
12888  429E
12889  429F
12890  42A0
12891  42A1
12892  42A2
12893  42A3
12894  42A4
12895  42A5
12896  42A6
12897  42A7
12898  42A8
12899  42A9
12900  42AA
12901  42AB
12902  42AC
12903  42AD
12904  42AE
12905  42AF
12906  42B0
12907  42B1
12908  42B2
12909  42B3
12910  42B4
12911  42B5
12912  42B6
12913  42B7
12914  42B8
12915  42B9
12916  42BA
12917  42BB
12918  42BC
12919  42BD
12920  42BE
12921  42BF
12922  42C0
12923  42C1
12924  42C2
12925  42C3
12926  42C4
12927  42C5
12928  42C6
12929  42C7
12930  42C8
12931  42C9
12932  42CA
12933  42CB
12934  42CC
12935  42CD
12936  42CE
12937  42CF
12938  42D0
12939  42D1
12940  42D2
12941  42D3
12942  42D4
12943  42D5
12944  42D6
12945  42D7
12946  42D8
12947  42D9
12948  42DA
12949  42DB
12950  42DC
12951  42DD
12952  42DE
12953  42DF
12954  42E0
12955  42E1
12956  42E2
12957  42E3
12958  42E4
12959  42E5
12960  42E6
12961  42E7
12962  42E8
12963  42E9
12964  42EA
12965  42EB
12966  42EC
12967  42ED
12968  42EE
12969  42EF
12970  42F0
12971  42F1
12972  42F2
12973  42F3
12974  42F4
12975  42F5
12976  42F6
12977  42F7
12978  42F8
12979  42F9
12980  42FA
12981  42FB
12982  42FC
12983  42FD
12984  42FE
12985  42FF
12986  4300
12987  4301
12988  4302
12989  4303
12990  4304
12991  4305
12992  4306
12993  4307
12994  4308
12995  4309
12996  430A
12997  430B
12998  430C
12999  430D
13000  430E
13001  430F
13002  4310
13003  4311
13004  4312
13005  4313
13006  4314
13007  4315
13008  4316
13009  4317
13010  4318
13011  4319
13012  431A
13013  431B
13014  431C
13015  431D
13016  431E
13017  431F
13018  4320
13019  4321
13020  4322
13021  4323
13022  4324
13023  4325
13024  4326
13025  4327
13026  4328
13027  4329
13028  432A
13029  432B
13030  432C
13031  432D
13032  432E
13033  432F
13034  4330
13035  4331
13036  4332
13037  4333
13038  4334
13039  4335
13040  4336
13041  4337
13042  4338
13043  4339
13044  433A
13045  433B
13046  433C
13047  433D
13048  433E
13049  433F
13050  4340
13051  4341
13052  4342
13053  4343
13054  4344
13055  4345
13056  4346
13057  4347
13058  4348
13059  4349
13060  434A
13061  434B
13062  434C
13063  434D
13064  434E
13065  434F
13066  4350
13067  4351
13068  4352
13069  4353
13070  4354
13071  4355
13072  4356
13073  4357
13074  4358
13075  4359
13076  435A
13077  435B
13078  435C
13079  435D
13080  435E
13081  435F
13082  4360
13083  4361
13084  4362
13085  4363
13086  4364
13087  4365
13088  4366
13089  4367
13090  4368
13091  4369
13092  436A
13093  436B
13094  436C
13095  436D
13096  436E
13097  436F
13098  4370
13099  4371
13100  4372
13101  4373
13102  4374
13103  4375
13104  4376
13105  4377
13106  4378
13107  4379
13108  437A
13109  437B
13110  437C
13111  437D
13112  437E
13113  437F
13114  4380
13115  4381
13116  4382
13117  4383
13118  4384
13119  4385
13120  4386
13121  4387
13122  4388
13123  4389
13124  438A
13125  438B
13126  438C
13127  438D
13128  438E
13129  438F
13130  4390
13131  4391
13132  4392
13133  4393
13134  4394
13135  4395
13136  4396
13137  4397
13138  4398
13139  4399
13140  439A
13141  439B
13142  439C
13143  439D
13144  439E
13145  439F
13146  43A0
13147  43A1
13148  43A2
13149  43A3
13150  43A4
13151  43A5
13152  43A6
13153  43A7
13154  43A8
13155  43A9
13156  43AA
13157  43AB
13158  43AC
13159  43AD
13160  43AE
13161  43AF
13162  43B0
13163  43B1
13164  43B2
13165  43B3
13166  43B4
13167  43B5
13168  43B6
13169  43B7
13170  43B8
13171  43B9
13172  43BA
13173  43BB
13174  43BC
13175  43BD
13176  43BE
13177  43BF
13178  43C0
13179  43C1
13180  43C2
13181  43C3
13182  43C4
13183  43C5
13184  43C6
13185  43C7
13186  43C8
13187  43C9
13188  43CA
13189  43CB
13190  43CC
13191  43CD
13192  43CE
13193  43CF
13194  43D0
13195  43D1
13196  43D2
13197  43D3
13198  43D4
13199  43D5
13200  43D6
13201  43D7
13202  43D8
13203  43D9
13204  43DA
13205  43DB
13206  43DC
13207  43DD
13208  43DE
13209  43DF
13210  43E0
13211  43E1
13212  43E2
13213  43E3
13214  43E4
13215  43E5
13216  43E6
13217  43E7
13218  43E8
13219  43E9
13220  43EA
13221  43EB
13222  43EC
13223  43ED
13224  43EE
13225  43EF
13226  43F0
13227  43F1
13228  43F2
13229  43F3
13230  43F4
13231  43F5
13232  43F6
13233  43F7
13234  43F8
13235  43F9
13236  43FA
13237  43FB
13238  43FC
13239  43FD
13240  43FE
13241  43FF
13242  4400
13243  4401
13244  4402
13245  4403
13246  4404
13247  4405
13248  4406
13249  4407
13250  4408
13251  4409
13252  440A
13253  440B
13254  440C
13255  440D
13256  440E
13257  440F
13258  4410
13259  4411
13260  4412
13261  4413
13262  4414
13263  4415
13264  4416
13265  4417
13266  4418
13267  4419
13268  441A
13269  441B
13270  441C
13271  441D
13272  441E
13273  441F
13274  4420
13275  4421
13276  4422
13277  4423
13278  4424
13279  4425
13280  4426
13281  4427
13282  4428
13283  4429
13284  442A
13285  442B
13286  442C
13287  442D
13288  442E
13289  442F
13290  4430
13291  4431
13292  4432
13293  4433
13294  4434
13295  4435
13296  4436
13297  4437
13298  4438
13299  4439
13300  443A
13301  443B
13302  443C
13303  443D
13304  443E
13305  443F
13306  4440
13307  4441
13308  4442
13309  4443
13310  4444
13311  4445
13312  4446
13313  4447
13314  4448
13315  4449
13316  444A
13317  444B
13318  444C
13319  444D
13320  444E
13321  444F
13322  4450
13323  4451
13324  4452
13325  4453
13326  4454
13327  4455
13328  4456
13329  4457
13330  4458
13331  4459
13332  445A
13333  445B
13334  445C
13335  445D
13336  445E
13337  445F
13338  4460
13339  4461
13340  4462
13341  4463
13342  4464
13343  4465
13344  4466
13345  4467
13346  4468
13347  4469
13348  446A
13349  446B
13350  446C
13351  446D
13352  446E
13353  446F
13354  4470
13355  4471
13356  4472
13357  4473
13358  4474
13359  4475
13360  4476
13361  4477
13362  4478
13363  4479
13364  447A
13365  447B
13366  447C
13367  447D
13368  447E
13369  447F
13370  4480
13371  4481
13372  4482
13373  4483
13374  4484
13375  4485
13376  4486
13377  4487
13378  4488
13379  4489
13380  448A
13381  448B
13382  448C
13383  448D
13384  448E
13385  448F
13386  4490
13387  4491
13388  4492
13389  4493
13390  4494
13391  4495
13392  4496
13393  4497
13394  4498
13395  4499
13396  449A
13397  449B
13398  449C
13399  449D
13400  449E
13401  449F
13402  44A0
13403  44A1
13404  44A2
13405  44A3
13406  44A4
13407  44A5
13408  44A6
13409  44A7
13410  44A8
13411  44A9
13412  44AA
13413  44AB
13414  44AC
13415  44AD
13416  44AE
13417  44AF
13418  44B0
13419  44B1
13420  44B2
13421  44B3
13422  44B4
13423  44B5
13424  44B6
13425  44B7
13426  44B8
13427  44B9
13428  44BA
13429  44BB
13430  44BC
13431  44BD
13432  44BE
13433  44BF
13434  44C0
13435  44C1
13436  44C2
13437  44C3
13438  44C4
13439  44C5
13440  44C6
13441  44C7
13442  44C8
13443  44C9
13444  44CA
13445  44CB
13446  44CC
13447  44CD
13448  44CE
13449  44CF
13450  44D0
13451  44D1
13452  44D2
13453  44D3
13454  44D4
13455  44D5
13456  44D6
13457  44D7
13458  44D8
13459  44D9
13460  44DA
13461  44DB
13462  44DC
13463  44DD
13464  44DE
13465  44DF
13466  44E0
13467  44E1
13468  44E2
13469  44E3
13470  44E4
13471  44E5
13472  44E6
13473  44E7
13474  44E8
13475  44E9
13476  44EA
13477  44EB
13478  44EC
13479  44ED
13480  44EE
13481  44EF
13482  44F0
13483  44F1
13484  44F2
13485  44F3
13486  44F4
13487  44F5
13488  44F6
13489  44F7
13490  44F8
13491  44F9
13492  44FA
13493  44FB
13494  44FC
13495  44FD
13496  44FE
13497  44FF
13498  4500
13499  4501
13500  4502
13501  4503
13502  4504
13503  4505
13504  4506
13505  4507
13506  4508
13507  4509
13508  450A
13509  450B
13510  450C
13511  450D
13512  450E
13513  450F
13514  4510
13515  4511
13516  4512
13517  4513
13518  4514
13519  4515
13520  4516
13521  4517
13522  4518
13523  4519
13524  451A
13525  451B
13526  451C
13527  451D
13528  451E
13529  451F
13530  4520
13531  4521
13532  4522
13533  4523
13534  4524
13535  4525
13536  4526
13537  4527
13538  4528
13539  4529
13540  452A
13541  452B
13542  452C
13543  452D
13544  452E
13545  452F
13546  4530
13547  4531
13548  4532
13549  4533
13550  4534
13551  4535
13552  4536
13553  4537
13554  4538
13555  4539
13556  453A
13557  453B
13558  453C
13559  453D
13560  453E
13561  453F
13562  4540
13563  4541
13564  4542
13565  4543
13566  4544
13567  4545
13568  4546
13569  4547
13570  4548
13571  4549
13572  454A
13573  454B
13574  454C
13575  454D
13576  454E
13577  454F
13578  4550
13579  4551
13580  4552
13581  4553
13582  4554
13583  4555
13584  4556
13585  4557
13586  4558
13587  4559
13588  455A
13589  455B
13590  455C
13591  455D
13592  455E
13593  455F
13594  4560
13595  4561
13596  4562
13597  4563
13598  4564
13599  4565
13600  4566
13601  4567
13602  4568
13603  4569
13604  456A
13605  456B
13606  456C
13607  456D
13608  456E
13609  456F
13610  4570
13611  4571
13612  4572
13613  4573
13614  4574
13615  4575
13616  4576
13617  4577
13618  4578
13619  4579
13620  457A
13621  457B
13622  457C
13623  457D
13624  457E
13625  457F
13626  4580
13627  4581
13628  4582
13629  4583
13630  4584
13631  4585
13632  4586
13633  4587
13634  4588
13635  4589
13636  458A
13637  458B
13638  458C
13639  458D
13640  458E
13641  458F
13642  4590
13643  4591
13644  4592
13645  4593
13646  4594
13647  4595
13648  4596
13649  4597
13650  4598
13651  4599
13652  459A
13653  459B
13654  459C
13655  459D
13656  459E
13657  459F
13658  45A0
13659  45A1
13660  45A2
13661  45A3
13662  45A4
13663  45A5
13664  45A6
13665  45A7
13666  45A8
13667  45A9
13668  45AA
13669  45AB
13670  45AC
13671  45AD
13672  45AE
13673  45AF
13674  45B0
13675  45B1
13676  45B2
13677  45B3
13678  45B4
13679  45B5
13680  45B6
13681  45B7
13682  45B8
13683  45B9
13684  45BA
13685  45BB
13686  45BC
13687  45BD
13688  45BE
13689  45BF
13690  45C0
13691  45C1
13692  45C2
13693  45C3
13694  45C4
13695  45C5
13696  45C6
13697  45C7
13698  45C8
13699  45C9
13700  45CA
13701  45CB
13702  45CC
13703  45CD
13704  45CE
13705  45CF
13706  45D0
13707  45D1
13708  45D2
13709  45D3
13710  45D4
13711  45D5
13712  45D6
13713  45D7
13714  45D8
13715  45D9
13716  45DA
13717  45DB
13718  45DC
13719  45DD
13720  45DE
13721  45DF
13722  45E0
13723  45E1
13724  45E2
13725  45E3
13726  45E4
13727  45E5
13728  45E6
13729  45E7
13730  45E8
13731  45E9
13732  45EA
13733  45EB
13734  45EC
13735  45ED
13736  45EE
13737  45EF
13738  45F0
13739  45F1
13740  45F2
13741  45F3
13742  45F4
13743  45F5
13744  45F6
13745  45F7
13746  45F8
13747  45F9
13748  45FA
13749  45FB
13750  45FC
13751  45FD
13752  45FE
13753  45FF
13754  4600
13755  4601
13756  4602
13757  4603
13758  4604
13759  4605
13760  4606
13761  4607
13762  4608
13763  4609
13764  460A
13765  460B
13766  460C
13767  460D
13768  460E
13769  460F
13770  4610
13771  4611
13772  4612
13773  4613
13774  4614
13775  4615
13776  4616
13777  4617
13778  4618
13779  4619
13780  461A
13781  461B
13782  461C
13783  461D
13784  461E
13785  461F
13786  4620
13787  4621
13788  4622
13789  4623
13790  4624
13791  4625
13792  4626
13793  4627
13794  4628
13795  4629
13796  462A
13797  462B
13798  462C
13799  462D
13800  462E
13801  462F
13802  4630
13803  4631
13804  4632
13805  4633
13806  4634
13807  4635
13808  4636
13809  4637
13810  4638
13811  4639
13812  463A
13813  463B
13814  463C
13815  463D
13816  463E
13817  463F
13818  4640
13819  4641
13820  4642
13821  4643
13822  4644
13823  4645
13824  4646
13825  4647
13826  4648
13827  4649
13828  464A
13829  464B
13830  464C
13831  464D
13832  464E
13833  464F
13834  4650
13835  4651
13836  4652
13837  4653
13838  4654
13839  4655
13840  4656
13841  4657
13842  4658
13843  4659
13844  465A
13845  465B
13846  465C
13847  465D
13848  465E
13849  465F
13850  4660
13851  4661
13852  4662
13853  4663
13854  4664
13855  4665
13856  4666
13857  4667
13858  4668
13859  4669
13860  466A
13861  466B
13862  466C
13863  466D
13864  466E
13865  466F
13866  4670
13867  4671
13868  4672
13869  4673
13870  4674
13871  4675
13872  4676
13873  4677
13874  4678
13875  4679
13876  467A
13877  467B
13878  467C
13879  467D
13880  467E
13881  467F
13882  4680
13883  4681
13884  4682
13885  4683
13886  4684
13887  4685
13888  4686
13889  4687
13890  4688
13891  4689
13892  468A
13893  468B
13894  468C
13895  468D
13896  468E
13897  468F
13898  4690
13899  4691
13900  4692
13901  4693
13902  4694
13903  4695
13904  4696
13905  4697
13906  4698
13907  4699
13908  469A
13909  469B
13910  469C
13911  469D
13912  469E
13913  469F
13914  46A0
13915  46A1
13916  46A2
13917  46A3
13918  46A4
13919  46A5
13920  46A6
13921  46A7
13922  46A8
13923  46A9
13924  46AA
13925  46AB
13926  46AC
13927  46AD
13928  46AE
13929  46AF
13930  46B0
13931  46B1
13932  46B2
13933  46B3
13934  46B4
13935  46B5
13936  46B6
13937  46B7
13938  46B8
13939  46B9
13940  46BA
13941  46BB
13942  46BC
13943  46BD
13944  46BE
13945  46BF
13946  46C0
13947  46C1
13948  46C2
13949  46C3
13950  46C4
13951  46C5
13952  46C6
13953  46C7
13954  46C8
13955  46C9
13956  46CA
13957  46CB
13958  46CC
13959  46CD
13960  46CE
13961  46CF
13962  46D0
13963  46D1
13964  46D2
13965  46D3
13966  46D4
13967  46D5
13968  46D6
13969  46D7
13970  46D8
13971  46D9
13972  46DA
13973  46DB
13974  46DC
13975  46DD
13976  46DE
13977  46DF
13978  46E0
13979  46E1
13980  46E2
13981  46E3
13982  46E4
13983  46E5
13984  46E6
13985  46E7
13986  46E8
13987  46E9
13988  46EA
13989  46EB
13990  46EC
13991  46ED
13992  46EE
13993  46EF
13994  46F0
13995  46F1
13996  46F2
13997  46F3
13998  46F4
13999  46F5
14000  46F6
14001  46F7
14002  46F8
14003  46F9
14004  46FA
14005  46FB
14006  46FC
14007  46FD
14008  46FE
14009  46FF
14010  4700
14011  4701
14012  4702
14013  4703
14014  4704
14015  4705
14016  4706
14017  4707
14018  4708
14019  4709
14020  470A
14021  470B
14022  470C
14023  470D
14024  470E
14025  470F
14026  4710
14027  4711
14028  4712
14029  4713
14030  4714
14031  4715
14032  4716
14033  4717
14034  4718
14035  4719
14036  471A
14037  471B
14038  471C
14039  471D
14040  471E
14041  471F
14042  4720
14043  4721
14044  4722
14045  4723
14046  4724
14047  4725
14048  4726
14049  4727
14050  4728
14051  4729
14052  472A
14053  472B
14054  472C
14055  472D
14056  472E
14057  472F
14058  4730
14059  4731
14060  4732
14061  4733
14062  4734
14063  4735
14064  4736
14065  4737
14066  4738
14067  4739
14068  473A
14069  473B
14070  473C
14071  473D
14072  473E
14073  473F
14074  4740
14075  4741
14076  4742
14077  4743
14078  4744
14079  4745
14080  4746
14081  4747
14082  4748
14083  4749
14084  474A
14085  474B
14086  474C
14087  474D
14088  474E
14089  474F
14090  4750
14091  4751
14092  4752
14093  4753
14094  4754
14095  4755
14096  4756
14097  4757
14098  4758
14099  4759
14100  475A
14101  475B
14102  475C
14103  475D
14104  475E
14105  475F
14106  4760
14107  4761
14108  4762
14109  4763
14110  4764
14111  4765
14112  4766
14113  4767
14114  4768
14115  4769
14116  476A
14117  476B
14118  476C
14119  476D
14120  476E
14121  476F
14122  4770
14123  4771
14124  4772
14125  4773
14126  4774
14127  4775
14128  4776
14129  4777
14130  4778
14131  4779
14132  477A
14133  477B
14134  477C
14135  477D
14136  477E
14137  477F
14138  4780
14139  4781
14140  4782
14141  4783
14142  4784
14143  4785
14144  4786
14145  4787
14146  4788
14147  4789
14148  478A
14149  478B
14150  478C
14151  478D
14152  478E
14153  478F
14154  4790
14155  4791
14156  4792
14157  4793
14158  4794
14159  4795
14160  4796
14161  4797
14162  4798
14163  4799
14164  479A
14165  479B
14166  479C
14167  479D
14168  479E
14169  479F
14170  47A0
14171  47A1
14172  47A2
14173  47A3
14174  47A4
14175  47A5
14176  47A6
14177  47A7
14178  47A8
14179  47A9
14180  47AA
14181  47AB
14182  47AC
14183  47AD
14184  47AE
14185  47AF
14186  47B0
14187  47B1
14188  47B2
14189  47B3
14190  47B4
14191  47B5
14192  47B6
14193  47B7
14194  47B8
14195  47B9
14196  47BA
14197  47BB
14198  47BC
14199  47BD
14200  47BE
14201  47BF
14202  47C0
14203  47C1
14204  47C2
14205  47C3
14206  47C4
14207  47C5
14208  47C6
14209  47C7
14210  47C8
14211  47C9
14212  47CA
14213  47CB
14214  47CC
14215  47CD
14216  47CE
14217  47CF
14218  47D0
14219  47D1
14220  47D2
14221  47D3
14222  47D4
14223  47D5
14224  47D6
14225  47D7
14226  47D8
14227  47D9
14228  47DA
14229  47DB
14230  47DC
14231  47DD
14232  47DE
14233  47DF
14234  47E0
14235  47E1
14236  47E2
14237  47E3
14238  47E4
14239  47E5
14240  47E6
14241  47E7
14242  47E8
14243  47E9
14244  47EA
14245  47EB
14246  47EC
14247  47ED
14248  47EE
14249  47EF
14250  47F0
14251  47F1
14252  47F2
14253  47F3
14254  47F4
14255  47F5
14256  47F6
14257  47F7
14258  47F8
14259  47F9
14260  47FA
14261  47FB
14262  47FC
14263  47FD
14264  47FE
14265  47FF
14266  4800
14267  4801
14268  4802
14269  4803
14270  4804
14271  4805
14272  4806
14273  4807
14274  4808
14275  4809
14276  480A
14277  480B
14278  480C
14279  480D
14280  480E
14281  480F
14282  4810
14283  4811
14284  4812
14285  4813
14286  4814
14287  4815
14288  4816
14289  4817
14290  4818
14291  4819
14292  481A
14293  481B
14294  481C
14295  481D
14296  481E
14297  481F
14298  4820
14299  4821
14300  4822
14301  4823
14302  4824
14303  4825
14304  4826
14305  4827
14306  4828
14307  4829
14308  482A
14309  482B
14310  482C
14311  482D
14312  482E
14313  482F
14314  4830
14315  4831
14316  4832
14317  4833
14318  4834
14319  4835
14320  4836
14321  4837
14322  4838
14323  4839
14324  483A
14325  483B
14326  483C
14327  483D
14328  483E
14329  483F
14330  4840
14331  4841
14332  4842
14333  4843
14334  4844
14335  4845
14336  4846
14337  4847
14338  4848
14339  4849
14340  484A
14341  484B
14342  484C
14343  484D
14344  484E
14345  484F
14346  4850
14347  4851
14348  4852
14349  4853
14350  4854
14351  4855
14352  4856
14353  4857
14354  4858
14355  4859
14356  485A
14357  485B
14358  485C
14359  485D
14360  485E
14361  485F
14362  4860
14363  4861
14364  4862
14365  4863
14366  4864
14367  4865
14368  4866
14369  4867
14370  4868
14371  4869
14372  486A
14373  486B
14374  486C
14375  486D
14376  486E
14377  486F
14378  4870
14379  4871
14380  4872
14381  4873
14382  4874
14383  4875
14384  4876
14385  4877
14386  4878
14387  4879
14388  487A
14389  487B
14390  487C
14391  487D
14392  487E
14393  487F
14394  4880
14395  4881
14396  4882
14397  4883
14398  4884
14399  4885
14400  4886
14401  4887
14402  4888
14403  4889
14404  488A
14405  488B
14406  488C
14407  488D
14408  488E
14409  488F
14410  4890
14411  4891
14412  4892
14413  4893
14414  4894
14415  4895
14416  4896
14417  4897
14418  4898
14419  4899
14420  489A
14421  489B
14422  489C
14423  489D
14424  489E
14425  489F
14426  48A0
14427  48A1
14428  48A2
14429  48A3
14430  48A4
14431  48A5
14432  48A6
14433  48A7
14434  48A8
14435  48A9
14436  48AA
14437  48AB
14438  48AC
14439  48AD
14440  48AE
14441  48AF
14442  48B0
14443  48B1
14444  48B2
14445  48B3
14446  48B4
14447  48B5
14448  48B6
14449  48B7
14450  48B8
14451  48B9
14452  48BA
14453  48BB
14454  48BC
14455  48BD
14456  48BE
14457  48BF
14458  48C0
14459  48C1
14460  48C2
14461  48C3
14462  48C4
14463  48C5
14464  48C6
14465  48C7
14466  48C8
14467  48C9
14468  48CA
14469  48CB
14470  48CC
14471  48CD
14472  48CE
14473  48CF
14474  48D0
14475  48D1
14476  48D2
14477  48D3
14478  48D4
14479  48D5
14480  48D6
14481  48D7
14482  48D8
14483  48D9
14484  48DA
14485  48DB
14486  48DC
14487  48DD
14488  48DE
14489  48DF
14490  48E0
14491  48E1
14492  48E2
14493  48E3
14494  48E4
14495  48E5
14496  48E6
14497  48E7
14498  48E8
14499  48E9
14500  48EA
14501  48EB
14502  48EC
14503  48ED
14504  48EE
14505  48EF
14506  48F0
14507  48F1
14508  48F2
14509  48F3
14510  48F4
14511  48F5
14512  48F6
14513  48F7
14514  48F8
14515  48F9
14516  48FA
14517  48FB
14518  48FC
14519  48FD
14520  48FE
14521  48FF
14522  4900
14523  4901
14524  4902
14525  4903
14526  4904
14527  4905
14528  4906
14529  4907
14530  4908
14531  4909
14532  490A
14533  490B
14534  490C
14535  490D
14536  490E
14537  490F
14538  4910
14539  4911
14540  4912
14541  4913
14542  4914
14543  4915
14544  4916
14545  4917
14546  4918
14547  4919
14548  491A
14549  491B
14550  491C
14551  491D
14552  491E
14553  491F
14554  4920
14555  4921
14556  4922
14557  4923
14558  4924
14559  4925
14560  4926
14561  4927
14562  4928
14563  4929
14564  492A
14565  492B
14566  492C
14567  492D
14568  492E
14569  492F
14570  4930
14571  4931
14572  4932
14573  4933
14574  4934
14575  4935
14576  4936
14577  4937
14578  4938
14579  4939
14580  493A
14581  493B
14582  493C
14583  493D
14584  493E
14585  493F
14586  4940
14587  4941
14588  4942
14589  4943
14590  4944
14591  4945
14592  4946
14593  4947
14594  4948
14595  4949
14596  494A
14597  494B
14598  494C
14599  494D
14600  494E
14601  494F
14602  4950
14603  4951
14604  4952
14605  4953
14606  4954
14607  4955
14608  4956
14609  4957
14610  4958
14611  4959
14612  495A
14613  495B
14614  495C
14615  495D
14616  495E
14617  495F
14618  4960
14619  4961
14620  4962
14621  4963
14622  4964
14623  4965
14624  4966
14625  4967
14626  4968
14627  4969
14628  496A
14629  496B
14630  496C
14631  496D
14632  496E
14633  496F
14634  4970
14635  4971
14636  4972
14637  4973
14638  4974
14639  4975
14640  4976
14641  4977
14642  4978
14643  4979
14644  497A
14645  497B
14646  497C
14647  497D
14648  497E
14649  497F
14650  4980
14651  4981
14652  4982
14653  4983
14654  4984
14655  4985
14656  4986
14657  4987
14658  4988
14659  4989
14660  498A
14661  498B
14662  498C
14663  498D
14664  498E
14665  498F
14666  4990
14667  4991
14668  4992
14669  4993
14670  4994
14671  4995
14672  4996
14673  4997
14674  4998
14675  4999
14676  499A
14677  499B
14678  499C
14679  499D
14680  499E
14681  499F
14682  49A0
14683  49A1
14684  49A2
14685  49A3
14686  49A4
14687  49A5
14688  49A6
14689  49A7
14690  49A8
14691  49A9
14692  49AA
14693  49AB
14694  49AC
14695  49AD
14696  49AE
14697  49AF
14698  49B0
14699  49B1
14700  49B2
14701  49B3
14702  49B4
14703  49B5
14704  49B6
14705  49B7
14706  49B8
14707  49B9
14708  49BA
14709  49BB
14710  49BC
14711  49BD
14712  49BE
14713  49BF
14714  49C0
14715  49C1
14716  49C2
14717  49C3
14718  49C4
14719  49C5
14720  49C6
14721  49C7
14722  49C8
14723  49C9
14724  49CA
14725  49CB
14726  49CC
14727  49CD
14728  49CE
14729  49CF
14730  49D0
14731  49D1
14732  49D2
14733  49D3
14734  49D4
14735  49D5
14736  49D6
14737  49D7
14738  49D8
14739  49D9
14740  49DA
14741  49DB
14742  49DC
14743  49DD
14744  49DE
14745  49DF
14746  49E0
14747  49E1
14748  49E2
14749  49E3
14750  49E4
14751  49E5
14752  49E6
14753  49E7
14754  49E8
14755  49E9
14756  49EA
14757  49EB
14758  49EC
14759  49ED
14760  49EE
14761  49EF
14762  49F0
14763  49F1
14764  49F2
14765  49F3
14766  49F4
14767  49F5
14768  49F6
14769  49F7
14770  49F8
14771  49F9
14772  49FA
14773  49FB
14774  49FC
14775  49FD
14776  49FE
14777  49FF
14778  4A00
14779  4A01
14780  4A02
14781  4A03
14782  4A04
14783  4A05
14784  4A06
14785  4A07
14786  4A08
14787  4A09
14788  4A0A
14789  4A0B
14790  4A0C
14791  4A0D
14792  4A0E
14793  4A0F
14794  4A10
14795  4A11
14796  4A12
14797  4A13
14798  4A14
14799  4A15
14800  4A16
14801  4A17
14802  4A18
14803  4A19
14804  4A1A
14805  4A1B
14806  4A1C
14807  4A1D
14808  4A1E
14809  4A1F
14810  4A20
14811  4A21
14812  4A22
14813  4A23
14814  4A24
14815  4A25
14816  4A26
14817  4A27
14818  4A28
14819  4A29
14820  4A2A
14821  4A2B
14822  4A2C
14823  4A2D
14824  4A2E
14825  4A2F
14826  4A30
14827  4A31
14828  4A32
14829  4A33
14830  4A34
14831  4A35
14832  4A36
14833  4A37
14834  4A38
14835  4A39
14836  4A3A
14837  4A3B
14838  4A3C
14839  4A3D
14840  4A3E
14841  4A3F
14842  4A40
14843  4A41
14844  4A42
14845  4A43
14846  4A44
14847  4A45
14848  4A46
14849  4A47
14850  4A48
14851  4A49
14852  4A4A
14853  4A4B
14854  4A4C
14855  4A4D
14856  4A4E
14857  4A4F
14858  4A50
14859  4A51
14860  4A52
14861  4A53
14862  4A54
14863  4A55
14864  4A56
14865  4A57
14866  4A58
14867  4A59
14868  4A5A
14869  4A5B
14870  4A5C
14871  4A5D
14872  4A5E
14873  4A5F
14874  4A60
14875  4A61
14876  4A62
14877  4A63
14878  4A64
14879  4A65
14880  4A66
14881  4A67
14882  4A68
14883  4A69
14884  4A6A
14885  4A6B
14886  4A6C
14887  4A6D
14888  4A6E
14889  4A6F
14890  4A70
14891  4A71
14892  4A72
14893  4A73
14894  4A74
14895  4A75
14896  4A76
14897  4A77
14898  4A78
14899  4A79
14900  4A7A
14901  4A7B
14902  4A7C
14903  4A7D
14904  4A7E
14905  4A7F
14906  4A80
14907  4A81
14908  4A82
14909  4A83
14910  4A84
14911  4A85
14912  4A86
14913  4A87
14914  4A88
14915  4A89
14916  4A8A
14917  4A8B
14918  4A8C
14919  4A8D
14920  4A8E
14921  4A8F
14922  4A90
14923  4A91
14924  4A92
14925  4A93
14926  4A94
14927  4A95
14928  4A96
14929  4A97
14930  4A98
14931  4A99
14932  4A9A
14933  4A9B
14934  4A9C
14935  4A9D
14936  4A9E
14937  4A9F
14938  4AA0
14939  4AA1
14940  4AA2
14941  4AA3
14942  4AA4
14943  4AA5
14944  4AA6
14945  4AA7
14946  4AA8
14947  4AA9
14948  4AAA
14949  4AAB
14950  4AAC
14951  4AAD
14952  4AAE
14953  4AAF
14954  4AB0
14955  4AB1
14956  4AB2
14957  4AB3
14958  4AB4
14959  4AB5
14960  4AB6
14961  4AB7
14962  4AB8
14963  4AB9
14964  4ABA
14965  4ABB
14966  4ABC
14967  4ABD
14968  4ABE
14969  4ABF
14970  4AC0
14971  4AC1
14972  4AC2
14973  4AC3
14974  4AC4
14975  4AC5
14976  4AC6
14977  4AC7
14978  4AC8
14979  4AC9
14980  4ACA
14981  4ACB
14982  4ACC
14983  4ACD
14984  4ACE
14985  4ACF
14986  4AD0
14987  4AD1
14988  4AD2
14989  4AD3
14990  4AD4
14991  4AD5
14992  4AD6
14993  4AD7
14994  4AD8
14995  4AD9
14996  4ADA
14997  4ADB
14998  4ADC
14999  4ADD
15000  4ADE
15001  4ADF
15002  4AE0
15003  4AE1
15004  4AE2
15005  4AE3
15006  4AE4
15007  4AE5
15008  4AE6
15009  4AE7
15010  4AE8
15011  4AE9
15012  4AEA
15013  4AEB
15014  4AEC
15015  4AED
15016  4AEE
15017  4AEF
15018  4AF0
15019  4AF1
15020  4AF2
15021  4AF3
15022  4AF4
15023  4AF5
15024  4AF6
15025  4AF7
15026  4AF8
15027  4AF9
15028  4AFA
15029  4AFB
15030  4AFC
15031  4AFD
15032  4AFE
15033  4AFF
15034  4B00
15035  4B01
15036  4B02
15037  4B03
15038  4B04
15039  4B05
15040  4B06
15041  4B07
15042  4B08
15043  4B09
15044  4B0A
15045  4B0B
15046  4B0C
15047  4B0D
15048  4B0E
15049  4B0F
15050  4B10
15051  4B11
15052  4B12
15053  4B13
15054  4B14
15055  4B15
15056  4B16
15057  4B17
15058  4B18
15059  4B19
15060  4B1A
15061  4B1B
15062  4B1C
15063  4B1D
15064  4B1E
15065  4B1F
15066  4B20
15067  4B21
15068  4B22
15069  4B23
15070  4B24
15071  4B25
15072  4B26
15073  4B27
15074  4B28
15075  4B29
15076  4B2A
15077  4B2B
15078  4B2C
15079  4B2D
15080  4B2E
15081  4B2F
15082  4B30
15083  4B31
15084  4B32
15085  4B33
15086  4B34
15087  4B35
15088  4B36
15089  4B37
15090  4B38
15091  4B39
15092  4B3A
15093  4B3B
15094  4B3C
15095  4B3D
15096  4B3E
15097  4B3F
15098  4B40
15099  4B41
15100  4B42
15101  4B43
15102  4B44
15103  4B45
15104  4B46
15105  4B47
15106  4B48
15107  4B49
15108  4B4A
15109  4B4B
15110  4B4C
15111  4B4D
15112  4B4E
15113  4B4F
15114  4B50
15115  4B51
15116  4B52
15117  4B53
15118  4B54
15119  4B55
15120  4B56
15121  4B57
15122  4B58
15123  4B59
15124  4B5A
15125  4B5B
15126  4B5C
15127  4B5D
15128  4B5E
15129  4B5F
15130  4B60
15131  4B61
15132  4B62
15133  4B63
15134  4B64
15135  4B65
15136  4B66
15137  4B67
15138  4B68
15139  4B69
15140  4B6A
15141  4B6B
15142  4B6C
15143  4B6D
15144  4B6E
15145  4B6F
15146  4B70
15147  4B71
15148  4B72
15149  4B73
15150  4B74
15151  4B75
15152  4B76
15153  4B77
15154  4B78
15155  4B79
15156  4B7A
15157  4B7B
15158  4B7C
15159  4B7D
15160  4B7E
15161  4B7F
15162  4B80
15163  4B81
15164  4B82
15165  4B83
15166  4B84
15167  4B85
15168  4B86
15169  4B87
15170  4B88
15171  4B89
15172  4B8A
15173  4B8B
15174  4B8C
15175  4B8D
15176  4B8E
15177  4B8F
15178  4B90
15179  4B91
15180  4B92
15181  4B93
15182  4B94
15183  4B95
15184  4B96
15185  4B97
15186  4B98
15187  4B99
15188  4B9A
15189  4B9B
15190  4B9C
15191  4B9D
15192  4B9E
15193  4B9F
15194  4BA0
15195  4BA1
15196  4BA2
15197  4BA3
15198  4BA4
15199  4BA5
15200  4BA6
15201  4BA7
15202  4BA8
15203  4BA9
15204  4BAA
15205  4BAB
15206  4BAC
15207  4BAD
15208  4BAE
15209  4BAF
15210  4BB0
15211  4BB1
15212  4BB2
15213  4BB3
15214  4BB4
15215  4BB5
15216  4BB6
15217  4BB7
15218  4BB8
15219  4BB9
15220  4BBA
15221  4BBB
15222  4BBC
15223  4BBD
15224  4BBE
15225  4BBF
15226  4BC0
15227  4BC1
15228  4BC2
15229  4BC3
15230  4BC4
15231  4BC5
15232  4BC6
15233  4BC7
15234  4BC8
15235  4BC9
15236  4BCA
15237  4BCB
15238  4BCC
15239  4BCD
15240  4BCE
15241  4BCF
15242  4BD0
15243  4BD1
15244  4BD2
15245  4BD3
15246  4BD4
15247  4BD5
15248  4BD6
15249  4BD7
15250  4BD8
15251  4BD9
15252  4BDA
15253  4BDB
15254  4BDC
15255  4BDD
15256  4BDE
15257  4BDF
15258  4BE0
15259  4BE1
15260  4BE2
15261  4BE3
15262  4BE4
15263  4BE5
15264  4BE6
15265  4BE7
15266  4BE8
15267  4BE9
15268  4BEA
15269  4BEB
15270  4BEC
15271  4BED
15272  4BEE
15273  4BEF
15274  4BF0
15275  4BF1
15276  4BF2
15277  4BF3
15278  4BF4
15279  4BF5
15280  4BF6
15281  4BF7
15282  4BF8
15283  4BF9
15284  4BFA
15285  4BFB
15286  4BFC
15287  4BFD
15288  4BFE
15289  4BFF
15290  4C00
15291  4C01
15292  4C02
15293  4C03
15294  4C04
15295  4C05
15296  4C06
15297  4C07
15298  4C08
15299  4C09
15300  4C0A
15301  4C0B
15302  4C0C
15303  4C0D
15304  4C0E
15305  4C0F
15306  4C10
15307  4C11
15308  4C12
15309  4C13
15310  4C14
15311  4C15
15312  4C16
15313  4C17
15314  4C18
15315  4C19
15316  4C1A
15317  4C1B
15318  4C1C
15319  4C1D
15320  4C1E
15321  4C1F
15322  4C20
15323  4C21
15324  4C22
15325  4C23
15326  4C24
15327  4C25
15328  4C26
15329  4C27
15330  4C28
15331  4C29
15332  4C2A
15333  4C2B
15334  4C2C
15335  4C2D
15336  4C2E
15337  4C2F
15338  4C30
15339  4C31
15340  4C32
15341  4C33
15342  4C34
15343  4C35
15344  4C36
15345  4C37
15346  4C38
15347  4C39
15348  4C3A
15349  4C3B
15350  4C3C
15351  4C3D
15352  4C3E
15353  4C3F
15354  4C40
15355  4C41
015356  000551        
015357  000552  var hFonts[53] ;
015358  000553  var stringsCV[53] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15359  268E
15360  268F
15361  2690
15362  2691
15363  2692
15364  2693
15365  2694
15366  2695
15367  2696
15368  2697
15369  2698
15370  2699
15371  269A
15372  269B
15373  269C
15374  269D
15375  269E
15376  269F
15377  26A0
15378  26A1
15379  26A2
15380  26A3
15381  26A4
15382  26A5
15383  26A6
15384  26A7
15385  26A8
15386  26A9
15387  26AA
15388  26AB
15389  26AC
15390  26AD
15391  26AE
15392  26AF
15393  26B0
15394  26B1
15395  26B2
15396  26B3
15397  26B4
15398  26B5
15399  26B6
15400  26B7
15401  26B8
15402  26B9
15403  26BA
15404  26BB
15405  26BC
15406  26BD
15407  26BE
15408  26BF
15409  26C0
15410  26C1
15411  26C2
15412  26C3
15413  26C4
15414  26C5
15415  26C6
15416  26C7
15417  26C8
15418  26C9
15419  26CA
15420  26CB
15421  26CC
15422  26CD
15423  26CE
15424  26CF
15425  26D0
15426  26D1
15427  26D2
15428  26D3
15429  26D4
15430  26D5
15431  26D6
15432  26D7
15433  26D8
15434  26D9
15435  26DA
15436  26DB
15437  26DC
15438  26DD
15439  26DE
15440  26DF
15441  26E0
15442  26E1
15443  26E2
15444  26E3
15445  26E4
15446  26E5
15447  26E6
15448  26E7
15449  26E8
15450  26E9
15451  26EA
15452  26EB
15453  26EC
15454  26ED
15455  26EE
15456  26EF
15457  26F0
15458  26F1
15459  26F2
15460  26F3
15461  26F4
15462  26F5
15463  26F6
15464  26F7
015465  000554  // Start P2.inc
015466  000555  var oObjects[MaxTotObjects+1] ;                 // address of objects
015467  000556  var CurrentForm ;
015468  000557  var TouchXpos, TouchYpos ;
015469  000558  var InputType, TouchState, CurInputData, pInputIndex ;
015470  000559  var comRX[40], cmd[CMDLenMAX] ;
015471  000560        
015472  000561  var InputCS, OutputCS ;
015473  000562        
015474  000563        
015475  000564        
015476  000565  func seroutCS(var op)
015477  000566      serout(op) ;
015478  000567      OutputCS ^= op ;
015479  000568  endfunc
015480  000569        
015481  000570  func nak0()
015482  000571      serout(NAK) ;
015483  000572      InputCS := 0 ;
015484  000573  endfunc
015485  000574        
015486  000575  func seroutOcs()
015487  000576      serout(OutputCS) ;
015488  000577      OutputCS := 0 ;
015489  000578  endfunc
015490  000579        
015491  000580  func SendReport(var id, var objt, var objn, var val)
015492  000581      seroutCS(id) ;
015493  000582      seroutCS(objt) ;
015494  000583      seroutCS(objn) ;
015495  000584      seroutCS(val >> 8) ; // first 8 bits
015496  000585      seroutCS(val) ;
015497  000586      seroutOcs() ;
015498  000587  endfunc
015499  000588        
015500  000589        
015501  000590  func ReadObject(var ObjectType, var ObjectIdx)
015502  000591      var j, k, Objects ;
015503  000592      Objects := *(oObjects+ObjectType) ;
015504  000593        
015505  000594      j := 2 + ObjectIdx * 2 + Objects ;
015506  000595       if (ObjectType == tForm)
015507  000596          k := CurrentForm ;
015508  000597      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015509  000598          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015510  000599      else if (ObjectType == tStrings)
015511  000600          k := stringsCV[ObjectIdx];
015512  000601          else
015513  000602          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015514  000603          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015515  000604                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015516  000605      endif
015517  000606      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015518  000607  endfunc
015519  000608        
015520  000609        
015521  000610  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015522  000611      var i, j, k, Objects ;
015523  000612      ObjectType &= 0x3f ;
015524  000613      if (ObjectType == tForm)
015525  000614          ActivateForm(ObjectIdx) ;
015526  000615      else
015527  000616          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015528  000617          i := *(Objects) ;
015529  000618          switch (ObjectType)
015530  000619              case tWinButton :
015531  000620                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015532  000621                  break ;
015533  000622              case tUserButton :
015534  000623                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015535  000624                  break ;
015536  000625              default : j := -1 ;
015537  000626          endswitch
015538  000627          if (j != -1)
015539  000628              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015540  000629              NewVal := NewVal << 1 ;
015541  000630              if (OVF())      // button group index change
015542  000631                  if (*(j+InputData+Ofs_IPD_P1))
015543  000632                      k &= 1 ;    // mask off old group index for momentary
015544  000633                  else
015545  000634                      k &= 3 ;    // mask off old group index for toggle
015546  000635                  endif
015547  000636              else            // normal set
015548  000637                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015549  000638                  k &= 0xfffc ;    // retain only group index for state set
015550  000639              endif
015551  000640              NewVal |= k ;
015552  000641          endif
015553  000642           if (ObjectType == tLeddigits)
015554  000643              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015555  000644              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015556  000645          else if (ObjectType == tStrings)
015557  000646              PrintStrings(ObjectIdx, NewVal, 0);
015558  000647          else
015559  000648              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015560  000649              img_Show(hndl, i) ; // will only display if form is current
015561  000650          endif
015562  000651      endif
015563  000652  endfunc
015564  000653        
015565  000654  func TurnOffButtons(var group)
015566  000655      var j, k, l;
015567  000656      for (j := 0; j < nInputs; j++)
015568  000657          k := j*IPDatasize ;
015569  000658          if (*(InputData+k+Ofs_IPD_P2) == group)
015570  000659              l := -1 ;
015571  000660               if (*(InputData+k) == tWinButton)
015572  000661                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015573  000662                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015574  000663                  img_Show(hndl, l);      // only shows on current form
015575  000664              else if (*(InputData+k) == tUserButton)
015576  000665                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015577  000666                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015578  000667                  img_Show(hndl, l);      // only shows on current form
015579  000668              endif
015580  000669          endif
015581  000670      next
015582  000671  endfunc
015583  000672        
015584  000673        
015585  000674  // WARNING, this code will crash if newval exceeds maximum displayable number
015586  000675  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015587  000676      var i, j, k, l, lb, newval ;
015588  000677      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015589  000678      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015590  000679      i := -1 ;
015591  000680      j := *(typeptr) ;
015592  000681      repeat
015593  000682          typeptr += 2 ;
015594  000683          i++ ;
015595  000684          until (*(typeptr) == imgidx);
015596  000685      j := setptr + i*10 ;
015597  000686        
015598  000687      imgidx++ ;
015599  000688      l := 1 ;
015600  000689      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015601  000690          l *= 10 ;
015602  000691      next
015603  000692      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015604  000693      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015605  000694          k := newval / l ;
015606  000695          newval -= k * l ;
015607  000696          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015608  000697              if (k == 0)
015609  000698                  k := 10 ;
015610  000699              else
015611  000700                  lb := 0 ;
015612  000701              endif
015613  000702          endif
015614  000703          l /= 10 ;
015615  000704          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015616  000705          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015617  000706          img_Show(hndl, imgidx);
015618  000707      next
015619  000708  endfunc
015620  000709        
015621  000710        
015622  000711  func ActivateForm(var newform)
015623  000712      var i, j, *p ;
015624  000713        
015625  000714      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015626  000715          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015627  000716              if (img_GetWord(hndl, i, IMAGE_TAG))
015628  000717                  img_Disable(hndl,i) ;
015629  000718              endif
015630  000719          next
015631  000720      endif
015632  000721      CurrentForm := newform ;
015633  000722      // display newform image or clear to image color
015634  000723      if (FormBGcolors[CurrentForm] != ColorBGimage)
015635  000724          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015636  000725          gfx_Cls() ;
015637  000726          DoGFXObjects() ;                                    // display GFX 'widgets'
015638  000727      endif
015639  000728        
015640  000729      // enable inputs
015641  000730      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015642  000731          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015643  000732          if (j)
015644  000733              j-- ;
015645  000734              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015646  000735              //if (j != tKeyboard)
015647  000736              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015648  000737                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015649  000738              endif
015650  000739              img_Show(hndl,i) ; // show initialy, if required
015651  000740              if (j == tForm)
015652  000741                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015653  000742              else if (j == tLeddigits)
015654  000743                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015655  000744              endif
015656  000745          endif
015657  000746      next
015658  000747      for (i := 0; i < nStrings; i++)
015659  000748          if (stringsCV[i] != -1)
015660  000749              WriteObject(tStrings, i, stringsCV[i]) ;
015661  000750          endif
015662  000751      next
015663  000752        
015664  000753  endfunc
015665  000754        
015666  000755  func UpdateObjects(var newval)
015667  000756      var IPidx, otherOBJ ;
015668  000757      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015669  000758        
015670  000759          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015671  000760              img_Show(hndl, *(pInputIndex));      // only shows on current form
015672  000761          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015673  000762              if (*(CurInputData+Ofs_IPD_P1))
015674  000763                  newval &= 1;
015675  000764              else
015676  000765                  newval &= 3;
015677  000766              endif
015678  000767              if (newval > 1) newval := 1;
015679  000768          endif
015680  000769          IPidx := *(CurInputData+TouchState) ;
015681  000770          while(IPidx != 0)
015682  000771              otherOBJ := IPidx + InputData;
015683  000772              if (*(otherOBJ) == OT_REPORT)
015684  000773          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015685  000774              else if (*(otherOBJ) == OT_MAGIC)
015686  000775                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015687  000776                  IPidx(newval) ;
015688  000777              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015689  000778                  if (*(otherOBJ) == OT_ACTIVATE)
015690  000779                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015691  000780                      InputType := tForm ;
015692  000781                  else if (*(otherOBJ) == OT_SETCONST)
015693  000782                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015694  000783                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015695  000784                  else if (*(otherOBJ) == OT_SETANOTHER)
015696  000785                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015697  000786                  else if (*(otherOBJ) == OT_PREVFRAME)
015698  000787                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015699  000788                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015700  000789                      endif
015701  000790                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015702  000791                  else if (*(otherOBJ) == OT_NEXTFRAME)
015703  000792                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015704  000793                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015705  000794                      endif
015706  000795                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015707  000796                  else if (*(otherOBJ) == OT_PREVSTRING)
015708  000797                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015709  000798                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015710  000799                      endif
015711  000800                  else if (*(otherOBJ) == OT_NEXTSTRING)
015712  000801                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015713  000802                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015714  000803                      endif
015715  000804                  endif
015716  000805              endif
015717  000806              IPidx := *(otherOBJ+TouchState) ;
015718  000807          wend
015719  000808      endif
015720  000809  endfunc
015721  000810        
015722  000811  // End P2.inc
015723  000812  func DoGFXObjects()
015724  000813  endfunc
015725  000814        
015726  000815  // Start P3.inc
015727  000816  func main()
015728  000817      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015729  000818        
015730  000819      putstr("Mounting...\n");
015731  000820      if (!(file_Mount()))
015732  000821          while(!(file_Mount()))
015733  000822              putstr("Drive not mounted...");
015734  000823              pause(200);
015735  000824              gfx_Cls();
015736  000825              pause(200);
015737  000826          wend
015738  000827      endif
015739  000828  //    gfx_MoveTo(0, 0);
015740  000829  //    print(mem_Heap()," ") ;
015741  000830  //    gfx_TransparentColour(0x0020);
015742  000831  //    gfx_Transparency(ON);
015743  000832        
015744  000833      gfx_ScreenMode(LANDSCAPE) ;
015745  000834        
015746  000835      // open image control
015747  000836      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015748  000837        
015749  000838      // init 'constants'
015750  000839  // End P3.inc
015751  000840        
015752  000841      oObjects[tDipSwitch] := oDipSwitchs ;
015753  000842      oObjects[tKnob] := oKnobs ;
015754  000843      oObjects[tRockerSwitch] := oRockerSwitchs ;
015755  000844      oObjects[tRotarySwitch] := oRotarySwitchs ;
015756  000845      oObjects[tGSlider] := oGSliders ;
015757  000846      oObjects[tTrackbar] := oTrackbars ;
015758  000847      oObjects[tWinButton] := oWinButtons ;
015759  000848      oObjects[tAngularmeter] := oAngularmeters ;
015760  000849      oObjects[tCoolgauge] := oCoolgauges ;
015761  000850      oObjects[tCustomdigits] := oCustomdigitss ;
015762  000851      oObjects[tForm] := oForms ;
015763  000852      oObjects[tGauge] := oGauges ;
015764  000853      oObjects[tImage] := oImages ;
015765  000854      oObjects[tKeyboard] := oKeyboards ;
015766  000855      oObjects[tLed] := oLeds ;
015767  000856      oObjects[tLeddigits] := oLeddigitss ;
015768  000857      oObjects[tMeter] := oMeters ;
015769  000858      oObjects[tStrings] := oStringss ;
015770  000859      oObjects[tThermometer] := oThermometers ;
015771  000860      oObjects[tUserled] := oUserleds ;
015772  000861      oObjects[tVideo] := oVideos ;
015773  000862      oObjects[tStaticText] := oStaticTexts ;
015774  000863      oObjects[tSounds] := oSoundss ;
015775  000864      oObjects[tTimer] := oTimers ;
015776  000865      oObjects[tSpectrum] := oSpectrums ;
015777  000866      oObjects[tTank] := oTanks ;
015778  000867      oObjects[tUserImages] := oUserImagess ;
015779  000868      oObjects[tPinOutput] := oPinOutputs ;
015780  000869      oObjects[tPinInput] := oPinInputs ;
015781  000870      oObjects[t4Dbutton] := o4Dbuttons ;
015782  000871      oObjects[tAniButton] := oAniButtons ;
015783  000872      oObjects[tColorPicker] := oColorPickers ;
015784  000873      oObjects[tUserButton] := oUserButtons ;
015785  000874      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015786  000875      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015787  000876      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015788  000877      hFonts[3] := FONT3 ;
015789  000878      hFonts[4] := FONT3 ;
015790  000879      hFonts[5] := FONT3 ;
015791  000880      hFonts[6] := FONT3 ;
015792  000881      hFonts[11] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015793  000882      hFonts[12] := FONT3 ;
015794  000883      hFonts[13] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015795  000884      hFonts[14] := FONT3 ;
015796  000885      hFonts[15] := FONT3 ;
015797  000886      hFonts[16] := FONT3 ;
015798  000887      hFonts[20] := FONT3 ;
015799  000888      hFonts[21] := FONT3 ;
015800  000889      hFonts[22] := FONT3 ;
015801  000890      hFonts[23] := FONT3 ;
015802  000891      hFonts[24] := FONT3 ;
015803  000892      hFonts[28] := FONT3 ;
015804  000893      hFonts[33] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015805  000894      hFonts[35] := FONT3 ;
015806  000895      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015807  000896      hFonts[49] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015808  000897      hFonts[51] := FONT3 ;
015809  000898      hFonts[52] := FONT3 ;
015810  000899      hFonts[7] := hFonts[37] ;
015811  000900      hFonts[8] := hFonts[37] ;
015812  000901      hFonts[9] := hFonts[0] ;
015813  000902      hFonts[10] := hFonts[11] ;
015814  000903      hFonts[17] := hFonts[11] ;
015815  000904      hFonts[18] := hFonts[11] ;
015816  000905      hFonts[19] := hFonts[11] ;
015817  000906      hFonts[25] := hFonts[11] ;
015818  000907      hFonts[26] := hFonts[11] ;
015819  000908      hFonts[27] := hFonts[11] ;
015820  000909      hFonts[29] := hFonts[11] ;
015821  000910      hFonts[30] := hFonts[11] ;
015822  000911      hFonts[31] := hFonts[1] ;
015823  000912      hFonts[32] := hFonts[1] ;
015824  000913      hFonts[34] := hFonts[0] ;
015825  000914      hFonts[36] := hFonts[0] ;
015826  000915      hFonts[38] := hFonts[37] ;
015827  000916      hFonts[39] := hFonts[37] ;
015828  000917      hFonts[40] := hFonts[0] ;
015829  000918      hFonts[41] := hFonts[0] ;
015830  000919      hFonts[42] := hFonts[0] ;
015831  000920      hFonts[43] := hFonts[37] ;
015832  000921      hFonts[44] := hFonts[37] ;
015833  000922      hFonts[45] := hFonts[37] ;
015834  000923      hFonts[46] := hFonts[13] ;
015835  000924      hFonts[47] := hFonts[13] ;
015836  000925      hFonts[48] := hFonts[13] ;
015837  000926      hFonts[50] := hFonts[49] ;
015838  000927  // Start P4.inc
015839  000928      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015840  000929      // init comms
015841  000930      com_Init(comRX,CMDLenMAX,0);
015842  000931      com_SetBaud(COM0,19886);
015843  000932      com_TXbuffer(comTX, 100, 0);
015844  000933      snd_BufSize(2) ;
015845  000934      // tag 'real' objects
015846  000935      for (i := 0; i <= MaxTotObjects; i++)
015847  000936          if (   (i != tSounds)
015848  000937              && (i != tTimer)
015849  000938              && (i != tPinOutput)
015850  000939              && (i != tPinInput) )
015851  000940              TouchXpos := oObjects[i] ;
015852  000941              TouchYpos := *(TouchXpos) ;
015853  000942              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015854  000943                  oldn := *(TouchXpos+ImageTouched*2) ;
015855  000944                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015856  000945                  if (oldn != -1)
015857  000946                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015858  000947                      img_Disable(hndl, oldn) ;
015859  000948                  endif
015860  000949              next
015861  000950          endif
015862  000951      next
015863  000952        
015864  000953      // display initial form
015865  000954      CurrentForm := -1 ;
015866  000955      ActivateForm(0) ; // need to change this according to first actual form
015867  000956        
015868  000957  // End P4.inc
015869  000958  // Start P5.inc
015870  000959      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015871  000960      oldn := -1 ;
015872  000961      repeat
015873  000962        
015874  000963          // check comms for command, how to NAK invalid command
015875  000964          if (com_Count() != 0)
015876  000965              i := serin() ;
015877  000966              InputCS ^= i ;               // update checksum
015878  000967              if (   (cmdi > 2)
015879  000968                  && (cmd[0] == WRITE_STRU) )
015880  000969                  j := (cmdi-1) >> 1 + 2 ;
015881  000970                  if (j == CMDLenMAX)    // max length exceeded
015882  000971                      nak0() ;
015883  000972                      cmdi := -1 ;
015884  000973                  else if (cmdi & 1)
015885  000974                      cmd[j] := i ;
015886  000975                      if (cmd[2] == 0)    // if string complete
015887  000976                          if (InputCS)
015888  000977                              nak0() ;
015889  000978                          else
015890  000979                              if (cmd[0] == WRITE_STRU)
015891  000980                              cmd[j] := 0 ;                     // terminate it
015892  000981                              PrintStrings(cmd[1], &cmd[3], 1) ;
015893  000982                              serout(ACK) ;
015894  000983                              else
015895  000984                              endif
015896  000985                          endif
015897  000986                          cmdi := -1 ;
015898  000987                      endif
015899  000988                  else
015900  000989                      cmd[j] := cmd[j] << 8 + i ;
015901  000990                      cmd[2]-- ;          // dec length
015902  000991                  endif
015903  000992                  cmdi++ ;
015904  000993              else // not unicode string
015905  000994                  cmd[cmdi++] := i ;
015906  000995                   if (cmd[0] == WRITE_STR)                  // Ansi String
015907  000996                      if (cmdi == CMDLenMAX)      // max length exceeded
015908  000997                          nak0() ;
015909  000998                          cmdi := 0 ;
015910  000999                      else if (cmdi > 2)
015911  001000                          if (cmd[2] == -1)
015912  001001                              if (InputCS)
015913  001002                                  nak0() ;
015914  001003                              else
015915  001004                                  if (cmd[0] == WRITE_STR)
015916  001005                                  cmd[cmdi-1] := 0 ;                     // terminate it
015917  001006                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015918  001007                                  serout(ACK) ;
015919  001008                                  else
015920  001009                                  endif
015921  001010                              endif
015922  001011                              cmdi := 0 ;
015923  001012                          else
015924  001013                              cmd[2]-- ;          // dec length
015925  001014                          endif
015926  001015                      endif
015927  001016                  else if (   (cmd[0] == READ_OBJ)
015928  001017                           && (cmdi == 4)         )
015929  001018                      if (InputCS)
015930  001019                          nak0() ;
015931  001020                      else
015932  001021                          ReadObject(cmd[1], cmd[2]) ;
015933  001022                      endif
015934  001023                      cmdi := 0 ;
015935  001024                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015936  001025                           && (cmdi == 6)          )
015937  001026                      if (InputCS)
015938  001027                          nak0() ;
015939  001028                      else
015940  001029                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015941  001030                          serout(ACK) ;
015942  001031                      endif
015943  001032                      cmdi := 0 ;
015944  001033                  else if (   (cmd[0] == WRITE_CONTRAST)
015945  001034                           && (cmdi == 3)         )
015946  001035                      if (InputCS)
015947  001036                          nak0() ;
015948  001037                      else
015949  001038                          gfx_Contrast(cmd[1]) ;
015950  001039                          serout(ACK) ;
015951  001040                      endif
015952  001041                      cmdi := 0 ;
015953  001042                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
015954  001043                      nak0() ;
015955  001044                      cmdi := 0 ;
015956  001045                  endif
015957  001046              endif   // not unicode string
015958  001047          endif   // a character is available
015959  001048        
015960  001049        
015961  001050      // touch code processing
015962  001051        
015963  001052          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
015964  001053          ImageTouched := img_Touched(hndl,-1) ;
015965  001054          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
015966  001055              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
015967  001056                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
015968  001057              endif
015969  001058              if (TouchStatus != TOUCH_RELEASED)        // if not released
015970  001059                  if (oldn != -1)
015971  001060                      ImageTouched := oldn ;
015972  001061                  else
015973  001062                      if (oldn != ImageTouched)
015974  001063                  oldn := ImageTouched ;
015975  001064                          TouchStatus := TOUCH_PRESSED ;
015976  001065                      endif
015977  001066                  endif
015978  001067                  TouchXpos  := touch_Get(TOUCH_GETX);
015979  001068                  TouchYpos  := touch_Get(TOUCH_GETY);
015980  001069                  TouchState := Ofs_IPD_DOWN ;
015981  001070              else
015982  001071                  ImageTouched := oldn ;                     // simulate release of what we touched
015983  001072                  oldn := -1 ;                    // prevent double release
015984  001073                  TouchState := Ofs_IPD_RELEASE ;
015985  001074              endif
015986  001075              if (ImageTouched != -1)
015987  001076                          CurInputData := InputControls[ImageTouched] + InputData;
015988  001077                          InputType := *(CurInputData) ;
015989  001078                          i := InputType ;
015990  001079                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
015991  001080                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
015992  001081              endif
015993  001082          endif
015994  001083   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
015995  001084        
015996  001085          sys_EventsResume() ;
015997  001086      forever
015998  001087        
015999  001088  cDipswitch:
016000  001089        
016001  001090  cKnob:
016002  001091        
016003  001092  cRockerswitch:
016004  001093        
016005  001094  cRotaryswitch:
016006  001095        
016007  001096  cSlider:
016008  001097  cTrackbar:
016009  001098        
016010  001099  c4DButton:
016011  001100  cUserButton:
016012  001101      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016013  001102      goto gbutton ;
016014  001103  cWinbutton:
016015  001104      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016016  001105  gbutton:
016017  001106      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016018  001107      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016019  001108          if (TouchStatus == TOUCH_RELEASED)
016020  001109              i &= 0xfffe ;
016021  001110              TouchState == Ofs_IPD_DOWN ;
016022  001111          else
016023  001112              i |= 1 ;
016024  001113              TouchState == Ofs_IPD_RELEASE ;
016025  001114          endif
016026  001115      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016027  001116          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016028  001117              if ((i & 3) == 3)
016029  001118                  i &= 0xfffc ;
016030  001119              else
016031  001120                  i++ ;
016032  001121              endif
016033  001122          else
016034  001123              i |= 1 ;                                      // make down regardless of current state
016035  001124          endif
016036  001125      else                        // group action, up all other buttons on touch press, reports 0 for button down
016037  001126          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016038  001127              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016039  001128          endif
016040  001129          i := (i & 0xfffc) | 2 ;
016041  001130      endif
016042  001131        
016043  001132      UpdateObjects(i) ;
016044  001133  endsub ;
016045  001134        
016046  001135  cAniButton:
016047  001136        
016048  001137  cColorPicker:
016049  001138        
016050  001139  endfunc
016051  001140  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 776 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 712 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       12834  0x00003222 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 138)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  378  0x0000017a (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 36)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                298  0x0000012a (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         294  0x00000126 (mem) word (global)  (usage 27)
CurrentForm                          284  0x0000011c (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12202  0x00002faa (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 27)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 51)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9645  0x000025adFormBGcolors                        9645  0x000025ad (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[53] (global)  (usage 246)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             214  0x000000d6 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               96  0x00000060 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm28                              106  0x0000006a (const ??? 0)  (usage 3)
iForm29                              111  0x0000006f (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iImage0                              153  0x00000099 (const ??? 0)  (usage 3)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[195] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              538  0x0000021a (mem) word (global)  (usage 21)
InputData                            569  0x00000239InputData                            569  0x00000239 (mem) word[3531] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            290  0x00000122 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          80  0x00000050 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext10                         56  0x00000038 (const ??? 0)  (usage 3)
iStatictext15                         85  0x00000055 (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext3                         129  0x00000081 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext5                         140  0x0000008c (const ??? 0)  (usage 3)
iStatictext6                         144  0x00000090 (const ??? 0)  (usage 3)
iStatictext7                         145  0x00000091 (const ??? 0)  (usage 3)
iStatictext8                         146  0x00000092 (const ??? 0)  (usage 3)
iStatictext9                          52  0x00000034 (const ??? 0)  (usage 3)
iStrings0                           7631  0x00001dcfiStrings0                           7631  0x00001dcf (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7657  0x00001de9iStrings1                           7657  0x00001de9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          7891  0x00001ed3iStrings10                          7891  0x00001ed3 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          7917  0x00001eediStrings11                          7917  0x00001eed (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7943  0x00001f07iStrings12                          7943  0x00001f07 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          7969  0x00001f21iStrings13                          7969  0x00001f21 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          7995  0x00001f3biStrings14                          7995  0x00001f3b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8021  0x00001f55iStrings15                          8021  0x00001f55 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8047  0x00001f6fiStrings16                          8047  0x00001f6f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8073  0x00001f89iStrings17                          8073  0x00001f89 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8099  0x00001fa3iStrings18                          8099  0x00001fa3 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8125  0x00001fbdiStrings19                          8125  0x00001fbd (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7683  0x00001e03iStrings2                           7683  0x00001e03 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          8151  0x00001fd7iStrings20                          8151  0x00001fd7 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          8177  0x00001ff1iStrings21                          8177  0x00001ff1 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          8203  0x0000200biStrings22                          8203  0x0000200b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          8229  0x00002025iStrings23                          8229  0x00002025 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8255  0x0000203fiStrings24                          8255  0x0000203f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8281  0x00002059iStrings25                          8281  0x00002059 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8307  0x00002073iStrings26                          8307  0x00002073 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8333  0x0000208diStrings27                          8333  0x0000208d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          8359  0x000020a7iStrings28                          8359  0x000020a7 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8385  0x000020c1iStrings29                          8385  0x000020c1 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7709  0x00001e1diStrings3                           7709  0x00001e1d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8411  0x000020dbiStrings30                          8411  0x000020db (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8437  0x000020f5iStrings31                          8437  0x000020f5 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8463  0x0000210fiStrings32                          8463  0x0000210f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          8489  0x00002129iStrings33                          8489  0x00002129 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8515  0x00002143iStrings34                          8515  0x00002143 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          8541  0x0000215diStrings35                          8541  0x0000215d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8567  0x00002177iStrings36                          8567  0x00002177 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8593  0x00002191iStrings37                          8593  0x00002191 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8619  0x000021abiStrings38                          8619  0x000021ab (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8645  0x000021c5iStrings39                          8645  0x000021c5 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7735  0x00001e37iStrings4                           7735  0x00001e37 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8671  0x000021dfiStrings40                          8671  0x000021df (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8697  0x000021f9iStrings41                          8697  0x000021f9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8723  0x00002213iStrings42                          8723  0x00002213 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8749  0x0000222diStrings43                          8749  0x0000222d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8775  0x00002247iStrings44                          8775  0x00002247 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8801  0x00002261iStrings45                          8801  0x00002261 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8827  0x0000227biStrings46                          8827  0x0000227b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8853  0x00002295iStrings47                          8853  0x00002295 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8879  0x000022afiStrings48                          8879  0x000022af (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          8905  0x000022c9iStrings49                          8905  0x000022c9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           7761  0x00001e51iStrings5                           7761  0x00001e51 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8931  0x000022e3iStrings50                          8931  0x000022e3 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8957  0x000022fdiStrings51                          8957  0x000022fd (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8983  0x00002317iStrings52                          8983  0x00002317 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7787  0x00001e6biStrings6                           7787  0x00001e6b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7813  0x00001e85iStrings7                           7813  0x00001e85 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7839  0x00001e9fiStrings8                           7839  0x00001e9f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7865  0x00001eb9iStrings9                           7865  0x00001eb9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton101                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton102                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton103                       131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton104                       132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton105                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton106                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton107                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton108                       136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton109                       137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton11                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton110                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton111                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton112                       141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton113                       142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton114                       143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton115                       147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton116                       148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton117                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton118                        79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton119                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton121                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton122                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton123                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton124                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton125                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton126                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton127                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton128                       176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton129                       177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton131                       179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton132                       180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton133                       181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton134                       173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton135                       182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton136                       183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton137                       184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton138                       185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton139                       186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton141                       188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton142                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton143                       190  0x000000be (const ??? 0)  (usage 3)
iUserbutton144                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton145                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton146                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton147                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton17                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton21                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton22                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton23                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton24                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton25                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton26                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton27                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton28                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton29                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton31                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton32                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton33                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton34                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton35                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton36                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton37                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton38                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton39                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton41                        154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton42                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton43                        156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton44                        157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton45                        158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton46                        159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton47                        160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton48                        161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton49                        152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton52                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton53                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton54                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton55                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton56                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton57                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton58                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton59                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton65                        164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton66                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton68                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton69                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton71                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton72                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton73                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton74                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton75                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton76                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton77                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton78                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton79                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton81                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton82                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton83                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton84                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton85                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton86                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton87                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton88                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton89                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton91                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton92                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton93                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton94                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton95                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton96                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton97                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton98                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton99                         93  0x0000005d (const ??? 0)  (usage 3)
iUserimages0                         109  0x0000006d (const ??? 0)  (usage 3)
iUserimages1                          63  0x0000003f (const ??? 0)  (usage 3)
iUserimages2                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages3                         120  0x00000078 (const ??? 0)  (usage 3)
iUserimages4                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages5                         126  0x0000007e (const ??? 0)  (usage 3)
iUserimages6                         150  0x00000096 (const ??? 0)  (usage 3)
iUserimages7                         122  0x0000007a (const ??? 0)  (usage 3)
iUserimages8                         125  0x0000007d (const ??? 0)  (usage 3)
iUserimages9                         128  0x00000080 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9731  0x00002603kKeyboardKeystrokes                 9731  0x00002603 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13180  0x0000337c (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10191  0x000027cf (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14302  0x000037de (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              321  0x00000141 (const dword)  (usage 3)
nObjects                             195  0x000000c3 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              53  0x00000035 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9335  0x00002477o4Dbuttons                          9335  0x00002477 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9041  0x00002351oAngularmeters                      9041  0x00002351 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9337  0x00002479oAniButtons                         9337  0x00002479 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9339  0x0000247boColorPickers                       9339  0x0000247b (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9043  0x00002353oCoolgauges                         9043  0x00002353 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9045  0x00002355oCustomdigitss                      9045  0x00002355 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9009  0x00002331oDipSwitchs                         9009  0x00002331 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9047  0x00002357oForms                              9047  0x00002357 (mem) word[44] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9135  0x000023afoGauges                             9135  0x000023af (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9017  0x00002339oGSliders                           9017  0x00002339 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9137  0x000023b1oImages                             9137  0x000023b1 (mem) word[2] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9141  0x000023b5oKeyboards                          9141  0x000023b5 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9011  0x00002333oKnobs                              9011  0x00002333 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9735  0x00002607oLedDigitsn                         9735  0x00002607 (mem) word[15] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9145  0x000023b9oLeddigitss                         9145  0x000023b9 (mem) word[4] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9143  0x000023b7oLeds                               9143  0x000023b7 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9153  0x000023c1oMeters                             9153  0x000023c1 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             216  0x000000d8 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9333  0x00002475oPinInputs                          9333  0x00002475 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9643  0x000025aboPinOutputs                         9643  0x000025ab (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9013  0x00002335oRockerSwitchs                      9013  0x00002335 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9015  0x00002337oRotarySwitchs                      9015  0x00002337 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9307  0x0000245boScopes                             9307  0x0000245b (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9641  0x000025a9oSoundss                            9641  0x000025a9 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9305  0x00002459oSpectrums                          9305  0x00002459 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9271  0x00002437oStaticTexts                        9271  0x00002437 (mem) word[17] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9155  0x000023c3oStringss                           9155  0x000023c3 (mem) word[54] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 417)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9309  0x0000245doTanks                              9309  0x0000245d (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9263  0x0000242foThermometers                       9263  0x0000242f (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9639  0x000025a7oTimers                             9639  0x000025a7 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9019  0x0000233boTrackbars                          9019  0x0000233b (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9341  0x0000247doUserButtons                        9341  0x0000247d (mem) word[149] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9311  0x0000245foUserImagess                        9311  0x0000245f (mem) word[11] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9265  0x00002431oUserleds                           9265  0x00002431 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             540  0x0000021c (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9267  0x00002433oVideos                             9267  0x00002433 (mem) word[2] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9021  0x0000233doWinButtons                         9021  0x0000233d (mem) word[10] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          296  0x00000128 (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14337  0x00003801 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14049  0x000036e1 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9733  0x00002605rKeyboardRoutines                   9733  0x00002605 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14235  0x0000379b (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14318  0x000037ee (User func) args[1] r=0  (usage 15)
seroutOcs                          14285  0x000037cd (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         15  0x0000000f (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         15  0x0000000f (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         65  0x00000041 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         42  0x0000002a (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         45  0x0000002d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         35  0x00000023 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     1024  0x00000400 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         35  0x00000023 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         17  0x00000011 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         65  0x00000041 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         45  0x0000002d (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         33  0x00000021 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         36  0x00000024 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    26624  0x00006800 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings50Count                         1  0x00000001 (const dword)  (not used)
Strings50Size                         20  0x00000014 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          37  0x00000025 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     11776  0x00002e00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     14336  0x00003800 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     14848  0x00003a00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3584  0x00000e00 (const dword)  (usage 3)
stringsCV                            108  0x0000006c (mem) word[53] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           292  0x00000124 (mem) word (global)  (usage 24)
TouchXpos                            286  0x0000011e (mem) word (global)  (usage 12)
TouchYpos                            288  0x00000120 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13494  0x000034b6 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 456)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12203  0x00002fab (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 156)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13694  0x0000357e (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
