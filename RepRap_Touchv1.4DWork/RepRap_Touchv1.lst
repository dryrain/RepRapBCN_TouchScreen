file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 31/07/2015 16:17:20
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 31/07/2015 16:16:53
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     25
005100  000006  #constant  Strings1Size     25
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings11Count    1
005154  000033  #constant  Strings11Count    1
005155  000034  #constant  Strings11Size     73
005156  000034  #constant  Strings11Size     73
005157  000035  #constant  Strings24Count    1
005158  000035  #constant  Strings24Count    1
005159  000036  #constant  Strings24Size     26
005160  000036  #constant  Strings24Size     26
005161  000037  #constant  Strings25Count    1
005162  000037  #constant  Strings25Count    1
005163  000038  #constant  Strings25Size     10
005164  000038  #constant  Strings25Size     10
005165  000039  #constant  Strings26Count    1
005166  000039  #constant  Strings26Count    1
005167  000040  #constant  Strings26Size     10
005168  000040  #constant  Strings26Size     10
005169  000041  #constant  Strings27Count    1
005170  000041  #constant  Strings27Count    1
005171  000042  #constant  Strings27Size     11
005172  000042  #constant  Strings27Size     11
005173  000043  #constant  Strings7Count    0
005174  000043  #constant  Strings7Count    0
005175  000044  #constant  Strings7Size     1
005176  000044  #constant  Strings7Size     1
005177  000045  #constant  Strings8Count    0
005178  000045  #constant  Strings8Count    0
005179  000046  #constant  Strings8Size     1
005180  000046  #constant  Strings8Size     1
005181  000047  #constant  Strings38Count    0
005182  000047  #constant  Strings38Count    0
005183  000048  #constant  Strings38Size     1
005184  000048  #constant  Strings38Size     1
005185  000049  #constant  Strings39Count    0
005186  000049  #constant  Strings39Count    0
005187  000050  #constant  Strings39Size     1
005188  000050  #constant  Strings39Size     1
005189  000051  #constant  Strings40Count    1
005190  000051  #constant  Strings40Count    1
005191  000052  #constant  Strings40Size     7
005192  000052  #constant  Strings40Size     7
005193  000053  #constant  Strings41Count    1
005194  000053  #constant  Strings41Count    1
005195  000054  #constant  Strings41Size     7
005196  000054  #constant  Strings41Size     7
005197  000055  #constant  Strings42Count    1
005198  000055  #constant  Strings42Count    1
005199  000056  #constant  Strings42Size     7
005200  000056  #constant  Strings42Size     7
005201  000057  #constant  Strings43Count    0
005202  000057  #constant  Strings43Count    0
005203  000058  #constant  Strings43Size     1
005204  000058  #constant  Strings43Size     1
005205  000059  #constant  Strings44Count    0
005206  000059  #constant  Strings44Count    0
005207  000060  #constant  Strings44Size     1
005208  000060  #constant  Strings44Size     1
005209  000061  #constant  Strings45Count    0
005210  000061  #constant  Strings45Count    0
005211  000062  #constant  Strings45Size     1
005212  000062  #constant  Strings45Size     1
005213  000063  #constant  Strings51Count    0
005214  000063  #constant  Strings51Count    0
005215  000064  #constant  Strings51Size     1
005216  000064  #constant  Strings51Size     1
005217  000065  #constant  Strings52Count    0
005218  000065  #constant  Strings52Count    0
005219  000066  #constant  Strings52Size     1
005220  000066  #constant  Strings52Size     1
005221  000067  #constant  Strings17Count    1
005222  000067  #constant  Strings17Count    1
005223  000068  #constant  Strings17Size     49
005224  000068  #constant  Strings17Size     49
005225  000069  #constant  Strings18Count    1
005226  000069  #constant  Strings18Count    1
005227  000070  #constant  Strings18Size     106
005228  000070  #constant  Strings18Size     106
005229  000071  #constant  Strings19Count    1
005230  000071  #constant  Strings19Count    1
005231  000072  #constant  Strings19Size     94
005232  000072  #constant  Strings19Size     94
005233  000073  #constant  Strings29Count    1
005234  000073  #constant  Strings29Count    1
005235  000074  #constant  Strings29Size     53
005236  000074  #constant  Strings29Size     53
005237  000075  #constant  Strings30Count    1
005238  000075  #constant  Strings30Count    1
005239  000076  #constant  Strings30Size     27
005240  000076  #constant  Strings30Size     27
005241  000077  #constant  Strings31Count    1
005242  000077  #constant  Strings31Count    1
005243  000078  #constant  Strings31Size     7
005244  000078  #constant  Strings31Size     7
005245  000079  #constant  Strings32Count    1
005246  000079  #constant  Strings32Count    1
005247  000080  #constant  Strings32Size     19
005248  000080  #constant  Strings32Size     19
005249  000081  #constant  Strings49Count    1
005250  000081  #constant  Strings49Count    1
005251  000082  #constant  Strings49Size     17
005252  000082  #constant  Strings49Size     17
005253  000083  #constant  Strings50Count    0
005254  000083  #constant  Strings50Count    0
005255  000084  #constant  Strings50Size     1
005256  000084  #constant  Strings50Size     1
005257  000085  #constant  Strings13Count    1
005258  000085  #constant  Strings13Count    1
005259  000086  #constant  Strings13Size     3
005260  000086  #constant  Strings13Size     3
005261  000087  #constant  Strings46Count    0
005262  000087  #constant  Strings46Count    0
005263  000088  #constant  Strings46Size     1
005264  000088  #constant  Strings46Size     1
005265  000089  #constant  Strings47Count    1
005266  000089  #constant  Strings47Count    1
005267  000090  #constant  Strings47Size     3
005268  000090  #constant  Strings47Size     3
005269  000091  #constant  Strings48Count    0
005270  000091  #constant  Strings48Count    0
005271  000092  #constant  Strings48Size     1
005272  000092  #constant  Strings48Size     1
005273  000093  #constant  Strings53Count    1
005274  000093  #constant  Strings53Count    1
005275  000094  #constant  Strings53Size     68
005276  000094  #constant  Strings53Size     68
005277  000095  // object indexes into ImageControl
005278  000096  #CONST
005279  000321  #END
005280  000322        
005281  000323  #constant  Strings5Size     0
005282  000323  #constant  Strings5Size     0
005283  000324  #constant  Strings5StartH   0
005284  000324  #constant  Strings5StartH   0
005285  000325  #constant  Strings5StartL   0
005286  000325  #constant  Strings5StartL   0
005287  000326  #constant  Strings10Size     0
005288  000326  #constant  Strings10Size     0
005289  000327  #constant  Strings10StartH   0
005290  000327  #constant  Strings10StartH   0
005291  000328  #constant  Strings10StartL   0
005292  000328  #constant  Strings10StartL   0
005293  000329  #constant  Strings20Size     0
005294  000329  #constant  Strings20Size     0
005295  000330  #constant  Strings20StartH   0
005296  000330  #constant  Strings20StartH   0
005297  000331  #constant  Strings20StartL   0
005298  000331  #constant  Strings20StartL   0
005299  000332  #constant  Strings21Size     0
005300  000332  #constant  Strings21Size     0
005301  000333  #constant  Strings21StartH   0
005302  000333  #constant  Strings21StartH   0
005303  000334  #constant  Strings21StartL   0
005304  000334  #constant  Strings21StartL   0
005305  000335  #constant  Strings22Size     0
005306  000335  #constant  Strings22Size     0
005307  000336  #constant  Strings22StartH   0
005308  000336  #constant  Strings22StartH   0
005309  000337  #constant  Strings22StartL   0
005310  000337  #constant  Strings22StartL   0
005311  000338  #constant  Strings23Size     0
005312  000338  #constant  Strings23Size     0
005313  000339  #constant  Strings23StartH   0
005314  000339  #constant  Strings23StartH   0
005315  000340  #constant  Strings23StartL   0
005316  000340  #constant  Strings23StartL   0
005317  000341  #constant  Strings28Size     0
005318  000341  #constant  Strings28Size     0
005319  000342  #constant  Strings28StartH   0
005320  000342  #constant  Strings28StartH   0
005321  000343  #constant  Strings28StartL   0
005322  000343  #constant  Strings28StartL   0
005323  000344  #constant  Strings33Size     0
005324  000344  #constant  Strings33Size     0
005325  000345  #constant  Strings33StartH   0
005326  000345  #constant  Strings33StartH   0
005327  000346  #constant  Strings33StartL   0
005328  000346  #constant  Strings33StartL   0
005329  000347  #constant  Strings35Size     0
005330  000347  #constant  Strings35Size     0
005331  000348  #constant  Strings35StartH   0
005332  000348  #constant  Strings35StartH   0
005333  000349  #constant  Strings35StartL   0
005334  000349  #constant  Strings35StartL   0
005335  000350  #constant  Strings1StartH   0x0
005336  000350  #constant  Strings1StartH   0x0
005337  000351  #constant  Strings1StartL   0x0
005338  000351  #constant  Strings1StartL   0x0
005339  000352  #constant  Strings3StartH   0x0
005340  000352  #constant  Strings3StartH   0x0
005341  000353  #constant  Strings3StartL   0x200
005342  000353  #constant  Strings3StartL   0x200
005343  000354  #constant  Strings4StartH   0x0
005344  000354  #constant  Strings4StartH   0x0
005345  000355  #constant  Strings4StartL   0x400
005346  000355  #constant  Strings4StartL   0x400
005347  000356  #constant  Strings6StartH   0x0
005348  000356  #constant  Strings6StartH   0x0
005349  000357  #constant  Strings6StartL   0x600
005350  000357  #constant  Strings6StartL   0x600
005351  000358  #constant  Strings2StartH   0x0
005352  000358  #constant  Strings2StartH   0x0
005353  000359  #constant  Strings2StartL   0x800
005354  000359  #constant  Strings2StartL   0x800
005355  000360  #constant  Strings0StartH   0x0
005356  000360  #constant  Strings0StartH   0x0
005357  000361  #constant  Strings0StartL   0xA00
005358  000361  #constant  Strings0StartL   0xA00
005359  000362  #constant  Strings9StartH   0x0
005360  000362  #constant  Strings9StartH   0x0
005361  000363  #constant  Strings9StartL   0xC00
005362  000363  #constant  Strings9StartL   0xC00
005363  000364  #constant  Strings34StartH   0x0
005364  000364  #constant  Strings34StartH   0x0
005365  000365  #constant  Strings34StartL   0xE00
005366  000365  #constant  Strings34StartL   0xE00
005367  000366  #constant  Strings36StartH   0x0
005368  000366  #constant  Strings36StartH   0x0
005369  000367  #constant  Strings36StartL   0x1000
005370  000367  #constant  Strings36StartL   0x1000
005371  000368  #constant  Strings37StartH   0x0
005372  000368  #constant  Strings37StartH   0x0
005373  000369  #constant  Strings37StartL   0x1200
005374  000369  #constant  Strings37StartL   0x1200
005375  000370  #constant  Strings12StartH   0x0
005376  000370  #constant  Strings12StartH   0x0
005377  000371  #constant  Strings12StartL   0x1400
005378  000371  #constant  Strings12StartL   0x1400
005379  000372  #constant  Strings14StartH   0x0
005380  000372  #constant  Strings14StartH   0x0
005381  000373  #constant  Strings14StartL   0x1600
005382  000373  #constant  Strings14StartL   0x1600
005383  000374  #constant  Strings16StartH   0x0
005384  000374  #constant  Strings16StartH   0x0
005385  000375  #constant  Strings16StartL   0x1800
005386  000375  #constant  Strings16StartL   0x1800
005387  000376  #constant  Strings15StartH   0x0
005388  000376  #constant  Strings15StartH   0x0
005389  000377  #constant  Strings15StartL   0x1A00
005390  000377  #constant  Strings15StartL   0x1A00
005391  000378  #constant  Strings11StartH   0x0
005392  000378  #constant  Strings11StartH   0x0
005393  000379  #constant  Strings11StartL   0x1C00
005394  000379  #constant  Strings11StartL   0x1C00
005395  000380  #constant  Strings24StartH   0x0
005396  000380  #constant  Strings24StartH   0x0
005397  000381  #constant  Strings24StartL   0x1E00
005398  000381  #constant  Strings24StartL   0x1E00
005399  000382  #constant  Strings25StartH   0x0
005400  000382  #constant  Strings25StartH   0x0
005401  000383  #constant  Strings25StartL   0x2000
005402  000383  #constant  Strings25StartL   0x2000
005403  000384  #constant  Strings26StartH   0x0
005404  000384  #constant  Strings26StartH   0x0
005405  000385  #constant  Strings26StartL   0x2200
005406  000385  #constant  Strings26StartL   0x2200
005407  000386  #constant  Strings27StartH   0x0
005408  000386  #constant  Strings27StartH   0x0
005409  000387  #constant  Strings27StartL   0x2400
005410  000387  #constant  Strings27StartL   0x2400
005411  000388  #constant  Strings7StartH   0x0
005412  000388  #constant  Strings7StartH   0x0
005413  000389  #constant  Strings7StartL   0x2600
005414  000389  #constant  Strings7StartL   0x2600
005415  000390  #constant  Strings8StartH   0x0
005416  000390  #constant  Strings8StartH   0x0
005417  000391  #constant  Strings8StartL   0x2800
005418  000391  #constant  Strings8StartL   0x2800
005419  000392  #constant  Strings38StartH   0x0
005420  000392  #constant  Strings38StartH   0x0
005421  000393  #constant  Strings38StartL   0x2A00
005422  000393  #constant  Strings38StartL   0x2A00
005423  000394  #constant  Strings39StartH   0x0
005424  000394  #constant  Strings39StartH   0x0
005425  000395  #constant  Strings39StartL   0x2C00
005426  000395  #constant  Strings39StartL   0x2C00
005427  000396  #constant  Strings40StartH   0x0
005428  000396  #constant  Strings40StartH   0x0
005429  000397  #constant  Strings40StartL   0x2E00
005430  000397  #constant  Strings40StartL   0x2E00
005431  000398  #constant  Strings41StartH   0x0
005432  000398  #constant  Strings41StartH   0x0
005433  000399  #constant  Strings41StartL   0x3000
005434  000399  #constant  Strings41StartL   0x3000
005435  000400  #constant  Strings42StartH   0x0
005436  000400  #constant  Strings42StartH   0x0
005437  000401  #constant  Strings42StartL   0x3200
005438  000401  #constant  Strings42StartL   0x3200
005439  000402  #constant  Strings43StartH   0x0
005440  000402  #constant  Strings43StartH   0x0
005441  000403  #constant  Strings43StartL   0x3400
005442  000403  #constant  Strings43StartL   0x3400
005443  000404  #constant  Strings44StartH   0x0
005444  000404  #constant  Strings44StartH   0x0
005445  000405  #constant  Strings44StartL   0x3600
005446  000405  #constant  Strings44StartL   0x3600
005447  000406  #constant  Strings45StartH   0x0
005448  000406  #constant  Strings45StartH   0x0
005449  000407  #constant  Strings45StartL   0x3800
005450  000407  #constant  Strings45StartL   0x3800
005451  000408  #constant  Strings51StartH   0x0
005452  000408  #constant  Strings51StartH   0x0
005453  000409  #constant  Strings51StartL   0x3A00
005454  000409  #constant  Strings51StartL   0x3A00
005455  000410  #constant  Strings52StartH   0x0
005456  000410  #constant  Strings52StartH   0x0
005457  000411  #constant  Strings52StartL   0x3C00
005458  000411  #constant  Strings52StartL   0x3C00
005459  000412  #constant  Strings17StartH   0x0
005460  000412  #constant  Strings17StartH   0x0
005461  000413  #constant  Strings17StartL   0x3E00
005462  000413  #constant  Strings17StartL   0x3E00
005463  000414  #constant  Strings18StartH   0x0
005464  000414  #constant  Strings18StartH   0x0
005465  000415  #constant  Strings18StartL   0x4000
005466  000415  #constant  Strings18StartL   0x4000
005467  000416  #constant  Strings19StartH   0x0
005468  000416  #constant  Strings19StartH   0x0
005469  000417  #constant  Strings19StartL   0x4200
005470  000417  #constant  Strings19StartL   0x4200
005471  000418  #constant  Strings29StartH   0x0
005472  000418  #constant  Strings29StartH   0x0
005473  000419  #constant  Strings29StartL   0x4400
005474  000419  #constant  Strings29StartL   0x4400
005475  000420  #constant  Strings30StartH   0x0
005476  000420  #constant  Strings30StartH   0x0
005477  000421  #constant  Strings30StartL   0x4600
005478  000421  #constant  Strings30StartL   0x4600
005479  000422  #constant  Strings31StartH   0x0
005480  000422  #constant  Strings31StartH   0x0
005481  000423  #constant  Strings31StartL   0x4800
005482  000423  #constant  Strings31StartL   0x4800
005483  000424  #constant  Strings32StartH   0x0
005484  000424  #constant  Strings32StartH   0x0
005485  000425  #constant  Strings32StartL   0x4A00
005486  000425  #constant  Strings32StartL   0x4A00
005487  000426  #constant  Strings49StartH   0x0
005488  000426  #constant  Strings49StartH   0x0
005489  000427  #constant  Strings49StartL   0x4C00
005490  000427  #constant  Strings49StartL   0x4C00
005491  000428  #constant  Strings50StartH   0x0
005492  000428  #constant  Strings50StartH   0x0
005493  000429  #constant  Strings50StartL   0x4E00
005494  000429  #constant  Strings50StartL   0x4E00
005495  000430  #constant  Strings13StartH   0x0
005496  000430  #constant  Strings13StartH   0x0
005497  000431  #constant  Strings13StartL   0x5000
005498  000431  #constant  Strings13StartL   0x5000
005499  000432  #constant  Strings46StartH   0x0
005500  000432  #constant  Strings46StartH   0x0
005501  000433  #constant  Strings46StartL   0x5200
005502  000433  #constant  Strings46StartL   0x5200
005503  000434  #constant  Strings47StartH   0x0
005504  000434  #constant  Strings47StartH   0x0
005505  000435  #constant  Strings47StartL   0x5400
005506  000435  #constant  Strings47StartL   0x5400
005507  000436  #constant  Strings48StartH   0x0
005508  000436  #constant  Strings48StartH   0x0
005509  000437  #constant  Strings48StartL   0x5600
005510  000437  #constant  Strings48StartL   0x5600
005511  000438  #constant  Strings53StartH   0x0
005512  000438  #constant  Strings53StartH   0x0
005513  000439  #constant  Strings53StartL   0x5800
005514  000439  #constant  Strings53StartL   0x5800
005515  000440  #IFNOT EXISTS NOGLOBALS
005516  000441  var hndl ;
005517  000442  #ENDIF
005518  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005519  000013  #inherit "CLPrintStrings.inc"
005520  000013  #inherit "CLPrintStrings.inc"
005521  000001  func PrintStrings(var ID, var *msgid, var String)
005522  000002      var StringID, i, ch, offs32[2], res32[2];
005523  000003      StringID := oStringss[1+ID] ;
005524  000004      if (String)
005525  000005          stringsCV[ID] := -1 ;
005526  000006      else
005527  000007          stringsCV[ID] := msgid ;
005528  000008      endif
005529  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005530  000010      txt_FontID(hFonts[ID]) ;
005531  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005532  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005533  000013        
005534  000014      if (*(StringID + Ofs_String_Transparent))
005535  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005536  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005537  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005538  000018      else
005539  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005540  000020          gfx_Clipping(ON) ;
005541  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005542  000022          gfx_Clipping(OFF) ;
005543  000023        
005544  000024      endif
005545  000025        
005546  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005547  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005548  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005549  000029        
005550  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005551  000031        
005552  000032      if (String)
005553  000033          i := 0 ;
005554  000034          ch := msgid[i++] ;
005555  000035          while (ch != 0)
005556  000036              putch(ch) ;
005557  000037              ch := msgid[i++] ;
005558  000038          wend
005559  000039      else
005560  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005561  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005562  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005563  000043          uadd_3232(res32,res32,offs32) ;
005564  000044          file_Seek(hstrings, res32[1], res32[0]);
005565  000045          repeat
005566  000046              if (*(StringID + Ofs_String_Ansi))
005567  000047                  ch := file_GetC(hstrings) ;
005568  000048              else
005569  000049                  ch := file_GetW(hstrings) ;
005570  000050              endif
005571  000051              putch(ch) ;
005572  000052          until (ch == 0) ;
005573  000053      endif
005574  000054        
005575  000055  endfunc
005576  000056        
005577  000014        
005578  000015  #constant IPDatasize 22
005579  000015  #constant IPDatasize 22
005580  000016        
005581  000017  #CONST
005582  000021  #END
005583  000022        
005584  000023  #CONST
005585  000130  #END
005586  000131        
005587  000552  #END
5588  25BE
5589  25BF
5590  25C0
5591  25C1
5592  25C2
5593  25C3
5594  25C4
5595  25C5
5596  25C6
5597  25C7
5598  25C8
5599  25C9
5600  25CA
5601  25CB
5602  25CC
5603  25CD
5604  25CE
5605  25CF
5606  25D0
5607  25D1
5608  25D2
5609  25D3
5610  25D4
5611  25D5
5612  25D6
5613  25D7
5614  25D8
5615  25D9
5616  25DA
5617  25DB
5618  25DC
5619  25DD
5620  25DE
5621  25DF
5622  25E0
5623  25E1
5624  25E2
5625  25E3
5626  25E4
5627  25E5
5628  25E6
5629  25E7
5630  25E8
5631  25E9
5632  25EA
5633  25EB
5634  25EC
5635  25ED
5636  25EE
5637  25EF
5638  25F0
5639  25F1
5640  25F2
5641  25F3
5642  25F4
5643  25F5
5644  25F6
5645  25F7
5646  25F8
5647  25F9
5648  25FA
5649  25FB
5650  25FC
5651  25FD
5652  25FE
5653  25FF
5654  2600
5655  2601
5656  2602
5657  2603
5658  2604
5659  2605
5660  2606
5661  2607
5662  2608
5663  2609
5664  260A
5665  260B
5666  260C
5667  260D
5668  260E
5669  260F
5670  2610
5671  2611
5672  2612
5673  2613
5674  2614
5675  2615
5676  2616
5677  2617
5678  2618
5679  2619
5680  261A
5681  261B
5682  261C
5683  261D
5684  261E
5685  261F
5686  2620
5687  2621
5688  2622
5689  2623
5690  2624
5691  2625
5692  2626
5693  2627
5694  2628
5695  2629
5696  262A
5697  262B
5698  262C
5699  262D
5700  262E
5701  262F
5702  2630
5703  2631
5704  2632
5705  2633
5706  2634
5707  2635
5708  2636
5709  2637
5710  2638
5711  2639
5712  263A
5713  263B
5714  263C
5715  263D
5716  263E
5717  263F
5718  2640
5719  2641
5720  2642
5721  2643
5722  2644
5723  2645
5724  2646
5725  2647
5726  2648
5727  2649
5728  264A
5729  264B
5730  264C
5731  264D
5732  264E
5733  264F
5734  2650
5735  2651
5736  2652
5737  2653
5738  2654
5739  2655
5740  2656
5741  2657
5742  2658
5743  2659
5744  265A
5745  265B
5746  265C
5747  265D
5748  265E
5749  265F
5750  2660
5751  2661
5752  2662
5753  2663
5754  2664
5755  2665
5756  2666
5757  2667
5758  2668
5759  2669
5760  266A
5761  266B
5762  266C
5763  266D
5764  266E
5765  266F
5766  2670
5767  2671
5768  2672
5769  2673
5770  2674
5771  2675
5772  2676
5773  2677
5774  2678
5775  2679
5776  267A
5777  267B
5778  267C
5779  267D
5780  267E
5781  267F
5782  2680
5783  2681
5784  2682
5785  2683
5786  2684
5787  2685
5788  2686
5789  2687
5790  2688
5791  2689
5792  268A
5793  268B
5794  268C
5795  268D
5796  268E
5797  268F
5798  2690
5799  2691
5800  2692
5801  2693
5802  2694
5803  2695
5804  2696
5805  2697
5806  2698
5807  2699
5808  269A
5809  269B
5810  269C
5811  269D
5812  269E
5813  269F
5814  26A0
5815  26A1
5816  26A2
5817  26A3
5818  26A4
5819  26A5
5820  26A6
5821  26A7
5822  26A8
5823  26A9
5824  26AA
5825  26AB
5826  26AC
5827  26AD
5828  26AE
5829  26AF
5830  26B0
5831  26B1
5832  26B2
5833  26B3
5834  26B4
5835  26B5
5836  26B6
5837  26B7
5838  26B8
5839  26B9
5840  26BA
5841  26BB
5842  26BC
5843  26BD
5844  26BE
5845  26BF
5846  26C0
5847  26C1
5848  26C2
5849  26C3
5850  26C4
5851  26C5
5852  26C6
5853  26C7
5854  26C8
5855  26C9
5856  26CA
5857  26CB
5858  26CC
5859  26CD
5860  26CE
5861  26CF
5862  26D0
5863  26D1
5864  26D2
5865  26D3
5866  26D4
5867  26D5
5868  26D6
5869  26D7
5870  26D8
5871  26D9
5872  26DA
5873  26DB
5874  26DC
5875  26DD
5876  26DE
5877  26DF
5878  26E0
5879  26E1
5880  26E2
5881  26E3
5882  26E4
5883  26E5
5884  26E6
5885  26E7
5886  26E8
5887  26E9
5888  26EA
5889  26EB
5890  26EC
5891  26ED
5892  26EE
5893  26EF
5894  26F0
5895  26F1
5896  26F2
5897  26F3
5898  26F4
5899  26F5
5900  26F6
5901  26F7
5902  26F8
5903  26F9
5904  26FA
5905  26FB
5906  26FC
5907  26FD
5908  26FE
5909  26FF
5910  2700
5911  2701
5912  2702
5913  2703
5914  2704
5915  2705
5916  2706
5917  2707
5918  2708
5919  2709
5920  270A
5921  270B
5922  270C
5923  270D
5924  270E
5925  270F
5926  2710
5927  2711
5928  2712
5929  2713
5930  2714
5931  2715
5932  2716
5933  2717
5934  2718
5935  2719
5936  271A
5937  271B
5938  271C
5939  271D
5940  271E
5941  271F
5942  2720
5943  2721
5944  2722
5945  2723
5946  2724
5947  2725
5948  2726
5949  2727
5950  2728
5951  2729
5952  272A
5953  272B
5954  272C
5955  272D
5956  272E
5957  272F
5958  2730
5959  2731
5960  2732
5961  2733
5962  2734
5963  2735
5964  2736
5965  2737
5966  2738
5967  2739
5968  273A
5969  273B
5970  273C
5971  273D
5972  273E
5973  273F
5974  2740
5975  2741
5976  2742
5977  2743
5978  2744
5979  2745
5980  2746
5981  2747
5982  2748
5983  2749
5984  274A
5985  274B
5986  274C
5987  274D
5988  274E
5989  274F
5990  2750
5991  2751
5992  2752
5993  2753
5994  2754
5995  2755
5996  2756
5997  2757
5998  2758
5999  2759
6000  275A
6001  275B
6002  275C
6003  275D
6004  275E
6005  275F
6006  2760
6007  2761
6008  2762
6009  2763
6010  2764
6011  2765
6012  2766
6013  2767
6014  2768
6015  2769
6016  276A
6017  276B
6018  276C
6019  276D
6020  276E
6021  276F
6022  2770
6023  2771
6024  2772
6025  2773
6026  2774
6027  2775
6028  2776
6029  2777
6030  2778
6031  2779
6032  277A
6033  277B
6034  277C
6035  277D
6036  277E
6037  277F
6038  2780
6039  2781
6040  2782
6041  2783
6042  2784
6043  2785
6044  2786
6045  2787
6046  2788
6047  2789
6048  278A
6049  278B
6050  278C
6051  278D
6052  278E
6053  278F
6054  2790
6055  2791
6056  2792
6057  2793
6058  2794
6059  2795
6060  2796
6061  2797
6062  2798
6063  2799
6064  279A
6065  279B
6066  279C
6067  279D
6068  279E
6069  279F
6070  27A0
6071  27A1
6072  27A2
6073  27A3
6074  27A4
6075  27A5
6076  27A6
6077  27A7
6078  27A8
6079  27A9
6080  27AA
6081  27AB
6082  27AC
6083  27AD
6084  27AE
6085  27AF
6086  27B0
6087  27B1
6088  27B2
6089  27B3
6090  27B4
6091  27B5
6092  27B6
6093  27B7
6094  27B8
6095  27B9
6096  27BA
6097  27BB
6098  27BC
6099  27BD
6100  27BE
6101  27BF
6102  27C0
6103  27C1
6104  27C2
6105  27C3
6106  27C4
6107  27C5
6108  27C6
6109  27C7
6110  27C8
6111  27C9
6112  27CA
6113  27CB
6114  27CC
6115  27CD
6116  27CE
6117  27CF
6118  27D0
6119  27D1
6120  27D2
6121  27D3
6122  27D4
6123  27D5
6124  27D6
6125  27D7
6126  27D8
6127  27D9
6128  27DA
6129  27DB
6130  27DC
6131  27DD
6132  27DE
6133  27DF
6134  27E0
6135  27E1
6136  27E2
6137  27E3
6138  27E4
6139  27E5
6140  27E6
6141  27E7
6142  27E8
6143  27E9
6144  27EA
6145  27EB
6146  27EC
6147  27ED
6148  27EE
6149  27EF
6150  27F0
6151  27F1
6152  27F2
6153  27F3
6154  27F4
6155  27F5
6156  27F6
6157  27F7
6158  27F8
6159  27F9
6160  27FA
6161  27FB
6162  27FC
6163  27FD
6164  27FE
6165  27FF
6166  2800
6167  2801
6168  2802
6169  2803
6170  2804
6171  2805
6172  2806
6173  2807
6174  2808
6175  2809
6176  280A
6177  280B
6178  280C
6179  280D
6180  280E
6181  280F
6182  2810
6183  2811
6184  2812
6185  2813
6186  2814
6187  2815
6188  2816
6189  2817
6190  2818
6191  2819
6192  281A
6193  281B
6194  281C
6195  281D
6196  281E
6197  281F
6198  2820
6199  2821
6200  2822
6201  2823
6202  2824
6203  2825
6204  2826
6205  2827
6206  2828
6207  2829
6208  282A
6209  282B
6210  282C
6211  282D
6212  282E
6213  282F
6214  2830
6215  2831
6216  2832
6217  2833
6218  2834
6219  2835
6220  2836
6221  2837
6222  2838
6223  2839
6224  283A
6225  283B
6226  283C
6227  283D
6228  283E
6229  283F
6230  2840
6231  2841
6232  2842
6233  2843
6234  2844
6235  2845
6236  2846
6237  2847
6238  2848
6239  2849
6240  284A
6241  284B
6242  284C
6243  284D
6244  284E
6245  284F
6246  2850
6247  2851
6248  2852
6249  2853
6250  2854
6251  2855
6252  2856
6253  2857
6254  2858
6255  2859
6256  285A
6257  285B
6258  285C
6259  285D
6260  285E
6261  285F
6262  2860
6263  2861
6264  2862
6265  2863
6266  2864
6267  2865
6268  2866
6269  2867
6270  2868
6271  2869
6272  286A
6273  286B
6274  286C
6275  286D
6276  286E
6277  286F
6278  2870
6279  2871
6280  2872
6281  2873
6282  2874
6283  2875
6284  2876
6285  2877
6286  2878
6287  2879
6288  287A
6289  287B
6290  287C
6291  287D
6292  287E
6293  287F
6294  2880
6295  2881
6296  2882
6297  2883
6298  2884
6299  2885
6300  2886
6301  2887
6302  2888
6303  2889
6304  288A
6305  288B
6306  288C
6307  288D
6308  288E
6309  288F
6310  2890
6311  2891
6312  2892
6313  2893
6314  2894
6315  2895
6316  2896
6317  2897
6318  2898
6319  2899
6320  289A
6321  289B
6322  289C
6323  289D
6324  289E
6325  289F
6326  28A0
6327  28A1
6328  28A2
6329  28A3
6330  28A4
6331  28A5
6332  28A6
6333  28A7
6334  28A8
6335  28A9
6336  28AA
6337  28AB
6338  28AC
6339  28AD
6340  28AE
6341  28AF
6342  28B0
6343  28B1
6344  28B2
6345  28B3
6346  28B4
6347  28B5
6348  28B6
6349  28B7
6350  28B8
6351  28B9
6352  28BA
6353  28BB
6354  28BC
6355  28BD
6356  28BE
6357  28BF
6358  28C0
6359  28C1
6360  28C2
6361  28C3
6362  28C4
6363  28C5
6364  28C6
6365  28C7
6366  28C8
6367  28C9
6368  28CA
6369  28CB
6370  28CC
6371  28CD
6372  28CE
6373  28CF
6374  28D0
6375  28D1
6376  28D2
6377  28D3
6378  28D4
6379  28D5
6380  28D6
6381  28D7
6382  28D8
6383  28D9
6384  28DA
6385  28DB
6386  28DC
6387  28DD
6388  28DE
6389  28DF
6390  28E0
6391  28E1
6392  28E2
6393  28E3
6394  28E4
6395  28E5
6396  28E6
6397  28E7
6398  28E8
6399  28E9
6400  28EA
6401  28EB
6402  28EC
6403  28ED
6404  28EE
6405  28EF
6406  28F0
6407  28F1
6408  28F2
6409  28F3
6410  28F4
6411  28F5
6412  28F6
6413  28F7
6414  28F8
6415  28F9
6416  28FA
6417  28FB
6418  28FC
6419  28FD
6420  28FE
6421  28FF
6422  2900
6423  2901
6424  2902
6425  2903
6426  2904
6427  2905
6428  2906
6429  2907
6430  2908
6431  2909
6432  290A
6433  290B
6434  290C
6435  290D
6436  290E
6437  290F
6438  2910
6439  2911
6440  2912
6441  2913
6442  2914
6443  2915
6444  2916
6445  2917
6446  2918
6447  2919
6448  291A
6449  291B
6450  291C
6451  291D
6452  291E
6453  291F
6454  2920
6455  2921
6456  2922
6457  2923
6458  2924
6459  2925
6460  2926
6461  2927
6462  2928
6463  2929
6464  292A
6465  292B
6466  292C
6467  292D
6468  292E
6469  292F
6470  2930
6471  2931
6472  2932
6473  2933
6474  2934
6475  2935
6476  2936
6477  2937
6478  2938
6479  2939
6480  293A
6481  293B
6482  293C
6483  293D
6484  293E
6485  293F
6486  2940
6487  2941
6488  2942
6489  2943
6490  2944
6491  2945
6492  2946
6493  2947
6494  2948
6495  2949
6496  294A
6497  294B
6498  294C
6499  294D
6500  294E
6501  294F
6502  2950
6503  2951
6504  2952
6505  2953
6506  2954
6507  2955
6508  2956
6509  2957
6510  2958
6511  2959
6512  295A
6513  295B
6514  295C
6515  295D
6516  295E
6517  295F
6518  2960
6519  2961
6520  2962
6521  2963
6522  2964
6523  2965
6524  2966
6525  2967
6526  2968
6527  2969
6528  296A
6529  296B
6530  296C
6531  296D
6532  296E
6533  296F
6534  2970
6535  2971
6536  2972
6537  2973
6538  2974
6539  2975
6540  2976
6541  2977
6542  2978
6543  2979
6544  297A
6545  297B
6546  297C
6547  297D
6548  297E
6549  297F
6550  2980
6551  2981
6552  2982
6553  2983
6554  2984
6555  2985
6556  2986
6557  2987
6558  2988
6559  2989
6560  298A
6561  298B
6562  298C
6563  298D
6564  298E
6565  298F
6566  2990
6567  2991
6568  2992
6569  2993
6570  2994
6571  2995
6572  2996
6573  2997
6574  2998
6575  2999
6576  299A
6577  299B
6578  299C
6579  299D
6580  299E
6581  299F
6582  29A0
6583  29A1
6584  29A2
6585  29A3
6586  29A4
6587  29A5
6588  29A6
6589  29A7
6590  29A8
6591  29A9
6592  29AA
6593  29AB
6594  29AC
6595  29AD
6596  29AE
6597  29AF
6598  29B0
6599  29B1
6600  29B2
6601  29B3
6602  29B4
6603  29B5
6604  29B6
6605  29B7
6606  29B8
6607  29B9
6608  29BA
6609  29BB
6610  29BC
6611  29BD
6612  29BE
6613  29BF
6614  29C0
6615  29C1
6616  29C2
6617  29C3
6618  29C4
6619  29C5
6620  29C6
6621  29C7
6622  29C8
6623  29C9
6624  29CA
6625  29CB
6626  29CC
6627  29CD
6628  29CE
6629  29CF
6630  29D0
6631  29D1
6632  29D2
6633  29D3
6634  29D4
6635  29D5
6636  29D6
6637  29D7
6638  29D8
6639  29D9
6640  29DA
6641  29DB
6642  29DC
6643  29DD
6644  29DE
6645  29DF
6646  29E0
6647  29E1
6648  29E2
6649  29E3
6650  29E4
6651  29E5
6652  29E6
6653  29E7
6654  29E8
6655  29E9
6656  29EA
6657  29EB
6658  29EC
6659  29ED
6660  29EE
6661  29EF
6662  29F0
6663  29F1
6664  29F2
6665  29F3
6666  29F4
6667  29F5
6668  29F6
6669  29F7
6670  29F8
6671  29F9
6672  29FA
6673  29FB
6674  29FC
6675  29FD
6676  29FE
6677  29FF
6678  2A00
6679  2A01
6680  2A02
6681  2A03
6682  2A04
6683  2A05
6684  2A06
6685  2A07
6686  2A08
6687  2A09
6688  2A0A
6689  2A0B
6690  2A0C
6691  2A0D
6692  2A0E
6693  2A0F
6694  2A10
6695  2A11
6696  2A12
6697  2A13
6698  2A14
6699  2A15
6700  2A16
6701  2A17
6702  2A18
6703  2A19
6704  2A1A
6705  2A1B
6706  2A1C
6707  2A1D
6708  2A1E
6709  2A1F
6710  2A20
6711  2A21
6712  2A22
6713  2A23
6714  2A24
6715  2A25
6716  2A26
6717  2A27
6718  2A28
6719  2A29
6720  2A2A
6721  2A2B
6722  2A2C
6723  2A2D
6724  2A2E
6725  2A2F
6726  2A30
6727  2A31
6728  2A32
6729  2A33
6730  2A34
6731  2A35
6732  2A36
6733  2A37
6734  2A38
6735  2A39
6736  2A3A
6737  2A3B
6738  2A3C
6739  2A3D
6740  2A3E
6741  2A3F
6742  2A40
6743  2A41
6744  2A42
6745  2A43
6746  2A44
6747  2A45
6748  2A46
6749  2A47
6750  2A48
6751  2A49
6752  2A4A
6753  2A4B
6754  2A4C
6755  2A4D
6756  2A4E
6757  2A4F
6758  2A50
6759  2A51
6760  2A52
6761  2A53
6762  2A54
6763  2A55
6764  2A56
6765  2A57
6766  2A58
6767  2A59
6768  2A5A
6769  2A5B
6770  2A5C
6771  2A5D
6772  2A5E
6773  2A5F
6774  2A60
6775  2A61
6776  2A62
6777  2A63
6778  2A64
6779  2A65
6780  2A66
6781  2A67
6782  2A68
6783  2A69
6784  2A6A
6785  2A6B
6786  2A6C
6787  2A6D
6788  2A6E
6789  2A6F
6790  2A70
6791  2A71
6792  2A72
6793  2A73
6794  2A74
6795  2A75
6796  2A76
6797  2A77
6798  2A78
6799  2A79
6800  2A7A
6801  2A7B
6802  2A7C
6803  2A7D
6804  2A7E
6805  2A7F
6806  2A80
6807  2A81
6808  2A82
6809  2A83
6810  2A84
6811  2A85
6812  2A86
6813  2A87
6814  2A88
6815  2A89
6816  2A8A
6817  2A8B
6818  2A8C
6819  2A8D
6820  2A8E
6821  2A8F
6822  2A90
6823  2A91
6824  2A92
6825  2A93
6826  2A94
6827  2A95
6828  2A96
6829  2A97
6830  2A98
6831  2A99
6832  2A9A
6833  2A9B
6834  2A9C
6835  2A9D
6836  2A9E
6837  2A9F
6838  2AA0
6839  2AA1
6840  2AA2
6841  2AA3
6842  2AA4
6843  2AA5
6844  2AA6
6845  2AA7
6846  2AA8
6847  2AA9
6848  2AAA
6849  2AAB
6850  2AAC
6851  2AAD
6852  2AAE
6853  2AAF
6854  2AB0
6855  2AB1
6856  2AB2
6857  2AB3
6858  2AB4
6859  2AB5
6860  2AB6
6861  2AB7
6862  2AB8
6863  2AB9
6864  2ABA
6865  2ABB
6866  2ABC
6867  2ABD
6868  2ABE
6869  2ABF
6870  2AC0
6871  2AC1
6872  2AC2
6873  2AC3
6874  2AC4
6875  2AC5
6876  2AC6
6877  2AC7
6878  2AC8
6879  2AC9
6880  2ACA
6881  2ACB
6882  2ACC
6883  2ACD
6884  2ACE
6885  2ACF
6886  2AD0
6887  2AD1
6888  2AD2
6889  2AD3
6890  2AD4
6891  2AD5
6892  2AD6
6893  2AD7
6894  2AD8
6895  2AD9
6896  2ADA
6897  2ADB
6898  2ADC
6899  2ADD
6900  2ADE
6901  2ADF
6902  2AE0
6903  2AE1
6904  2AE2
6905  2AE3
6906  2AE4
6907  2AE5
6908  2AE6
6909  2AE7
6910  2AE8
6911  2AE9
6912  2AEA
6913  2AEB
6914  2AEC
6915  2AED
6916  2AEE
6917  2AEF
6918  2AF0
6919  2AF1
6920  2AF2
6921  2AF3
6922  2AF4
6923  2AF5
6924  2AF6
6925  2AF7
6926  2AF8
6927  2AF9
6928  2AFA
6929  2AFB
6930  2AFC
6931  2AFD
6932  2AFE
6933  2AFF
6934  2B00
6935  2B01
6936  2B02
6937  2B03
6938  2B04
6939  2B05
6940  2B06
6941  2B07
6942  2B08
6943  2B09
6944  2B0A
6945  2B0B
6946  2B0C
6947  2B0D
6948  2B0E
6949  2B0F
6950  2B10
6951  2B11
6952  2B12
6953  2B13
6954  2B14
6955  2B15
6956  2B16
6957  2B17
6958  2B18
6959  2B19
6960  2B1A
6961  2B1B
6962  2B1C
6963  2B1D
6964  2B1E
6965  2B1F
6966  2B20
6967  2B21
6968  2B22
6969  2B23
6970  2B24
6971  2B25
6972  2B26
6973  2B27
6974  2B28
6975  2B29
6976  2B2A
6977  2B2B
6978  2B2C
6979  2B2D
6980  2B2E
6981  2B2F
6982  2B30
6983  2B31
6984  2B32
6985  2B33
6986  2B34
6987  2B35
6988  2B36
6989  2B37
6990  2B38
6991  2B39
6992  2B3A
6993  2B3B
6994  2B3C
6995  2B3D
6996  2B3E
6997  2B3F
6998  2B40
6999  2B41
7000  2B42
7001  2B43
7002  2B44
7003  2B45
7004  2B46
7005  2B47
7006  2B48
7007  2B49
7008  2B4A
7009  2B4B
7010  2B4C
7011  2B4D
7012  2B4E
7013  2B4F
7014  2B50
7015  2B51
7016  2B52
7017  2B53
7018  2B54
7019  2B55
7020  2B56
7021  2B57
7022  2B58
7023  2B59
7024  2B5A
7025  2B5B
7026  2B5C
7027  2B5D
7028  2B5E
7029  2B5F
7030  2B60
7031  2B61
7032  2B62
7033  2B63
7034  2B64
7035  2B65
7036  2B66
7037  2B67
7038  2B68
7039  2B69
7040  2B6A
7041  2B6B
7042  2B6C
7043  2B6D
7044  2B6E
7045  2B6F
7046  2B70
7047  2B71
7048  2B72
7049  2B73
7050  2B74
7051  2B75
7052  2B76
7053  2B77
7054  2B78
7055  2B79
7056  2B7A
7057  2B7B
7058  2B7C
7059  2B7D
7060  2B7E
7061  2B7F
7062  2B80
7063  2B81
7064  2B82
7065  2B83
7066  2B84
7067  2B85
7068  2B86
7069  2B87
7070  2B88
7071  2B89
7072  2B8A
7073  2B8B
7074  2B8C
7075  2B8D
7076  2B8E
7077  2B8F
7078  2B90
7079  2B91
7080  2B92
7081  2B93
7082  2B94
7083  2B95
7084  2B96
7085  2B97
7086  2B98
7087  2B99
7088  2B9A
7089  2B9B
7090  2B9C
7091  2B9D
7092  2B9E
7093  2B9F
7094  2BA0
7095  2BA1
7096  2BA2
7097  2BA3
7098  2BA4
7099  2BA5
7100  2BA6
7101  2BA7
7102  2BA8
7103  2BA9
7104  2BAA
7105  2BAB
7106  2BAC
7107  2BAD
7108  2BAE
7109  2BAF
7110  2BB0
7111  2BB1
7112  2BB2
7113  2BB3
7114  2BB4
7115  2BB5
7116  2BB6
7117  2BB7
7118  2BB8
7119  2BB9
7120  2BBA
7121  2BBB
7122  2BBC
7123  2BBD
7124  2BBE
7125  2BBF
7126  2BC0
7127  2BC1
7128  2BC2
7129  2BC3
7130  2BC4
7131  2BC5
7132  2BC6
7133  2BC7
7134  2BC8
7135  2BC9
7136  2BCA
7137  2BCB
7138  2BCC
7139  2BCD
7140  2BCE
7141  2BCF
7142  2BD0
7143  2BD1
7144  2BD2
7145  2BD3
7146  2BD4
7147  2BD5
7148  2BD6
7149  2BD7
7150  2BD8
7151  2BD9
7152  2BDA
7153  2BDB
7154  2BDC
7155  2BDD
7156  2BDE
7157  2BDF
7158  2BE0
7159  2BE1
7160  2BE2
7161  2BE3
7162  2BE4
7163  2BE5
7164  2BE6
7165  2BE7
7166  2BE8
7167  2BE9
7168  2BEA
7169  2BEB
7170  2BEC
7171  2BED
7172  2BEE
7173  2BEF
7174  2BF0
7175  2BF1
7176  2BF2
7177  2BF3
7178  2BF4
7179  2BF5
7180  2BF6
7181  2BF7
7182  2BF8
7183  2BF9
7184  2BFA
7185  2BFB
7186  2BFC
7187  2BFD
7188  2BFE
7189  2BFF
7190  2C00
7191  2C01
7192  2C02
7193  2C03
7194  2C04
7195  2C05
7196  2C06
7197  2C07
7198  2C08
7199  2C09
7200  2C0A
7201  2C0B
7202  2C0C
7203  2C0D
7204  2C0E
7205  2C0F
7206  2C10
7207  2C11
7208  2C12
7209  2C13
7210  2C14
7211  2C15
7212  2C16
7213  2C17
7214  2C18
7215  2C19
7216  2C1A
7217  2C1B
7218  2C1C
7219  2C1D
7220  2C1E
7221  2C1F
7222  2C20
7223  2C21
7224  2C22
7225  2C23
7226  2C24
7227  2C25
7228  2C26
7229  2C27
7230  2C28
7231  2C29
7232  2C2A
7233  2C2B
7234  2C2C
7235  2C2D
7236  2C2E
7237  2C2F
7238  2C30
7239  2C31
7240  2C32
7241  2C33
7242  2C34
7243  2C35
7244  2C36
7245  2C37
7246  2C38
7247  2C39
7248  2C3A
7249  2C3B
7250  2C3C
7251  2C3D
7252  2C3E
7253  2C3F
7254  2C40
7255  2C41
7256  2C42
7257  2C43
7258  2C44
7259  2C45
7260  2C46
7261  2C47
7262  2C48
7263  2C49
7264  2C4A
7265  2C4B
7266  2C4C
7267  2C4D
7268  2C4E
7269  2C4F
7270  2C50
7271  2C51
7272  2C52
7273  2C53
7274  2C54
7275  2C55
7276  2C56
7277  2C57
7278  2C58
7279  2C59
7280  2C5A
7281  2C5B
7282  2C5C
7283  2C5D
7284  2C5E
7285  2C5F
7286  2C60
7287  2C61
7288  2C62
7289  2C63
7290  2C64
7291  2C65
7292  2C66
7293  2C67
7294  2C68
7295  2C69
7296  2C6A
7297  2C6B
7298  2C6C
7299  2C6D
7300  2C6E
7301  2C6F
7302  2C70
7303  2C71
7304  2C72
7305  2C73
7306  2C74
7307  2C75
7308  2C76
7309  2C77
7310  2C78
7311  2C79
7312  2C7A
7313  2C7B
7314  2C7C
7315  2C7D
7316  2C7E
7317  2C7F
7318  2C80
7319  2C81
7320  2C82
7321  2C83
7322  2C84
7323  2C85
7324  2C86
7325  2C87
7326  2C88
7327  2C89
7328  2C8A
7329  2C8B
7330  2C8C
7331  2C8D
7332  2C8E
7333  2C8F
7334  2C90
7335  2C91
7336  2C92
7337  2C93
7338  2C94
7339  2C95
7340  2C96
7341  2C97
7342  2C98
7343  2C99
7344  2C9A
7345  2C9B
7346  2C9C
7347  2C9D
7348  2C9E
7349  2C9F
7350  2CA0
7351  2CA1
7352  2CA2
7353  2CA3
7354  2CA4
7355  2CA5
7356  2CA6
7357  2CA7
7358  2CA8
7359  2CA9
7360  2CAA
7361  2CAB
7362  2CAC
7363  2CAD
7364  2CAE
7365  2CAF
7366  2CB0
7367  2CB1
7368  2CB2
7369  2CB3
7370  2CB4
7371  2CB5
7372  2CB6
7373  2CB7
7374  2CB8
7375  2CB9
7376  2CBA
7377  2CBB
7378  2CBC
7379  2CBD
7380  2CBE
7381  2CBF
7382  2CC0
7383  2CC1
7384  2CC2
7385  2CC3
7386  2CC4
7387  2CC5
7388  2CC6
7389  2CC7
7390  2CC8
7391  2CC9
7392  2CCA
7393  2CCB
7394  2CCC
7395  2CCD
7396  2CCE
7397  2CCF
7398  2CD0
7399  2CD1
7400  2CD2
7401  2CD3
7402  2CD4
7403  2CD5
7404  2CD6
7405  2CD7
7406  2CD8
7407  2CD9
7408  2CDA
7409  2CDB
7410  2CDC
7411  2CDD
7412  2CDE
7413  2CDF
7414  2CE0
7415  2CE1
7416  2CE2
7417  2CE3
7418  2CE4
7419  2CE5
7420  2CE6
7421  2CE7
7422  2CE8
7423  2CE9
7424  2CEA
7425  2CEB
7426  2CEC
7427  2CED
7428  2CEE
7429  2CEF
7430  2CF0
7431  2CF1
7432  2CF2
7433  2CF3
7434  2CF4
7435  2CF5
7436  2CF6
7437  2CF7
7438  2CF8
7439  2CF9
7440  2CFA
7441  2CFB
7442  2CFC
7443  2CFD
7444  2CFE
7445  2CFF
7446  2D00
7447  2D01
7448  2D02
7449  2D03
7450  2D04
7451  2D05
7452  2D06
7453  2D07
7454  2D08
7455  2D09
7456  2D0A
7457  2D0B
7458  2D0C
7459  2D0D
7460  2D0E
7461  2D0F
7462  2D10
7463  2D11
7464  2D12
7465  2D13
7466  2D14
7467  2D15
7468  2D16
7469  2D17
7470  2D18
7471  2D19
7472  2D1A
7473  2D1B
7474  2D1C
7475  2D1D
7476  2D1E
7477  2D1F
7478  2D20
7479  2D21
7480  2D22
7481  2D23
7482  2D24
7483  2D25
7484  2D26
7485  2D27
7486  2D28
7487  2D29
7488  2D2A
7489  2D2B
7490  2D2C
7491  2D2D
7492  2D2E
7493  2D2F
7494  2D30
7495  2D31
7496  2D32
7497  2D33
7498  2D34
7499  2D35
7500  2D36
7501  2D37
7502  2D38
7503  2D39
7504  2D3A
7505  2D3B
7506  2D3C
7507  2D3D
7508  2D3E
7509  2D3F
7510  2D40
7511  2D41
7512  2D42
7513  2D43
7514  2D44
7515  2D45
7516  2D46
7517  2D47
7518  2D48
7519  2D49
7520  2D4A
7521  2D4B
7522  2D4C
7523  2D4D
7524  2D4E
7525  2D4F
7526  2D50
7527  2D51
7528  2D52
7529  2D53
7530  2D54
7531  2D55
7532  2D56
7533  2D57
7534  2D58
7535  2D59
7536  2D5A
7537  2D5B
7538  2D5C
7539  2D5D
7540  2D5E
7541  2D5F
7542  2D60
7543  2D61
7544  2D62
7545  2D63
7546  2D64
7547  2D65
7548  2D66
7549  2D67
7550  2D68
7551  2D69
7552  2D6A
7553  2D6B
7554  2D6C
7555  2D6D
7556  2D6E
7557  2D6F
7558  2D70
7559  2D71
7560  2D72
7561  2D73
7562  2D74
7563  2D75
7564  2D76
7565  2D77
7566  2D78
7567  2D79
7568  2D7A
7569  2D7B
7570  2D7C
7571  2D7D
7572  2D7E
7573  2D7F
7574  2D80
7575  2D81
7576  2D82
7577  2D83
7578  2D84
7579  2D85
7580  2D86
7581  2D87
7582  2D88
7583  2D89
7584  2D8A
7585  2D8B
7586  2D8C
7587  2D8D
7588  2D8E
7589  2D8F
7590  2D90
7591  2D91
7592  2D92
7593  2D93
7594  2D94
7595  2D95
7596  2D96
7597  2D97
7598  2D98
7599  2D99
7600  2D9A
7601  2D9B
7602  2D9C
7603  2D9D
7604  2D9E
7605  2D9F
7606  2DA0
7607  2DA1
7608  2DA2
7609  2DA3
7610  2DA4
7611  2DA5
7612  2DA6
7613  2DA7
7614  2DA8
7615  2DA9
7616  2DAA
7617  2DAB
7618  2DAC
7619  2DAD
7620  2DAE
7621  2DAF
7622  2DB0
7623  2DB1
7624  2DB2
7625  2DB3
7626  2DB4
7627  2DB5
7628  2DB6
7629  2DB7
7630  2DB8
7631  2DB9
7632  2DBA
7633  2DBB
7634  2DBC
7635  2DBD
7636  2DBE
7637  2DBF
7638  2DC0
7639  2DC1
7640  2DC2
7641  2DC3
7642  2DC4
7643  2DC5
7644  2DC6
7645  2DC7
7646  2DC8
7647  2DC9
7648  2DCA
7649  2DCB
7650  2DCC
7651  2DCD
7652  2DCE
7653  2DCF
7654  2DD0
7655  2DD1
7656  2DD2
7657  2DD3
7658  2DD4
7659  2DD5
7660  2DD6
7661  2DD7
7662  2DD8
7663  2DD9
7664  2DDA
7665  2DDB
7666  2DDC
7667  2DDD
7668  2DDE
7669  2DDF
7670  2DE0
7671  2DE1
7672  2DE2
7673  2DE3
7674  2DE4
7675  2DE5
7676  2DE6
7677  2DE7
7678  2DE8
7679  2DE9
7680  2DEA
7681  2DEB
7682  2DEC
7683  2DED
7684  2DEE
7685  2DEF
7686  2DF0
7687  2DF1
7688  2DF2
7689  2DF3
7690  2DF4
7691  2DF5
7692  2DF6
7693  2DF7
7694  2DF8
7695  2DF9
7696  2DFA
7697  2DFB
7698  2DFC
7699  2DFD
7700  2DFE
7701  2DFF
7702  2E00
7703  2E01
7704  2E02
7705  2E03
7706  2E04
7707  2E05
7708  2E06
7709  2E07
7710  2E08
7711  2E09
7712  2E0A
7713  2E0B
7714  2E0C
7715  2E0D
7716  2E0E
7717  2E0F
7718  2E10
7719  2E11
7720  2E12
7721  2E13
7722  2E14
7723  2E15
7724  2E16
7725  2E17
7726  2E18
7727  2E19
7728  2E1A
7729  2E1B
7730  2E1C
7731  2E1D
7732  2E1E
7733  2E1F
7734  2E20
7735  2E21
7736  2E22
7737  2E23
7738  2E24
7739  2E25
7740  2E26
7741  2E27
7742  2E28
7743  2E29
7744  2E2A
7745  2E2B
7746  2E2C
7747  2E2D
7748  2E2E
7749  2E2F
7750  2E30
7751  2E31
7752  2E32
7753  2E33
7754  2E34
7755  2E35
7756  2E36
7757  2E37
7758  2E38
7759  2E39
7760  2E3A
7761  2E3B
7762  2E3C
7763  2E3D
7764  2E3E
7765  2E3F
7766  2E40
7767  2E41
7768  2E42
7769  2E43
7770  2E44
7771  2E45
7772  2E46
7773  2E47
7774  2E48
7775  2E49
7776  2E4A
7777  2E4B
7778  2E4C
7779  2E4D
7780  2E4E
7781  2E4F
7782  2E50
7783  2E51
7784  2E52
7785  2E53
7786  2E54
7787  2E55
7788  2E56
7789  2E57
7790  2E58
7791  2E59
7792  2E5A
7793  2E5B
7794  2E5C
7795  2E5D
7796  2E5E
7797  2E5F
7798  2E60
7799  2E61
7800  2E62
7801  2E63
7802  2E64
7803  2E65
7804  2E66
7805  2E67
7806  2E68
7807  2E69
7808  2E6A
7809  2E6B
7810  2E6C
7811  2E6D
7812  2E6E
7813  2E6F
7814  2E70
7815  2E71
7816  2E72
7817  2E73
7818  2E74
7819  2E75
7820  2E76
7821  2E77
7822  2E78
7823  2E79
7824  2E7A
7825  2E7B
7826  2E7C
7827  2E7D
7828  2E7E
7829  2E7F
7830  2E80
7831  2E81
7832  2E82
7833  2E83
7834  2E84
7835  2E85
7836  2E86
7837  2E87
7838  2E88
7839  2E89
7840  2E8A
7841  2E8B
7842  2E8C
7843  2E8D
7844  2E8E
7845  2E8F
7846  2E90
7847  2E91
7848  2E92
7849  2E93
7850  2E94
7851  2E95
7852  2E96
7853  2E97
7854  2E98
7855  2E99
7856  2E9A
7857  2E9B
7858  2E9C
7859  2E9D
7860  2E9E
7861  2E9F
7862  2EA0
7863  2EA1
7864  2EA2
7865  2EA3
7866  2EA4
7867  2EA5
7868  2EA6
7869  2EA7
7870  2EA8
7871  2EA9
7872  2EAA
7873  2EAB
7874  2EAC
7875  2EAD
7876  2EAE
7877  2EAF
7878  2EB0
7879  2EB1
7880  2EB2
7881  2EB3
7882  2EB4
7883  2EB5
7884  2EB6
7885  2EB7
7886  2EB8
7887  2EB9
7888  2EBA
7889  2EBB
7890  2EBC
7891  2EBD
7892  2EBE
7893  2EBF
7894  2EC0
7895  2EC1
7896  2EC2
7897  2EC3
7898  2EC4
7899  2EC5
7900  2EC6
7901  2EC7
7902  2EC8
7903  2EC9
7904  2ECA
7905  2ECB
7906  2ECC
7907  2ECD
7908  2ECE
7909  2ECF
7910  2ED0
7911  2ED1
7912  2ED2
7913  2ED3
7914  2ED4
7915  2ED5
7916  2ED6
7917  2ED7
7918  2ED8
7919  2ED9
7920  2EDA
7921  2EDB
7922  2EDC
7923  2EDD
7924  2EDE
7925  2EDF
7926  2EE0
7927  2EE1
7928  2EE2
7929  2EE3
7930  2EE4
7931  2EE5
7932  2EE6
7933  2EE7
7934  2EE8
7935  2EE9
7936  2EEA
7937  2EEB
7938  2EEC
7939  2EED
7940  2EEE
7941  2EEF
7942  2EF0
7943  2EF1
7944  2EF2
7945  2EF3
7946  2EF4
7947  2EF5
7948  2EF6
7949  2EF7
7950  2EF8
7951  2EF9
7952  2EFA
7953  2EFB
7954  2EFC
7955  2EFD
7956  2EFE
7957  2EFF
7958  2F00
7959  2F01
7960  2F02
7961  2F03
7962  2F04
7963  2F05
7964  2F06
7965  2F07
7966  2F08
7967  2F09
7968  2F0A
7969  2F0B
7970  2F0C
7971  2F0D
7972  2F0E
7973  2F0F
7974  2F10
7975  2F11
7976  2F12
7977  2F13
7978  2F14
7979  2F15
7980  2F16
7981  2F17
7982  2F18
7983  2F19
7984  2F1A
7985  2F1B
7986  2F1C
7987  2F1D
7988  2F1E
7989  2F1F
7990  2F20
7991  2F21
7992  2F22
7993  2F23
7994  2F24
7995  2F25
7996  2F26
7997  2F27
7998  2F28
7999  2F29
8000  2F2A
8001  2F2B
8002  2F2C
8003  2F2D
8004  2F2E
8005  2F2F
8006  2F30
8007  2F31
8008  2F32
8009  2F33
8010  2F34
8011  2F35
8012  2F36
8013  2F37
8014  2F38
8015  2F39
8016  2F3A
8017  2F3B
8018  2F3C
8019  2F3D
8020  2F3E
8021  2F3F
8022  2F40
8023  2F41
8024  2F42
8025  2F43
8026  2F44
8027  2F45
8028  2F46
8029  2F47
8030  2F48
8031  2F49
8032  2F4A
8033  2F4B
8034  2F4C
8035  2F4D
8036  2F4E
8037  2F4F
8038  2F50
8039  2F51
8040  2F52
8041  2F53
8042  2F54
8043  2F55
8044  2F56
8045  2F57
8046  2F58
8047  2F59
8048  2F5A
8049  2F5B
8050  2F5C
8051  2F5D
8052  2F5E
8053  2F5F
8054  2F60
8055  2F61
8056  2F62
8057  2F63
8058  2F64
8059  2F65
8060  2F66
8061  2F67
8062  2F68
8063  2F69
8064  2F6A
8065  2F6B
8066  2F6C
8067  2F6D
8068  2F6E
8069  2F6F
8070  2F70
8071  2F71
8072  2F72
8073  2F73
8074  2F74
8075  2F75
8076  2F76
8077  2F77
8078  2F78
8079  2F79
8080  2F7A
8081  2F7B
8082  2F7C
8083  2F7D
8084  2F7E
8085  2F7F
8086  2F80
8087  2F81
8088  2F82
8089  2F83
8090  2F84
8091  2F85
8092  2F86
8093  2F87
8094  2F88
8095  2F89
8096  2F8A
8097  2F8B
8098  2F8C
8099  2F8D
8100  2F8E
8101  2F8F
8102  2F90
8103  2F91
8104  2F92
8105  2F93
8106  2F94
8107  2F95
8108  2F96
8109  2F97
8110  2F98
8111  2F99
8112  2F9A
8113  2F9B
8114  2F9C
8115  2F9D
8116  2F9E
8117  2F9F
8118  2FA0
8119  2FA1
8120  2FA2
8121  2FA3
8122  2FA4
8123  2FA5
8124  2FA6
8125  2FA7
8126  2FA8
8127  2FA9
8128  2FAA
8129  2FAB
8130  2FAC
8131  2FAD
8132  2FAE
8133  2FAF
8134  2FB0
8135  2FB1
8136  2FB2
8137  2FB3
8138  2FB4
8139  2FB5
8140  2FB6
8141  2FB7
8142  2FB8
8143  2FB9
8144  2FBA
8145  2FBB
8146  2FBC
8147  2FBD
8148  2FBE
8149  2FBF
8150  2FC0
8151  2FC1
8152  2FC2
8153  2FC3
8154  2FC4
8155  2FC5
8156  2FC6
8157  2FC7
8158  2FC8
8159  2FC9
8160  2FCA
8161  2FCB
8162  2FCC
8163  2FCD
8164  2FCE
8165  2FCF
8166  2FD0
8167  2FD1
8168  2FD2
8169  2FD3
8170  2FD4
8171  2FD5
8172  2FD6
8173  2FD7
8174  2FD8
8175  2FD9
8176  2FDA
8177  2FDB
8178  2FDC
8179  2FDD
8180  2FDE
8181  2FDF
8182  2FE0
8183  2FE1
8184  2FE2
8185  2FE3
8186  2FE4
8187  2FE5
8188  2FE6
8189  2FE7
8190  2FE8
8191  2FE9
8192  2FEA
8193  2FEB
8194  2FEC
8195  2FED
8196  2FEE
8197  2FEF
8198  2FF0
8199  2FF1
8200  2FF2
8201  2FF3
8202  2FF4
8203  2FF5
8204  2FF6
8205  2FF7
8206  2FF8
8207  2FF9
8208  2FFA
8209  2FFB
8210  2FFC
8211  2FFD
8212  2FFE
8213  2FFF
8214  3000
8215  3001
8216  3002
8217  3003
8218  3004
8219  3005
8220  3006
8221  3007
8222  3008
8223  3009
8224  300A
8225  300B
8226  300C
8227  300D
8228  300E
8229  300F
8230  3010
8231  3011
8232  3012
8233  3013
8234  3014
8235  3015
8236  3016
8237  3017
8238  3018
8239  3019
8240  301A
8241  301B
8242  301C
8243  301D
8244  301E
8245  301F
8246  3020
8247  3021
8248  3022
8249  3023
8250  3024
8251  3025
8252  3026
8253  3027
8254  3028
8255  3029
8256  302A
8257  302B
8258  302C
8259  302D
8260  302E
8261  302F
8262  3030
8263  3031
8264  3032
8265  3033
8266  3034
8267  3035
8268  3036
8269  3037
8270  3038
8271  3039
8272  303A
8273  303B
8274  303C
8275  303D
8276  303E
8277  303F
8278  3040
8279  3041
8280  3042
8281  3043
8282  3044
8283  3045
8284  3046
8285  3047
8286  3048
8287  3049
8288  304A
8289  304B
8290  304C
8291  304D
8292  304E
8293  304F
8294  3050
8295  3051
8296  3052
8297  3053
8298  3054
8299  3055
8300  3056
8301  3057
8302  3058
8303  3059
8304  305A
8305  305B
8306  305C
8307  305D
8308  305E
8309  305F
8310  3060
8311  3061
8312  3062
8313  3063
8314  3064
8315  3065
8316  3066
8317  3067
8318  3068
8319  3069
8320  306A
8321  306B
8322  306C
8323  306D
8324  306E
8325  306F
8326  3070
8327  3071
8328  3072
8329  3073
8330  3074
8331  3075
8332  3076
8333  3077
8334  3078
8335  3079
8336  307A
8337  307B
8338  307C
8339  307D
8340  307E
8341  307F
8342  3080
8343  3081
8344  3082
8345  3083
8346  3084
8347  3085
8348  3086
8349  3087
8350  3088
8351  3089
8352  308A
8353  308B
8354  308C
8355  308D
8356  308E
8357  308F
8358  3090
8359  3091
8360  3092
8361  3093
8362  3094
8363  3095
8364  3096
8365  3097
8366  3098
8367  3099
8368  309A
8369  309B
8370  309C
8371  309D
8372  309E
8373  309F
8374  30A0
8375  30A1
8376  30A2
8377  30A3
8378  30A4
8379  30A5
8380  30A6
8381  30A7
8382  30A8
8383  30A9
8384  30AA
8385  30AB
8386  30AC
8387  30AD
8388  30AE
8389  30AF
8390  30B0
8391  30B1
8392  30B2
8393  30B3
8394  30B4
8395  30B5
8396  30B6
8397  30B7
8398  30B8
8399  30B9
8400  30BA
8401  30BB
8402  30BC
8403  30BD
8404  30BE
8405  30BF
8406  30C0
8407  30C1
8408  30C2
8409  30C3
8410  30C4
8411  30C5
8412  30C6
8413  30C7
8414  30C8
8415  30C9
8416  30CA
8417  30CB
8418  30CC
8419  30CD
8420  30CE
8421  30CF
8422  30D0
8423  30D1
8424  30D2
8425  30D3
8426  30D4
8427  30D5
8428  30D6
8429  30D7
8430  30D8
8431  30D9
8432  30DA
8433  30DB
8434  30DC
8435  30DD
8436  30DE
8437  30DF
8438  30E0
8439  30E1
8440  30E2
8441  30E3
8442  30E4
8443  30E5
8444  30E6
8445  30E7
8446  30E8
8447  30E9
8448  30EA
8449  30EB
8450  30EC
8451  30ED
8452  30EE
8453  30EF
8454  30F0
8455  30F1
8456  30F2
8457  30F3
8458  30F4
8459  30F5
8460  30F6
8461  30F7
8462  30F8
8463  30F9
8464  30FA
8465  30FB
8466  30FC
8467  30FD
8468  30FE
8469  30FF
8470  3100
8471  3101
8472  3102
8473  3103
8474  3104
8475  3105
8476  3106
8477  3107
8478  3108
8479  3109
8480  310A
8481  310B
8482  310C
8483  310D
8484  310E
8485  310F
8486  3110
8487  3111
8488  3112
8489  3113
8490  3114
8491  3115
8492  3116
8493  3117
8494  3118
8495  3119
8496  311A
8497  311B
8498  311C
8499  311D
8500  311E
8501  311F
8502  3120
8503  3121
8504  3122
8505  3123
8506  3124
8507  3125
8508  3126
8509  3127
8510  3128
8511  3129
8512  312A
8513  312B
8514  312C
8515  312D
8516  312E
8517  312F
8518  3130
8519  3131
8520  3132
8521  3133
8522  3134
8523  3135
8524  3136
8525  3137
8526  3138
8527  3139
8528  313A
8529  313B
8530  313C
8531  313D
8532  313E
8533  313F
8534  3140
8535  3141
8536  3142
8537  3143
8538  3144
8539  3145
8540  3146
8541  3147
8542  3148
8543  3149
8544  314A
8545  314B
8546  314C
8547  314D
8548  314E
8549  314F
8550  3150
8551  3151
8552  3152
8553  3153
8554  3154
8555  3155
8556  3156
8557  3157
8558  3158
8559  3159
8560  315A
8561  315B
8562  315C
8563  315D
8564  315E
8565  315F
8566  3160
8567  3161
8568  3162
8569  3163
8570  3164
8571  3165
8572  3166
8573  3167
8574  3168
8575  3169
8576  316A
8577  316B
8578  316C
8579  316D
8580  316E
8581  316F
8582  3170
8583  3171
8584  3172
8585  3173
8586  3174
8587  3175
8588  3176
8589  3177
8590  3178
8591  3179
8592  317A
8593  317B
8594  317C
8595  317D
8596  317E
8597  317F
8598  3180
8599  3181
8600  3182
8601  3183
8602  3184
8603  3185
8604  3186
8605  3187
8606  3188
8607  3189
8608  318A
8609  318B
8610  318C
8611  318D
8612  318E
8613  318F
8614  3190
8615  3191
8616  3192
8617  3193
8618  3194
8619  3195
8620  3196
8621  3197
8622  3198
8623  3199
8624  319A
8625  319B
8626  319C
8627  319D
8628  319E
8629  319F
8630  31A0
8631  31A1
8632  31A2
8633  31A3
8634  31A4
8635  31A5
8636  31A6
8637  31A7
8638  31A8
8639  31A9
8640  31AA
8641  31AB
8642  31AC
8643  31AD
8644  31AE
8645  31AF
8646  31B0
8647  31B1
8648  31B2
8649  31B3
8650  31B4
8651  31B5
8652  31B6
8653  31B7
8654  31B8
8655  31B9
8656  31BA
8657  31BB
8658  31BC
8659  31BD
8660  31BE
8661  31BF
8662  31C0
8663  31C1
8664  31C2
8665  31C3
8666  31C4
8667  31C5
8668  31C6
8669  31C7
8670  31C8
8671  31C9
8672  31CA
8673  31CB
8674  31CC
8675  31CD
8676  31CE
8677  31CF
8678  31D0
8679  31D1
8680  31D2
8681  31D3
8682  31D4
8683  31D5
8684  31D6
8685  31D7
8686  31D8
8687  31D9
8688  31DA
8689  31DB
8690  31DC
8691  31DD
8692  31DE
8693  31DF
8694  31E0
8695  31E1
8696  31E2
8697  31E3
8698  31E4
8699  31E5
8700  31E6
8701  31E7
8702  31E8
8703  31E9
8704  31EA
8705  31EB
8706  31EC
8707  31ED
8708  31EE
8709  31EF
8710  31F0
8711  31F1
8712  31F2
8713  31F3
8714  31F4
8715  31F5
8716  31F6
8717  31F7
8718  31F8
8719  31F9
8720  31FA
8721  31FB
8722  31FC
8723  31FD
8724  31FE
8725  31FF
8726  3200
8727  3201
8728  3202
8729  3203
8730  3204
8731  3205
8732  3206
8733  3207
8734  3208
8735  3209
8736  320A
8737  320B
8738  320C
8739  320D
8740  320E
8741  320F
8742  3210
8743  3211
8744  3212
8745  3213
8746  3214
8747  3215
8748  3216
8749  3217
8750  3218
8751  3219
8752  321A
8753  321B
8754  321C
8755  321D
8756  321E
8757  321F
8758  3220
8759  3221
8760  3222
8761  3223
8762  3224
8763  3225
8764  3226
8765  3227
8766  3228
8767  3229
8768  322A
8769  322B
8770  322C
8771  322D
8772  322E
8773  322F
8774  3230
8775  3231
8776  3232
8777  3233
8778  3234
8779  3235
8780  3236
8781  3237
8782  3238
8783  3239
8784  323A
8785  323B
8786  323C
8787  323D
8788  323E
8789  323F
8790  3240
8791  3241
8792  3242
8793  3243
8794  3244
8795  3245
8796  3246
8797  3247
8798  3248
8799  3249
8800  324A
8801  324B
8802  324C
8803  324D
8804  324E
8805  324F
8806  3250
8807  3251
8808  3252
8809  3253
8810  3254
8811  3255
8812  3256
8813  3257
8814  3258
8815  3259
8816  325A
8817  325B
8818  325C
8819  325D
8820  325E
8821  325F
8822  3260
8823  3261
8824  3262
8825  3263
8826  3264
8827  3265
8828  3266
8829  3267
8830  3268
8831  3269
8832  326A
8833  326B
8834  326C
8835  326D
8836  326E
8837  326F
8838  3270
8839  3271
8840  3272
8841  3273
8842  3274
8843  3275
8844  3276
8845  3277
8846  3278
8847  3279
8848  327A
8849  327B
8850  327C
8851  327D
8852  327E
8853  327F
8854  3280
8855  3281
8856  3282
8857  3283
8858  3284
8859  3285
8860  3286
8861  3287
8862  3288
8863  3289
8864  328A
8865  328B
8866  328C
8867  328D
8868  328E
8869  328F
8870  3290
8871  3291
8872  3292
8873  3293
8874  3294
8875  3295
8876  3296
8877  3297
8878  3298
8879  3299
8880  329A
8881  329B
8882  329C
8883  329D
8884  329E
8885  329F
8886  32A0
8887  32A1
8888  32A2
8889  32A3
8890  32A4
8891  32A5
8892  32A6
8893  32A7
8894  32A8
8895  32A9
8896  32AA
8897  32AB
8898  32AC
8899  32AD
8900  32AE
8901  32AF
8902  32B0
8903  32B1
8904  32B2
8905  32B3
8906  32B4
8907  32B5
8908  32B6
8909  32B7
8910  32B8
8911  32B9
8912  32BA
8913  32BB
8914  32BC
8915  32BD
8916  32BE
8917  32BF
8918  32C0
8919  32C1
8920  32C2
8921  32C3
8922  32C4
8923  32C5
8924  32C6
8925  32C7
8926  32C8
8927  32C9
8928  32CA
8929  32CB
8930  32CC
8931  32CD
8932  32CE
8933  32CF
8934  32D0
8935  32D1
8936  32D2
8937  32D3
8938  32D4
8939  32D5
8940  32D6
8941  32D7
8942  32D8
8943  32D9
8944  32DA
8945  32DB
8946  32DC
8947  32DD
8948  32DE
8949  32DF
8950  32E0
8951  32E1
8952  32E2
8953  32E3
8954  32E4
8955  32E5
8956  32E6
8957  32E7
8958  32E8
8959  32E9
8960  32EA
8961  32EB
8962  32EC
8963  32ED
8964  32EE
8965  32EF
8966  32F0
8967  32F1
8968  32F2
8969  32F3
8970  32F4
8971  32F5
8972  32F6
8973  32F7
8974  32F8
8975  32F9
8976  32FA
8977  32FB
8978  32FC
8979  32FD
8980  32FE
8981  32FF
8982  3300
8983  3301
8984  3302
8985  3303
8986  3304
8987  3305
8988  3306
8989  3307
8990  3308
8991  3309
8992  330A
8993  330B
8994  330C
8995  330D
8996  330E
8997  330F
8998  3310
8999  3311
9000  3312
9001  3313
9002  3314
9003  3315
9004  3316
9005  3317
9006  3318
9007  3319
9008  331A
9009  331B
9010  331C
9011  331D
9012  331E
9013  331F
9014  3320
9015  3321
9016  3322
9017  3323
9018  3324
9019  3325
9020  3326
9021  3327
9022  3328
9023  3329
9024  332A
9025  332B
9026  332C
9027  332D
9028  332E
9029  332F
9030  3330
9031  3331
9032  3332
9033  3333
9034  3334
9035  3335
9036  3336
9037  3337
9038  3338
9039  3339
9040  333A
9041  333B
9042  333C
9043  333D
9044  333E
9045  333F
9046  3340
9047  3341
9048  3342
9049  3343
9050  3344
9051  3345
9052  3346
9053  3347
9054  3348
9055  3349
9056  334A
9057  334B
9058  334C
9059  334D
9060  334E
9061  334F
9062  3350
9063  3351
9064  3352
9065  3353
9066  3354
9067  3355
9068  3356
9069  3357
9070  3358
9071  3359
9072  335A
9073  335B
9074  335C
9075  335D
9076  335E
9077  335F
9078  3360
9079  3361
9080  3362
9081  3363
9082  3364
9083  3365
9084  3366
9085  3367
9086  3368
9087  3369
9088  336A
9089  336B
9090  336C
9091  336D
9092  336E
9093  336F
9094  3370
9095  3371
9096  3372
9097  3373
9098  3374
9099  3375
9100  3376
9101  3377
9102  3378
9103  3379
9104  337A
9105  337B
9106  337C
9107  337D
9108  337E
9109  337F
9110  3380
9111  3381
9112  3382
9113  3383
9114  3384
9115  3385
9116  3386
9117  3387
9118  3388
9119  3389
9120  338A
9121  338B
9122  338C
9123  338D
9124  338E
9125  338F
9126  3390
9127  3391
9128  3392
9129  3393
9130  3394
9131  3395
9132  3396
9133  3397
9134  3398
9135  3399
9136  339A
9137  339B
9138  339C
9139  339D
9140  339E
9141  339F
9142  33A0
9143  33A1
9144  33A2
9145  33A3
9146  33A4
9147  33A5
9148  33A6
9149  33A7
9150  33A8
9151  33A9
9152  33AA
9153  33AB
9154  33AC
9155  33AD
9156  33AE
9157  33AF
9158  33B0
9159  33B1
9160  33B2
9161  33B3
9162  33B4
9163  33B5
9164  33B6
9165  33B7
9166  33B8
9167  33B9
9168  33BA
9169  33BB
9170  33BC
9171  33BD
9172  33BE
9173  33BF
9174  33C0
9175  33C1
9176  33C2
9177  33C3
9178  33C4
9179  33C5
9180  33C6
9181  33C7
9182  33C8
9183  33C9
9184  33CA
9185  33CB
9186  33CC
9187  33CD
9188  33CE
9189  33CF
9190  33D0
9191  33D1
9192  33D2
9193  33D3
9194  33D4
9195  33D5
9196  33D6
9197  33D7
9198  33D8
9199  33D9
9200  33DA
9201  33DB
9202  33DC
9203  33DD
9204  33DE
9205  33DF
9206  33E0
9207  33E1
9208  33E2
9209  33E3
9210  33E4
9211  33E5
9212  33E6
9213  33E7
9214  33E8
9215  33E9
9216  33EA
9217  33EB
9218  33EC
9219  33ED
9220  33EE
9221  33EF
9222  33F0
9223  33F1
9224  33F2
9225  33F3
9226  33F4
9227  33F5
9228  33F6
9229  33F7
9230  33F8
9231  33F9
9232  33FA
9233  33FB
9234  33FC
9235  33FD
9236  33FE
9237  33FF
9238  3400
9239  3401
9240  3402
9241  3403
9242  3404
9243  3405
9244  3406
9245  3407
9246  3408
9247  3409
9248  340A
9249  340B
9250  340C
9251  340D
9252  340E
9253  340F
9254  3410
9255  3411
9256  3412
9257  3413
9258  3414
9259  3415
9260  3416
9261  3417
9262  3418
9263  3419
9264  341A
9265  341B
9266  341C
9267  341D
9268  341E
9269  341F
9270  3420
9271  3421
9272  3422
9273  3423
9274  3424
9275  3425
9276  3426
9277  3427
9278  3428
9279  3429
9280  342A
9281  342B
9282  342C
9283  342D
9284  342E
9285  342F
9286  3430
9287  3431
9288  3432
9289  3433
9290  3434
9291  3435
9292  3436
9293  3437
9294  3438
9295  3439
9296  343A
9297  343B
9298  343C
9299  343D
9300  343E
9301  343F
9302  3440
9303  3441
9304  3442
9305  3443
9306  3444
9307  3445
9308  3446
9309  3447
9310  3448
9311  3449
9312  344A
9313  344B
9314  344C
9315  344D
9316  344E
9317  344F
9318  3450
9319  3451
9320  3452
9321  3453
9322  3454
9323  3455
9324  3456
9325  3457
9326  3458
9327  3459
9328  345A
9329  345B
9330  345C
9331  345D
9332  345E
9333  345F
9334  3460
9335  3461
9336  3462
9337  3463
9338  3464
9339  3465
9340  3466
9341  3467
9342  3468
9343  3469
9344  346A
9345  346B
9346  346C
9347  346D
9348  346E
9349  346F
9350  3470
9351  3471
9352  3472
9353  3473
9354  3474
9355  3475
9356  3476
9357  3477
9358  3478
9359  3479
9360  347A
9361  347B
9362  347C
9363  347D
9364  347E
9365  347F
9366  3480
9367  3481
9368  3482
9369  3483
9370  3484
9371  3485
9372  3486
9373  3487
9374  3488
9375  3489
9376  348A
9377  348B
9378  348C
9379  348D
9380  348E
9381  348F
9382  3490
9383  3491
9384  3492
9385  3493
9386  3494
9387  3495
9388  3496
9389  3497
9390  3498
9391  3499
9392  349A
9393  349B
9394  349C
9395  349D
9396  349E
9397  349F
9398  34A0
9399  34A1
9400  34A2
9401  34A3
9402  34A4
9403  34A5
9404  34A6
9405  34A7
9406  34A8
9407  34A9
9408  34AA
9409  34AB
9410  34AC
9411  34AD
9412  34AE
9413  34AF
9414  34B0
9415  34B1
9416  34B2
9417  34B3
9418  34B4
9419  34B5
9420  34B6
9421  34B7
9422  34B8
9423  34B9
9424  34BA
9425  34BB
9426  34BC
9427  34BD
9428  34BE
9429  34BF
9430  34C0
9431  34C1
9432  34C2
9433  34C3
9434  34C4
9435  34C5
9436  34C6
9437  34C7
9438  34C8
9439  34C9
9440  34CA
9441  34CB
9442  34CC
9443  34CD
9444  34CE
9445  34CF
9446  34D0
9447  34D1
9448  34D2
9449  34D3
9450  34D4
9451  34D5
9452  34D6
9453  34D7
9454  34D8
9455  34D9
9456  34DA
9457  34DB
9458  34DC
9459  34DD
9460  34DE
9461  34DF
9462  34E0
9463  34E1
9464  34E2
9465  34E3
9466  34E4
9467  34E5
9468  34E6
9469  34E7
9470  34E8
9471  34E9
9472  34EA
9473  34EB
9474  34EC
9475  34ED
9476  34EE
9477  34EF
9478  34F0
9479  34F1
9480  34F2
9481  34F3
9482  34F4
9483  34F5
9484  34F6
9485  34F7
9486  34F8
9487  34F9
9488  34FA
9489  34FB
9490  34FC
9491  34FD
9492  34FE
9493  34FF
9494  3500
9495  3501
9496  3502
9497  3503
9498  3504
9499  3505
9500  3506
9501  3507
9502  3508
9503  3509
9504  350A
9505  350B
9506  350C
9507  350D
9508  350E
9509  350F
9510  3510
9511  3511
9512  3512
9513  3513
9514  3514
9515  3515
9516  3516
9517  3517
9518  3518
9519  3519
9520  351A
9521  351B
9522  351C
9523  351D
9524  351E
9525  351F
9526  3520
9527  3521
9528  3522
9529  3523
9530  3524
9531  3525
9532  3526
9533  3527
9534  3528
9535  3529
9536  352A
9537  352B
9538  352C
9539  352D
9540  352E
9541  352F
9542  3530
9543  3531
9544  3532
9545  3533
9546  3534
9547  3535
9548  3536
9549  3537
9550  3538
9551  3539
9552  353A
9553  353B
9554  353C
9555  353D
9556  353E
9557  353F
9558  3540
9559  3541
9560  3542
9561  3543
9562  3544
9563  3545
9564  3546
9565  3547
9566  3548
9567  3549
9568  354A
9569  354B
9570  354C
9571  354D
9572  354E
9573  354F
9574  3550
9575  3551
9576  3552
9577  3553
9578  3554
9579  3555
9580  3556
9581  3557
9582  3558
9583  3559
9584  355A
9585  355B
9586  355C
9587  355D
9588  355E
9589  355F
9590  3560
9591  3561
9592  3562
9593  3563
9594  3564
9595  3565
9596  3566
9597  3567
9598  3568
9599  3569
9600  356A
9601  356B
9602  356C
9603  356D
9604  356E
9605  356F
9606  3570
9607  3571
9608  3572
9609  3573
9610  3574
9611  3575
9612  3576
9613  3577
9614  3578
9615  3579
9616  357A
9617  357B
9618  357C
9619  357D
9620  357E
9621  357F
9622  3580
9623  3581
9624  3582
9625  3583
9626  3584
9627  3585
9628  3586
9629  3587
9630  3588
9631  3589
9632  358A
9633  358B
9634  358C
9635  358D
9636  358E
9637  358F
9638  3590
9639  3591
9640  3592
9641  3593
9642  3594
9643  3595
9644  3596
9645  3597
9646  3598
9647  3599
9648  359A
9649  359B
9650  359C
9651  359D
9652  359E
9653  359F
9654  35A0
9655  35A1
9656  35A2
9657  35A3
9658  35A4
9659  35A5
9660  35A6
9661  35A7
9662  35A8
9663  35A9
9664  35AA
9665  35AB
9666  35AC
9667  35AD
9668  35AE
9669  35AF
9670  35B0
9671  35B1
9672  35B2
9673  35B3
9674  35B4
9675  35B5
9676  35B6
9677  35B7
9678  35B8
9679  35B9
9680  35BA
9681  35BB
9682  35BC
9683  35BD
9684  35BE
9685  35BF
9686  35C0
9687  35C1
9688  35C2
9689  35C3
9690  35C4
9691  35C5
9692  35C6
9693  35C7
9694  35C8
9695  35C9
9696  35CA
9697  35CB
9698  35CC
9699  35CD
9700  35CE
9701  35CF
9702  35D0
9703  35D1
9704  35D2
9705  35D3
9706  35D4
9707  35D5
9708  35D6
9709  35D7
9710  35D8
9711  35D9
9712  35DA
9713  35DB
9714  35DC
9715  35DD
9716  35DE
9717  35DF
9718  35E0
9719  35E1
9720  35E2
9721  35E3
9722  35E4
9723  35E5
9724  35E6
9725  35E7
9726  35E8
9727  35E9
9728  35EA
9729  35EB
9730  35EC
9731  35ED
9732  35EE
9733  35EF
9734  35F0
9735  35F1
9736  35F2
9737  35F3
9738  35F4
9739  35F5
9740  35F6
9741  35F7
9742  35F8
9743  35F9
9744  35FA
9745  35FB
9746  35FC
9747  35FD
9748  35FE
9749  35FF
9750  3600
9751  3601
9752  3602
9753  3603
9754  3604
9755  3605
9756  3606
9757  3607
9758  3608
9759  3609
9760  360A
9761  360B
9762  360C
9763  360D
9764  360E
9765  360F
9766  3610
9767  3611
9768  3612
9769  3613
9770  3614
9771  3615
9772  3616
9773  3617
9774  3618
9775  3619
9776  361A
9777  361B
9778  361C
9779  361D
9780  361E
9781  361F
9782  3620
9783  3621
9784  3622
9785  3623
9786  3624
9787  3625
9788  3626
9789  3627
9790  3628
9791  3629
9792  362A
9793  362B
9794  362C
9795  362D
9796  362E
9797  362F
9798  3630
9799  3631
9800  3632
9801  3633
9802  3634
9803  3635
9804  3636
9805  3637
9806  3638
9807  3639
9808  363A
9809  363B
9810  363C
9811  363D
9812  363E
9813  363F
9814  3640
9815  3641
9816  3642
9817  3643
9818  3644
9819  3645
9820  3646
9821  3647
9822  3648
9823  3649
9824  364A
9825  364B
9826  364C
9827  364D
9828  364E
9829  364F
9830  3650
9831  3651
9832  3652
9833  3653
9834  3654
9835  3655
9836  3656
9837  3657
9838  3658
9839  3659
9840  365A
9841  365B
9842  365C
9843  365D
9844  365E
9845  365F
9846  3660
9847  3661
9848  3662
9849  3663
9850  3664
9851  3665
9852  3666
9853  3667
9854  3668
9855  3669
9856  366A
9857  366B
9858  366C
9859  366D
9860  366E
9861  366F
9862  3670
9863  3671
9864  3672
9865  3673
9866  3674
9867  3675
9868  3676
9869  3677
9870  3678
9871  3679
9872  367A
9873  367B
9874  367C
9875  367D
9876  367E
9877  367F
9878  3680
9879  3681
9880  3682
9881  3683
9882  3684
9883  3685
9884  3686
9885  3687
9886  3688
9887  3689
9888  368A
9889  368B
9890  368C
9891  368D
9892  368E
9893  368F
9894  3690
9895  3691
9896  3692
9897  3693
9898  3694
9899  3695
9900  3696
9901  3697
9902  3698
9903  3699
9904  369A
9905  369B
9906  369C
9907  369D
9908  369E
9909  369F
9910  36A0
9911  36A1
9912  36A2
9913  36A3
9914  36A4
9915  36A5
9916  36A6
9917  36A7
9918  36A8
9919  36A9
9920  36AA
9921  36AB
9922  36AC
9923  36AD
9924  36AE
9925  36AF
9926  36B0
9927  36B1
9928  36B2
9929  36B3
9930  36B4
9931  36B5
9932  36B6
9933  36B7
9934  36B8
9935  36B9
9936  36BA
9937  36BB
9938  36BC
9939  36BD
9940  36BE
9941  36BF
9942  36C0
9943  36C1
9944  36C2
9945  36C3
9946  36C4
9947  36C5
9948  36C6
9949  36C7
9950  36C8
9951  36C9
9952  36CA
9953  36CB
9954  36CC
9955  36CD
9956  36CE
9957  36CF
9958  36D0
9959  36D1
9960  36D2
9961  36D3
9962  36D4
9963  36D5
9964  36D6
9965  36D7
9966  36D8
9967  36D9
9968  36DA
9969  36DB
9970  36DC
9971  36DD
9972  36DE
9973  36DF
9974  36E0
9975  36E1
9976  36E2
9977  36E3
9978  36E4
9979  36E5
9980  36E6
9981  36E7
9982  36E8
9983  36E9
9984  36EA
9985  36EB
9986  36EC
9987  36ED
9988  36EE
9989  36EF
9990  36F0
9991  36F1
9992  36F2
9993  36F3
9994  36F4
9995  36F5
9996  36F6
9997  36F7
9998  36F8
9999  36F9
10000  36FA
10001  36FB
10002  36FC
10003  36FD
10004  36FE
10005  36FF
10006  3700
10007  3701
10008  3702
10009  3703
10010  3704
10011  3705
10012  3706
10013  3707
10014  3708
10015  3709
10016  370A
10017  370B
10018  370C
10019  370D
10020  370E
10021  370F
10022  3710
10023  3711
10024  3712
10025  3713
10026  3714
10027  3715
10028  3716
10029  3717
10030  3718
10031  3719
10032  371A
10033  371B
10034  371C
10035  371D
10036  371E
10037  371F
10038  3720
10039  3721
10040  3722
10041  3723
10042  3724
10043  3725
10044  3726
10045  3727
10046  3728
10047  3729
10048  372A
10049  372B
10050  372C
10051  372D
10052  372E
10053  372F
10054  3730
10055  3731
10056  3732
10057  3733
10058  3734
10059  3735
10060  3736
10061  3737
10062  3738
10063  3739
10064  373A
10065  373B
10066  373C
10067  373D
10068  373E
10069  373F
10070  3740
10071  3741
10072  3742
10073  3743
10074  3744
10075  3745
10076  3746
10077  3747
10078  3748
10079  3749
10080  374A
10081  374B
10082  374C
10083  374D
10084  374E
10085  374F
10086  3750
10087  3751
10088  3752
10089  3753
10090  3754
10091  3755
10092  3756
10093  3757
10094  3758
10095  3759
10096  375A
10097  375B
10098  375C
10099  375D
10100  375E
10101  375F
10102  3760
10103  3761
10104  3762
10105  3763
10106  3764
10107  3765
10108  3766
10109  3767
10110  3768
10111  3769
10112  376A
10113  376B
10114  376C
10115  376D
10116  376E
10117  376F
10118  3770
10119  3771
10120  3772
10121  3773
10122  3774
10123  3775
10124  3776
10125  3777
10126  3778
10127  3779
10128  377A
10129  377B
10130  377C
10131  377D
10132  377E
10133  377F
10134  3780
10135  3781
10136  3782
10137  3783
10138  3784
10139  3785
10140  3786
10141  3787
10142  3788
10143  3789
10144  378A
10145  378B
10146  378C
10147  378D
10148  378E
10149  378F
10150  3790
10151  3791
10152  3792
10153  3793
10154  3794
10155  3795
10156  3796
10157  3797
10158  3798
10159  3799
10160  379A
10161  379B
10162  379C
10163  379D
10164  379E
10165  379F
10166  37A0
10167  37A1
10168  37A2
10169  37A3
10170  37A4
10171  37A5
10172  37A6
10173  37A7
10174  37A8
10175  37A9
10176  37AA
10177  37AB
10178  37AC
10179  37AD
10180  37AE
10181  37AF
10182  37B0
10183  37B1
10184  37B2
10185  37B3
10186  37B4
10187  37B5
10188  37B6
10189  37B7
10190  37B8
10191  37B9
10192  37BA
10193  37BB
10194  37BC
10195  37BD
10196  37BE
10197  37BF
10198  37C0
10199  37C1
10200  37C2
10201  37C3
10202  37C4
10203  37C5
10204  37C6
10205  37C7
10206  37C8
10207  37C9
10208  37CA
10209  37CB
10210  37CC
10211  37CD
10212  37CE
10213  37CF
10214  37D0
10215  37D1
10216  37D2
10217  37D3
10218  37D4
10219  37D5
10220  37D6
10221  37D7
10222  37D8
10223  37D9
10224  37DA
10225  37DB
10226  37DC
10227  37DD
10228  37DE
10229  37DF
10230  37E0
10231  37E1
10232  37E2
10233  37E3
10234  37E4
10235  37E5
10236  37E6
10237  37E7
10238  37E8
10239  37E9
10240  37EA
10241  37EB
10242  37EC
10243  37ED
10244  37EE
10245  37EF
10246  37F0
10247  37F1
10248  37F2
10249  37F3
10250  37F4
10251  37F5
10252  37F6
10253  37F7
10254  37F8
10255  37F9
10256  37FA
10257  37FB
10258  37FC
10259  37FD
10260  37FE
10261  37FF
10262  3800
10263  3801
10264  3802
10265  3803
10266  3804
10267  3805
10268  3806
10269  3807
10270  3808
10271  3809
10272  380A
10273  380B
10274  380C
10275  380D
10276  380E
10277  380F
10278  3810
10279  3811
10280  3812
10281  3813
10282  3814
10283  3815
10284  3816
10285  3817
10286  3818
10287  3819
10288  381A
10289  381B
10290  381C
10291  381D
10292  381E
10293  381F
10294  3820
10295  3821
10296  3822
10297  3823
10298  3824
10299  3825
10300  3826
10301  3827
10302  3828
10303  3829
10304  382A
10305  382B
10306  382C
10307  382D
10308  382E
10309  382F
10310  3830
10311  3831
10312  3832
10313  3833
10314  3834
10315  3835
10316  3836
10317  3837
10318  3838
10319  3839
10320  383A
10321  383B
10322  383C
10323  383D
10324  383E
10325  383F
10326  3840
10327  3841
10328  3842
10329  3843
10330  3844
10331  3845
10332  3846
10333  3847
10334  3848
10335  3849
10336  384A
10337  384B
10338  384C
10339  384D
10340  384E
10341  384F
10342  3850
10343  3851
10344  3852
10345  3853
10346  3854
10347  3855
10348  3856
10349  3857
10350  3858
10351  3859
10352  385A
10353  385B
10354  385C
10355  385D
10356  385E
10357  385F
10358  3860
10359  3861
10360  3862
10361  3863
10362  3864
10363  3865
10364  3866
10365  3867
10366  3868
10367  3869
10368  386A
10369  386B
10370  386C
10371  386D
10372  386E
10373  386F
10374  3870
10375  3871
10376  3872
10377  3873
10378  3874
10379  3875
10380  3876
10381  3877
10382  3878
10383  3879
10384  387A
10385  387B
10386  387C
10387  387D
10388  387E
10389  387F
10390  3880
10391  3881
10392  3882
10393  3883
10394  3884
10395  3885
10396  3886
10397  3887
10398  3888
10399  3889
10400  388A
10401  388B
10402  388C
10403  388D
10404  388E
10405  388F
10406  3890
10407  3891
10408  3892
10409  3893
10410  3894
10411  3895
10412  3896
10413  3897
10414  3898
10415  3899
10416  389A
10417  389B
10418  389C
10419  389D
10420  389E
10421  389F
10422  38A0
10423  38A1
10424  38A2
10425  38A3
10426  38A4
10427  38A5
10428  38A6
10429  38A7
10430  38A8
10431  38A9
10432  38AA
10433  38AB
10434  38AC
10435  38AD
10436  38AE
10437  38AF
10438  38B0
10439  38B1
10440  38B2
10441  38B3
10442  38B4
10443  38B5
10444  38B6
10445  38B7
10446  38B8
10447  38B9
10448  38BA
10449  38BB
10450  38BC
10451  38BD
10452  38BE
10453  38BF
10454  38C0
10455  38C1
10456  38C2
10457  38C3
10458  38C4
10459  38C5
10460  38C6
10461  38C7
10462  38C8
10463  38C9
10464  38CA
10465  38CB
10466  38CC
10467  38CD
10468  38CE
10469  38CF
10470  38D0
10471  38D1
10472  38D2
10473  38D3
10474  38D4
10475  38D5
10476  38D6
10477  38D7
10478  38D8
10479  38D9
10480  38DA
10481  38DB
10482  38DC
10483  38DD
10484  38DE
10485  38DF
10486  38E0
10487  38E1
10488  38E2
10489  38E3
10490  38E4
10491  38E5
10492  38E6
10493  38E7
10494  38E8
10495  38E9
10496  38EA
10497  38EB
10498  38EC
10499  38ED
10500  38EE
10501  38EF
10502  38F0
10503  38F1
10504  38F2
10505  38F3
10506  38F4
10507  38F5
10508  38F6
10509  38F7
10510  38F8
10511  38F9
10512  38FA
10513  38FB
10514  38FC
10515  38FD
10516  38FE
10517  38FF
10518  3900
10519  3901
10520  3902
10521  3903
10522  3904
10523  3905
10524  3906
10525  3907
10526  3908
10527  3909
10528  390A
10529  390B
10530  390C
10531  390D
10532  390E
10533  390F
10534  3910
10535  3911
10536  3912
10537  3913
10538  3914
10539  3915
10540  3916
10541  3917
10542  3918
10543  3919
10544  391A
10545  391B
10546  391C
10547  391D
10548  391E
10549  391F
10550  3920
10551  3921
10552  3922
10553  3923
10554  3924
10555  3925
10556  3926
10557  3927
10558  3928
10559  3929
10560  392A
10561  392B
10562  392C
10563  392D
10564  392E
10565  392F
10566  3930
10567  3931
10568  3932
10569  3933
10570  3934
10571  3935
10572  3936
10573  3937
10574  3938
10575  3939
10576  393A
10577  393B
10578  393C
10579  393D
10580  393E
10581  393F
10582  3940
10583  3941
10584  3942
10585  3943
10586  3944
10587  3945
10588  3946
10589  3947
10590  3948
10591  3949
10592  394A
10593  394B
10594  394C
10595  394D
10596  394E
10597  394F
10598  3950
10599  3951
10600  3952
10601  3953
10602  3954
10603  3955
10604  3956
10605  3957
10606  3958
10607  3959
10608  395A
10609  395B
10610  395C
10611  395D
10612  395E
10613  395F
10614  3960
10615  3961
10616  3962
10617  3963
10618  3964
10619  3965
10620  3966
10621  3967
10622  3968
10623  3969
10624  396A
10625  396B
10626  396C
10627  396D
10628  396E
10629  396F
10630  3970
10631  3971
10632  3972
10633  3973
10634  3974
10635  3975
10636  3976
10637  3977
10638  3978
10639  3979
10640  397A
10641  397B
10642  397C
10643  397D
10644  397E
10645  397F
10646  3980
10647  3981
10648  3982
10649  3983
10650  3984
10651  3985
10652  3986
10653  3987
10654  3988
10655  3989
10656  398A
10657  398B
10658  398C
10659  398D
10660  398E
10661  398F
10662  3990
10663  3991
10664  3992
10665  3993
10666  3994
10667  3995
10668  3996
10669  3997
10670  3998
10671  3999
10672  399A
10673  399B
10674  399C
10675  399D
10676  399E
10677  399F
10678  39A0
10679  39A1
10680  39A2
10681  39A3
10682  39A4
10683  39A5
10684  39A6
10685  39A7
10686  39A8
10687  39A9
10688  39AA
10689  39AB
10690  39AC
10691  39AD
10692  39AE
10693  39AF
10694  39B0
10695  39B1
10696  39B2
10697  39B3
10698  39B4
10699  39B5
10700  39B6
10701  39B7
10702  39B8
10703  39B9
10704  39BA
10705  39BB
10706  39BC
10707  39BD
10708  39BE
10709  39BF
10710  39C0
10711  39C1
10712  39C2
10713  39C3
10714  39C4
10715  39C5
10716  39C6
10717  39C7
10718  39C8
10719  39C9
10720  39CA
10721  39CB
10722  39CC
10723  39CD
10724  39CE
10725  39CF
10726  39D0
10727  39D1
10728  39D2
10729  39D3
10730  39D4
10731  39D5
10732  39D6
10733  39D7
10734  39D8
10735  39D9
10736  39DA
10737  39DB
10738  39DC
10739  39DD
10740  39DE
10741  39DF
10742  39E0
10743  39E1
10744  39E2
10745  39E3
10746  39E4
10747  39E5
10748  39E6
10749  39E7
10750  39E8
10751  39E9
10752  39EA
10753  39EB
10754  39EC
10755  39ED
10756  39EE
10757  39EF
10758  39F0
10759  39F1
10760  39F2
10761  39F3
10762  39F4
10763  39F5
10764  39F6
10765  39F7
10766  39F8
10767  39F9
10768  39FA
10769  39FB
10770  39FC
10771  39FD
10772  39FE
10773  39FF
10774  3A00
10775  3A01
10776  3A02
10777  3A03
10778  3A04
10779  3A05
10780  3A06
10781  3A07
10782  3A08
10783  3A09
10784  3A0A
10785  3A0B
10786  3A0C
10787  3A0D
10788  3A0E
10789  3A0F
10790  3A10
10791  3A11
10792  3A12
10793  3A13
10794  3A14
10795  3A15
10796  3A16
10797  3A17
10798  3A18
10799  3A19
10800  3A1A
10801  3A1B
10802  3A1C
10803  3A1D
10804  3A1E
10805  3A1F
10806  3A20
10807  3A21
10808  3A22
10809  3A23
10810  3A24
10811  3A25
10812  3A26
10813  3A27
10814  3A28
10815  3A29
10816  3A2A
10817  3A2B
10818  3A2C
10819  3A2D
10820  3A2E
10821  3A2F
10822  3A30
10823  3A31
10824  3A32
10825  3A33
10826  3A34
10827  3A35
10828  3A36
10829  3A37
10830  3A38
10831  3A39
10832  3A3A
10833  3A3B
10834  3A3C
10835  3A3D
10836  3A3E
10837  3A3F
10838  3A40
10839  3A41
10840  3A42
10841  3A43
10842  3A44
10843  3A45
10844  3A46
10845  3A47
10846  3A48
10847  3A49
10848  3A4A
10849  3A4B
10850  3A4C
10851  3A4D
10852  3A4E
10853  3A4F
10854  3A50
10855  3A51
10856  3A52
10857  3A53
10858  3A54
10859  3A55
10860  3A56
10861  3A57
10862  3A58
10863  3A59
10864  3A5A
10865  3A5B
10866  3A5C
10867  3A5D
10868  3A5E
10869  3A5F
10870  3A60
10871  3A61
10872  3A62
10873  3A63
10874  3A64
10875  3A65
10876  3A66
10877  3A67
10878  3A68
10879  3A69
10880  3A6A
10881  3A6B
10882  3A6C
10883  3A6D
10884  3A6E
10885  3A6F
10886  3A70
10887  3A71
10888  3A72
10889  3A73
10890  3A74
10891  3A75
10892  3A76
10893  3A77
10894  3A78
10895  3A79
10896  3A7A
10897  3A7B
10898  3A7C
10899  3A7D
10900  3A7E
10901  3A7F
10902  3A80
10903  3A81
10904  3A82
10905  3A83
10906  3A84
10907  3A85
10908  3A86
10909  3A87
10910  3A88
10911  3A89
10912  3A8A
10913  3A8B
10914  3A8C
10915  3A8D
10916  3A8E
10917  3A8F
10918  3A90
10919  3A91
10920  3A92
10921  3A93
10922  3A94
10923  3A95
10924  3A96
10925  3A97
10926  3A98
10927  3A99
10928  3A9A
10929  3A9B
10930  3A9C
10931  3A9D
10932  3A9E
10933  3A9F
10934  3AA0
10935  3AA1
10936  3AA2
10937  3AA3
10938  3AA4
10939  3AA5
10940  3AA6
10941  3AA7
10942  3AA8
10943  3AA9
10944  3AAA
10945  3AAB
10946  3AAC
10947  3AAD
10948  3AAE
10949  3AAF
10950  3AB0
10951  3AB1
10952  3AB2
10953  3AB3
10954  3AB4
10955  3AB5
10956  3AB6
10957  3AB7
10958  3AB8
10959  3AB9
10960  3ABA
10961  3ABB
10962  3ABC
10963  3ABD
10964  3ABE
10965  3ABF
10966  3AC0
10967  3AC1
10968  3AC2
10969  3AC3
10970  3AC4
10971  3AC5
10972  3AC6
10973  3AC7
10974  3AC8
10975  3AC9
10976  3ACA
10977  3ACB
10978  3ACC
10979  3ACD
10980  3ACE
10981  3ACF
10982  3AD0
10983  3AD1
10984  3AD2
10985  3AD3
10986  3AD4
10987  3AD5
10988  3AD6
10989  3AD7
10990  3AD8
10991  3AD9
10992  3ADA
10993  3ADB
10994  3ADC
10995  3ADD
10996  3ADE
10997  3ADF
10998  3AE0
10999  3AE1
11000  3AE2
11001  3AE3
11002  3AE4
11003  3AE5
11004  3AE6
11005  3AE7
11006  3AE8
11007  3AE9
11008  3AEA
11009  3AEB
11010  3AEC
11011  3AED
11012  3AEE
11013  3AEF
11014  3AF0
11015  3AF1
11016  3AF2
11017  3AF3
11018  3AF4
11019  3AF5
11020  3AF6
11021  3AF7
11022  3AF8
11023  3AF9
11024  3AFA
11025  3AFB
11026  3AFC
11027  3AFD
11028  3AFE
11029  3AFF
11030  3B00
11031  3B01
11032  3B02
11033  3B03
11034  3B04
11035  3B05
11036  3B06
11037  3B07
11038  3B08
11039  3B09
11040  3B0A
11041  3B0B
11042  3B0C
11043  3B0D
11044  3B0E
11045  3B0F
11046  3B10
11047  3B11
11048  3B12
11049  3B13
11050  3B14
11051  3B15
11052  3B16
11053  3B17
11054  3B18
11055  3B19
11056  3B1A
11057  3B1B
11058  3B1C
11059  3B1D
11060  3B1E
11061  3B1F
11062  3B20
11063  3B21
11064  3B22
11065  3B23
11066  3B24
11067  3B25
11068  3B26
11069  3B27
11070  3B28
11071  3B29
11072  3B2A
11073  3B2B
11074  3B2C
11075  3B2D
11076  3B2E
11077  3B2F
11078  3B30
11079  3B31
11080  3B32
11081  3B33
11082  3B34
11083  3B35
11084  3B36
11085  3B37
11086  3B38
11087  3B39
11088  3B3A
11089  3B3B
11090  3B3C
11091  3B3D
11092  3B3E
11093  3B3F
11094  3B40
11095  3B41
11096  3B42
11097  3B43
11098  3B44
11099  3B45
11100  3B46
11101  3B47
11102  3B48
11103  3B49
11104  3B4A
11105  3B4B
11106  3B4C
11107  3B4D
11108  3B4E
11109  3B4F
11110  3B50
11111  3B51
11112  3B52
11113  3B53
11114  3B54
11115  3B55
11116  3B56
11117  3B57
11118  3B58
11119  3B59
11120  3B5A
11121  3B5B
11122  3B5C
11123  3B5D
11124  3B5E
11125  3B5F
11126  3B60
11127  3B61
11128  3B62
11129  3B63
11130  3B64
11131  3B65
11132  3B66
11133  3B67
11134  3B68
11135  3B69
11136  3B6A
11137  3B6B
11138  3B6C
11139  3B6D
11140  3B6E
11141  3B6F
11142  3B70
11143  3B71
11144  3B72
11145  3B73
11146  3B74
11147  3B75
11148  3B76
11149  3B77
11150  3B78
11151  3B79
11152  3B7A
11153  3B7B
11154  3B7C
11155  3B7D
11156  3B7E
11157  3B7F
11158  3B80
11159  3B81
11160  3B82
11161  3B83
11162  3B84
11163  3B85
11164  3B86
11165  3B87
11166  3B88
11167  3B89
11168  3B8A
11169  3B8B
11170  3B8C
11171  3B8D
11172  3B8E
11173  3B8F
11174  3B90
11175  3B91
11176  3B92
11177  3B93
11178  3B94
11179  3B95
11180  3B96
11181  3B97
11182  3B98
11183  3B99
11184  3B9A
11185  3B9B
11186  3B9C
11187  3B9D
11188  3B9E
11189  3B9F
11190  3BA0
11191  3BA1
11192  3BA2
11193  3BA3
11194  3BA4
11195  3BA5
11196  3BA6
11197  3BA7
11198  3BA8
11199  3BA9
11200  3BAA
11201  3BAB
11202  3BAC
11203  3BAD
11204  3BAE
11205  3BAF
11206  3BB0
11207  3BB1
11208  3BB2
11209  3BB3
11210  3BB4
11211  3BB5
11212  3BB6
11213  3BB7
11214  3BB8
11215  3BB9
11216  3BBA
11217  3BBB
11218  3BBC
11219  3BBD
11220  3BBE
11221  3BBF
11222  3BC0
11223  3BC1
11224  3BC2
11225  3BC3
11226  3BC4
11227  3BC5
11228  3BC6
11229  3BC7
11230  3BC8
11231  3BC9
11232  3BCA
11233  3BCB
11234  3BCC
11235  3BCD
11236  3BCE
11237  3BCF
11238  3BD0
11239  3BD1
11240  3BD2
11241  3BD3
11242  3BD4
11243  3BD5
11244  3BD6
11245  3BD7
11246  3BD8
11247  3BD9
11248  3BDA
11249  3BDB
11250  3BDC
11251  3BDD
11252  3BDE
11253  3BDF
11254  3BE0
11255  3BE1
11256  3BE2
11257  3BE3
11258  3BE4
11259  3BE5
11260  3BE6
11261  3BE7
11262  3BE8
11263  3BE9
11264  3BEA
11265  3BEB
11266  3BEC
11267  3BED
11268  3BEE
11269  3BEF
11270  3BF0
11271  3BF1
11272  3BF2
11273  3BF3
11274  3BF4
11275  3BF5
11276  3BF6
11277  3BF7
11278  3BF8
11279  3BF9
11280  3BFA
11281  3BFB
11282  3BFC
11283  3BFD
11284  3BFE
11285  3BFF
11286  3C00
11287  3C01
11288  3C02
11289  3C03
11290  3C04
11291  3C05
11292  3C06
11293  3C07
11294  3C08
11295  3C09
11296  3C0A
11297  3C0B
11298  3C0C
11299  3C0D
11300  3C0E
11301  3C0F
11302  3C10
11303  3C11
11304  3C12
11305  3C13
11306  3C14
11307  3C15
11308  3C16
11309  3C17
11310  3C18
11311  3C19
11312  3C1A
11313  3C1B
11314  3C1C
11315  3C1D
11316  3C1E
11317  3C1F
11318  3C20
11319  3C21
11320  3C22
11321  3C23
11322  3C24
11323  3C25
11324  3C26
11325  3C27
11326  3C28
11327  3C29
11328  3C2A
11329  3C2B
11330  3C2C
11331  3C2D
11332  3C2E
11333  3C2F
11334  3C30
11335  3C31
11336  3C32
11337  3C33
11338  3C34
11339  3C35
11340  3C36
11341  3C37
11342  3C38
11343  3C39
11344  3C3A
11345  3C3B
11346  3C3C
11347  3C3D
11348  3C3E
11349  3C3F
11350  3C40
11351  3C41
11352  3C42
11353  3C43
11354  3C44
11355  3C45
11356  3C46
11357  3C47
11358  3C48
11359  3C49
11360  3C4A
11361  3C4B
11362  3C4C
11363  3C4D
11364  3C4E
11365  3C4F
11366  3C50
11367  3C51
11368  3C52
11369  3C53
11370  3C54
11371  3C55
11372  3C56
11373  3C57
11374  3C58
11375  3C59
11376  3C5A
11377  3C5B
11378  3C5C
11379  3C5D
11380  3C5E
11381  3C5F
11382  3C60
11383  3C61
11384  3C62
11385  3C63
11386  3C64
11387  3C65
11388  3C66
11389  3C67
11390  3C68
11391  3C69
11392  3C6A
11393  3C6B
11394  3C6C
11395  3C6D
11396  3C6E
11397  3C6F
11398  3C70
11399  3C71
11400  3C72
11401  3C73
11402  3C74
11403  3C75
11404  3C76
11405  3C77
11406  3C78
11407  3C79
11408  3C7A
11409  3C7B
11410  3C7C
11411  3C7D
11412  3C7E
11413  3C7F
11414  3C80
11415  3C81
11416  3C82
11417  3C83
11418  3C84
11419  3C85
11420  3C86
11421  3C87
11422  3C88
11423  3C89
11424  3C8A
11425  3C8B
11426  3C8C
11427  3C8D
11428  3C8E
11429  3C8F
11430  3C90
11431  3C91
11432  3C92
11433  3C93
11434  3C94
11435  3C95
11436  3C96
11437  3C97
11438  3C98
11439  3C99
11440  3C9A
11441  3C9B
11442  3C9C
11443  3C9D
11444  3C9E
11445  3C9F
11446  3CA0
11447  3CA1
11448  3CA2
11449  3CA3
11450  3CA4
11451  3CA5
11452  3CA6
11453  3CA7
11454  3CA8
11455  3CA9
11456  3CAA
11457  3CAB
11458  3CAC
11459  3CAD
11460  3CAE
11461  3CAF
11462  3CB0
11463  3CB1
11464  3CB2
11465  3CB3
11466  3CB4
11467  3CB5
11468  3CB6
11469  3CB7
11470  3CB8
11471  3CB9
11472  3CBA
11473  3CBB
11474  3CBC
11475  3CBD
11476  3CBE
11477  3CBF
11478  3CC0
11479  3CC1
11480  3CC2
11481  3CC3
11482  3CC4
11483  3CC5
11484  3CC6
11485  3CC7
11486  3CC8
11487  3CC9
11488  3CCA
11489  3CCB
11490  3CCC
11491  3CCD
11492  3CCE
11493  3CCF
11494  3CD0
11495  3CD1
11496  3CD2
11497  3CD3
11498  3CD4
11499  3CD5
11500  3CD6
11501  3CD7
11502  3CD8
11503  3CD9
11504  3CDA
11505  3CDB
11506  3CDC
11507  3CDD
11508  3CDE
11509  3CDF
11510  3CE0
11511  3CE1
11512  3CE2
11513  3CE3
11514  3CE4
11515  3CE5
11516  3CE6
11517  3CE7
11518  3CE8
11519  3CE9
11520  3CEA
11521  3CEB
11522  3CEC
11523  3CED
11524  3CEE
11525  3CEF
11526  3CF0
11527  3CF1
11528  3CF2
11529  3CF3
11530  3CF4
11531  3CF5
11532  3CF6
11533  3CF7
11534  3CF8
11535  3CF9
11536  3CFA
11537  3CFB
11538  3CFC
11539  3CFD
11540  3CFE
11541  3CFF
11542  3D00
11543  3D01
11544  3D02
11545  3D03
11546  3D04
11547  3D05
11548  3D06
11549  3D07
11550  3D08
11551  3D09
11552  3D0A
11553  3D0B
11554  3D0C
11555  3D0D
11556  3D0E
11557  3D0F
11558  3D10
11559  3D11
11560  3D12
11561  3D13
11562  3D14
11563  3D15
11564  3D16
11565  3D17
11566  3D18
11567  3D19
11568  3D1A
11569  3D1B
11570  3D1C
11571  3D1D
11572  3D1E
11573  3D1F
11574  3D20
11575  3D21
11576  3D22
11577  3D23
11578  3D24
11579  3D25
11580  3D26
11581  3D27
11582  3D28
11583  3D29
11584  3D2A
11585  3D2B
11586  3D2C
11587  3D2D
11588  3D2E
11589  3D2F
11590  3D30
11591  3D31
11592  3D32
11593  3D33
11594  3D34
11595  3D35
11596  3D36
11597  3D37
11598  3D38
11599  3D39
11600  3D3A
11601  3D3B
11602  3D3C
11603  3D3D
11604  3D3E
11605  3D3F
11606  3D40
11607  3D41
11608  3D42
11609  3D43
11610  3D44
11611  3D45
11612  3D46
11613  3D47
11614  3D48
11615  3D49
11616  3D4A
11617  3D4B
11618  3D4C
11619  3D4D
11620  3D4E
11621  3D4F
11622  3D50
11623  3D51
11624  3D52
11625  3D53
11626  3D54
11627  3D55
11628  3D56
11629  3D57
11630  3D58
11631  3D59
11632  3D5A
11633  3D5B
11634  3D5C
11635  3D5D
11636  3D5E
11637  3D5F
11638  3D60
11639  3D61
11640  3D62
11641  3D63
11642  3D64
11643  3D65
11644  3D66
11645  3D67
11646  3D68
11647  3D69
11648  3D6A
11649  3D6B
11650  3D6C
11651  3D6D
11652  3D6E
11653  3D6F
11654  3D70
11655  3D71
11656  3D72
11657  3D73
11658  3D74
11659  3D75
11660  3D76
11661  3D77
11662  3D78
11663  3D79
11664  3D7A
11665  3D7B
11666  3D7C
11667  3D7D
11668  3D7E
11669  3D7F
11670  3D80
11671  3D81
11672  3D82
11673  3D83
11674  3D84
11675  3D85
11676  3D86
11677  3D87
11678  3D88
11679  3D89
11680  3D8A
11681  3D8B
11682  3D8C
11683  3D8D
11684  3D8E
11685  3D8F
11686  3D90
11687  3D91
11688  3D92
11689  3D93
11690  3D94
11691  3D95
11692  3D96
11693  3D97
11694  3D98
11695  3D99
11696  3D9A
11697  3D9B
11698  3D9C
11699  3D9D
11700  3D9E
11701  3D9F
11702  3DA0
11703  3DA1
11704  3DA2
11705  3DA3
11706  3DA4
11707  3DA5
11708  3DA6
11709  3DA7
11710  3DA8
11711  3DA9
11712  3DAA
11713  3DAB
11714  3DAC
11715  3DAD
11716  3DAE
11717  3DAF
11718  3DB0
11719  3DB1
11720  3DB2
11721  3DB3
11722  3DB4
11723  3DB5
11724  3DB6
11725  3DB7
11726  3DB8
11727  3DB9
11728  3DBA
11729  3DBB
11730  3DBC
11731  3DBD
11732  3DBE
11733  3DBF
11734  3DC0
11735  3DC1
11736  3DC2
11737  3DC3
11738  3DC4
11739  3DC5
11740  3DC6
11741  3DC7
11742  3DC8
11743  3DC9
11744  3DCA
11745  3DCB
11746  3DCC
11747  3DCD
11748  3DCE
11749  3DCF
11750  3DD0
11751  3DD1
11752  3DD2
11753  3DD3
11754  3DD4
11755  3DD5
11756  3DD6
11757  3DD7
11758  3DD8
11759  3DD9
11760  3DDA
11761  3DDB
11762  3DDC
11763  3DDD
11764  3DDE
11765  3DDF
11766  3DE0
11767  3DE1
11768  3DE2
11769  3DE3
11770  3DE4
11771  3DE5
11772  3DE6
11773  3DE7
11774  3DE8
11775  3DE9
11776  3DEA
11777  3DEB
11778  3DEC
11779  3DED
11780  3DEE
11781  3DEF
11782  3DF0
11783  3DF1
11784  3DF2
11785  3DF3
11786  3DF4
11787  3DF5
11788  3DF6
11789  3DF7
11790  3DF8
11791  3DF9
11792  3DFA
11793  3DFB
11794  3DFC
11795  3DFD
11796  3DFE
11797  3DFF
11798  3E00
11799  3E01
11800  3E02
11801  3E03
11802  3E04
11803  3E05
11804  3E06
11805  3E07
11806  3E08
11807  3E09
11808  3E0A
11809  3E0B
11810  3E0C
11811  3E0D
11812  3E0E
11813  3E0F
11814  3E10
11815  3E11
11816  3E12
11817  3E13
11818  3E14
11819  3E15
11820  3E16
11821  3E17
11822  3E18
11823  3E19
11824  3E1A
11825  3E1B
11826  3E1C
11827  3E1D
11828  3E1E
11829  3E1F
11830  3E20
11831  3E21
11832  3E22
11833  3E23
11834  3E24
11835  3E25
11836  3E26
11837  3E27
11838  3E28
11839  3E29
11840  3E2A
11841  3E2B
11842  3E2C
11843  3E2D
11844  3E2E
11845  3E2F
11846  3E30
11847  3E31
11848  3E32
11849  3E33
11850  3E34
11851  3E35
11852  3E36
11853  3E37
11854  3E38
11855  3E39
11856  3E3A
11857  3E3B
11858  3E3C
11859  3E3D
11860  3E3E
11861  3E3F
11862  3E40
11863  3E41
11864  3E42
11865  3E43
11866  3E44
11867  3E45
11868  3E46
11869  3E47
11870  3E48
11871  3E49
11872  3E4A
11873  3E4B
11874  3E4C
11875  3E4D
11876  3E4E
11877  3E4F
11878  3E50
11879  3E51
11880  3E52
11881  3E53
11882  3E54
11883  3E55
11884  3E56
11885  3E57
11886  3E58
11887  3E59
11888  3E5A
11889  3E5B
11890  3E5C
11891  3E5D
11892  3E5E
11893  3E5F
11894  3E60
11895  3E61
11896  3E62
11897  3E63
11898  3E64
11899  3E65
11900  3E66
11901  3E67
11902  3E68
11903  3E69
11904  3E6A
11905  3E6B
11906  3E6C
11907  3E6D
11908  3E6E
11909  3E6F
11910  3E70
11911  3E71
11912  3E72
11913  3E73
11914  3E74
11915  3E75
11916  3E76
11917  3E77
11918  3E78
11919  3E79
11920  3E7A
11921  3E7B
11922  3E7C
11923  3E7D
11924  3E7E
11925  3E7F
11926  3E80
11927  3E81
11928  3E82
11929  3E83
11930  3E84
11931  3E85
11932  3E86
11933  3E87
11934  3E88
11935  3E89
11936  3E8A
11937  3E8B
11938  3E8C
11939  3E8D
11940  3E8E
11941  3E8F
11942  3E90
11943  3E91
11944  3E92
11945  3E93
11946  3E94
11947  3E95
11948  3E96
11949  3E97
11950  3E98
11951  3E99
11952  3E9A
11953  3E9B
11954  3E9C
11955  3E9D
11956  3E9E
11957  3E9F
11958  3EA0
11959  3EA1
11960  3EA2
11961  3EA3
11962  3EA4
11963  3EA5
11964  3EA6
11965  3EA7
11966  3EA8
11967  3EA9
11968  3EAA
11969  3EAB
11970  3EAC
11971  3EAD
11972  3EAE
11973  3EAF
11974  3EB0
11975  3EB1
11976  3EB2
11977  3EB3
11978  3EB4
11979  3EB5
11980  3EB6
11981  3EB7
11982  3EB8
11983  3EB9
11984  3EBA
11985  3EBB
11986  3EBC
11987  3EBD
11988  3EBE
11989  3EBF
11990  3EC0
11991  3EC1
11992  3EC2
11993  3EC3
11994  3EC4
11995  3EC5
11996  3EC6
11997  3EC7
11998  3EC8
11999  3EC9
12000  3ECA
12001  3ECB
12002  3ECC
12003  3ECD
12004  3ECE
12005  3ECF
12006  3ED0
12007  3ED1
12008  3ED2
12009  3ED3
12010  3ED4
12011  3ED5
12012  3ED6
12013  3ED7
12014  3ED8
12015  3ED9
12016  3EDA
12017  3EDB
12018  3EDC
12019  3EDD
12020  3EDE
12021  3EDF
12022  3EE0
12023  3EE1
12024  3EE2
12025  3EE3
12026  3EE4
12027  3EE5
12028  3EE6
12029  3EE7
12030  3EE8
12031  3EE9
12032  3EEA
12033  3EEB
12034  3EEC
12035  3EED
12036  3EEE
12037  3EEF
12038  3EF0
12039  3EF1
12040  3EF2
12041  3EF3
12042  3EF4
12043  3EF5
12044  3EF6
12045  3EF7
12046  3EF8
12047  3EF9
12048  3EFA
12049  3EFB
12050  3EFC
12051  3EFD
12052  3EFE
12053  3EFF
12054  3F00
12055  3F01
12056  3F02
12057  3F03
12058  3F04
12059  3F05
12060  3F06
12061  3F07
12062  3F08
12063  3F09
12064  3F0A
12065  3F0B
12066  3F0C
12067  3F0D
12068  3F0E
12069  3F0F
12070  3F10
12071  3F11
12072  3F12
12073  3F13
12074  3F14
12075  3F15
12076  3F16
12077  3F17
12078  3F18
12079  3F19
12080  3F1A
12081  3F1B
12082  3F1C
12083  3F1D
12084  3F1E
12085  3F1F
12086  3F20
12087  3F21
12088  3F22
12089  3F23
12090  3F24
12091  3F25
12092  3F26
12093  3F27
12094  3F28
12095  3F29
12096  3F2A
12097  3F2B
12098  3F2C
12099  3F2D
12100  3F2E
12101  3F2F
12102  3F30
12103  3F31
12104  3F32
12105  3F33
12106  3F34
12107  3F35
12108  3F36
12109  3F37
12110  3F38
12111  3F39
12112  3F3A
12113  3F3B
12114  3F3C
12115  3F3D
12116  3F3E
12117  3F3F
12118  3F40
12119  3F41
12120  3F42
12121  3F43
12122  3F44
12123  3F45
12124  3F46
12125  3F47
12126  3F48
12127  3F49
12128  3F4A
12129  3F4B
12130  3F4C
12131  3F4D
12132  3F4E
12133  3F4F
12134  3F50
12135  3F51
12136  3F52
12137  3F53
12138  3F54
12139  3F55
12140  3F56
12141  3F57
12142  3F58
12143  3F59
12144  3F5A
12145  3F5B
12146  3F5C
12147  3F5D
12148  3F5E
12149  3F5F
12150  3F60
12151  3F61
12152  3F62
12153  3F63
12154  3F64
12155  3F65
12156  3F66
12157  3F67
12158  3F68
12159  3F69
12160  3F6A
12161  3F6B
12162  3F6C
12163  3F6D
12164  3F6E
12165  3F6F
12166  3F70
12167  3F71
12168  3F72
12169  3F73
12170  3F74
12171  3F75
12172  3F76
12173  3F77
12174  3F78
12175  3F79
12176  3F7A
12177  3F7B
12178  3F7C
12179  3F7D
12180  3F7E
12181  3F7F
12182  3F80
12183  3F81
12184  3F82
12185  3F83
12186  3F84
12187  3F85
12188  3F86
12189  3F87
12190  3F88
12191  3F89
12192  3F8A
12193  3F8B
12194  3F8C
12195  3F8D
12196  3F8E
12197  3F8F
12198  3F90
12199  3F91
12200  3F92
12201  3F93
12202  3F94
12203  3F95
12204  3F96
12205  3F97
12206  3F98
12207  3F99
12208  3F9A
12209  3F9B
12210  3F9C
12211  3F9D
12212  3F9E
12213  3F9F
12214  3FA0
12215  3FA1
12216  3FA2
12217  3FA3
12218  3FA4
12219  3FA5
12220  3FA6
12221  3FA7
12222  3FA8
12223  3FA9
12224  3FAA
12225  3FAB
12226  3FAC
12227  3FAD
12228  3FAE
12229  3FAF
12230  3FB0
12231  3FB1
12232  3FB2
12233  3FB3
12234  3FB4
12235  3FB5
12236  3FB6
12237  3FB7
12238  3FB8
12239  3FB9
12240  3FBA
12241  3FBB
12242  3FBC
12243  3FBD
12244  3FBE
12245  3FBF
12246  3FC0
12247  3FC1
12248  3FC2
12249  3FC3
12250  3FC4
12251  3FC5
12252  3FC6
12253  3FC7
12254  3FC8
12255  3FC9
12256  3FCA
12257  3FCB
12258  3FCC
12259  3FCD
12260  3FCE
12261  3FCF
12262  3FD0
12263  3FD1
12264  3FD2
12265  3FD3
12266  3FD4
12267  3FD5
12268  3FD6
12269  3FD7
12270  3FD8
12271  3FD9
12272  3FDA
12273  3FDB
12274  3FDC
12275  3FDD
12276  3FDE
12277  3FDF
12278  3FE0
12279  3FE1
12280  3FE2
12281  3FE3
12282  3FE4
12283  3FE5
12284  3FE6
12285  3FE7
12286  3FE8
12287  3FE9
12288  3FEA
12289  3FEB
12290  3FEC
12291  3FED
12292  3FEE
12293  3FEF
12294  3FF0
12295  3FF1
12296  3FF2
12297  3FF3
12298  3FF4
12299  3FF5
12300  3FF6
12301  3FF7
12302  3FF8
12303  3FF9
12304  3FFA
12305  3FFB
12306  3FFC
12307  3FFD
12308  3FFE
12309  3FFF
12310  4000
12311  4001
12312  4002
12313  4003
12314  4004
12315  4005
12316  4006
12317  4007
12318  4008
12319  4009
12320  400A
12321  400B
12322  400C
12323  400D
12324  400E
12325  400F
12326  4010
12327  4011
12328  4012
12329  4013
12330  4014
12331  4015
12332  4016
12333  4017
12334  4018
12335  4019
12336  401A
12337  401B
12338  401C
12339  401D
12340  401E
12341  401F
12342  4020
12343  4021
12344  4022
12345  4023
12346  4024
12347  4025
12348  4026
12349  4027
12350  4028
12351  4029
12352  402A
12353  402B
12354  402C
12355  402D
12356  402E
12357  402F
12358  4030
12359  4031
12360  4032
12361  4033
12362  4034
12363  4035
12364  4036
12365  4037
12366  4038
12367  4039
12368  403A
12369  403B
12370  403C
12371  403D
12372  403E
12373  403F
12374  4040
12375  4041
12376  4042
12377  4043
12378  4044
12379  4045
12380  4046
12381  4047
12382  4048
12383  4049
12384  404A
12385  404B
12386  404C
12387  404D
12388  404E
12389  404F
12390  4050
12391  4051
12392  4052
12393  4053
12394  4054
12395  4055
12396  4056
12397  4057
12398  4058
12399  4059
12400  405A
12401  405B
12402  405C
12403  405D
12404  405E
12405  405F
12406  4060
12407  4061
12408  4062
12409  4063
12410  4064
12411  4065
12412  4066
12413  4067
12414  4068
12415  4069
12416  406A
12417  406B
12418  406C
12419  406D
12420  406E
12421  406F
12422  4070
12423  4071
12424  4072
12425  4073
12426  4074
12427  4075
12428  4076
12429  4077
12430  4078
12431  4079
12432  407A
12433  407B
12434  407C
12435  407D
12436  407E
12437  407F
12438  4080
12439  4081
12440  4082
12441  4083
12442  4084
12443  4085
12444  4086
12445  4087
12446  4088
12447  4089
12448  408A
12449  408B
12450  408C
12451  408D
12452  408E
12453  408F
12454  4090
12455  4091
12456  4092
12457  4093
12458  4094
12459  4095
12460  4096
12461  4097
12462  4098
12463  4099
12464  409A
12465  409B
12466  409C
12467  409D
12468  409E
12469  409F
12470  40A0
12471  40A1
12472  40A2
12473  40A3
12474  40A4
12475  40A5
12476  40A6
12477  40A7
12478  40A8
12479  40A9
12480  40AA
12481  40AB
12482  40AC
12483  40AD
12484  40AE
12485  40AF
12486  40B0
12487  40B1
12488  40B2
12489  40B3
12490  40B4
12491  40B5
12492  40B6
12493  40B7
12494  40B8
12495  40B9
12496  40BA
12497  40BB
12498  40BC
12499  40BD
12500  40BE
12501  40BF
12502  40C0
12503  40C1
12504  40C2
12505  40C3
12506  40C4
12507  40C5
12508  40C6
12509  40C7
12510  40C8
12511  40C9
12512  40CA
12513  40CB
12514  40CC
12515  40CD
12516  40CE
12517  40CF
12518  40D0
12519  40D1
12520  40D2
12521  40D3
12522  40D4
12523  40D5
12524  40D6
12525  40D7
12526  40D8
12527  40D9
12528  40DA
12529  40DB
12530  40DC
12531  40DD
12532  40DE
12533  40DF
12534  40E0
12535  40E1
12536  40E2
12537  40E3
12538  40E4
12539  40E5
12540  40E6
12541  40E7
12542  40E8
12543  40E9
12544  40EA
12545  40EB
12546  40EC
12547  40ED
12548  40EE
12549  40EF
12550  40F0
12551  40F1
12552  40F2
12553  40F3
12554  40F4
12555  40F5
12556  40F6
12557  40F7
12558  40F8
12559  40F9
12560  40FA
12561  40FB
12562  40FC
12563  40FD
12564  40FE
12565  40FF
12566  4100
12567  4101
12568  4102
12569  4103
12570  4104
12571  4105
12572  4106
12573  4107
12574  4108
12575  4109
12576  410A
12577  410B
12578  410C
12579  410D
12580  410E
12581  410F
12582  4110
12583  4111
12584  4112
12585  4113
12586  4114
12587  4115
12588  4116
12589  4117
12590  4118
12591  4119
12592  411A
12593  411B
12594  411C
12595  411D
12596  411E
12597  411F
12598  4120
12599  4121
12600  4122
12601  4123
12602  4124
12603  4125
12604  4126
12605  4127
12606  4128
12607  4129
12608  412A
12609  412B
12610  412C
12611  412D
12612  412E
12613  412F
12614  4130
12615  4131
12616  4132
12617  4133
12618  4134
12619  4135
12620  4136
12621  4137
12622  4138
12623  4139
12624  413A
12625  413B
12626  413C
12627  413D
12628  413E
12629  413F
12630  4140
12631  4141
12632  4142
12633  4143
12634  4144
12635  4145
12636  4146
12637  4147
12638  4148
12639  4149
12640  414A
12641  414B
12642  414C
12643  414D
12644  414E
12645  414F
12646  4150
12647  4151
12648  4152
12649  4153
12650  4154
12651  4155
12652  4156
12653  4157
12654  4158
12655  4159
12656  415A
12657  415B
12658  415C
12659  415D
12660  415E
12661  415F
12662  4160
12663  4161
12664  4162
12665  4163
12666  4164
12667  4165
12668  4166
12669  4167
12670  4168
12671  4169
12672  416A
12673  416B
12674  416C
12675  416D
12676  416E
12677  416F
12678  4170
12679  4171
12680  4172
12681  4173
12682  4174
12683  4175
12684  4176
12685  4177
12686  4178
12687  4179
12688  417A
12689  417B
12690  417C
12691  417D
12692  417E
12693  417F
12694  4180
12695  4181
12696  4182
12697  4183
12698  4184
12699  4185
12700  4186
12701  4187
12702  4188
12703  4189
12704  418A
12705  418B
12706  418C
12707  418D
12708  418E
12709  418F
12710  4190
12711  4191
12712  4192
12713  4193
12714  4194
12715  4195
12716  4196
12717  4197
12718  4198
12719  4199
12720  419A
12721  419B
12722  419C
12723  419D
12724  419E
12725  419F
12726  41A0
12727  41A1
12728  41A2
12729  41A3
12730  41A4
12731  41A5
12732  41A6
12733  41A7
12734  41A8
12735  41A9
12736  41AA
12737  41AB
12738  41AC
12739  41AD
12740  41AE
12741  41AF
12742  41B0
12743  41B1
12744  41B2
12745  41B3
12746  41B4
12747  41B5
12748  41B6
12749  41B7
12750  41B8
12751  41B9
12752  41BA
12753  41BB
12754  41BC
12755  41BD
12756  41BE
12757  41BF
12758  41C0
12759  41C1
12760  41C2
12761  41C3
12762  41C4
12763  41C5
12764  41C6
12765  41C7
12766  41C8
12767  41C9
12768  41CA
12769  41CB
12770  41CC
12771  41CD
12772  41CE
12773  41CF
12774  41D0
12775  41D1
12776  41D2
12777  41D3
12778  41D4
12779  41D5
12780  41D6
12781  41D7
12782  41D8
12783  41D9
12784  41DA
12785  41DB
12786  41DC
12787  41DD
12788  41DE
12789  41DF
12790  41E0
12791  41E1
12792  41E2
12793  41E3
12794  41E4
12795  41E5
12796  41E6
12797  41E7
12798  41E8
12799  41E9
12800  41EA
12801  41EB
12802  41EC
12803  41ED
12804  41EE
12805  41EF
12806  41F0
12807  41F1
12808  41F2
12809  41F3
12810  41F4
12811  41F5
12812  41F6
12813  41F7
12814  41F8
12815  41F9
12816  41FA
12817  41FB
12818  41FC
12819  41FD
12820  41FE
12821  41FF
12822  4200
12823  4201
12824  4202
12825  4203
12826  4204
12827  4205
12828  4206
12829  4207
12830  4208
12831  4209
12832  420A
12833  420B
12834  420C
12835  420D
12836  420E
12837  420F
12838  4210
12839  4211
12840  4212
12841  4213
12842  4214
12843  4215
12844  4216
12845  4217
12846  4218
12847  4219
12848  421A
12849  421B
12850  421C
12851  421D
12852  421E
12853  421F
12854  4220
12855  4221
12856  4222
12857  4223
12858  4224
12859  4225
12860  4226
12861  4227
12862  4228
12863  4229
12864  422A
12865  422B
12866  422C
12867  422D
12868  422E
12869  422F
12870  4230
12871  4231
12872  4232
12873  4233
12874  4234
12875  4235
12876  4236
12877  4237
12878  4238
12879  4239
12880  423A
12881  423B
12882  423C
12883  423D
12884  423E
12885  423F
12886  4240
12887  4241
12888  4242
12889  4243
12890  4244
12891  4245
12892  4246
12893  4247
12894  4248
12895  4249
12896  424A
12897  424B
12898  424C
12899  424D
12900  424E
12901  424F
12902  4250
12903  4251
12904  4252
12905  4253
12906  4254
12907  4255
12908  4256
12909  4257
12910  4258
12911  4259
12912  425A
12913  425B
12914  425C
12915  425D
12916  425E
12917  425F
12918  4260
12919  4261
12920  4262
12921  4263
12922  4264
12923  4265
12924  4266
12925  4267
12926  4268
12927  4269
12928  426A
12929  426B
12930  426C
12931  426D
12932  426E
12933  426F
12934  4270
12935  4271
12936  4272
12937  4273
12938  4274
12939  4275
12940  4276
12941  4277
12942  4278
12943  4279
12944  427A
12945  427B
12946  427C
12947  427D
12948  427E
12949  427F
12950  4280
12951  4281
12952  4282
12953  4283
12954  4284
12955  4285
12956  4286
12957  4287
12958  4288
12959  4289
12960  428A
12961  428B
12962  428C
12963  428D
12964  428E
12965  428F
12966  4290
12967  4291
12968  4292
12969  4293
12970  4294
12971  4295
12972  4296
12973  4297
12974  4298
12975  4299
12976  429A
12977  429B
12978  429C
12979  429D
12980  429E
12981  429F
12982  42A0
12983  42A1
12984  42A2
12985  42A3
12986  42A4
12987  42A5
12988  42A6
12989  42A7
12990  42A8
12991  42A9
12992  42AA
12993  42AB
12994  42AC
12995  42AD
12996  42AE
12997  42AF
12998  42B0
12999  42B1
13000  42B2
13001  42B3
13002  42B4
13003  42B5
13004  42B6
13005  42B7
13006  42B8
13007  42B9
13008  42BA
13009  42BB
13010  42BC
13011  42BD
13012  42BE
13013  42BF
13014  42C0
13015  42C1
13016  42C2
13017  42C3
13018  42C4
13019  42C5
13020  42C6
13021  42C7
13022  42C8
13023  42C9
13024  42CA
13025  42CB
13026  42CC
13027  42CD
13028  42CE
13029  42CF
13030  42D0
13031  42D1
13032  42D2
13033  42D3
13034  42D4
13035  42D5
13036  42D6
13037  42D7
13038  42D8
13039  42D9
13040  42DA
13041  42DB
13042  42DC
13043  42DD
13044  42DE
13045  42DF
13046  42E0
13047  42E1
13048  42E2
13049  42E3
13050  42E4
13051  42E5
13052  42E6
13053  42E7
13054  42E8
13055  42E9
13056  42EA
13057  42EB
13058  42EC
13059  42ED
13060  42EE
13061  42EF
13062  42F0
13063  42F1
13064  42F2
13065  42F3
13066  42F4
13067  42F5
13068  42F6
13069  42F7
13070  42F8
13071  42F9
13072  42FA
13073  42FB
13074  42FC
13075  42FD
13076  42FE
13077  42FF
13078  4300
13079  4301
13080  4302
13081  4303
13082  4304
13083  4305
13084  4306
13085  4307
13086  4308
13087  4309
13088  430A
13089  430B
13090  430C
13091  430D
13092  430E
13093  430F
13094  4310
13095  4311
13096  4312
13097  4313
13098  4314
13099  4315
13100  4316
13101  4317
13102  4318
13103  4319
13104  431A
13105  431B
13106  431C
13107  431D
13108  431E
13109  431F
13110  4320
13111  4321
13112  4322
13113  4323
13114  4324
13115  4325
13116  4326
13117  4327
13118  4328
13119  4329
13120  432A
13121  432B
13122  432C
13123  432D
13124  432E
13125  432F
13126  4330
13127  4331
13128  4332
13129  4333
13130  4334
13131  4335
13132  4336
13133  4337
13134  4338
13135  4339
13136  433A
13137  433B
13138  433C
13139  433D
13140  433E
13141  433F
13142  4340
13143  4341
13144  4342
13145  4343
13146  4344
13147  4345
13148  4346
13149  4347
13150  4348
13151  4349
13152  434A
13153  434B
13154  434C
13155  434D
13156  434E
13157  434F
13158  4350
13159  4351
13160  4352
13161  4353
13162  4354
13163  4355
13164  4356
13165  4357
13166  4358
13167  4359
13168  435A
13169  435B
13170  435C
13171  435D
13172  435E
13173  435F
13174  4360
13175  4361
13176  4362
13177  4363
13178  4364
13179  4365
13180  4366
13181  4367
13182  4368
13183  4369
13184  436A
13185  436B
13186  436C
13187  436D
13188  436E
13189  436F
13190  4370
13191  4371
13192  4372
13193  4373
13194  4374
13195  4375
13196  4376
13197  4377
13198  4378
13199  4379
13200  437A
13201  437B
13202  437C
13203  437D
13204  437E
13205  437F
13206  4380
13207  4381
13208  4382
13209  4383
13210  4384
13211  4385
13212  4386
13213  4387
13214  4388
13215  4389
13216  438A
13217  438B
13218  438C
13219  438D
13220  438E
13221  438F
13222  4390
13223  4391
13224  4392
13225  4393
13226  4394
13227  4395
13228  4396
13229  4397
13230  4398
13231  4399
13232  439A
13233  439B
13234  439C
13235  439D
13236  439E
13237  439F
13238  43A0
13239  43A1
13240  43A2
13241  43A3
13242  43A4
13243  43A5
13244  43A6
13245  43A7
13246  43A8
13247  43A9
13248  43AA
13249  43AB
13250  43AC
13251  43AD
13252  43AE
13253  43AF
13254  43B0
13255  43B1
13256  43B2
13257  43B3
13258  43B4
13259  43B5
13260  43B6
13261  43B7
13262  43B8
13263  43B9
13264  43BA
13265  43BB
13266  43BC
13267  43BD
13268  43BE
13269  43BF
13270  43C0
13271  43C1
13272  43C2
13273  43C3
13274  43C4
13275  43C5
13276  43C6
13277  43C7
13278  43C8
13279  43C9
13280  43CA
13281  43CB
13282  43CC
13283  43CD
13284  43CE
13285  43CF
13286  43D0
13287  43D1
13288  43D2
13289  43D3
13290  43D4
13291  43D5
13292  43D6
13293  43D7
13294  43D8
13295  43D9
13296  43DA
13297  43DB
13298  43DC
13299  43DD
13300  43DE
13301  43DF
13302  43E0
13303  43E1
13304  43E2
13305  43E3
13306  43E4
13307  43E5
13308  43E6
13309  43E7
13310  43E8
13311  43E9
13312  43EA
13313  43EB
13314  43EC
13315  43ED
13316  43EE
13317  43EF
13318  43F0
13319  43F1
13320  43F2
13321  43F3
13322  43F4
13323  43F5
13324  43F6
13325  43F7
13326  43F8
13327  43F9
13328  43FA
13329  43FB
13330  43FC
13331  43FD
13332  43FE
13333  43FF
13334  4400
13335  4401
13336  4402
13337  4403
13338  4404
13339  4405
13340  4406
13341  4407
13342  4408
13343  4409
13344  440A
13345  440B
13346  440C
13347  440D
13348  440E
13349  440F
13350  4410
13351  4411
13352  4412
13353  4413
13354  4414
13355  4415
13356  4416
13357  4417
13358  4418
13359  4419
13360  441A
13361  441B
13362  441C
13363  441D
13364  441E
13365  441F
13366  4420
13367  4421
13368  4422
13369  4423
13370  4424
13371  4425
13372  4426
13373  4427
13374  4428
13375  4429
13376  442A
13377  442B
13378  442C
13379  442D
13380  442E
13381  442F
13382  4430
13383  4431
13384  4432
13385  4433
13386  4434
13387  4435
13388  4436
13389  4437
13390  4438
13391  4439
13392  443A
13393  443B
13394  443C
13395  443D
13396  443E
13397  443F
13398  4440
13399  4441
13400  4442
13401  4443
13402  4444
13403  4445
13404  4446
13405  4447
13406  4448
13407  4449
13408  444A
13409  444B
13410  444C
13411  444D
13412  444E
13413  444F
13414  4450
13415  4451
13416  4452
13417  4453
13418  4454
13419  4455
13420  4456
13421  4457
13422  4458
13423  4459
13424  445A
13425  445B
13426  445C
13427  445D
13428  445E
13429  445F
13430  4460
13431  4461
13432  4462
13433  4463
13434  4464
13435  4465
13436  4466
13437  4467
13438  4468
13439  4469
13440  446A
13441  446B
13442  446C
13443  446D
13444  446E
13445  446F
13446  4470
13447  4471
13448  4472
13449  4473
13450  4474
13451  4475
13452  4476
13453  4477
13454  4478
13455  4479
13456  447A
13457  447B
13458  447C
13459  447D
13460  447E
13461  447F
13462  4480
13463  4481
13464  4482
13465  4483
13466  4484
13467  4485
13468  4486
13469  4487
13470  4488
13471  4489
13472  448A
13473  448B
13474  448C
13475  448D
13476  448E
13477  448F
13478  4490
13479  4491
13480  4492
13481  4493
13482  4494
13483  4495
13484  4496
13485  4497
13486  4498
13487  4499
13488  449A
13489  449B
13490  449C
13491  449D
13492  449E
13493  449F
13494  44A0
13495  44A1
13496  44A2
13497  44A3
13498  44A4
13499  44A5
13500  44A6
13501  44A7
13502  44A8
13503  44A9
13504  44AA
13505  44AB
13506  44AC
13507  44AD
13508  44AE
13509  44AF
13510  44B0
13511  44B1
13512  44B2
13513  44B3
13514  44B4
13515  44B5
13516  44B6
13517  44B7
13518  44B8
13519  44B9
13520  44BA
13521  44BB
13522  44BC
13523  44BD
13524  44BE
13525  44BF
13526  44C0
13527  44C1
13528  44C2
13529  44C3
13530  44C4
13531  44C5
13532  44C6
13533  44C7
13534  44C8
13535  44C9
13536  44CA
13537  44CB
13538  44CC
13539  44CD
13540  44CE
13541  44CF
13542  44D0
13543  44D1
13544  44D2
13545  44D3
13546  44D4
13547  44D5
13548  44D6
13549  44D7
13550  44D8
13551  44D9
13552  44DA
13553  44DB
13554  44DC
13555  44DD
13556  44DE
13557  44DF
13558  44E0
13559  44E1
13560  44E2
13561  44E3
13562  44E4
13563  44E5
13564  44E6
13565  44E7
13566  44E8
13567  44E9
13568  44EA
13569  44EB
13570  44EC
13571  44ED
13572  44EE
13573  44EF
13574  44F0
13575  44F1
13576  44F2
13577  44F3
13578  44F4
13579  44F5
13580  44F6
13581  44F7
13582  44F8
13583  44F9
13584  44FA
13585  44FB
13586  44FC
13587  44FD
13588  44FE
13589  44FF
13590  4500
13591  4501
13592  4502
13593  4503
13594  4504
13595  4505
13596  4506
13597  4507
13598  4508
13599  4509
13600  450A
13601  450B
13602  450C
13603  450D
13604  450E
13605  450F
13606  4510
13607  4511
13608  4512
13609  4513
13610  4514
13611  4515
13612  4516
13613  4517
13614  4518
13615  4519
13616  451A
13617  451B
13618  451C
13619  451D
13620  451E
13621  451F
13622  4520
13623  4521
13624  4522
13625  4523
13626  4524
13627  4525
13628  4526
13629  4527
13630  4528
13631  4529
13632  452A
13633  452B
13634  452C
13635  452D
13636  452E
13637  452F
13638  4530
13639  4531
13640  4532
13641  4533
13642  4534
13643  4535
13644  4536
13645  4537
13646  4538
13647  4539
13648  453A
13649  453B
13650  453C
13651  453D
13652  453E
13653  453F
13654  4540
13655  4541
13656  4542
13657  4543
13658  4544
13659  4545
13660  4546
13661  4547
13662  4548
13663  4549
13664  454A
13665  454B
13666  454C
13667  454D
13668  454E
13669  454F
13670  4550
13671  4551
13672  4552
13673  4553
13674  4554
13675  4555
13676  4556
13677  4557
13678  4558
13679  4559
13680  455A
13681  455B
13682  455C
13683  455D
13684  455E
13685  455F
13686  4560
13687  4561
13688  4562
13689  4563
13690  4564
13691  4565
13692  4566
13693  4567
13694  4568
13695  4569
13696  456A
13697  456B
13698  456C
13699  456D
13700  456E
13701  456F
13702  4570
13703  4571
13704  4572
13705  4573
13706  4574
13707  4575
13708  4576
13709  4577
13710  4578
13711  4579
13712  457A
13713  457B
13714  457C
13715  457D
13716  457E
13717  457F
13718  4580
13719  4581
13720  4582
13721  4583
13722  4584
13723  4585
13724  4586
13725  4587
13726  4588
13727  4589
13728  458A
13729  458B
13730  458C
13731  458D
13732  458E
13733  458F
13734  4590
13735  4591
13736  4592
13737  4593
13738  4594
13739  4595
13740  4596
13741  4597
13742  4598
13743  4599
13744  459A
13745  459B
13746  459C
13747  459D
13748  459E
13749  459F
13750  45A0
13751  45A1
13752  45A2
13753  45A3
13754  45A4
13755  45A5
13756  45A6
13757  45A7
13758  45A8
13759  45A9
13760  45AA
13761  45AB
13762  45AC
13763  45AD
13764  45AE
13765  45AF
13766  45B0
13767  45B1
13768  45B2
13769  45B3
13770  45B4
13771  45B5
13772  45B6
13773  45B7
13774  45B8
13775  45B9
13776  45BA
13777  45BB
13778  45BC
13779  45BD
13780  45BE
13781  45BF
13782  45C0
13783  45C1
13784  45C2
13785  45C3
13786  45C4
13787  45C5
13788  45C6
13789  45C7
13790  45C8
13791  45C9
13792  45CA
13793  45CB
13794  45CC
13795  45CD
13796  45CE
13797  45CF
13798  45D0
13799  45D1
13800  45D2
13801  45D3
13802  45D4
13803  45D5
13804  45D6
13805  45D7
13806  45D8
13807  45D9
13808  45DA
13809  45DB
13810  45DC
13811  45DD
13812  45DE
13813  45DF
13814  45E0
13815  45E1
13816  45E2
13817  45E3
13818  45E4
13819  45E5
13820  45E6
13821  45E7
13822  45E8
13823  45E9
13824  45EA
13825  45EB
13826  45EC
13827  45ED
13828  45EE
13829  45EF
13830  45F0
13831  45F1
13832  45F2
13833  45F3
13834  45F4
13835  45F5
13836  45F6
13837  45F7
13838  45F8
13839  45F9
13840  45FA
13841  45FB
13842  45FC
13843  45FD
13844  45FE
13845  45FF
13846  4600
13847  4601
13848  4602
13849  4603
13850  4604
13851  4605
13852  4606
13853  4607
13854  4608
13855  4609
13856  460A
13857  460B
13858  460C
13859  460D
13860  460E
13861  460F
13862  4610
13863  4611
13864  4612
13865  4613
13866  4614
13867  4615
13868  4616
13869  4617
13870  4618
13871  4619
13872  461A
13873  461B
13874  461C
13875  461D
13876  461E
13877  461F
13878  4620
13879  4621
13880  4622
13881  4623
13882  4624
13883  4625
13884  4626
13885  4627
13886  4628
13887  4629
13888  462A
13889  462B
13890  462C
13891  462D
13892  462E
13893  462F
13894  4630
13895  4631
13896  4632
13897  4633
13898  4634
13899  4635
13900  4636
13901  4637
13902  4638
13903  4639
13904  463A
13905  463B
13906  463C
13907  463D
13908  463E
13909  463F
13910  4640
13911  4641
13912  4642
13913  4643
13914  4644
13915  4645
13916  4646
13917  4647
13918  4648
13919  4649
13920  464A
13921  464B
13922  464C
13923  464D
13924  464E
13925  464F
13926  4650
13927  4651
13928  4652
13929  4653
13930  4654
13931  4655
13932  4656
13933  4657
13934  4658
13935  4659
13936  465A
13937  465B
13938  465C
13939  465D
13940  465E
13941  465F
13942  4660
13943  4661
13944  4662
13945  4663
13946  4664
13947  4665
13948  4666
13949  4667
13950  4668
13951  4669
13952  466A
13953  466B
13954  466C
13955  466D
13956  466E
13957  466F
13958  4670
13959  4671
13960  4672
13961  4673
13962  4674
13963  4675
13964  4676
13965  4677
13966  4678
13967  4679
13968  467A
13969  467B
13970  467C
13971  467D
13972  467E
13973  467F
13974  4680
13975  4681
13976  4682
13977  4683
13978  4684
13979  4685
13980  4686
13981  4687
13982  4688
13983  4689
13984  468A
13985  468B
13986  468C
13987  468D
13988  468E
13989  468F
13990  4690
13991  4691
13992  4692
13993  4693
13994  4694
13995  4695
13996  4696
13997  4697
13998  4698
13999  4699
14000  469A
14001  469B
14002  469C
14003  469D
14004  469E
14005  469F
14006  46A0
14007  46A1
14008  46A2
14009  46A3
14010  46A4
14011  46A5
14012  46A6
14013  46A7
14014  46A8
14015  46A9
14016  46AA
14017  46AB
14018  46AC
14019  46AD
14020  46AE
14021  46AF
14022  46B0
14023  46B1
14024  46B2
14025  46B3
14026  46B4
14027  46B5
14028  46B6
14029  46B7
14030  46B8
14031  46B9
14032  46BA
14033  46BB
14034  46BC
14035  46BD
14036  46BE
14037  46BF
14038  46C0
14039  46C1
14040  46C2
14041  46C3
14042  46C4
14043  46C5
14044  46C6
14045  46C7
14046  46C8
14047  46C9
14048  46CA
14049  46CB
14050  46CC
14051  46CD
14052  46CE
14053  46CF
14054  46D0
14055  46D1
14056  46D2
14057  46D3
14058  46D4
14059  46D5
14060  46D6
14061  46D7
14062  46D8
14063  46D9
14064  46DA
14065  46DB
14066  46DC
14067  46DD
14068  46DE
14069  46DF
14070  46E0
14071  46E1
14072  46E2
14073  46E3
14074  46E4
14075  46E5
14076  46E6
14077  46E7
14078  46E8
14079  46E9
14080  46EA
14081  46EB
14082  46EC
14083  46ED
14084  46EE
14085  46EF
14086  46F0
14087  46F1
14088  46F2
14089  46F3
14090  46F4
14091  46F5
14092  46F6
14093  46F7
14094  46F8
14095  46F9
14096  46FA
14097  46FB
14098  46FC
14099  46FD
14100  46FE
14101  46FF
14102  4700
14103  4701
14104  4702
14105  4703
14106  4704
14107  4705
14108  4706
14109  4707
14110  4708
14111  4709
14112  470A
14113  470B
14114  470C
14115  470D
14116  470E
14117  470F
14118  4710
14119  4711
14120  4712
14121  4713
14122  4714
14123  4715
14124  4716
14125  4717
14126  4718
14127  4719
14128  471A
14129  471B
14130  471C
14131  471D
14132  471E
14133  471F
14134  4720
14135  4721
14136  4722
14137  4723
14138  4724
14139  4725
14140  4726
14141  4727
14142  4728
14143  4729
14144  472A
14145  472B
14146  472C
14147  472D
14148  472E
14149  472F
14150  4730
14151  4731
14152  4732
14153  4733
14154  4734
14155  4735
14156  4736
14157  4737
14158  4738
14159  4739
14160  473A
14161  473B
14162  473C
14163  473D
14164  473E
14165  473F
14166  4740
14167  4741
14168  4742
14169  4743
14170  4744
14171  4745
14172  4746
14173  4747
14174  4748
14175  4749
14176  474A
14177  474B
14178  474C
14179  474D
14180  474E
14181  474F
14182  4750
14183  4751
14184  4752
14185  4753
14186  4754
14187  4755
14188  4756
14189  4757
14190  4758
14191  4759
14192  475A
14193  475B
14194  475C
14195  475D
14196  475E
14197  475F
14198  4760
14199  4761
14200  4762
14201  4763
14202  4764
14203  4765
14204  4766
14205  4767
14206  4768
14207  4769
14208  476A
14209  476B
14210  476C
14211  476D
14212  476E
14213  476F
14214  4770
14215  4771
14216  4772
14217  4773
14218  4774
14219  4775
14220  4776
14221  4777
14222  4778
14223  4779
14224  477A
14225  477B
14226  477C
14227  477D
14228  477E
14229  477F
14230  4780
14231  4781
14232  4782
14233  4783
14234  4784
14235  4785
14236  4786
14237  4787
14238  4788
14239  4789
14240  478A
14241  478B
14242  478C
14243  478D
14244  478E
14245  478F
14246  4790
14247  4791
14248  4792
14249  4793
14250  4794
14251  4795
14252  4796
14253  4797
14254  4798
14255  4799
14256  479A
14257  479B
14258  479C
14259  479D
14260  479E
14261  479F
14262  47A0
14263  47A1
14264  47A2
14265  47A3
14266  47A4
14267  47A5
14268  47A6
14269  47A7
14270  47A8
14271  47A9
14272  47AA
14273  47AB
14274  47AC
14275  47AD
14276  47AE
14277  47AF
14278  47B0
14279  47B1
14280  47B2
14281  47B3
14282  47B4
14283  47B5
14284  47B6
14285  47B7
14286  47B8
14287  47B9
14288  47BA
14289  47BB
14290  47BC
14291  47BD
14292  47BE
14293  47BF
14294  47C0
14295  47C1
14296  47C2
14297  47C3
14298  47C4
14299  47C5
14300  47C6
14301  47C7
14302  47C8
14303  47C9
14304  47CA
14305  47CB
14306  47CC
14307  47CD
14308  47CE
14309  47CF
14310  47D0
14311  47D1
14312  47D2
14313  47D3
14314  47D4
14315  47D5
14316  47D6
14317  47D7
14318  47D8
14319  47D9
14320  47DA
14321  47DB
14322  47DC
14323  47DD
14324  47DE
14325  47DF
14326  47E0
14327  47E1
14328  47E2
14329  47E3
14330  47E4
14331  47E5
14332  47E6
14333  47E7
14334  47E8
14335  47E9
14336  47EA
14337  47EB
14338  47EC
14339  47ED
14340  47EE
14341  47EF
14342  47F0
14343  47F1
14344  47F2
14345  47F3
14346  47F4
14347  47F5
14348  47F6
14349  47F7
14350  47F8
14351  47F9
14352  47FA
14353  47FB
14354  47FC
14355  47FD
14356  47FE
14357  47FF
14358  4800
14359  4801
14360  4802
14361  4803
14362  4804
14363  4805
14364  4806
14365  4807
14366  4808
14367  4809
14368  480A
14369  480B
14370  480C
14371  480D
14372  480E
14373  480F
14374  4810
14375  4811
14376  4812
14377  4813
14378  4814
14379  4815
14380  4816
14381  4817
14382  4818
14383  4819
14384  481A
14385  481B
14386  481C
14387  481D
14388  481E
14389  481F
14390  4820
14391  4821
14392  4822
14393  4823
14394  4824
14395  4825
14396  4826
14397  4827
14398  4828
14399  4829
14400  482A
14401  482B
14402  482C
14403  482D
14404  482E
14405  482F
14406  4830
14407  4831
14408  4832
14409  4833
14410  4834
14411  4835
14412  4836
14413  4837
14414  4838
14415  4839
14416  483A
14417  483B
14418  483C
14419  483D
14420  483E
14421  483F
14422  4840
14423  4841
14424  4842
14425  4843
14426  4844
14427  4845
14428  4846
14429  4847
14430  4848
14431  4849
14432  484A
14433  484B
14434  484C
14435  484D
14436  484E
14437  484F
14438  4850
14439  4851
14440  4852
14441  4853
14442  4854
14443  4855
14444  4856
14445  4857
14446  4858
14447  4859
14448  485A
14449  485B
14450  485C
14451  485D
14452  485E
14453  485F
14454  4860
14455  4861
14456  4862
14457  4863
14458  4864
14459  4865
14460  4866
14461  4867
14462  4868
14463  4869
14464  486A
14465  486B
14466  486C
14467  486D
14468  486E
14469  486F
14470  4870
14471  4871
14472  4872
14473  4873
14474  4874
14475  4875
14476  4876
14477  4877
14478  4878
14479  4879
14480  487A
14481  487B
14482  487C
14483  487D
14484  487E
14485  487F
14486  4880
14487  4881
14488  4882
14489  4883
14490  4884
14491  4885
14492  4886
14493  4887
14494  4888
14495  4889
14496  488A
14497  488B
14498  488C
14499  488D
14500  488E
14501  488F
14502  4890
14503  4891
14504  4892
14505  4893
14506  4894
14507  4895
14508  4896
14509  4897
14510  4898
14511  4899
14512  489A
14513  489B
14514  489C
14515  489D
14516  489E
14517  489F
14518  48A0
14519  48A1
14520  48A2
14521  48A3
14522  48A4
14523  48A5
14524  48A6
14525  48A7
14526  48A8
14527  48A9
14528  48AA
14529  48AB
14530  48AC
14531  48AD
14532  48AE
14533  48AF
14534  48B0
14535  48B1
14536  48B2
14537  48B3
14538  48B4
14539  48B5
14540  48B6
14541  48B7
14542  48B8
14543  48B9
14544  48BA
14545  48BB
14546  48BC
14547  48BD
14548  48BE
14549  48BF
14550  48C0
14551  48C1
14552  48C2
14553  48C3
14554  48C4
14555  48C5
14556  48C6
14557  48C7
14558  48C8
14559  48C9
14560  48CA
14561  48CB
14562  48CC
14563  48CD
14564  48CE
14565  48CF
14566  48D0
14567  48D1
14568  48D2
14569  48D3
14570  48D4
14571  48D5
14572  48D6
14573  48D7
14574  48D8
14575  48D9
14576  48DA
14577  48DB
14578  48DC
14579  48DD
14580  48DE
14581  48DF
14582  48E0
14583  48E1
14584  48E2
14585  48E3
14586  48E4
14587  48E5
14588  48E6
14589  48E7
14590  48E8
14591  48E9
14592  48EA
14593  48EB
14594  48EC
14595  48ED
14596  48EE
14597  48EF
14598  48F0
14599  48F1
14600  48F2
14601  48F3
14602  48F4
14603  48F5
14604  48F6
14605  48F7
14606  48F8
14607  48F9
14608  48FA
14609  48FB
14610  48FC
14611  48FD
14612  48FE
14613  48FF
14614  4900
14615  4901
14616  4902
14617  4903
14618  4904
14619  4905
14620  4906
14621  4907
14622  4908
14623  4909
14624  490A
14625  490B
14626  490C
14627  490D
14628  490E
14629  490F
14630  4910
14631  4911
14632  4912
14633  4913
14634  4914
14635  4915
14636  4916
14637  4917
14638  4918
14639  4919
14640  491A
14641  491B
14642  491C
14643  491D
14644  491E
14645  491F
14646  4920
14647  4921
14648  4922
14649  4923
14650  4924
14651  4925
14652  4926
14653  4927
14654  4928
14655  4929
14656  492A
14657  492B
14658  492C
14659  492D
14660  492E
14661  492F
14662  4930
14663  4931
14664  4932
14665  4933
14666  4934
14667  4935
14668  4936
14669  4937
14670  4938
14671  4939
14672  493A
14673  493B
14674  493C
14675  493D
14676  493E
14677  493F
14678  4940
14679  4941
14680  4942
14681  4943
14682  4944
14683  4945
14684  4946
14685  4947
14686  4948
14687  4949
14688  494A
14689  494B
14690  494C
14691  494D
14692  494E
14693  494F
14694  4950
14695  4951
14696  4952
14697  4953
14698  4954
14699  4955
14700  4956
14701  4957
14702  4958
14703  4959
14704  495A
14705  495B
14706  495C
14707  495D
14708  495E
14709  495F
14710  4960
14711  4961
14712  4962
14713  4963
14714  4964
14715  4965
14716  4966
14717  4967
14718  4968
14719  4969
14720  496A
14721  496B
14722  496C
14723  496D
14724  496E
14725  496F
14726  4970
14727  4971
14728  4972
14729  4973
14730  4974
14731  4975
14732  4976
14733  4977
14734  4978
14735  4979
14736  497A
14737  497B
14738  497C
14739  497D
14740  497E
14741  497F
14742  4980
14743  4981
14744  4982
14745  4983
14746  4984
14747  4985
14748  4986
14749  4987
14750  4988
14751  4989
14752  498A
14753  498B
14754  498C
14755  498D
14756  498E
14757  498F
14758  4990
14759  4991
14760  4992
14761  4993
14762  4994
14763  4995
14764  4996
14765  4997
14766  4998
14767  4999
14768  499A
14769  499B
14770  499C
14771  499D
14772  499E
14773  499F
14774  49A0
14775  49A1
14776  49A2
14777  49A3
14778  49A4
14779  49A5
14780  49A6
14781  49A7
14782  49A8
14783  49A9
14784  49AA
14785  49AB
14786  49AC
14787  49AD
14788  49AE
14789  49AF
14790  49B0
14791  49B1
14792  49B2
14793  49B3
14794  49B4
14795  49B5
14796  49B6
14797  49B7
14798  49B8
14799  49B9
14800  49BA
14801  49BB
14802  49BC
14803  49BD
14804  49BE
14805  49BF
14806  49C0
14807  49C1
14808  49C2
14809  49C3
14810  49C4
14811  49C5
14812  49C6
14813  49C7
14814  49C8
14815  49C9
14816  49CA
14817  49CB
14818  49CC
14819  49CD
14820  49CE
14821  49CF
14822  49D0
14823  49D1
14824  49D2
14825  49D3
14826  49D4
14827  49D5
14828  49D6
14829  49D7
14830  49D8
14831  49D9
14832  49DA
14833  49DB
14834  49DC
14835  49DD
14836  49DE
14837  49DF
14838  49E0
14839  49E1
14840  49E2
14841  49E3
14842  49E4
14843  49E5
14844  49E6
14845  49E7
14846  49E8
14847  49E9
14848  49EA
14849  49EB
14850  49EC
14851  49ED
14852  49EE
14853  49EF
14854  49F0
14855  49F1
14856  49F2
14857  49F3
14858  49F4
14859  49F5
14860  49F6
14861  49F7
14862  49F8
14863  49F9
14864  49FA
14865  49FB
14866  49FC
14867  49FD
14868  49FE
14869  49FF
14870  4A00
14871  4A01
14872  4A02
14873  4A03
14874  4A04
14875  4A05
14876  4A06
14877  4A07
14878  4A08
14879  4A09
14880  4A0A
14881  4A0B
14882  4A0C
14883  4A0D
14884  4A0E
14885  4A0F
14886  4A10
14887  4A11
14888  4A12
14889  4A13
14890  4A14
14891  4A15
14892  4A16
14893  4A17
14894  4A18
14895  4A19
14896  4A1A
14897  4A1B
14898  4A1C
14899  4A1D
14900  4A1E
14901  4A1F
14902  4A20
14903  4A21
14904  4A22
14905  4A23
14906  4A24
14907  4A25
14908  4A26
14909  4A27
14910  4A28
14911  4A29
14912  4A2A
14913  4A2B
14914  4A2C
14915  4A2D
14916  4A2E
14917  4A2F
14918  4A30
14919  4A31
14920  4A32
14921  4A33
14922  4A34
14923  4A35
14924  4A36
14925  4A37
14926  4A38
14927  4A39
14928  4A3A
14929  4A3B
14930  4A3C
14931  4A3D
14932  4A3E
14933  4A3F
14934  4A40
14935  4A41
14936  4A42
14937  4A43
14938  4A44
14939  4A45
14940  4A46
14941  4A47
14942  4A48
14943  4A49
14944  4A4A
14945  4A4B
14946  4A4C
14947  4A4D
14948  4A4E
14949  4A4F
14950  4A50
14951  4A51
14952  4A52
14953  4A53
14954  4A54
14955  4A55
14956  4A56
14957  4A57
14958  4A58
14959  4A59
14960  4A5A
14961  4A5B
14962  4A5C
14963  4A5D
14964  4A5E
14965  4A5F
14966  4A60
14967  4A61
14968  4A62
14969  4A63
14970  4A64
14971  4A65
14972  4A66
14973  4A67
14974  4A68
14975  4A69
14976  4A6A
14977  4A6B
14978  4A6C
14979  4A6D
14980  4A6E
14981  4A6F
14982  4A70
14983  4A71
14984  4A72
14985  4A73
14986  4A74
14987  4A75
14988  4A76
14989  4A77
14990  4A78
14991  4A79
14992  4A7A
14993  4A7B
14994  4A7C
14995  4A7D
14996  4A7E
14997  4A7F
14998  4A80
14999  4A81
15000  4A82
15001  4A83
15002  4A84
15003  4A85
15004  4A86
15005  4A87
15006  4A88
15007  4A89
15008  4A8A
15009  4A8B
15010  4A8C
15011  4A8D
15012  4A8E
15013  4A8F
15014  4A90
15015  4A91
15016  4A92
15017  4A93
15018  4A94
15019  4A95
15020  4A96
15021  4A97
15022  4A98
15023  4A99
15024  4A9A
15025  4A9B
15026  4A9C
15027  4A9D
15028  4A9E
15029  4A9F
15030  4AA0
15031  4AA1
15032  4AA2
15033  4AA3
15034  4AA4
15035  4AA5
15036  4AA6
15037  4AA7
15038  4AA8
15039  4AA9
15040  4AAA
15041  4AAB
15042  4AAC
15043  4AAD
15044  4AAE
15045  4AAF
15046  4AB0
15047  4AB1
15048  4AB2
15049  4AB3
15050  4AB4
15051  4AB5
15052  4AB6
15053  4AB7
15054  4AB8
15055  4AB9
15056  4ABA
15057  4ABB
15058  4ABC
15059  4ABD
15060  4ABE
15061  4ABF
15062  4AC0
15063  4AC1
15064  4AC2
15065  4AC3
15066  4AC4
15067  4AC5
15068  4AC6
15069  4AC7
15070  4AC8
15071  4AC9
15072  4ACA
15073  4ACB
15074  4ACC
15075  4ACD
15076  4ACE
15077  4ACF
15078  4AD0
15079  4AD1
15080  4AD2
15081  4AD3
15082  4AD4
15083  4AD5
15084  4AD6
15085  4AD7
15086  4AD8
15087  4AD9
15088  4ADA
15089  4ADB
15090  4ADC
15091  4ADD
15092  4ADE
15093  4ADF
15094  4AE0
15095  4AE1
15096  4AE2
15097  4AE3
15098  4AE4
15099  4AE5
15100  4AE6
15101  4AE7
15102  4AE8
15103  4AE9
15104  4AEA
15105  4AEB
15106  4AEC
15107  4AED
15108  4AEE
15109  4AEF
15110  4AF0
15111  4AF1
15112  4AF2
15113  4AF3
15114  4AF4
15115  4AF5
15116  4AF6
15117  4AF7
15118  4AF8
15119  4AF9
15120  4AFA
15121  4AFB
15122  4AFC
15123  4AFD
15124  4AFE
15125  4AFF
15126  4B00
15127  4B01
15128  4B02
15129  4B03
15130  4B04
15131  4B05
15132  4B06
15133  4B07
15134  4B08
15135  4B09
15136  4B0A
15137  4B0B
15138  4B0C
15139  4B0D
15140  4B0E
15141  4B0F
15142  4B10
15143  4B11
15144  4B12
15145  4B13
15146  4B14
15147  4B15
15148  4B16
15149  4B17
15150  4B18
15151  4B19
15152  4B1A
15153  4B1B
15154  4B1C
15155  4B1D
15156  4B1E
15157  4B1F
15158  4B20
15159  4B21
15160  4B22
15161  4B23
15162  4B24
15163  4B25
15164  4B26
15165  4B27
15166  4B28
15167  4B29
15168  4B2A
15169  4B2B
15170  4B2C
15171  4B2D
15172  4B2E
15173  4B2F
15174  4B30
15175  4B31
15176  4B32
15177  4B33
15178  4B34
15179  4B35
15180  4B36
15181  4B37
15182  4B38
15183  4B39
15184  4B3A
15185  4B3B
15186  4B3C
15187  4B3D
15188  4B3E
15189  4B3F
15190  4B40
15191  4B41
15192  4B42
15193  4B43
15194  4B44
15195  4B45
15196  4B46
15197  4B47
15198  4B48
15199  4B49
15200  4B4A
15201  4B4B
15202  4B4C
15203  4B4D
15204  4B4E
15205  4B4F
15206  4B50
15207  4B51
15208  4B52
15209  4B53
15210  4B54
15211  4B55
15212  4B56
15213  4B57
15214  4B58
15215  4B59
15216  4B5A
15217  4B5B
15218  4B5C
15219  4B5D
15220  4B5E
15221  4B5F
15222  4B60
15223  4B61
15224  4B62
15225  4B63
15226  4B64
15227  4B65
15228  4B66
15229  4B67
15230  4B68
15231  4B69
15232  4B6A
15233  4B6B
15234  4B6C
15235  4B6D
15236  4B6E
15237  4B6F
15238  4B70
15239  4B71
15240  4B72
15241  4B73
15242  4B74
15243  4B75
015244  000553        
015245  000554  var hFonts[54] ;
015246  000555  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15247  262A
15248  262B
15249  262C
15250  262D
15251  262E
15252  262F
15253  2630
15254  2631
15255  2632
15256  2633
15257  2634
15258  2635
15259  2636
15260  2637
15261  2638
15262  2639
15263  263A
15264  263B
15265  263C
15266  263D
15267  263E
15268  263F
15269  2640
15270  2641
15271  2642
15272  2643
15273  2644
15274  2645
15275  2646
15276  2647
15277  2648
15278  2649
15279  264A
15280  264B
15281  264C
15282  264D
15283  264E
15284  264F
15285  2650
15286  2651
15287  2652
15288  2653
15289  2654
15290  2655
15291  2656
15292  2657
15293  2658
15294  2659
15295  265A
15296  265B
15297  265C
15298  265D
15299  265E
15300  265F
15301  2660
15302  2661
15303  2662
15304  2663
15305  2664
15306  2665
15307  2666
15308  2667
15309  2668
15310  2669
15311  266A
15312  266B
15313  266C
15314  266D
15315  266E
15316  266F
15317  2670
15318  2671
15319  2672
15320  2673
15321  2674
15322  2675
15323  2676
15324  2677
15325  2678
15326  2679
15327  267A
15328  267B
15329  267C
15330  267D
15331  267E
15332  267F
15333  2680
15334  2681
15335  2682
15336  2683
15337  2684
15338  2685
15339  2686
15340  2687
15341  2688
15342  2689
15343  268A
15344  268B
15345  268C
15346  268D
15347  268E
15348  268F
15349  2690
15350  2691
15351  2692
15352  2693
15353  2694
15354  2695
015355  000556  // Start P2.inc
015356  000557  var oObjects[MaxTotObjects+1] ;                 // address of objects
015357  000558  var CurrentForm ;
015358  000559  var TouchXpos, TouchYpos ;
015359  000560  var InputType, TouchState, CurInputData, pInputIndex ;
015360  000561  var comRX[40], cmd[CMDLenMAX] ;
015361  000562        
015362  000563  var InputCS, OutputCS ;
015363  000564        
015364  000565        
015365  000566        
015366  000567  func seroutCS(var op)
015367  000568      serout(op) ;
015368  000569      OutputCS ^= op ;
015369  000570  endfunc
015370  000571        
015371  000572  func nak0()
015372  000573      serout(NAK) ;
015373  000574      InputCS := 0 ;
015374  000575  endfunc
015375  000576        
015376  000577  func seroutOcs()
015377  000578      serout(OutputCS) ;
015378  000579      OutputCS := 0 ;
015379  000580  endfunc
015380  000581        
015381  000582  func SendReport(var id, var objt, var objn, var val)
015382  000583      seroutCS(id) ;
015383  000584      seroutCS(objt) ;
015384  000585      seroutCS(objn) ;
015385  000586      seroutCS(val >> 8) ; // first 8 bits
015386  000587      seroutCS(val) ;
015387  000588      seroutOcs() ;
015388  000589  endfunc
015389  000590        
015390  000591        
015391  000592  func ReadObject(var ObjectType, var ObjectIdx)
015392  000593      var j, k, Objects ;
015393  000594      Objects := *(oObjects+ObjectType) ;
015394  000595        
015395  000596      j := 2 + ObjectIdx * 2 + Objects ;
015396  000597       if (ObjectType == tForm)
015397  000598          k := CurrentForm ;
015398  000599      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015399  000600          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015400  000601      else if (ObjectType == tStrings)
015401  000602          k := stringsCV[ObjectIdx];
015402  000603          else
015403  000604          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015404  000605          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015405  000606                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015406  000607      endif
015407  000608      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015408  000609  endfunc
015409  000610        
015410  000611        
015411  000612  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015412  000613      var i, j, k, Objects ;
015413  000614      ObjectType &= 0x3f ;
015414  000615      if (ObjectType == tForm)
015415  000616          ActivateForm(ObjectIdx) ;
015416  000617      else
015417  000618          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015418  000619          i := *(Objects) ;
015419  000620          switch (ObjectType)
015420  000621              case tWinButton :
015421  000622                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015422  000623                  break ;
015423  000624              case tUserButton :
015424  000625                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015425  000626                  break ;
015426  000627              default : j := -1 ;
015427  000628          endswitch
015428  000629          if (j != -1)
015429  000630              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015430  000631              NewVal := NewVal << 1 ;
015431  000632              if (OVF())      // button group index change
015432  000633                  if (*(j+InputData+Ofs_IPD_P1))
015433  000634                      k &= 1 ;    // mask off old group index for momentary
015434  000635                  else
015435  000636                      k &= 3 ;    // mask off old group index for toggle
015436  000637                  endif
015437  000638              else            // normal set
015438  000639                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015439  000640                  k &= 0xfffc ;    // retain only group index for state set
015440  000641              endif
015441  000642              NewVal |= k ;
015442  000643          endif
015443  000644           if (ObjectType == tLeddigits)
015444  000645              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015445  000646              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015446  000647          else if (ObjectType == tStrings)
015447  000648              PrintStrings(ObjectIdx, NewVal, 0);
015448  000649          else
015449  000650              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015450  000651              img_Show(hndl, i) ; // will only display if form is current
015451  000652          endif
015452  000653      endif
015453  000654  endfunc
015454  000655        
015455  000656  func TurnOffButtons(var group)
015456  000657      var j, k, l;
015457  000658      for (j := 0; j < nInputs; j++)
015458  000659          k := j*IPDatasize ;
015459  000660          if (*(InputData+k+Ofs_IPD_P2) == group)
015460  000661              l := -1 ;
015461  000662               if (*(InputData+k) == tWinButton)
015462  000663                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015463  000664                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015464  000665                  img_Show(hndl, l);      // only shows on current form
015465  000666              else if (*(InputData+k) == tUserButton)
015466  000667                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015467  000668                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015468  000669                  img_Show(hndl, l);      // only shows on current form
015469  000670              endif
015470  000671          endif
015471  000672      next
015472  000673  endfunc
015473  000674        
015474  000675        
015475  000676  // WARNING, this code will crash if newval exceeds maximum displayable number
015476  000677  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015477  000678      var i, j, k, l, lb, newval ;
015478  000679      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015479  000680      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015480  000681      i := -1 ;
015481  000682      j := *(typeptr) ;
015482  000683      repeat
015483  000684          typeptr += 2 ;
015484  000685          i++ ;
015485  000686          until (*(typeptr) == imgidx);
015486  000687      j := setptr + i*10 ;
015487  000688        
015488  000689      imgidx++ ;
015489  000690      l := 1 ;
015490  000691      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015491  000692          l *= 10 ;
015492  000693      next
015493  000694      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015494  000695      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015495  000696          k := newval / l ;
015496  000697          newval -= k * l ;
015497  000698          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015498  000699              if (k == 0)
015499  000700                  k := 10 ;
015500  000701              else
015501  000702                  lb := 0 ;
015502  000703              endif
015503  000704          endif
015504  000705          l /= 10 ;
015505  000706          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015506  000707          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015507  000708          img_Show(hndl, imgidx);
015508  000709      next
015509  000710  endfunc
015510  000711        
015511  000712        
015512  000713  func ActivateForm(var newform)
015513  000714      var i, j, *p ;
015514  000715        
015515  000716      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015516  000717          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015517  000718              if (img_GetWord(hndl, i, IMAGE_TAG))
015518  000719                  img_Disable(hndl,i) ;
015519  000720              endif
015520  000721          next
015521  000722      endif
015522  000723      CurrentForm := newform ;
015523  000724      // display newform image or clear to image color
015524  000725      if (FormBGcolors[CurrentForm] != ColorBGimage)
015525  000726          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015526  000727          gfx_Cls() ;
015527  000728          DoGFXObjects() ;                                    // display GFX 'widgets'
015528  000729      endif
015529  000730        
015530  000731      // enable inputs
015531  000732      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015532  000733          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015533  000734          if (j)
015534  000735              j-- ;
015535  000736              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015536  000737              //if (j != tKeyboard)
015537  000738              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015538  000739                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015539  000740              endif
015540  000741              img_Show(hndl,i) ; // show initialy, if required
015541  000742              if (j == tForm)
015542  000743                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015543  000744              else if (j == tLeddigits)
015544  000745                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015545  000746              endif
015546  000747          endif
015547  000748      next
015548  000749      for (i := 0; i < nStrings; i++)
015549  000750          if (stringsCV[i] != -1)
015550  000751              WriteObject(tStrings, i, stringsCV[i]) ;
015551  000752          endif
015552  000753      next
015553  000754        
015554  000755  endfunc
015555  000756        
015556  000757  func UpdateObjects(var newval)
015557  000758      var IPidx, otherOBJ ;
015558  000759      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015559  000760        
015560  000761          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015561  000762              img_Show(hndl, *(pInputIndex));      // only shows on current form
015562  000763          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015563  000764              if (*(CurInputData+Ofs_IPD_P1))
015564  000765                  newval &= 1;
015565  000766              else
015566  000767                  newval &= 3;
015567  000768              endif
015568  000769              if (newval > 1) newval := 1;
015569  000770          endif
015570  000771          IPidx := *(CurInputData+TouchState) ;
015571  000772          while(IPidx != 0)
015572  000773              otherOBJ := IPidx + InputData;
015573  000774              if (*(otherOBJ) == OT_REPORT)
015574  000775          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015575  000776              else if (*(otherOBJ) == OT_MAGIC)
015576  000777                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015577  000778                  IPidx(newval) ;
015578  000779              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015579  000780                  if (*(otherOBJ) == OT_ACTIVATE)
015580  000781                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015581  000782                      InputType := tForm ;
015582  000783                  else if (*(otherOBJ) == OT_SETCONST)
015583  000784                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015584  000785                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015585  000786                  else if (*(otherOBJ) == OT_SETANOTHER)
015586  000787                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015587  000788                  else if (*(otherOBJ) == OT_PREVFRAME)
015588  000789                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015589  000790                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015590  000791                      endif
015591  000792                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015592  000793                  else if (*(otherOBJ) == OT_NEXTFRAME)
015593  000794                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015594  000795                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015595  000796                      endif
015596  000797                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015597  000798                  else if (*(otherOBJ) == OT_PREVSTRING)
015598  000799                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015599  000800                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015600  000801                      endif
015601  000802                  else if (*(otherOBJ) == OT_NEXTSTRING)
015602  000803                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015603  000804                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015604  000805                      endif
015605  000806                  endif
015606  000807              endif
015607  000808              IPidx := *(otherOBJ+TouchState) ;
015608  000809          wend
015609  000810      endif
015610  000811  endfunc
015611  000812        
015612  000813  // End P2.inc
015613  000814  func DoGFXObjects()
015614  000815  endfunc
015615  000816        
015616  000817  // Start P3.inc
015617  000818  func main()
015618  000819      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015619  000820        
015620  000821      putstr("Mounting...\n");
015621  000822      if (!(file_Mount()))
015622  000823          while(!(file_Mount()))
015623  000824              putstr("Drive not mounted...");
015624  000825              pause(200);
015625  000826              gfx_Cls();
015626  000827              pause(200);
015627  000828          wend
015628  000829      endif
015629  000830  //    gfx_MoveTo(0, 0);
015630  000831  //    print(mem_Heap()," ") ;
015631  000832  //    gfx_TransparentColour(0x0020);
015632  000833  //    gfx_Transparency(ON);
015633  000834        
015634  000835      gfx_ScreenMode(LANDSCAPE) ;
015635  000836        
015636  000837      // open image control
015637  000838      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015638  000839        
015639  000840      // init 'constants'
015640  000841  // End P3.inc
015641  000842        
015642  000843      oObjects[tDipSwitch] := oDipSwitchs ;
015643  000844      oObjects[tKnob] := oKnobs ;
015644  000845      oObjects[tRockerSwitch] := oRockerSwitchs ;
015645  000846      oObjects[tRotarySwitch] := oRotarySwitchs ;
015646  000847      oObjects[tGSlider] := oGSliders ;
015647  000848      oObjects[tTrackbar] := oTrackbars ;
015648  000849      oObjects[tWinButton] := oWinButtons ;
015649  000850      oObjects[tAngularmeter] := oAngularmeters ;
015650  000851      oObjects[tCoolgauge] := oCoolgauges ;
015651  000852      oObjects[tCustomdigits] := oCustomdigitss ;
015652  000853      oObjects[tForm] := oForms ;
015653  000854      oObjects[tGauge] := oGauges ;
015654  000855      oObjects[tImage] := oImages ;
015655  000856      oObjects[tKeyboard] := oKeyboards ;
015656  000857      oObjects[tLed] := oLeds ;
015657  000858      oObjects[tLeddigits] := oLeddigitss ;
015658  000859      oObjects[tMeter] := oMeters ;
015659  000860      oObjects[tStrings] := oStringss ;
015660  000861      oObjects[tThermometer] := oThermometers ;
015661  000862      oObjects[tUserled] := oUserleds ;
015662  000863      oObjects[tVideo] := oVideos ;
015663  000864      oObjects[tStaticText] := oStaticTexts ;
015664  000865      oObjects[tSounds] := oSoundss ;
015665  000866      oObjects[tTimer] := oTimers ;
015666  000867      oObjects[tSpectrum] := oSpectrums ;
015667  000868      oObjects[tTank] := oTanks ;
015668  000869      oObjects[tUserImages] := oUserImagess ;
015669  000870      oObjects[tPinOutput] := oPinOutputs ;
015670  000871      oObjects[tPinInput] := oPinInputs ;
015671  000872      oObjects[t4Dbutton] := o4Dbuttons ;
015672  000873      oObjects[tAniButton] := oAniButtons ;
015673  000874      oObjects[tColorPicker] := oColorPickers ;
015674  000875      oObjects[tUserButton] := oUserButtons ;
015675  000876      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015676  000877      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015677  000878      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015678  000879      hFonts[3] := FONT3 ;
015679  000880      hFonts[4] := FONT3 ;
015680  000881      hFonts[6] := FONT3 ;
015681  000882      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015682  000883      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015683  000884      hFonts[13] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015684  000885      hFonts[14] := FONT3 ;
015685  000886      hFonts[15] := FONT3 ;
015686  000887      hFonts[16] := FONT3 ;
015687  000888      hFonts[24] := FONT3 ;
015688  000889      hFonts[25] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015689  000890      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015690  000891      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015691  000892      hFonts[49] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015692  000893      hFonts[50] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015693  000894      hFonts[51] := FONT3 ;
015694  000895      hFonts[52] := FONT3 ;
015695  000896      hFonts[7] := hFonts[37] ;
015696  000897      hFonts[8] := hFonts[37] ;
015697  000898      hFonts[9] := hFonts[0] ;
015698  000899      hFonts[17] := hFonts[11] ;
015699  000900      hFonts[18] := hFonts[11] ;
015700  000901      hFonts[19] := hFonts[11] ;
015701  000902      hFonts[26] := hFonts[25] ;
015702  000903      hFonts[27] := hFonts[25] ;
015703  000904      hFonts[29] := hFonts[11] ;
015704  000905      hFonts[30] := hFonts[11] ;
015705  000906      hFonts[32] := hFonts[31] ;
015706  000907      hFonts[34] := hFonts[0] ;
015707  000908      hFonts[36] := hFonts[0] ;
015708  000909      hFonts[38] := hFonts[37] ;
015709  000910      hFonts[39] := hFonts[37] ;
015710  000911      hFonts[40] := hFonts[0] ;
015711  000912      hFonts[41] := hFonts[0] ;
015712  000913      hFonts[42] := hFonts[0] ;
015713  000914      hFonts[43] := hFonts[37] ;
015714  000915      hFonts[44] := hFonts[37] ;
015715  000916      hFonts[45] := hFonts[37] ;
015716  000917      hFonts[46] := hFonts[13] ;
015717  000918      hFonts[47] := hFonts[13] ;
015718  000919      hFonts[48] := hFonts[13] ;
015719  000920      hFonts[53] := hFonts[50] ;
015720  000921  // Start P4.inc
015721  000922      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015722  000923      // init comms
015723  000924      com_Init(comRX,CMDLenMAX,0);
015724  000925      com_SetBaud(COM0,19886);
015725  000926      com_TXbuffer(comTX, 100, 0);
015726  000927      snd_BufSize(2) ;
015727  000928      // tag 'real' objects
015728  000929      for (i := 0; i <= MaxTotObjects; i++)
015729  000930          if (   (i != tSounds)
015730  000931              && (i != tTimer)
015731  000932              && (i != tPinOutput)
015732  000933              && (i != tPinInput) )
015733  000934              TouchXpos := oObjects[i] ;
015734  000935              TouchYpos := *(TouchXpos) ;
015735  000936              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015736  000937                  oldn := *(TouchXpos+ImageTouched*2) ;
015737  000938                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015738  000939                  if (oldn != -1)
015739  000940                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015740  000941                      img_Disable(hndl, oldn) ;
015741  000942                  endif
015742  000943              next
015743  000944          endif
015744  000945      next
015745  000946        
015746  000947      // display initial form
015747  000948      CurrentForm := -1 ;
015748  000949      ActivateForm(0) ; // need to change this according to first actual form
015749  000950        
015750  000951  // End P4.inc
015751  000952  // Start P5.inc
015752  000953      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015753  000954      oldn := -1 ;
015754  000955      repeat
015755  000956        
015756  000957          // check comms for command, how to NAK invalid command
015757  000958          if (com_Count() != 0)
015758  000959              i := serin() ;
015759  000960              InputCS ^= i ;               // update checksum
015760  000961              if (   (cmdi > 2)
015761  000962                  && (cmd[0] == WRITE_STRU) )
015762  000963                  j := (cmdi-1) >> 1 + 2 ;
015763  000964                  if (j == CMDLenMAX)    // max length exceeded
015764  000965                      nak0() ;
015765  000966                      cmdi := -1 ;
015766  000967                  else if (cmdi & 1)
015767  000968                      cmd[j] := i ;
015768  000969                      if (cmd[2] == 0)    // if string complete
015769  000970                          if (InputCS)
015770  000971                              nak0() ;
015771  000972                          else
015772  000973                              if (cmd[0] == WRITE_STRU)
015773  000974                              cmd[j] := 0 ;                     // terminate it
015774  000975                              PrintStrings(cmd[1], &cmd[3], 1) ;
015775  000976                              serout(ACK) ;
015776  000977                              else
015777  000978                              endif
015778  000979                          endif
015779  000980                          cmdi := -1 ;
015780  000981                      endif
015781  000982                  else
015782  000983                      cmd[j] := cmd[j] << 8 + i ;
015783  000984                      cmd[2]-- ;          // dec length
015784  000985                  endif
015785  000986                  cmdi++ ;
015786  000987              else // not unicode string
015787  000988                  cmd[cmdi++] := i ;
015788  000989                   if (cmd[0] == WRITE_STR)                  // Ansi String
015789  000990                      if (cmdi == CMDLenMAX)      // max length exceeded
015790  000991                          nak0() ;
015791  000992                          cmdi := 0 ;
015792  000993                      else if (cmdi > 2)
015793  000994                          if (cmd[2] == -1)
015794  000995                              if (InputCS)
015795  000996                                  nak0() ;
015796  000997                              else
015797  000998                                  if (cmd[0] == WRITE_STR)
015798  000999                                  cmd[cmdi-1] := 0 ;                     // terminate it
015799  001000                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015800  001001                                  serout(ACK) ;
015801  001002                                  else
015802  001003                                  endif
015803  001004                              endif
015804  001005                              cmdi := 0 ;
015805  001006                          else
015806  001007                              cmd[2]-- ;          // dec length
015807  001008                          endif
015808  001009                      endif
015809  001010                  else if (   (cmd[0] == READ_OBJ)
015810  001011                           && (cmdi == 4)         )
015811  001012                      if (InputCS)
015812  001013                          nak0() ;
015813  001014                      else
015814  001015                          ReadObject(cmd[1], cmd[2]) ;
015815  001016                      endif
015816  001017                      cmdi := 0 ;
015817  001018                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015818  001019                           && (cmdi == 6)          )
015819  001020                      if (InputCS)
015820  001021                          nak0() ;
015821  001022                      else
015822  001023                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015823  001024                          serout(ACK) ;
015824  001025                      endif
015825  001026                      cmdi := 0 ;
015826  001027                  else if (   (cmd[0] == WRITE_CONTRAST)
015827  001028                           && (cmdi == 3)         )
015828  001029                      if (InputCS)
015829  001030                          nak0() ;
015830  001031                      else
015831  001032                          gfx_Contrast(cmd[1]) ;
015832  001033                          serout(ACK) ;
015833  001034                      endif
015834  001035                      cmdi := 0 ;
015835  001036                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
015836  001037                      nak0() ;
015837  001038                      cmdi := 0 ;
015838  001039                  endif
015839  001040              endif   // not unicode string
015840  001041          endif   // a character is available
015841  001042        
015842  001043        
015843  001044      // touch code processing
015844  001045        
015845  001046          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
015846  001047          ImageTouched := img_Touched(hndl,-1) ;
015847  001048          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
015848  001049              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
015849  001050                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
015850  001051              endif
015851  001052              if (TouchStatus != TOUCH_RELEASED)        // if not released
015852  001053                  if (oldn != -1)
015853  001054                      ImageTouched := oldn ;
015854  001055                  else
015855  001056                      if (oldn != ImageTouched)
015856  001057                  oldn := ImageTouched ;
015857  001058                          TouchStatus := TOUCH_PRESSED ;
015858  001059                      endif
015859  001060                  endif
015860  001061                  TouchXpos  := touch_Get(TOUCH_GETX);
015861  001062                  TouchYpos  := touch_Get(TOUCH_GETY);
015862  001063                  TouchState := Ofs_IPD_DOWN ;
015863  001064              else
015864  001065                  ImageTouched := oldn ;                     // simulate release of what we touched
015865  001066                  oldn := -1 ;                    // prevent double release
015866  001067                  TouchState := Ofs_IPD_RELEASE ;
015867  001068              endif
015868  001069              if (ImageTouched != -1)
015869  001070                          CurInputData := InputControls[ImageTouched] + InputData;
015870  001071                          InputType := *(CurInputData) ;
015871  001072                          i := InputType ;
015872  001073                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
015873  001074                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
015874  001075              endif
015875  001076          endif
015876  001077   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
015877  001078        
015878  001079          sys_EventsResume() ;
015879  001080      forever
015880  001081        
015881  001082  cDipswitch:
015882  001083        
015883  001084  cKnob:
015884  001085        
015885  001086  cRockerswitch:
015886  001087        
015887  001088  cRotaryswitch:
015888  001089        
015889  001090  cSlider:
015890  001091  cTrackbar:
015891  001092        
015892  001093  c4DButton:
015893  001094  cUserButton:
015894  001095      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015895  001096      goto gbutton ;
015896  001097  cWinbutton:
015897  001098      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015898  001099  gbutton:
015899  001100      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
015900  001101      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
015901  001102          if (TouchStatus == TOUCH_RELEASED)
015902  001103              i &= 0xfffe ;
015903  001104              TouchState == Ofs_IPD_DOWN ;
015904  001105          else
015905  001106              i |= 1 ;
015906  001107              TouchState == Ofs_IPD_RELEASE ;
015907  001108          endif
015908  001109      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
015909  001110          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
015910  001111              if ((i & 3) == 3)
015911  001112                  i &= 0xfffc ;
015912  001113              else
015913  001114                  i++ ;
015914  001115              endif
015915  001116          else
015916  001117              i |= 1 ;                                      // make down regardless of current state
015917  001118          endif
015918  001119      else                        // group action, up all other buttons on touch press, reports 0 for button down
015919  001120          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
015920  001121              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
015921  001122          endif
015922  001123          i := (i & 0xfffc) | 2 ;
015923  001124      endif
015924  001125        
015925  001126      UpdateObjects(i) ;
015926  001127  endsub ;
015927  001128        
015928  001129  cAniButton:
015929  001130        
015930  001131  cColorPicker:
015931  001132        
015932  001133  endfunc
015933  001134  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 778 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 714 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       12797  0x000031fd (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 111)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12165  0x00002f85 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 36)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 27)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9543  0x00002547FormBGcolors                        9543  0x00002547 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 213)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              110  0x0000006e (const ??? 0)  (usage 3)
iForm11                               97  0x00000061 (const ??? 0)  (usage 3)
iForm12                               46  0x0000002e (const ??? 0)  (usage 3)
iForm14                               53  0x00000035 (const ??? 0)  (usage 3)
iForm16                              171  0x000000ab (const ??? 0)  (usage 3)
iForm17                              175  0x000000af (const ??? 0)  (usage 3)
iForm18                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm19                               66  0x00000042 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               70  0x00000046 (const ??? 0)  (usage 3)
iForm21                               74  0x0000004a (const ??? 0)  (usage 3)
iForm23                               84  0x00000054 (const ??? 0)  (usage 3)
iForm24                               88  0x00000058 (const ??? 0)  (usage 3)
iForm25                              181  0x000000b5 (const ??? 0)  (usage 3)
iForm26                               92  0x0000005c (const ??? 0)  (usage 3)
iForm27                               99  0x00000063 (const ??? 0)  (usage 3)
iForm28                              120  0x00000078 (const ??? 0)  (usage 3)
iForm29                              127  0x0000007f (const ??? 0)  (usage 3)
iForm30                              136  0x00000088 (const ??? 0)  (usage 3)
iForm31                              140  0x0000008c (const ??? 0)  (usage 3)
iForm32                              144  0x00000090 (const ??? 0)  (usage 3)
iForm33                              148  0x00000094 (const ??? 0)  (usage 3)
iForm34                              159  0x0000009f (const ??? 0)  (usage 3)
iForm35                              163  0x000000a3 (const ??? 0)  (usage 3)
iForm38                              185  0x000000b9 (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              196  0x000000c4 (const ??? 0)  (usage 3)
iForm41                              221  0x000000dd (const ??? 0)  (usage 3)
iForm5                                15  0x0000000f (const ??? 0)  (usage 3)
iForm6                                18  0x00000012 (const ??? 0)  (usage 3)
iForm7                               167  0x000000a7 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[223] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            625  0x00000271InputData                            625  0x00000271 (mem) word[3542] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          89  0x00000059 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext10                         57  0x00000039 (const ??? 0)  (usage 3)
iStatictext19                         59  0x0000003b (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext3                          96  0x00000060 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext8                          76  0x0000004c (const ??? 0)  (usage 3)
iStatictext9                          58  0x0000003a (const ??? 0)  (usage 3)
iStrings0                           7709  0x00001e1diStrings0                           7709  0x00001e1d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7735  0x00001e37iStrings1                           7735  0x00001e37 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          7943  0x00001f07iStrings11                          7943  0x00001f07 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7969  0x00001f21iStrings12                          7969  0x00001f21 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          7995  0x00001f3biStrings13                          7995  0x00001f3b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8021  0x00001f55iStrings14                          8021  0x00001f55 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8047  0x00001f6fiStrings15                          8047  0x00001f6f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8073  0x00001f89iStrings16                          8073  0x00001f89 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8099  0x00001fa3iStrings17                          8099  0x00001fa3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8125  0x00001fbdiStrings18                          8125  0x00001fbd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8151  0x00001fd7iStrings19                          8151  0x00001fd7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7761  0x00001e51iStrings2                           7761  0x00001e51 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8177  0x00001ff1iStrings24                          8177  0x00001ff1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8203  0x0000200biStrings25                          8203  0x0000200b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8229  0x00002025iStrings26                          8229  0x00002025 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8255  0x0000203fiStrings27                          8255  0x0000203f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8281  0x00002059iStrings29                          8281  0x00002059 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7787  0x00001e6biStrings3                           7787  0x00001e6b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8307  0x00002073iStrings30                          8307  0x00002073 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8333  0x0000208diStrings31                          8333  0x0000208d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8359  0x000020a7iStrings32                          8359  0x000020a7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8385  0x000020c1iStrings34                          8385  0x000020c1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8411  0x000020dbiStrings36                          8411  0x000020db (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8437  0x000020f5iStrings37                          8437  0x000020f5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8463  0x0000210fiStrings38                          8463  0x0000210f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8489  0x00002129iStrings39                          8489  0x00002129 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7813  0x00001e85iStrings4                           7813  0x00001e85 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8515  0x00002143iStrings40                          8515  0x00002143 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8541  0x0000215diStrings41                          8541  0x0000215d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8567  0x00002177iStrings42                          8567  0x00002177 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8593  0x00002191iStrings43                          8593  0x00002191 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8619  0x000021abiStrings44                          8619  0x000021ab (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8645  0x000021c5iStrings45                          8645  0x000021c5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8671  0x000021dfiStrings46                          8671  0x000021df (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8697  0x000021f9iStrings47                          8697  0x000021f9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8723  0x00002213iStrings48                          8723  0x00002213 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          8749  0x0000222diStrings49                          8749  0x0000222d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8775  0x00002247iStrings50                          8775  0x00002247 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8801  0x00002261iStrings51                          8801  0x00002261 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8827  0x0000227biStrings52                          8827  0x0000227b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          8853  0x00002295iStrings53                          8853  0x00002295 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7839  0x00001e9fiStrings6                           7839  0x00001e9f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7865  0x00001eb9iStrings7                           7865  0x00001eb9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7891  0x00001ed3iStrings8                           7891  0x00001ed3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7917  0x00001eediStrings9                           7917  0x00001eed (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton100                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton101                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton102                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton103                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton104                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton105                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton106                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton107                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton108                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton109                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton11                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton110                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton111                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton112                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton113                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton114                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton115                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton116                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton117                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton118                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton119                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton12                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton120                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton121                       190  0x000000be (const ??? 0)  (usage 3)
iUserbutton122                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton123                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton124                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton125                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton126                       195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton127                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton128                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton129                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton13                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton130                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton131                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton132                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton133                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton134                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton135                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton136                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton137                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton138                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton139                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton141                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton142                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton143                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton144                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton145                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton146                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton147                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton149                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton17                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton21                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton22                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton23                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton24                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton25                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton26                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton27                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton28                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton29                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton31                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton32                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton33                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton34                        169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton35                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton36                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton37                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton38                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton39                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton41                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton42                        173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton43                        176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton44                        177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton45                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton46                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton47                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton48                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton49                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton52                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton53                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton54                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton55                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton56                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton57                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton58                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton59                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton65                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton66                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton67                        222  0x000000de (const ??? 0)  (usage 3)
iUserbutton68                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton69                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton71                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton72                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton73                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton75                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton76                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton77                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton78                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton79                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton81                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton82                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton83                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton84                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton85                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton86                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton87                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton88                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton89                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton91                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton92                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton93                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton94                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton95                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton96                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton97                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton98                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton99                        107  0x0000006b (const ??? 0)  (usage 3)
iUserimages0                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages1                          69  0x00000045 (const ??? 0)  (usage 3)
iUserimages10                         95  0x0000005f (const ??? 0)  (usage 3)
iUserimages11                        223  0x000000df (const ??? 0)  (usage 3)
iUserimages12                        174  0x000000ae (const ??? 0)  (usage 3)
iUserimages13                         77  0x0000004d (const ??? 0)  (usage 3)
iUserimages14                        125  0x0000007d (const ??? 0)  (usage 3)
iUserimages15                        126  0x0000007e (const ??? 0)  (usage 3)
iUserimages16                         91  0x0000005b (const ??? 0)  (usage 3)
iUserimages2                          98  0x00000062 (const ??? 0)  (usage 3)
iUserimages3                         137  0x00000089 (const ??? 0)  (usage 3)
iUserimages4                         142  0x0000008e (const ??? 0)  (usage 3)
iUserimages5                         146  0x00000092 (const ??? 0)  (usage 3)
iUserimages6                         168  0x000000a8 (const ??? 0)  (usage 3)
iUserimages7                         139  0x0000008b (const ??? 0)  (usage 3)
iUserimages8                         143  0x0000008f (const ??? 0)  (usage 3)
iUserimages9                         147  0x00000093 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9629  0x0000259dkKeyboardKeystrokes                 9629  0x0000259d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13143  0x00003357 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10169  0x000027b9 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14265  0x000037b9 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              322  0x00000142 (const dword)  (usage 3)
nObjects                             224  0x000000e0 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9227  0x0000240bo4Dbuttons                          9227  0x0000240b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      8911  0x000022cfoAngularmeters                      8911  0x000022cf (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9229  0x0000240doAniButtons                         9229  0x0000240d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9231  0x0000240foColorPickers                       9231  0x0000240f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         8913  0x000022d1oCoolgauges                         8913  0x000022d1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      8915  0x000022d3oCustomdigitss                      8915  0x000022d3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         8879  0x000022afoDipSwitchs                         8879  0x000022af (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              8917  0x000022d5oForms                              8917  0x000022d5 (mem) word[44] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9005  0x0000232doGauges                             9005  0x0000232d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           8887  0x000022b7oGSliders                           8887  0x000022b7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9007  0x0000232foImages                             9007  0x0000232f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9009  0x00002331oKeyboards                          9009  0x00002331 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              8881  0x000022b1oKnobs                              8881  0x000022b1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9633  0x000025a1oLedDigitsn                         9633  0x000025a1 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9013  0x00002335oLeddigitss                         9013  0x00002335 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9011  0x00002333oLeds                               9011  0x00002333 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9021  0x0000233doMeters                             9021  0x0000233d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9225  0x00002409oPinInputs                          9225  0x00002409 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9541  0x00002545oPinOutputs                         9541  0x00002545 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      8883  0x000022b3oRockerSwitchs                      8883  0x000022b3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      8885  0x000022b5oRotarySwitchs                      8885  0x000022b5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9185  0x000023e1oScopes                             9185  0x000023e1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9539  0x00002543oSoundss                            9539  0x00002543 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9183  0x000023dfoSpectrums                          9183  0x000023df (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9141  0x000023b5oStaticTexts                        9141  0x000023b5 (mem) word[21] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9023  0x0000233foStringss                           9023  0x0000233f (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 81)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 420)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9187  0x000023e3oTanks                              9187  0x000023e3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9133  0x000023adoThermometers                       9133  0x000023ad (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9537  0x00002541oTimers                             9537  0x00002541 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          8889  0x000022b9oTrackbars                          8889  0x000022b9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9233  0x00002411oUserButtons                        9233  0x00002411 (mem) word[152] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9189  0x000023e5oUserImagess                        9189  0x000023e5 (mem) word[18] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9135  0x000023afoUserleds                           9135  0x000023af (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9137  0x000023b1oVideos                             9137  0x000023b1 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         8891  0x000022bboWinButtons                         8891  0x000022bb (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14300  0x000037dc (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14012  0x000036bc (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9631  0x0000259frKeyboardRoutines                   9631  0x0000259f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14198  0x00003776 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14281  0x000037c9 (User func) args[1] r=0  (usage 15)
seroutOcs                          14248  0x000037a8 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Size                          0  0x00000000 (const dword)  (not used)
Strings10StartH                        0  0x00000000 (const dword)  (not used)
Strings10StartL                        0  0x00000000 (const dword)  (not used)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         49  0x00000031 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                        106  0x0000006a (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         94  0x0000005e (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          25  0x00000019 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         27  0x0000001b (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         68  0x00000044 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings5Size                           0  0x00000000 (const dword)  (not used)
Strings5StartH                         0  0x00000000 (const dword)  (not used)
Strings5StartL                         0  0x00000000 (const dword)  (not used)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      9728  0x00002600 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     10240  0x00002800 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13457  0x00003491 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 459)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12166  0x00002f86 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 132)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13657  0x00003559 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
