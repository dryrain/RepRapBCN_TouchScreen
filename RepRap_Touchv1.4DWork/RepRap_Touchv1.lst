file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 23/10/2015 14:48:41
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 23/10/2015 14:48:18
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings3Count    0
005098  000005  #constant  Strings3Count    0
005099  000006  #constant  Strings3Size     1
005100  000006  #constant  Strings3Size     1
005101  000007  #constant  Strings1Count    1
005102  000007  #constant  Strings1Count    1
005103  000008  #constant  Strings1Size     30
005104  000008  #constant  Strings1Size     30
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings16Count    0
005142  000027  #constant  Strings16Count    0
005143  000028  #constant  Strings16Size     1
005144  000028  #constant  Strings16Size     1
005145  000029  #constant  Strings11Count    1
005146  000029  #constant  Strings11Count    1
005147  000030  #constant  Strings11Size     73
005148  000030  #constant  Strings11Size     73
005149  000031  #constant  Strings7Count    0
005150  000031  #constant  Strings7Count    0
005151  000032  #constant  Strings7Size     1
005152  000032  #constant  Strings7Size     1
005153  000033  #constant  Strings8Count    0
005154  000033  #constant  Strings8Count    0
005155  000034  #constant  Strings8Size     1
005156  000034  #constant  Strings8Size     1
005157  000035  #constant  Strings38Count    0
005158  000035  #constant  Strings38Count    0
005159  000036  #constant  Strings38Size     1
005160  000036  #constant  Strings38Size     1
005161  000037  #constant  Strings39Count    0
005162  000037  #constant  Strings39Count    0
005163  000038  #constant  Strings39Size     1
005164  000038  #constant  Strings39Size     1
005165  000039  #constant  Strings40Count    1
005166  000039  #constant  Strings40Count    1
005167  000040  #constant  Strings40Size     7
005168  000040  #constant  Strings40Size     7
005169  000041  #constant  Strings41Count    1
005170  000041  #constant  Strings41Count    1
005171  000042  #constant  Strings41Size     7
005172  000042  #constant  Strings41Size     7
005173  000043  #constant  Strings42Count    1
005174  000043  #constant  Strings42Count    1
005175  000044  #constant  Strings42Size     7
005176  000044  #constant  Strings42Size     7
005177  000045  #constant  Strings43Count    0
005178  000045  #constant  Strings43Count    0
005179  000046  #constant  Strings43Size     1
005180  000046  #constant  Strings43Size     1
005181  000047  #constant  Strings44Count    0
005182  000047  #constant  Strings44Count    0
005183  000048  #constant  Strings44Size     1
005184  000048  #constant  Strings44Size     1
005185  000049  #constant  Strings45Count    0
005186  000049  #constant  Strings45Count    0
005187  000050  #constant  Strings45Size     1
005188  000050  #constant  Strings45Size     1
005189  000051  #constant  Strings51Count    0
005190  000051  #constant  Strings51Count    0
005191  000052  #constant  Strings51Size     1
005192  000052  #constant  Strings51Size     1
005193  000053  #constant  Strings52Count    0
005194  000053  #constant  Strings52Count    0
005195  000054  #constant  Strings52Size     1
005196  000054  #constant  Strings52Size     1
005197  000055  #constant  Strings29Count    1
005198  000055  #constant  Strings29Count    1
005199  000056  #constant  Strings29Size     53
005200  000056  #constant  Strings29Size     53
005201  000057  #constant  Strings31Count    1
005202  000057  #constant  Strings31Count    1
005203  000058  #constant  Strings31Size     7
005204  000058  #constant  Strings31Size     7
005205  000059  #constant  Strings32Count    1
005206  000059  #constant  Strings32Count    1
005207  000060  #constant  Strings32Size     19
005208  000060  #constant  Strings32Size     19
005209  000061  #constant  Strings50Count    0
005210  000061  #constant  Strings50Count    0
005211  000062  #constant  Strings50Size     1
005212  000062  #constant  Strings50Size     1
005213  000063  #constant  Strings53Count    1
005214  000063  #constant  Strings53Count    1
005215  000064  #constant  Strings53Size     67
005216  000064  #constant  Strings53Size     67
005217  000065  #constant  Strings5Count    0
005218  000065  #constant  Strings5Count    0
005219  000066  #constant  Strings5Size     1
005220  000066  #constant  Strings5Size     1
005221  000067  #constant  Strings10Count    1
005222  000067  #constant  Strings10Count    1
005223  000068  #constant  Strings10Size     5
005224  000068  #constant  Strings10Size     5
005225  000069  #constant  Strings17Count    0
005226  000069  #constant  Strings17Count    0
005227  000070  #constant  Strings17Size     1
005228  000070  #constant  Strings17Size     1
005229  000071  #constant  Strings13Count    1
005230  000071  #constant  Strings13Count    1
005231  000072  #constant  Strings13Size     7
005232  000072  #constant  Strings13Size     7
005233  000073  #constant  Strings14Count    1
005234  000073  #constant  Strings14Count    1
005235  000074  #constant  Strings14Size     7
005236  000074  #constant  Strings14Size     7
005237  000075  #constant  Strings15Count    1
005238  000075  #constant  Strings15Count    1
005239  000076  #constant  Strings15Size     7
005240  000076  #constant  Strings15Size     7
005241  000077  // object indexes into ImageControl
005242  000078  #CONST
005243  000324  #END
005244  000325        
005245  000326  #constant  Strings18Size     0
005246  000326  #constant  Strings18Size     0
005247  000327  #constant  Strings18StartH   0
005248  000327  #constant  Strings18StartH   0
005249  000328  #constant  Strings18StartL   0
005250  000328  #constant  Strings18StartL   0
005251  000329  #constant  Strings19Size     0
005252  000329  #constant  Strings19Size     0
005253  000330  #constant  Strings19StartH   0
005254  000330  #constant  Strings19StartH   0
005255  000331  #constant  Strings19StartL   0
005256  000331  #constant  Strings19StartL   0
005257  000332  #constant  Strings20Size     0
005258  000332  #constant  Strings20Size     0
005259  000333  #constant  Strings20StartH   0
005260  000333  #constant  Strings20StartH   0
005261  000334  #constant  Strings20StartL   0
005262  000334  #constant  Strings20StartL   0
005263  000335  #constant  Strings21Size     0
005264  000335  #constant  Strings21Size     0
005265  000336  #constant  Strings21StartH   0
005266  000336  #constant  Strings21StartH   0
005267  000337  #constant  Strings21StartL   0
005268  000337  #constant  Strings21StartL   0
005269  000338  #constant  Strings22Size     0
005270  000338  #constant  Strings22Size     0
005271  000339  #constant  Strings22StartH   0
005272  000339  #constant  Strings22StartH   0
005273  000340  #constant  Strings22StartL   0
005274  000340  #constant  Strings22StartL   0
005275  000341  #constant  Strings23Size     0
005276  000341  #constant  Strings23Size     0
005277  000342  #constant  Strings23StartH   0
005278  000342  #constant  Strings23StartH   0
005279  000343  #constant  Strings23StartL   0
005280  000343  #constant  Strings23StartL   0
005281  000344  #constant  Strings24Size     0
005282  000344  #constant  Strings24Size     0
005283  000345  #constant  Strings24StartH   0
005284  000345  #constant  Strings24StartH   0
005285  000346  #constant  Strings24StartL   0
005286  000346  #constant  Strings24StartL   0
005287  000347  #constant  Strings25Size     0
005288  000347  #constant  Strings25Size     0
005289  000348  #constant  Strings25StartH   0
005290  000348  #constant  Strings25StartH   0
005291  000349  #constant  Strings25StartL   0
005292  000349  #constant  Strings25StartL   0
005293  000350  #constant  Strings26Size     0
005294  000350  #constant  Strings26Size     0
005295  000351  #constant  Strings26StartH   0
005296  000351  #constant  Strings26StartH   0
005297  000352  #constant  Strings26StartL   0
005298  000352  #constant  Strings26StartL   0
005299  000353  #constant  Strings27Size     0
005300  000353  #constant  Strings27Size     0
005301  000354  #constant  Strings27StartH   0
005302  000354  #constant  Strings27StartH   0
005303  000355  #constant  Strings27StartL   0
005304  000355  #constant  Strings27StartL   0
005305  000356  #constant  Strings28Size     0
005306  000356  #constant  Strings28Size     0
005307  000357  #constant  Strings28StartH   0
005308  000357  #constant  Strings28StartH   0
005309  000358  #constant  Strings28StartL   0
005310  000358  #constant  Strings28StartL   0
005311  000359  #constant  Strings30Size     0
005312  000359  #constant  Strings30Size     0
005313  000360  #constant  Strings30StartH   0
005314  000360  #constant  Strings30StartH   0
005315  000361  #constant  Strings30StartL   0
005316  000361  #constant  Strings30StartL   0
005317  000362  #constant  Strings33Size     0
005318  000362  #constant  Strings33Size     0
005319  000363  #constant  Strings33StartH   0
005320  000363  #constant  Strings33StartH   0
005321  000364  #constant  Strings33StartL   0
005322  000364  #constant  Strings33StartL   0
005323  000365  #constant  Strings35Size     0
005324  000365  #constant  Strings35Size     0
005325  000366  #constant  Strings35StartH   0
005326  000366  #constant  Strings35StartH   0
005327  000367  #constant  Strings35StartL   0
005328  000367  #constant  Strings35StartL   0
005329  000368  #constant  Strings46Size     0
005330  000368  #constant  Strings46Size     0
005331  000369  #constant  Strings46StartH   0
005332  000369  #constant  Strings46StartH   0
005333  000370  #constant  Strings46StartL   0
005334  000370  #constant  Strings46StartL   0
005335  000371  #constant  Strings47Size     0
005336  000371  #constant  Strings47Size     0
005337  000372  #constant  Strings47StartH   0
005338  000372  #constant  Strings47StartH   0
005339  000373  #constant  Strings47StartL   0
005340  000373  #constant  Strings47StartL   0
005341  000374  #constant  Strings48Size     0
005342  000374  #constant  Strings48Size     0
005343  000375  #constant  Strings48StartH   0
005344  000375  #constant  Strings48StartH   0
005345  000376  #constant  Strings48StartL   0
005346  000376  #constant  Strings48StartL   0
005347  000377  #constant  Strings49Size     0
005348  000377  #constant  Strings49Size     0
005349  000378  #constant  Strings49StartH   0
005350  000378  #constant  Strings49StartH   0
005351  000379  #constant  Strings49StartL   0
005352  000379  #constant  Strings49StartL   0
005353  000380  #constant  Strings3StartH   0x0
005354  000380  #constant  Strings3StartH   0x0
005355  000381  #constant  Strings3StartL   0x0
005356  000381  #constant  Strings3StartL   0x0
005357  000382  #constant  Strings1StartH   0x0
005358  000382  #constant  Strings1StartH   0x0
005359  000383  #constant  Strings1StartL   0x200
005360  000383  #constant  Strings1StartL   0x200
005361  000384  #constant  Strings4StartH   0x0
005362  000384  #constant  Strings4StartH   0x0
005363  000385  #constant  Strings4StartL   0x400
005364  000385  #constant  Strings4StartL   0x400
005365  000386  #constant  Strings6StartH   0x0
005366  000386  #constant  Strings6StartH   0x0
005367  000387  #constant  Strings6StartL   0x600
005368  000387  #constant  Strings6StartL   0x600
005369  000388  #constant  Strings2StartH   0x0
005370  000388  #constant  Strings2StartH   0x0
005371  000389  #constant  Strings2StartL   0x800
005372  000389  #constant  Strings2StartL   0x800
005373  000390  #constant  Strings0StartH   0x0
005374  000390  #constant  Strings0StartH   0x0
005375  000391  #constant  Strings0StartL   0xA00
005376  000391  #constant  Strings0StartL   0xA00
005377  000392  #constant  Strings9StartH   0x0
005378  000392  #constant  Strings9StartH   0x0
005379  000393  #constant  Strings9StartL   0xC00
005380  000393  #constant  Strings9StartL   0xC00
005381  000394  #constant  Strings34StartH   0x0
005382  000394  #constant  Strings34StartH   0x0
005383  000395  #constant  Strings34StartL   0xE00
005384  000395  #constant  Strings34StartL   0xE00
005385  000396  #constant  Strings36StartH   0x0
005386  000396  #constant  Strings36StartH   0x0
005387  000397  #constant  Strings36StartL   0x1000
005388  000397  #constant  Strings36StartL   0x1000
005389  000398  #constant  Strings37StartH   0x0
005390  000398  #constant  Strings37StartH   0x0
005391  000399  #constant  Strings37StartL   0x1200
005392  000399  #constant  Strings37StartL   0x1200
005393  000400  #constant  Strings12StartH   0x0
005394  000400  #constant  Strings12StartH   0x0
005395  000401  #constant  Strings12StartL   0x1400
005396  000401  #constant  Strings12StartL   0x1400
005397  000402  #constant  Strings16StartH   0x0
005398  000402  #constant  Strings16StartH   0x0
005399  000403  #constant  Strings16StartL   0x1600
005400  000403  #constant  Strings16StartL   0x1600
005401  000404  #constant  Strings11StartH   0x0
005402  000404  #constant  Strings11StartH   0x0
005403  000405  #constant  Strings11StartL   0x1800
005404  000405  #constant  Strings11StartL   0x1800
005405  000406  #constant  Strings7StartH   0x0
005406  000406  #constant  Strings7StartH   0x0
005407  000407  #constant  Strings7StartL   0x1A00
005408  000407  #constant  Strings7StartL   0x1A00
005409  000408  #constant  Strings8StartH   0x0
005410  000408  #constant  Strings8StartH   0x0
005411  000409  #constant  Strings8StartL   0x1C00
005412  000409  #constant  Strings8StartL   0x1C00
005413  000410  #constant  Strings38StartH   0x0
005414  000410  #constant  Strings38StartH   0x0
005415  000411  #constant  Strings38StartL   0x1E00
005416  000411  #constant  Strings38StartL   0x1E00
005417  000412  #constant  Strings39StartH   0x0
005418  000412  #constant  Strings39StartH   0x0
005419  000413  #constant  Strings39StartL   0x2000
005420  000413  #constant  Strings39StartL   0x2000
005421  000414  #constant  Strings40StartH   0x0
005422  000414  #constant  Strings40StartH   0x0
005423  000415  #constant  Strings40StartL   0x2200
005424  000415  #constant  Strings40StartL   0x2200
005425  000416  #constant  Strings41StartH   0x0
005426  000416  #constant  Strings41StartH   0x0
005427  000417  #constant  Strings41StartL   0x2400
005428  000417  #constant  Strings41StartL   0x2400
005429  000418  #constant  Strings42StartH   0x0
005430  000418  #constant  Strings42StartH   0x0
005431  000419  #constant  Strings42StartL   0x2600
005432  000419  #constant  Strings42StartL   0x2600
005433  000420  #constant  Strings43StartH   0x0
005434  000420  #constant  Strings43StartH   0x0
005435  000421  #constant  Strings43StartL   0x2800
005436  000421  #constant  Strings43StartL   0x2800
005437  000422  #constant  Strings44StartH   0x0
005438  000422  #constant  Strings44StartH   0x0
005439  000423  #constant  Strings44StartL   0x2A00
005440  000423  #constant  Strings44StartL   0x2A00
005441  000424  #constant  Strings45StartH   0x0
005442  000424  #constant  Strings45StartH   0x0
005443  000425  #constant  Strings45StartL   0x2C00
005444  000425  #constant  Strings45StartL   0x2C00
005445  000426  #constant  Strings51StartH   0x0
005446  000426  #constant  Strings51StartH   0x0
005447  000427  #constant  Strings51StartL   0x2E00
005448  000427  #constant  Strings51StartL   0x2E00
005449  000428  #constant  Strings52StartH   0x0
005450  000428  #constant  Strings52StartH   0x0
005451  000429  #constant  Strings52StartL   0x3000
005452  000429  #constant  Strings52StartL   0x3000
005453  000430  #constant  Strings29StartH   0x0
005454  000430  #constant  Strings29StartH   0x0
005455  000431  #constant  Strings29StartL   0x3200
005456  000431  #constant  Strings29StartL   0x3200
005457  000432  #constant  Strings31StartH   0x0
005458  000432  #constant  Strings31StartH   0x0
005459  000433  #constant  Strings31StartL   0x3400
005460  000433  #constant  Strings31StartL   0x3400
005461  000434  #constant  Strings32StartH   0x0
005462  000434  #constant  Strings32StartH   0x0
005463  000435  #constant  Strings32StartL   0x3600
005464  000435  #constant  Strings32StartL   0x3600
005465  000436  #constant  Strings50StartH   0x0
005466  000436  #constant  Strings50StartH   0x0
005467  000437  #constant  Strings50StartL   0x3800
005468  000437  #constant  Strings50StartL   0x3800
005469  000438  #constant  Strings53StartH   0x0
005470  000438  #constant  Strings53StartH   0x0
005471  000439  #constant  Strings53StartL   0x3A00
005472  000439  #constant  Strings53StartL   0x3A00
005473  000440  #constant  Strings5StartH   0x0
005474  000440  #constant  Strings5StartH   0x0
005475  000441  #constant  Strings5StartL   0x3C00
005476  000441  #constant  Strings5StartL   0x3C00
005477  000442  #constant  Strings10StartH   0x0
005478  000442  #constant  Strings10StartH   0x0
005479  000443  #constant  Strings10StartL   0x3E00
005480  000443  #constant  Strings10StartL   0x3E00
005481  000444  #constant  Strings17StartH   0x0
005482  000444  #constant  Strings17StartH   0x0
005483  000445  #constant  Strings17StartL   0x4000
005484  000445  #constant  Strings17StartL   0x4000
005485  000446  #constant  Strings13StartH   0x0
005486  000446  #constant  Strings13StartH   0x0
005487  000447  #constant  Strings13StartL   0x4200
005488  000447  #constant  Strings13StartL   0x4200
005489  000448  #constant  Strings14StartH   0x0
005490  000448  #constant  Strings14StartH   0x0
005491  000449  #constant  Strings14StartL   0x4400
005492  000449  #constant  Strings14StartL   0x4400
005493  000450  #constant  Strings15StartH   0x0
005494  000450  #constant  Strings15StartH   0x0
005495  000451  #constant  Strings15StartL   0x4600
005496  000451  #constant  Strings15StartL   0x4600
005497  000452  #IFNOT EXISTS NOGLOBALS
005498  000453  var hndl ;
005499  000454  #ENDIF
005500  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005501  000013  #inherit "CLPrintStrings.inc"
005502  000013  #inherit "CLPrintStrings.inc"
005503  000001  func PrintStrings(var ID, var *msgid, var String)
005504  000002      var StringID, i, ch, offs32[2], res32[2];
005505  000003      StringID := oStringss[1+ID] ;
005506  000004      if (String)
005507  000005          stringsCV[ID] := -1 ;
005508  000006      else
005509  000007          stringsCV[ID] := msgid ;
005510  000008      endif
005511  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005512  000010      txt_FontID(hFonts[ID]) ;
005513  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005514  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005515  000013        
005516  000014      if (*(StringID + Ofs_String_Transparent))
005517  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005518  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005519  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005520  000018      else
005521  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005522  000020          gfx_Clipping(ON) ;
005523  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005524  000022          gfx_Clipping(OFF) ;
005525  000023        
005526  000024      endif
005527  000025        
005528  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005529  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005530  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005531  000029        
005532  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005533  000031        
005534  000032      if (String)
005535  000033          i := 0 ;
005536  000034          ch := msgid[i++] ;
005537  000035          while (ch != 0)
005538  000036              putch(ch) ;
005539  000037              ch := msgid[i++] ;
005540  000038          wend
005541  000039      else
005542  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005543  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005544  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005545  000043          uadd_3232(res32,res32,offs32) ;
005546  000044          file_Seek(hstrings, res32[1], res32[0]);
005547  000045          repeat
005548  000046              if (*(StringID + Ofs_String_Ansi))
005549  000047                  ch := file_GetC(hstrings) ;
005550  000048              else
005551  000049                  ch := file_GetW(hstrings) ;
005552  000050              endif
005553  000051              putch(ch) ;
005554  000052          until (ch == 0) ;
005555  000053      endif
005556  000054        
005557  000055  endfunc
005558  000056        
005559  000014        
005560  000015  #constant IPDatasize 22
005561  000015  #constant IPDatasize 22
005562  000016        
005563  000017  #CONST
005564  000021  #END
005565  000022        
005566  000023  #CONST
005567  000130  #END
005568  000131        
005569  000578  #END
5570  2794
5571  2795
5572  2796
5573  2797
5574  2798
5575  2799
5576  279A
5577  279B
5578  279C
5579  279D
5580  279E
5581  279F
5582  27A0
5583  27A1
5584  27A2
5585  27A3
5586  27A4
5587  27A5
5588  27A6
5589  27A7
5590  27A8
5591  27A9
5592  27AA
5593  27AB
5594  27AC
5595  27AD
5596  27AE
5597  27AF
5598  27B0
5599  27B1
5600  27B2
5601  27B3
5602  27B4
5603  27B5
5604  27B6
5605  27B7
5606  27B8
5607  27B9
5608  27BA
5609  27BB
5610  27BC
5611  27BD
5612  27BE
5613  27BF
5614  27C0
5615  27C1
5616  27C2
5617  27C3
5618  27C4
5619  27C5
5620  27C6
5621  27C7
5622  27C8
5623  27C9
5624  27CA
5625  27CB
5626  27CC
5627  27CD
5628  27CE
5629  27CF
5630  27D0
5631  27D1
5632  27D2
5633  27D3
5634  27D4
5635  27D5
5636  27D6
5637  27D7
5638  27D8
5639  27D9
5640  27DA
5641  27DB
5642  27DC
5643  27DD
5644  27DE
5645  27DF
5646  27E0
5647  27E1
5648  27E2
5649  27E3
5650  27E4
5651  27E5
5652  27E6
5653  27E7
5654  27E8
5655  27E9
5656  27EA
5657  27EB
5658  27EC
5659  27ED
5660  27EE
5661  27EF
5662  27F0
5663  27F1
5664  27F2
5665  27F3
5666  27F4
5667  27F5
5668  27F6
5669  27F7
5670  27F8
5671  27F9
5672  27FA
5673  27FB
5674  27FC
5675  27FD
5676  27FE
5677  27FF
5678  2800
5679  2801
5680  2802
5681  2803
5682  2804
5683  2805
5684  2806
5685  2807
5686  2808
5687  2809
5688  280A
5689  280B
5690  280C
5691  280D
5692  280E
5693  280F
5694  2810
5695  2811
5696  2812
5697  2813
5698  2814
5699  2815
5700  2816
5701  2817
5702  2818
5703  2819
5704  281A
5705  281B
5706  281C
5707  281D
5708  281E
5709  281F
5710  2820
5711  2821
5712  2822
5713  2823
5714  2824
5715  2825
5716  2826
5717  2827
5718  2828
5719  2829
5720  282A
5721  282B
5722  282C
5723  282D
5724  282E
5725  282F
5726  2830
5727  2831
5728  2832
5729  2833
5730  2834
5731  2835
5732  2836
5733  2837
5734  2838
5735  2839
5736  283A
5737  283B
5738  283C
5739  283D
5740  283E
5741  283F
5742  2840
5743  2841
5744  2842
5745  2843
5746  2844
5747  2845
5748  2846
5749  2847
5750  2848
5751  2849
5752  284A
5753  284B
5754  284C
5755  284D
5756  284E
5757  284F
5758  2850
5759  2851
5760  2852
5761  2853
5762  2854
5763  2855
5764  2856
5765  2857
5766  2858
5767  2859
5768  285A
5769  285B
5770  285C
5771  285D
5772  285E
5773  285F
5774  2860
5775  2861
5776  2862
5777  2863
5778  2864
5779  2865
5780  2866
5781  2867
5782  2868
5783  2869
5784  286A
5785  286B
5786  286C
5787  286D
5788  286E
5789  286F
5790  2870
5791  2871
5792  2872
5793  2873
5794  2874
5795  2875
5796  2876
5797  2877
5798  2878
5799  2879
5800  287A
5801  287B
5802  287C
5803  287D
5804  287E
5805  287F
5806  2880
5807  2881
5808  2882
5809  2883
5810  2884
5811  2885
5812  2886
5813  2887
5814  2888
5815  2889
5816  288A
5817  288B
5818  288C
5819  288D
5820  288E
5821  288F
5822  2890
5823  2891
5824  2892
5825  2893
5826  2894
5827  2895
5828  2896
5829  2897
5830  2898
5831  2899
5832  289A
5833  289B
5834  289C
5835  289D
5836  289E
5837  289F
5838  28A0
5839  28A1
5840  28A2
5841  28A3
5842  28A4
5843  28A5
5844  28A6
5845  28A7
5846  28A8
5847  28A9
5848  28AA
5849  28AB
5850  28AC
5851  28AD
5852  28AE
5853  28AF
5854  28B0
5855  28B1
5856  28B2
5857  28B3
5858  28B4
5859  28B5
5860  28B6
5861  28B7
5862  28B8
5863  28B9
5864  28BA
5865  28BB
5866  28BC
5867  28BD
5868  28BE
5869  28BF
5870  28C0
5871  28C1
5872  28C2
5873  28C3
5874  28C4
5875  28C5
5876  28C6
5877  28C7
5878  28C8
5879  28C9
5880  28CA
5881  28CB
5882  28CC
5883  28CD
5884  28CE
5885  28CF
5886  28D0
5887  28D1
5888  28D2
5889  28D3
5890  28D4
5891  28D5
5892  28D6
5893  28D7
5894  28D8
5895  28D9
5896  28DA
5897  28DB
5898  28DC
5899  28DD
5900  28DE
5901  28DF
5902  28E0
5903  28E1
5904  28E2
5905  28E3
5906  28E4
5907  28E5
5908  28E6
5909  28E7
5910  28E8
5911  28E9
5912  28EA
5913  28EB
5914  28EC
5915  28ED
5916  28EE
5917  28EF
5918  28F0
5919  28F1
5920  28F2
5921  28F3
5922  28F4
5923  28F5
5924  28F6
5925  28F7
5926  28F8
5927  28F9
5928  28FA
5929  28FB
5930  28FC
5931  28FD
5932  28FE
5933  28FF
5934  2900
5935  2901
5936  2902
5937  2903
5938  2904
5939  2905
5940  2906
5941  2907
5942  2908
5943  2909
5944  290A
5945  290B
5946  290C
5947  290D
5948  290E
5949  290F
5950  2910
5951  2911
5952  2912
5953  2913
5954  2914
5955  2915
5956  2916
5957  2917
5958  2918
5959  2919
5960  291A
5961  291B
5962  291C
5963  291D
5964  291E
5965  291F
5966  2920
5967  2921
5968  2922
5969  2923
5970  2924
5971  2925
5972  2926
5973  2927
5974  2928
5975  2929
5976  292A
5977  292B
5978  292C
5979  292D
5980  292E
5981  292F
5982  2930
5983  2931
5984  2932
5985  2933
5986  2934
5987  2935
5988  2936
5989  2937
5990  2938
5991  2939
5992  293A
5993  293B
5994  293C
5995  293D
5996  293E
5997  293F
5998  2940
5999  2941
6000  2942
6001  2943
6002  2944
6003  2945
6004  2946
6005  2947
6006  2948
6007  2949
6008  294A
6009  294B
6010  294C
6011  294D
6012  294E
6013  294F
6014  2950
6015  2951
6016  2952
6017  2953
6018  2954
6019  2955
6020  2956
6021  2957
6022  2958
6023  2959
6024  295A
6025  295B
6026  295C
6027  295D
6028  295E
6029  295F
6030  2960
6031  2961
6032  2962
6033  2963
6034  2964
6035  2965
6036  2966
6037  2967
6038  2968
6039  2969
6040  296A
6041  296B
6042  296C
6043  296D
6044  296E
6045  296F
6046  2970
6047  2971
6048  2972
6049  2973
6050  2974
6051  2975
6052  2976
6053  2977
6054  2978
6055  2979
6056  297A
6057  297B
6058  297C
6059  297D
6060  297E
6061  297F
6062  2980
6063  2981
6064  2982
6065  2983
6066  2984
6067  2985
6068  2986
6069  2987
6070  2988
6071  2989
6072  298A
6073  298B
6074  298C
6075  298D
6076  298E
6077  298F
6078  2990
6079  2991
6080  2992
6081  2993
6082  2994
6083  2995
6084  2996
6085  2997
6086  2998
6087  2999
6088  299A
6089  299B
6090  299C
6091  299D
6092  299E
6093  299F
6094  29A0
6095  29A1
6096  29A2
6097  29A3
6098  29A4
6099  29A5
6100  29A6
6101  29A7
6102  29A8
6103  29A9
6104  29AA
6105  29AB
6106  29AC
6107  29AD
6108  29AE
6109  29AF
6110  29B0
6111  29B1
6112  29B2
6113  29B3
6114  29B4
6115  29B5
6116  29B6
6117  29B7
6118  29B8
6119  29B9
6120  29BA
6121  29BB
6122  29BC
6123  29BD
6124  29BE
6125  29BF
6126  29C0
6127  29C1
6128  29C2
6129  29C3
6130  29C4
6131  29C5
6132  29C6
6133  29C7
6134  29C8
6135  29C9
6136  29CA
6137  29CB
6138  29CC
6139  29CD
6140  29CE
6141  29CF
6142  29D0
6143  29D1
6144  29D2
6145  29D3
6146  29D4
6147  29D5
6148  29D6
6149  29D7
6150  29D8
6151  29D9
6152  29DA
6153  29DB
6154  29DC
6155  29DD
6156  29DE
6157  29DF
6158  29E0
6159  29E1
6160  29E2
6161  29E3
6162  29E4
6163  29E5
6164  29E6
6165  29E7
6166  29E8
6167  29E9
6168  29EA
6169  29EB
6170  29EC
6171  29ED
6172  29EE
6173  29EF
6174  29F0
6175  29F1
6176  29F2
6177  29F3
6178  29F4
6179  29F5
6180  29F6
6181  29F7
6182  29F8
6183  29F9
6184  29FA
6185  29FB
6186  29FC
6187  29FD
6188  29FE
6189  29FF
6190  2A00
6191  2A01
6192  2A02
6193  2A03
6194  2A04
6195  2A05
6196  2A06
6197  2A07
6198  2A08
6199  2A09
6200  2A0A
6201  2A0B
6202  2A0C
6203  2A0D
6204  2A0E
6205  2A0F
6206  2A10
6207  2A11
6208  2A12
6209  2A13
6210  2A14
6211  2A15
6212  2A16
6213  2A17
6214  2A18
6215  2A19
6216  2A1A
6217  2A1B
6218  2A1C
6219  2A1D
6220  2A1E
6221  2A1F
6222  2A20
6223  2A21
6224  2A22
6225  2A23
6226  2A24
6227  2A25
6228  2A26
6229  2A27
6230  2A28
6231  2A29
6232  2A2A
6233  2A2B
6234  2A2C
6235  2A2D
6236  2A2E
6237  2A2F
6238  2A30
6239  2A31
6240  2A32
6241  2A33
6242  2A34
6243  2A35
6244  2A36
6245  2A37
6246  2A38
6247  2A39
6248  2A3A
6249  2A3B
6250  2A3C
6251  2A3D
6252  2A3E
6253  2A3F
6254  2A40
6255  2A41
6256  2A42
6257  2A43
6258  2A44
6259  2A45
6260  2A46
6261  2A47
6262  2A48
6263  2A49
6264  2A4A
6265  2A4B
6266  2A4C
6267  2A4D
6268  2A4E
6269  2A4F
6270  2A50
6271  2A51
6272  2A52
6273  2A53
6274  2A54
6275  2A55
6276  2A56
6277  2A57
6278  2A58
6279  2A59
6280  2A5A
6281  2A5B
6282  2A5C
6283  2A5D
6284  2A5E
6285  2A5F
6286  2A60
6287  2A61
6288  2A62
6289  2A63
6290  2A64
6291  2A65
6292  2A66
6293  2A67
6294  2A68
6295  2A69
6296  2A6A
6297  2A6B
6298  2A6C
6299  2A6D
6300  2A6E
6301  2A6F
6302  2A70
6303  2A71
6304  2A72
6305  2A73
6306  2A74
6307  2A75
6308  2A76
6309  2A77
6310  2A78
6311  2A79
6312  2A7A
6313  2A7B
6314  2A7C
6315  2A7D
6316  2A7E
6317  2A7F
6318  2A80
6319  2A81
6320  2A82
6321  2A83
6322  2A84
6323  2A85
6324  2A86
6325  2A87
6326  2A88
6327  2A89
6328  2A8A
6329  2A8B
6330  2A8C
6331  2A8D
6332  2A8E
6333  2A8F
6334  2A90
6335  2A91
6336  2A92
6337  2A93
6338  2A94
6339  2A95
6340  2A96
6341  2A97
6342  2A98
6343  2A99
6344  2A9A
6345  2A9B
6346  2A9C
6347  2A9D
6348  2A9E
6349  2A9F
6350  2AA0
6351  2AA1
6352  2AA2
6353  2AA3
6354  2AA4
6355  2AA5
6356  2AA6
6357  2AA7
6358  2AA8
6359  2AA9
6360  2AAA
6361  2AAB
6362  2AAC
6363  2AAD
6364  2AAE
6365  2AAF
6366  2AB0
6367  2AB1
6368  2AB2
6369  2AB3
6370  2AB4
6371  2AB5
6372  2AB6
6373  2AB7
6374  2AB8
6375  2AB9
6376  2ABA
6377  2ABB
6378  2ABC
6379  2ABD
6380  2ABE
6381  2ABF
6382  2AC0
6383  2AC1
6384  2AC2
6385  2AC3
6386  2AC4
6387  2AC5
6388  2AC6
6389  2AC7
6390  2AC8
6391  2AC9
6392  2ACA
6393  2ACB
6394  2ACC
6395  2ACD
6396  2ACE
6397  2ACF
6398  2AD0
6399  2AD1
6400  2AD2
6401  2AD3
6402  2AD4
6403  2AD5
6404  2AD6
6405  2AD7
6406  2AD8
6407  2AD9
6408  2ADA
6409  2ADB
6410  2ADC
6411  2ADD
6412  2ADE
6413  2ADF
6414  2AE0
6415  2AE1
6416  2AE2
6417  2AE3
6418  2AE4
6419  2AE5
6420  2AE6
6421  2AE7
6422  2AE8
6423  2AE9
6424  2AEA
6425  2AEB
6426  2AEC
6427  2AED
6428  2AEE
6429  2AEF
6430  2AF0
6431  2AF1
6432  2AF2
6433  2AF3
6434  2AF4
6435  2AF5
6436  2AF6
6437  2AF7
6438  2AF8
6439  2AF9
6440  2AFA
6441  2AFB
6442  2AFC
6443  2AFD
6444  2AFE
6445  2AFF
6446  2B00
6447  2B01
6448  2B02
6449  2B03
6450  2B04
6451  2B05
6452  2B06
6453  2B07
6454  2B08
6455  2B09
6456  2B0A
6457  2B0B
6458  2B0C
6459  2B0D
6460  2B0E
6461  2B0F
6462  2B10
6463  2B11
6464  2B12
6465  2B13
6466  2B14
6467  2B15
6468  2B16
6469  2B17
6470  2B18
6471  2B19
6472  2B1A
6473  2B1B
6474  2B1C
6475  2B1D
6476  2B1E
6477  2B1F
6478  2B20
6479  2B21
6480  2B22
6481  2B23
6482  2B24
6483  2B25
6484  2B26
6485  2B27
6486  2B28
6487  2B29
6488  2B2A
6489  2B2B
6490  2B2C
6491  2B2D
6492  2B2E
6493  2B2F
6494  2B30
6495  2B31
6496  2B32
6497  2B33
6498  2B34
6499  2B35
6500  2B36
6501  2B37
6502  2B38
6503  2B39
6504  2B3A
6505  2B3B
6506  2B3C
6507  2B3D
6508  2B3E
6509  2B3F
6510  2B40
6511  2B41
6512  2B42
6513  2B43
6514  2B44
6515  2B45
6516  2B46
6517  2B47
6518  2B48
6519  2B49
6520  2B4A
6521  2B4B
6522  2B4C
6523  2B4D
6524  2B4E
6525  2B4F
6526  2B50
6527  2B51
6528  2B52
6529  2B53
6530  2B54
6531  2B55
6532  2B56
6533  2B57
6534  2B58
6535  2B59
6536  2B5A
6537  2B5B
6538  2B5C
6539  2B5D
6540  2B5E
6541  2B5F
6542  2B60
6543  2B61
6544  2B62
6545  2B63
6546  2B64
6547  2B65
6548  2B66
6549  2B67
6550  2B68
6551  2B69
6552  2B6A
6553  2B6B
6554  2B6C
6555  2B6D
6556  2B6E
6557  2B6F
6558  2B70
6559  2B71
6560  2B72
6561  2B73
6562  2B74
6563  2B75
6564  2B76
6565  2B77
6566  2B78
6567  2B79
6568  2B7A
6569  2B7B
6570  2B7C
6571  2B7D
6572  2B7E
6573  2B7F
6574  2B80
6575  2B81
6576  2B82
6577  2B83
6578  2B84
6579  2B85
6580  2B86
6581  2B87
6582  2B88
6583  2B89
6584  2B8A
6585  2B8B
6586  2B8C
6587  2B8D
6588  2B8E
6589  2B8F
6590  2B90
6591  2B91
6592  2B92
6593  2B93
6594  2B94
6595  2B95
6596  2B96
6597  2B97
6598  2B98
6599  2B99
6600  2B9A
6601  2B9B
6602  2B9C
6603  2B9D
6604  2B9E
6605  2B9F
6606  2BA0
6607  2BA1
6608  2BA2
6609  2BA3
6610  2BA4
6611  2BA5
6612  2BA6
6613  2BA7
6614  2BA8
6615  2BA9
6616  2BAA
6617  2BAB
6618  2BAC
6619  2BAD
6620  2BAE
6621  2BAF
6622  2BB0
6623  2BB1
6624  2BB2
6625  2BB3
6626  2BB4
6627  2BB5
6628  2BB6
6629  2BB7
6630  2BB8
6631  2BB9
6632  2BBA
6633  2BBB
6634  2BBC
6635  2BBD
6636  2BBE
6637  2BBF
6638  2BC0
6639  2BC1
6640  2BC2
6641  2BC3
6642  2BC4
6643  2BC5
6644  2BC6
6645  2BC7
6646  2BC8
6647  2BC9
6648  2BCA
6649  2BCB
6650  2BCC
6651  2BCD
6652  2BCE
6653  2BCF
6654  2BD0
6655  2BD1
6656  2BD2
6657  2BD3
6658  2BD4
6659  2BD5
6660  2BD6
6661  2BD7
6662  2BD8
6663  2BD9
6664  2BDA
6665  2BDB
6666  2BDC
6667  2BDD
6668  2BDE
6669  2BDF
6670  2BE0
6671  2BE1
6672  2BE2
6673  2BE3
6674  2BE4
6675  2BE5
6676  2BE6
6677  2BE7
6678  2BE8
6679  2BE9
6680  2BEA
6681  2BEB
6682  2BEC
6683  2BED
6684  2BEE
6685  2BEF
6686  2BF0
6687  2BF1
6688  2BF2
6689  2BF3
6690  2BF4
6691  2BF5
6692  2BF6
6693  2BF7
6694  2BF8
6695  2BF9
6696  2BFA
6697  2BFB
6698  2BFC
6699  2BFD
6700  2BFE
6701  2BFF
6702  2C00
6703  2C01
6704  2C02
6705  2C03
6706  2C04
6707  2C05
6708  2C06
6709  2C07
6710  2C08
6711  2C09
6712  2C0A
6713  2C0B
6714  2C0C
6715  2C0D
6716  2C0E
6717  2C0F
6718  2C10
6719  2C11
6720  2C12
6721  2C13
6722  2C14
6723  2C15
6724  2C16
6725  2C17
6726  2C18
6727  2C19
6728  2C1A
6729  2C1B
6730  2C1C
6731  2C1D
6732  2C1E
6733  2C1F
6734  2C20
6735  2C21
6736  2C22
6737  2C23
6738  2C24
6739  2C25
6740  2C26
6741  2C27
6742  2C28
6743  2C29
6744  2C2A
6745  2C2B
6746  2C2C
6747  2C2D
6748  2C2E
6749  2C2F
6750  2C30
6751  2C31
6752  2C32
6753  2C33
6754  2C34
6755  2C35
6756  2C36
6757  2C37
6758  2C38
6759  2C39
6760  2C3A
6761  2C3B
6762  2C3C
6763  2C3D
6764  2C3E
6765  2C3F
6766  2C40
6767  2C41
6768  2C42
6769  2C43
6770  2C44
6771  2C45
6772  2C46
6773  2C47
6774  2C48
6775  2C49
6776  2C4A
6777  2C4B
6778  2C4C
6779  2C4D
6780  2C4E
6781  2C4F
6782  2C50
6783  2C51
6784  2C52
6785  2C53
6786  2C54
6787  2C55
6788  2C56
6789  2C57
6790  2C58
6791  2C59
6792  2C5A
6793  2C5B
6794  2C5C
6795  2C5D
6796  2C5E
6797  2C5F
6798  2C60
6799  2C61
6800  2C62
6801  2C63
6802  2C64
6803  2C65
6804  2C66
6805  2C67
6806  2C68
6807  2C69
6808  2C6A
6809  2C6B
6810  2C6C
6811  2C6D
6812  2C6E
6813  2C6F
6814  2C70
6815  2C71
6816  2C72
6817  2C73
6818  2C74
6819  2C75
6820  2C76
6821  2C77
6822  2C78
6823  2C79
6824  2C7A
6825  2C7B
6826  2C7C
6827  2C7D
6828  2C7E
6829  2C7F
6830  2C80
6831  2C81
6832  2C82
6833  2C83
6834  2C84
6835  2C85
6836  2C86
6837  2C87
6838  2C88
6839  2C89
6840  2C8A
6841  2C8B
6842  2C8C
6843  2C8D
6844  2C8E
6845  2C8F
6846  2C90
6847  2C91
6848  2C92
6849  2C93
6850  2C94
6851  2C95
6852  2C96
6853  2C97
6854  2C98
6855  2C99
6856  2C9A
6857  2C9B
6858  2C9C
6859  2C9D
6860  2C9E
6861  2C9F
6862  2CA0
6863  2CA1
6864  2CA2
6865  2CA3
6866  2CA4
6867  2CA5
6868  2CA6
6869  2CA7
6870  2CA8
6871  2CA9
6872  2CAA
6873  2CAB
6874  2CAC
6875  2CAD
6876  2CAE
6877  2CAF
6878  2CB0
6879  2CB1
6880  2CB2
6881  2CB3
6882  2CB4
6883  2CB5
6884  2CB6
6885  2CB7
6886  2CB8
6887  2CB9
6888  2CBA
6889  2CBB
6890  2CBC
6891  2CBD
6892  2CBE
6893  2CBF
6894  2CC0
6895  2CC1
6896  2CC2
6897  2CC3
6898  2CC4
6899  2CC5
6900  2CC6
6901  2CC7
6902  2CC8
6903  2CC9
6904  2CCA
6905  2CCB
6906  2CCC
6907  2CCD
6908  2CCE
6909  2CCF
6910  2CD0
6911  2CD1
6912  2CD2
6913  2CD3
6914  2CD4
6915  2CD5
6916  2CD6
6917  2CD7
6918  2CD8
6919  2CD9
6920  2CDA
6921  2CDB
6922  2CDC
6923  2CDD
6924  2CDE
6925  2CDF
6926  2CE0
6927  2CE1
6928  2CE2
6929  2CE3
6930  2CE4
6931  2CE5
6932  2CE6
6933  2CE7
6934  2CE8
6935  2CE9
6936  2CEA
6937  2CEB
6938  2CEC
6939  2CED
6940  2CEE
6941  2CEF
6942  2CF0
6943  2CF1
6944  2CF2
6945  2CF3
6946  2CF4
6947  2CF5
6948  2CF6
6949  2CF7
6950  2CF8
6951  2CF9
6952  2CFA
6953  2CFB
6954  2CFC
6955  2CFD
6956  2CFE
6957  2CFF
6958  2D00
6959  2D01
6960  2D02
6961  2D03
6962  2D04
6963  2D05
6964  2D06
6965  2D07
6966  2D08
6967  2D09
6968  2D0A
6969  2D0B
6970  2D0C
6971  2D0D
6972  2D0E
6973  2D0F
6974  2D10
6975  2D11
6976  2D12
6977  2D13
6978  2D14
6979  2D15
6980  2D16
6981  2D17
6982  2D18
6983  2D19
6984  2D1A
6985  2D1B
6986  2D1C
6987  2D1D
6988  2D1E
6989  2D1F
6990  2D20
6991  2D21
6992  2D22
6993  2D23
6994  2D24
6995  2D25
6996  2D26
6997  2D27
6998  2D28
6999  2D29
7000  2D2A
7001  2D2B
7002  2D2C
7003  2D2D
7004  2D2E
7005  2D2F
7006  2D30
7007  2D31
7008  2D32
7009  2D33
7010  2D34
7011  2D35
7012  2D36
7013  2D37
7014  2D38
7015  2D39
7016  2D3A
7017  2D3B
7018  2D3C
7019  2D3D
7020  2D3E
7021  2D3F
7022  2D40
7023  2D41
7024  2D42
7025  2D43
7026  2D44
7027  2D45
7028  2D46
7029  2D47
7030  2D48
7031  2D49
7032  2D4A
7033  2D4B
7034  2D4C
7035  2D4D
7036  2D4E
7037  2D4F
7038  2D50
7039  2D51
7040  2D52
7041  2D53
7042  2D54
7043  2D55
7044  2D56
7045  2D57
7046  2D58
7047  2D59
7048  2D5A
7049  2D5B
7050  2D5C
7051  2D5D
7052  2D5E
7053  2D5F
7054  2D60
7055  2D61
7056  2D62
7057  2D63
7058  2D64
7059  2D65
7060  2D66
7061  2D67
7062  2D68
7063  2D69
7064  2D6A
7065  2D6B
7066  2D6C
7067  2D6D
7068  2D6E
7069  2D6F
7070  2D70
7071  2D71
7072  2D72
7073  2D73
7074  2D74
7075  2D75
7076  2D76
7077  2D77
7078  2D78
7079  2D79
7080  2D7A
7081  2D7B
7082  2D7C
7083  2D7D
7084  2D7E
7085  2D7F
7086  2D80
7087  2D81
7088  2D82
7089  2D83
7090  2D84
7091  2D85
7092  2D86
7093  2D87
7094  2D88
7095  2D89
7096  2D8A
7097  2D8B
7098  2D8C
7099  2D8D
7100  2D8E
7101  2D8F
7102  2D90
7103  2D91
7104  2D92
7105  2D93
7106  2D94
7107  2D95
7108  2D96
7109  2D97
7110  2D98
7111  2D99
7112  2D9A
7113  2D9B
7114  2D9C
7115  2D9D
7116  2D9E
7117  2D9F
7118  2DA0
7119  2DA1
7120  2DA2
7121  2DA3
7122  2DA4
7123  2DA5
7124  2DA6
7125  2DA7
7126  2DA8
7127  2DA9
7128  2DAA
7129  2DAB
7130  2DAC
7131  2DAD
7132  2DAE
7133  2DAF
7134  2DB0
7135  2DB1
7136  2DB2
7137  2DB3
7138  2DB4
7139  2DB5
7140  2DB6
7141  2DB7
7142  2DB8
7143  2DB9
7144  2DBA
7145  2DBB
7146  2DBC
7147  2DBD
7148  2DBE
7149  2DBF
7150  2DC0
7151  2DC1
7152  2DC2
7153  2DC3
7154  2DC4
7155  2DC5
7156  2DC6
7157  2DC7
7158  2DC8
7159  2DC9
7160  2DCA
7161  2DCB
7162  2DCC
7163  2DCD
7164  2DCE
7165  2DCF
7166  2DD0
7167  2DD1
7168  2DD2
7169  2DD3
7170  2DD4
7171  2DD5
7172  2DD6
7173  2DD7
7174  2DD8
7175  2DD9
7176  2DDA
7177  2DDB
7178  2DDC
7179  2DDD
7180  2DDE
7181  2DDF
7182  2DE0
7183  2DE1
7184  2DE2
7185  2DE3
7186  2DE4
7187  2DE5
7188  2DE6
7189  2DE7
7190  2DE8
7191  2DE9
7192  2DEA
7193  2DEB
7194  2DEC
7195  2DED
7196  2DEE
7197  2DEF
7198  2DF0
7199  2DF1
7200  2DF2
7201  2DF3
7202  2DF4
7203  2DF5
7204  2DF6
7205  2DF7
7206  2DF8
7207  2DF9
7208  2DFA
7209  2DFB
7210  2DFC
7211  2DFD
7212  2DFE
7213  2DFF
7214  2E00
7215  2E01
7216  2E02
7217  2E03
7218  2E04
7219  2E05
7220  2E06
7221  2E07
7222  2E08
7223  2E09
7224  2E0A
7225  2E0B
7226  2E0C
7227  2E0D
7228  2E0E
7229  2E0F
7230  2E10
7231  2E11
7232  2E12
7233  2E13
7234  2E14
7235  2E15
7236  2E16
7237  2E17
7238  2E18
7239  2E19
7240  2E1A
7241  2E1B
7242  2E1C
7243  2E1D
7244  2E1E
7245  2E1F
7246  2E20
7247  2E21
7248  2E22
7249  2E23
7250  2E24
7251  2E25
7252  2E26
7253  2E27
7254  2E28
7255  2E29
7256  2E2A
7257  2E2B
7258  2E2C
7259  2E2D
7260  2E2E
7261  2E2F
7262  2E30
7263  2E31
7264  2E32
7265  2E33
7266  2E34
7267  2E35
7268  2E36
7269  2E37
7270  2E38
7271  2E39
7272  2E3A
7273  2E3B
7274  2E3C
7275  2E3D
7276  2E3E
7277  2E3F
7278  2E40
7279  2E41
7280  2E42
7281  2E43
7282  2E44
7283  2E45
7284  2E46
7285  2E47
7286  2E48
7287  2E49
7288  2E4A
7289  2E4B
7290  2E4C
7291  2E4D
7292  2E4E
7293  2E4F
7294  2E50
7295  2E51
7296  2E52
7297  2E53
7298  2E54
7299  2E55
7300  2E56
7301  2E57
7302  2E58
7303  2E59
7304  2E5A
7305  2E5B
7306  2E5C
7307  2E5D
7308  2E5E
7309  2E5F
7310  2E60
7311  2E61
7312  2E62
7313  2E63
7314  2E64
7315  2E65
7316  2E66
7317  2E67
7318  2E68
7319  2E69
7320  2E6A
7321  2E6B
7322  2E6C
7323  2E6D
7324  2E6E
7325  2E6F
7326  2E70
7327  2E71
7328  2E72
7329  2E73
7330  2E74
7331  2E75
7332  2E76
7333  2E77
7334  2E78
7335  2E79
7336  2E7A
7337  2E7B
7338  2E7C
7339  2E7D
7340  2E7E
7341  2E7F
7342  2E80
7343  2E81
7344  2E82
7345  2E83
7346  2E84
7347  2E85
7348  2E86
7349  2E87
7350  2E88
7351  2E89
7352  2E8A
7353  2E8B
7354  2E8C
7355  2E8D
7356  2E8E
7357  2E8F
7358  2E90
7359  2E91
7360  2E92
7361  2E93
7362  2E94
7363  2E95
7364  2E96
7365  2E97
7366  2E98
7367  2E99
7368  2E9A
7369  2E9B
7370  2E9C
7371  2E9D
7372  2E9E
7373  2E9F
7374  2EA0
7375  2EA1
7376  2EA2
7377  2EA3
7378  2EA4
7379  2EA5
7380  2EA6
7381  2EA7
7382  2EA8
7383  2EA9
7384  2EAA
7385  2EAB
7386  2EAC
7387  2EAD
7388  2EAE
7389  2EAF
7390  2EB0
7391  2EB1
7392  2EB2
7393  2EB3
7394  2EB4
7395  2EB5
7396  2EB6
7397  2EB7
7398  2EB8
7399  2EB9
7400  2EBA
7401  2EBB
7402  2EBC
7403  2EBD
7404  2EBE
7405  2EBF
7406  2EC0
7407  2EC1
7408  2EC2
7409  2EC3
7410  2EC4
7411  2EC5
7412  2EC6
7413  2EC7
7414  2EC8
7415  2EC9
7416  2ECA
7417  2ECB
7418  2ECC
7419  2ECD
7420  2ECE
7421  2ECF
7422  2ED0
7423  2ED1
7424  2ED2
7425  2ED3
7426  2ED4
7427  2ED5
7428  2ED6
7429  2ED7
7430  2ED8
7431  2ED9
7432  2EDA
7433  2EDB
7434  2EDC
7435  2EDD
7436  2EDE
7437  2EDF
7438  2EE0
7439  2EE1
7440  2EE2
7441  2EE3
7442  2EE4
7443  2EE5
7444  2EE6
7445  2EE7
7446  2EE8
7447  2EE9
7448  2EEA
7449  2EEB
7450  2EEC
7451  2EED
7452  2EEE
7453  2EEF
7454  2EF0
7455  2EF1
7456  2EF2
7457  2EF3
7458  2EF4
7459  2EF5
7460  2EF6
7461  2EF7
7462  2EF8
7463  2EF9
7464  2EFA
7465  2EFB
7466  2EFC
7467  2EFD
7468  2EFE
7469  2EFF
7470  2F00
7471  2F01
7472  2F02
7473  2F03
7474  2F04
7475  2F05
7476  2F06
7477  2F07
7478  2F08
7479  2F09
7480  2F0A
7481  2F0B
7482  2F0C
7483  2F0D
7484  2F0E
7485  2F0F
7486  2F10
7487  2F11
7488  2F12
7489  2F13
7490  2F14
7491  2F15
7492  2F16
7493  2F17
7494  2F18
7495  2F19
7496  2F1A
7497  2F1B
7498  2F1C
7499  2F1D
7500  2F1E
7501  2F1F
7502  2F20
7503  2F21
7504  2F22
7505  2F23
7506  2F24
7507  2F25
7508  2F26
7509  2F27
7510  2F28
7511  2F29
7512  2F2A
7513  2F2B
7514  2F2C
7515  2F2D
7516  2F2E
7517  2F2F
7518  2F30
7519  2F31
7520  2F32
7521  2F33
7522  2F34
7523  2F35
7524  2F36
7525  2F37
7526  2F38
7527  2F39
7528  2F3A
7529  2F3B
7530  2F3C
7531  2F3D
7532  2F3E
7533  2F3F
7534  2F40
7535  2F41
7536  2F42
7537  2F43
7538  2F44
7539  2F45
7540  2F46
7541  2F47
7542  2F48
7543  2F49
7544  2F4A
7545  2F4B
7546  2F4C
7547  2F4D
7548  2F4E
7549  2F4F
7550  2F50
7551  2F51
7552  2F52
7553  2F53
7554  2F54
7555  2F55
7556  2F56
7557  2F57
7558  2F58
7559  2F59
7560  2F5A
7561  2F5B
7562  2F5C
7563  2F5D
7564  2F5E
7565  2F5F
7566  2F60
7567  2F61
7568  2F62
7569  2F63
7570  2F64
7571  2F65
7572  2F66
7573  2F67
7574  2F68
7575  2F69
7576  2F6A
7577  2F6B
7578  2F6C
7579  2F6D
7580  2F6E
7581  2F6F
7582  2F70
7583  2F71
7584  2F72
7585  2F73
7586  2F74
7587  2F75
7588  2F76
7589  2F77
7590  2F78
7591  2F79
7592  2F7A
7593  2F7B
7594  2F7C
7595  2F7D
7596  2F7E
7597  2F7F
7598  2F80
7599  2F81
7600  2F82
7601  2F83
7602  2F84
7603  2F85
7604  2F86
7605  2F87
7606  2F88
7607  2F89
7608  2F8A
7609  2F8B
7610  2F8C
7611  2F8D
7612  2F8E
7613  2F8F
7614  2F90
7615  2F91
7616  2F92
7617  2F93
7618  2F94
7619  2F95
7620  2F96
7621  2F97
7622  2F98
7623  2F99
7624  2F9A
7625  2F9B
7626  2F9C
7627  2F9D
7628  2F9E
7629  2F9F
7630  2FA0
7631  2FA1
7632  2FA2
7633  2FA3
7634  2FA4
7635  2FA5
7636  2FA6
7637  2FA7
7638  2FA8
7639  2FA9
7640  2FAA
7641  2FAB
7642  2FAC
7643  2FAD
7644  2FAE
7645  2FAF
7646  2FB0
7647  2FB1
7648  2FB2
7649  2FB3
7650  2FB4
7651  2FB5
7652  2FB6
7653  2FB7
7654  2FB8
7655  2FB9
7656  2FBA
7657  2FBB
7658  2FBC
7659  2FBD
7660  2FBE
7661  2FBF
7662  2FC0
7663  2FC1
7664  2FC2
7665  2FC3
7666  2FC4
7667  2FC5
7668  2FC6
7669  2FC7
7670  2FC8
7671  2FC9
7672  2FCA
7673  2FCB
7674  2FCC
7675  2FCD
7676  2FCE
7677  2FCF
7678  2FD0
7679  2FD1
7680  2FD2
7681  2FD3
7682  2FD4
7683  2FD5
7684  2FD6
7685  2FD7
7686  2FD8
7687  2FD9
7688  2FDA
7689  2FDB
7690  2FDC
7691  2FDD
7692  2FDE
7693  2FDF
7694  2FE0
7695  2FE1
7696  2FE2
7697  2FE3
7698  2FE4
7699  2FE5
7700  2FE6
7701  2FE7
7702  2FE8
7703  2FE9
7704  2FEA
7705  2FEB
7706  2FEC
7707  2FED
7708  2FEE
7709  2FEF
7710  2FF0
7711  2FF1
7712  2FF2
7713  2FF3
7714  2FF4
7715  2FF5
7716  2FF6
7717  2FF7
7718  2FF8
7719  2FF9
7720  2FFA
7721  2FFB
7722  2FFC
7723  2FFD
7724  2FFE
7725  2FFF
7726  3000
7727  3001
7728  3002
7729  3003
7730  3004
7731  3005
7732  3006
7733  3007
7734  3008
7735  3009
7736  300A
7737  300B
7738  300C
7739  300D
7740  300E
7741  300F
7742  3010
7743  3011
7744  3012
7745  3013
7746  3014
7747  3015
7748  3016
7749  3017
7750  3018
7751  3019
7752  301A
7753  301B
7754  301C
7755  301D
7756  301E
7757  301F
7758  3020
7759  3021
7760  3022
7761  3023
7762  3024
7763  3025
7764  3026
7765  3027
7766  3028
7767  3029
7768  302A
7769  302B
7770  302C
7771  302D
7772  302E
7773  302F
7774  3030
7775  3031
7776  3032
7777  3033
7778  3034
7779  3035
7780  3036
7781  3037
7782  3038
7783  3039
7784  303A
7785  303B
7786  303C
7787  303D
7788  303E
7789  303F
7790  3040
7791  3041
7792  3042
7793  3043
7794  3044
7795  3045
7796  3046
7797  3047
7798  3048
7799  3049
7800  304A
7801  304B
7802  304C
7803  304D
7804  304E
7805  304F
7806  3050
7807  3051
7808  3052
7809  3053
7810  3054
7811  3055
7812  3056
7813  3057
7814  3058
7815  3059
7816  305A
7817  305B
7818  305C
7819  305D
7820  305E
7821  305F
7822  3060
7823  3061
7824  3062
7825  3063
7826  3064
7827  3065
7828  3066
7829  3067
7830  3068
7831  3069
7832  306A
7833  306B
7834  306C
7835  306D
7836  306E
7837  306F
7838  3070
7839  3071
7840  3072
7841  3073
7842  3074
7843  3075
7844  3076
7845  3077
7846  3078
7847  3079
7848  307A
7849  307B
7850  307C
7851  307D
7852  307E
7853  307F
7854  3080
7855  3081
7856  3082
7857  3083
7858  3084
7859  3085
7860  3086
7861  3087
7862  3088
7863  3089
7864  308A
7865  308B
7866  308C
7867  308D
7868  308E
7869  308F
7870  3090
7871  3091
7872  3092
7873  3093
7874  3094
7875  3095
7876  3096
7877  3097
7878  3098
7879  3099
7880  309A
7881  309B
7882  309C
7883  309D
7884  309E
7885  309F
7886  30A0
7887  30A1
7888  30A2
7889  30A3
7890  30A4
7891  30A5
7892  30A6
7893  30A7
7894  30A8
7895  30A9
7896  30AA
7897  30AB
7898  30AC
7899  30AD
7900  30AE
7901  30AF
7902  30B0
7903  30B1
7904  30B2
7905  30B3
7906  30B4
7907  30B5
7908  30B6
7909  30B7
7910  30B8
7911  30B9
7912  30BA
7913  30BB
7914  30BC
7915  30BD
7916  30BE
7917  30BF
7918  30C0
7919  30C1
7920  30C2
7921  30C3
7922  30C4
7923  30C5
7924  30C6
7925  30C7
7926  30C8
7927  30C9
7928  30CA
7929  30CB
7930  30CC
7931  30CD
7932  30CE
7933  30CF
7934  30D0
7935  30D1
7936  30D2
7937  30D3
7938  30D4
7939  30D5
7940  30D6
7941  30D7
7942  30D8
7943  30D9
7944  30DA
7945  30DB
7946  30DC
7947  30DD
7948  30DE
7949  30DF
7950  30E0
7951  30E1
7952  30E2
7953  30E3
7954  30E4
7955  30E5
7956  30E6
7957  30E7
7958  30E8
7959  30E9
7960  30EA
7961  30EB
7962  30EC
7963  30ED
7964  30EE
7965  30EF
7966  30F0
7967  30F1
7968  30F2
7969  30F3
7970  30F4
7971  30F5
7972  30F6
7973  30F7
7974  30F8
7975  30F9
7976  30FA
7977  30FB
7978  30FC
7979  30FD
7980  30FE
7981  30FF
7982  3100
7983  3101
7984  3102
7985  3103
7986  3104
7987  3105
7988  3106
7989  3107
7990  3108
7991  3109
7992  310A
7993  310B
7994  310C
7995  310D
7996  310E
7997  310F
7998  3110
7999  3111
8000  3112
8001  3113
8002  3114
8003  3115
8004  3116
8005  3117
8006  3118
8007  3119
8008  311A
8009  311B
8010  311C
8011  311D
8012  311E
8013  311F
8014  3120
8015  3121
8016  3122
8017  3123
8018  3124
8019  3125
8020  3126
8021  3127
8022  3128
8023  3129
8024  312A
8025  312B
8026  312C
8027  312D
8028  312E
8029  312F
8030  3130
8031  3131
8032  3132
8033  3133
8034  3134
8035  3135
8036  3136
8037  3137
8038  3138
8039  3139
8040  313A
8041  313B
8042  313C
8043  313D
8044  313E
8045  313F
8046  3140
8047  3141
8048  3142
8049  3143
8050  3144
8051  3145
8052  3146
8053  3147
8054  3148
8055  3149
8056  314A
8057  314B
8058  314C
8059  314D
8060  314E
8061  314F
8062  3150
8063  3151
8064  3152
8065  3153
8066  3154
8067  3155
8068  3156
8069  3157
8070  3158
8071  3159
8072  315A
8073  315B
8074  315C
8075  315D
8076  315E
8077  315F
8078  3160
8079  3161
8080  3162
8081  3163
8082  3164
8083  3165
8084  3166
8085  3167
8086  3168
8087  3169
8088  316A
8089  316B
8090  316C
8091  316D
8092  316E
8093  316F
8094  3170
8095  3171
8096  3172
8097  3173
8098  3174
8099  3175
8100  3176
8101  3177
8102  3178
8103  3179
8104  317A
8105  317B
8106  317C
8107  317D
8108  317E
8109  317F
8110  3180
8111  3181
8112  3182
8113  3183
8114  3184
8115  3185
8116  3186
8117  3187
8118  3188
8119  3189
8120  318A
8121  318B
8122  318C
8123  318D
8124  318E
8125  318F
8126  3190
8127  3191
8128  3192
8129  3193
8130  3194
8131  3195
8132  3196
8133  3197
8134  3198
8135  3199
8136  319A
8137  319B
8138  319C
8139  319D
8140  319E
8141  319F
8142  31A0
8143  31A1
8144  31A2
8145  31A3
8146  31A4
8147  31A5
8148  31A6
8149  31A7
8150  31A8
8151  31A9
8152  31AA
8153  31AB
8154  31AC
8155  31AD
8156  31AE
8157  31AF
8158  31B0
8159  31B1
8160  31B2
8161  31B3
8162  31B4
8163  31B5
8164  31B6
8165  31B7
8166  31B8
8167  31B9
8168  31BA
8169  31BB
8170  31BC
8171  31BD
8172  31BE
8173  31BF
8174  31C0
8175  31C1
8176  31C2
8177  31C3
8178  31C4
8179  31C5
8180  31C6
8181  31C7
8182  31C8
8183  31C9
8184  31CA
8185  31CB
8186  31CC
8187  31CD
8188  31CE
8189  31CF
8190  31D0
8191  31D1
8192  31D2
8193  31D3
8194  31D4
8195  31D5
8196  31D6
8197  31D7
8198  31D8
8199  31D9
8200  31DA
8201  31DB
8202  31DC
8203  31DD
8204  31DE
8205  31DF
8206  31E0
8207  31E1
8208  31E2
8209  31E3
8210  31E4
8211  31E5
8212  31E6
8213  31E7
8214  31E8
8215  31E9
8216  31EA
8217  31EB
8218  31EC
8219  31ED
8220  31EE
8221  31EF
8222  31F0
8223  31F1
8224  31F2
8225  31F3
8226  31F4
8227  31F5
8228  31F6
8229  31F7
8230  31F8
8231  31F9
8232  31FA
8233  31FB
8234  31FC
8235  31FD
8236  31FE
8237  31FF
8238  3200
8239  3201
8240  3202
8241  3203
8242  3204
8243  3205
8244  3206
8245  3207
8246  3208
8247  3209
8248  320A
8249  320B
8250  320C
8251  320D
8252  320E
8253  320F
8254  3210
8255  3211
8256  3212
8257  3213
8258  3214
8259  3215
8260  3216
8261  3217
8262  3218
8263  3219
8264  321A
8265  321B
8266  321C
8267  321D
8268  321E
8269  321F
8270  3220
8271  3221
8272  3222
8273  3223
8274  3224
8275  3225
8276  3226
8277  3227
8278  3228
8279  3229
8280  322A
8281  322B
8282  322C
8283  322D
8284  322E
8285  322F
8286  3230
8287  3231
8288  3232
8289  3233
8290  3234
8291  3235
8292  3236
8293  3237
8294  3238
8295  3239
8296  323A
8297  323B
8298  323C
8299  323D
8300  323E
8301  323F
8302  3240
8303  3241
8304  3242
8305  3243
8306  3244
8307  3245
8308  3246
8309  3247
8310  3248
8311  3249
8312  324A
8313  324B
8314  324C
8315  324D
8316  324E
8317  324F
8318  3250
8319  3251
8320  3252
8321  3253
8322  3254
8323  3255
8324  3256
8325  3257
8326  3258
8327  3259
8328  325A
8329  325B
8330  325C
8331  325D
8332  325E
8333  325F
8334  3260
8335  3261
8336  3262
8337  3263
8338  3264
8339  3265
8340  3266
8341  3267
8342  3268
8343  3269
8344  326A
8345  326B
8346  326C
8347  326D
8348  326E
8349  326F
8350  3270
8351  3271
8352  3272
8353  3273
8354  3274
8355  3275
8356  3276
8357  3277
8358  3278
8359  3279
8360  327A
8361  327B
8362  327C
8363  327D
8364  327E
8365  327F
8366  3280
8367  3281
8368  3282
8369  3283
8370  3284
8371  3285
8372  3286
8373  3287
8374  3288
8375  3289
8376  328A
8377  328B
8378  328C
8379  328D
8380  328E
8381  328F
8382  3290
8383  3291
8384  3292
8385  3293
8386  3294
8387  3295
8388  3296
8389  3297
8390  3298
8391  3299
8392  329A
8393  329B
8394  329C
8395  329D
8396  329E
8397  329F
8398  32A0
8399  32A1
8400  32A2
8401  32A3
8402  32A4
8403  32A5
8404  32A6
8405  32A7
8406  32A8
8407  32A9
8408  32AA
8409  32AB
8410  32AC
8411  32AD
8412  32AE
8413  32AF
8414  32B0
8415  32B1
8416  32B2
8417  32B3
8418  32B4
8419  32B5
8420  32B6
8421  32B7
8422  32B8
8423  32B9
8424  32BA
8425  32BB
8426  32BC
8427  32BD
8428  32BE
8429  32BF
8430  32C0
8431  32C1
8432  32C2
8433  32C3
8434  32C4
8435  32C5
8436  32C6
8437  32C7
8438  32C8
8439  32C9
8440  32CA
8441  32CB
8442  32CC
8443  32CD
8444  32CE
8445  32CF
8446  32D0
8447  32D1
8448  32D2
8449  32D3
8450  32D4
8451  32D5
8452  32D6
8453  32D7
8454  32D8
8455  32D9
8456  32DA
8457  32DB
8458  32DC
8459  32DD
8460  32DE
8461  32DF
8462  32E0
8463  32E1
8464  32E2
8465  32E3
8466  32E4
8467  32E5
8468  32E6
8469  32E7
8470  32E8
8471  32E9
8472  32EA
8473  32EB
8474  32EC
8475  32ED
8476  32EE
8477  32EF
8478  32F0
8479  32F1
8480  32F2
8481  32F3
8482  32F4
8483  32F5
8484  32F6
8485  32F7
8486  32F8
8487  32F9
8488  32FA
8489  32FB
8490  32FC
8491  32FD
8492  32FE
8493  32FF
8494  3300
8495  3301
8496  3302
8497  3303
8498  3304
8499  3305
8500  3306
8501  3307
8502  3308
8503  3309
8504  330A
8505  330B
8506  330C
8507  330D
8508  330E
8509  330F
8510  3310
8511  3311
8512  3312
8513  3313
8514  3314
8515  3315
8516  3316
8517  3317
8518  3318
8519  3319
8520  331A
8521  331B
8522  331C
8523  331D
8524  331E
8525  331F
8526  3320
8527  3321
8528  3322
8529  3323
8530  3324
8531  3325
8532  3326
8533  3327
8534  3328
8535  3329
8536  332A
8537  332B
8538  332C
8539  332D
8540  332E
8541  332F
8542  3330
8543  3331
8544  3332
8545  3333
8546  3334
8547  3335
8548  3336
8549  3337
8550  3338
8551  3339
8552  333A
8553  333B
8554  333C
8555  333D
8556  333E
8557  333F
8558  3340
8559  3341
8560  3342
8561  3343
8562  3344
8563  3345
8564  3346
8565  3347
8566  3348
8567  3349
8568  334A
8569  334B
8570  334C
8571  334D
8572  334E
8573  334F
8574  3350
8575  3351
8576  3352
8577  3353
8578  3354
8579  3355
8580  3356
8581  3357
8582  3358
8583  3359
8584  335A
8585  335B
8586  335C
8587  335D
8588  335E
8589  335F
8590  3360
8591  3361
8592  3362
8593  3363
8594  3364
8595  3365
8596  3366
8597  3367
8598  3368
8599  3369
8600  336A
8601  336B
8602  336C
8603  336D
8604  336E
8605  336F
8606  3370
8607  3371
8608  3372
8609  3373
8610  3374
8611  3375
8612  3376
8613  3377
8614  3378
8615  3379
8616  337A
8617  337B
8618  337C
8619  337D
8620  337E
8621  337F
8622  3380
8623  3381
8624  3382
8625  3383
8626  3384
8627  3385
8628  3386
8629  3387
8630  3388
8631  3389
8632  338A
8633  338B
8634  338C
8635  338D
8636  338E
8637  338F
8638  3390
8639  3391
8640  3392
8641  3393
8642  3394
8643  3395
8644  3396
8645  3397
8646  3398
8647  3399
8648  339A
8649  339B
8650  339C
8651  339D
8652  339E
8653  339F
8654  33A0
8655  33A1
8656  33A2
8657  33A3
8658  33A4
8659  33A5
8660  33A6
8661  33A7
8662  33A8
8663  33A9
8664  33AA
8665  33AB
8666  33AC
8667  33AD
8668  33AE
8669  33AF
8670  33B0
8671  33B1
8672  33B2
8673  33B3
8674  33B4
8675  33B5
8676  33B6
8677  33B7
8678  33B8
8679  33B9
8680  33BA
8681  33BB
8682  33BC
8683  33BD
8684  33BE
8685  33BF
8686  33C0
8687  33C1
8688  33C2
8689  33C3
8690  33C4
8691  33C5
8692  33C6
8693  33C7
8694  33C8
8695  33C9
8696  33CA
8697  33CB
8698  33CC
8699  33CD
8700  33CE
8701  33CF
8702  33D0
8703  33D1
8704  33D2
8705  33D3
8706  33D4
8707  33D5
8708  33D6
8709  33D7
8710  33D8
8711  33D9
8712  33DA
8713  33DB
8714  33DC
8715  33DD
8716  33DE
8717  33DF
8718  33E0
8719  33E1
8720  33E2
8721  33E3
8722  33E4
8723  33E5
8724  33E6
8725  33E7
8726  33E8
8727  33E9
8728  33EA
8729  33EB
8730  33EC
8731  33ED
8732  33EE
8733  33EF
8734  33F0
8735  33F1
8736  33F2
8737  33F3
8738  33F4
8739  33F5
8740  33F6
8741  33F7
8742  33F8
8743  33F9
8744  33FA
8745  33FB
8746  33FC
8747  33FD
8748  33FE
8749  33FF
8750  3400
8751  3401
8752  3402
8753  3403
8754  3404
8755  3405
8756  3406
8757  3407
8758  3408
8759  3409
8760  340A
8761  340B
8762  340C
8763  340D
8764  340E
8765  340F
8766  3410
8767  3411
8768  3412
8769  3413
8770  3414
8771  3415
8772  3416
8773  3417
8774  3418
8775  3419
8776  341A
8777  341B
8778  341C
8779  341D
8780  341E
8781  341F
8782  3420
8783  3421
8784  3422
8785  3423
8786  3424
8787  3425
8788  3426
8789  3427
8790  3428
8791  3429
8792  342A
8793  342B
8794  342C
8795  342D
8796  342E
8797  342F
8798  3430
8799  3431
8800  3432
8801  3433
8802  3434
8803  3435
8804  3436
8805  3437
8806  3438
8807  3439
8808  343A
8809  343B
8810  343C
8811  343D
8812  343E
8813  343F
8814  3440
8815  3441
8816  3442
8817  3443
8818  3444
8819  3445
8820  3446
8821  3447
8822  3448
8823  3449
8824  344A
8825  344B
8826  344C
8827  344D
8828  344E
8829  344F
8830  3450
8831  3451
8832  3452
8833  3453
8834  3454
8835  3455
8836  3456
8837  3457
8838  3458
8839  3459
8840  345A
8841  345B
8842  345C
8843  345D
8844  345E
8845  345F
8846  3460
8847  3461
8848  3462
8849  3463
8850  3464
8851  3465
8852  3466
8853  3467
8854  3468
8855  3469
8856  346A
8857  346B
8858  346C
8859  346D
8860  346E
8861  346F
8862  3470
8863  3471
8864  3472
8865  3473
8866  3474
8867  3475
8868  3476
8869  3477
8870  3478
8871  3479
8872  347A
8873  347B
8874  347C
8875  347D
8876  347E
8877  347F
8878  3480
8879  3481
8880  3482
8881  3483
8882  3484
8883  3485
8884  3486
8885  3487
8886  3488
8887  3489
8888  348A
8889  348B
8890  348C
8891  348D
8892  348E
8893  348F
8894  3490
8895  3491
8896  3492
8897  3493
8898  3494
8899  3495
8900  3496
8901  3497
8902  3498
8903  3499
8904  349A
8905  349B
8906  349C
8907  349D
8908  349E
8909  349F
8910  34A0
8911  34A1
8912  34A2
8913  34A3
8914  34A4
8915  34A5
8916  34A6
8917  34A7
8918  34A8
8919  34A9
8920  34AA
8921  34AB
8922  34AC
8923  34AD
8924  34AE
8925  34AF
8926  34B0
8927  34B1
8928  34B2
8929  34B3
8930  34B4
8931  34B5
8932  34B6
8933  34B7
8934  34B8
8935  34B9
8936  34BA
8937  34BB
8938  34BC
8939  34BD
8940  34BE
8941  34BF
8942  34C0
8943  34C1
8944  34C2
8945  34C3
8946  34C4
8947  34C5
8948  34C6
8949  34C7
8950  34C8
8951  34C9
8952  34CA
8953  34CB
8954  34CC
8955  34CD
8956  34CE
8957  34CF
8958  34D0
8959  34D1
8960  34D2
8961  34D3
8962  34D4
8963  34D5
8964  34D6
8965  34D7
8966  34D8
8967  34D9
8968  34DA
8969  34DB
8970  34DC
8971  34DD
8972  34DE
8973  34DF
8974  34E0
8975  34E1
8976  34E2
8977  34E3
8978  34E4
8979  34E5
8980  34E6
8981  34E7
8982  34E8
8983  34E9
8984  34EA
8985  34EB
8986  34EC
8987  34ED
8988  34EE
8989  34EF
8990  34F0
8991  34F1
8992  34F2
8993  34F3
8994  34F4
8995  34F5
8996  34F6
8997  34F7
8998  34F8
8999  34F9
9000  34FA
9001  34FB
9002  34FC
9003  34FD
9004  34FE
9005  34FF
9006  3500
9007  3501
9008  3502
9009  3503
9010  3504
9011  3505
9012  3506
9013  3507
9014  3508
9015  3509
9016  350A
9017  350B
9018  350C
9019  350D
9020  350E
9021  350F
9022  3510
9023  3511
9024  3512
9025  3513
9026  3514
9027  3515
9028  3516
9029  3517
9030  3518
9031  3519
9032  351A
9033  351B
9034  351C
9035  351D
9036  351E
9037  351F
9038  3520
9039  3521
9040  3522
9041  3523
9042  3524
9043  3525
9044  3526
9045  3527
9046  3528
9047  3529
9048  352A
9049  352B
9050  352C
9051  352D
9052  352E
9053  352F
9054  3530
9055  3531
9056  3532
9057  3533
9058  3534
9059  3535
9060  3536
9061  3537
9062  3538
9063  3539
9064  353A
9065  353B
9066  353C
9067  353D
9068  353E
9069  353F
9070  3540
9071  3541
9072  3542
9073  3543
9074  3544
9075  3545
9076  3546
9077  3547
9078  3548
9079  3549
9080  354A
9081  354B
9082  354C
9083  354D
9084  354E
9085  354F
9086  3550
9087  3551
9088  3552
9089  3553
9090  3554
9091  3555
9092  3556
9093  3557
9094  3558
9095  3559
9096  355A
9097  355B
9098  355C
9099  355D
9100  355E
9101  355F
9102  3560
9103  3561
9104  3562
9105  3563
9106  3564
9107  3565
9108  3566
9109  3567
9110  3568
9111  3569
9112  356A
9113  356B
9114  356C
9115  356D
9116  356E
9117  356F
9118  3570
9119  3571
9120  3572
9121  3573
9122  3574
9123  3575
9124  3576
9125  3577
9126  3578
9127  3579
9128  357A
9129  357B
9130  357C
9131  357D
9132  357E
9133  357F
9134  3580
9135  3581
9136  3582
9137  3583
9138  3584
9139  3585
9140  3586
9141  3587
9142  3588
9143  3589
9144  358A
9145  358B
9146  358C
9147  358D
9148  358E
9149  358F
9150  3590
9151  3591
9152  3592
9153  3593
9154  3594
9155  3595
9156  3596
9157  3597
9158  3598
9159  3599
9160  359A
9161  359B
9162  359C
9163  359D
9164  359E
9165  359F
9166  35A0
9167  35A1
9168  35A2
9169  35A3
9170  35A4
9171  35A5
9172  35A6
9173  35A7
9174  35A8
9175  35A9
9176  35AA
9177  35AB
9178  35AC
9179  35AD
9180  35AE
9181  35AF
9182  35B0
9183  35B1
9184  35B2
9185  35B3
9186  35B4
9187  35B5
9188  35B6
9189  35B7
9190  35B8
9191  35B9
9192  35BA
9193  35BB
9194  35BC
9195  35BD
9196  35BE
9197  35BF
9198  35C0
9199  35C1
9200  35C2
9201  35C3
9202  35C4
9203  35C5
9204  35C6
9205  35C7
9206  35C8
9207  35C9
9208  35CA
9209  35CB
9210  35CC
9211  35CD
9212  35CE
9213  35CF
9214  35D0
9215  35D1
9216  35D2
9217  35D3
9218  35D4
9219  35D5
9220  35D6
9221  35D7
9222  35D8
9223  35D9
9224  35DA
9225  35DB
9226  35DC
9227  35DD
9228  35DE
9229  35DF
9230  35E0
9231  35E1
9232  35E2
9233  35E3
9234  35E4
9235  35E5
9236  35E6
9237  35E7
9238  35E8
9239  35E9
9240  35EA
9241  35EB
9242  35EC
9243  35ED
9244  35EE
9245  35EF
9246  35F0
9247  35F1
9248  35F2
9249  35F3
9250  35F4
9251  35F5
9252  35F6
9253  35F7
9254  35F8
9255  35F9
9256  35FA
9257  35FB
9258  35FC
9259  35FD
9260  35FE
9261  35FF
9262  3600
9263  3601
9264  3602
9265  3603
9266  3604
9267  3605
9268  3606
9269  3607
9270  3608
9271  3609
9272  360A
9273  360B
9274  360C
9275  360D
9276  360E
9277  360F
9278  3610
9279  3611
9280  3612
9281  3613
9282  3614
9283  3615
9284  3616
9285  3617
9286  3618
9287  3619
9288  361A
9289  361B
9290  361C
9291  361D
9292  361E
9293  361F
9294  3620
9295  3621
9296  3622
9297  3623
9298  3624
9299  3625
9300  3626
9301  3627
9302  3628
9303  3629
9304  362A
9305  362B
9306  362C
9307  362D
9308  362E
9309  362F
9310  3630
9311  3631
9312  3632
9313  3633
9314  3634
9315  3635
9316  3636
9317  3637
9318  3638
9319  3639
9320  363A
9321  363B
9322  363C
9323  363D
9324  363E
9325  363F
9326  3640
9327  3641
9328  3642
9329  3643
9330  3644
9331  3645
9332  3646
9333  3647
9334  3648
9335  3649
9336  364A
9337  364B
9338  364C
9339  364D
9340  364E
9341  364F
9342  3650
9343  3651
9344  3652
9345  3653
9346  3654
9347  3655
9348  3656
9349  3657
9350  3658
9351  3659
9352  365A
9353  365B
9354  365C
9355  365D
9356  365E
9357  365F
9358  3660
9359  3661
9360  3662
9361  3663
9362  3664
9363  3665
9364  3666
9365  3667
9366  3668
9367  3669
9368  366A
9369  366B
9370  366C
9371  366D
9372  366E
9373  366F
9374  3670
9375  3671
9376  3672
9377  3673
9378  3674
9379  3675
9380  3676
9381  3677
9382  3678
9383  3679
9384  367A
9385  367B
9386  367C
9387  367D
9388  367E
9389  367F
9390  3680
9391  3681
9392  3682
9393  3683
9394  3684
9395  3685
9396  3686
9397  3687
9398  3688
9399  3689
9400  368A
9401  368B
9402  368C
9403  368D
9404  368E
9405  368F
9406  3690
9407  3691
9408  3692
9409  3693
9410  3694
9411  3695
9412  3696
9413  3697
9414  3698
9415  3699
9416  369A
9417  369B
9418  369C
9419  369D
9420  369E
9421  369F
9422  36A0
9423  36A1
9424  36A2
9425  36A3
9426  36A4
9427  36A5
9428  36A6
9429  36A7
9430  36A8
9431  36A9
9432  36AA
9433  36AB
9434  36AC
9435  36AD
9436  36AE
9437  36AF
9438  36B0
9439  36B1
9440  36B2
9441  36B3
9442  36B4
9443  36B5
9444  36B6
9445  36B7
9446  36B8
9447  36B9
9448  36BA
9449  36BB
9450  36BC
9451  36BD
9452  36BE
9453  36BF
9454  36C0
9455  36C1
9456  36C2
9457  36C3
9458  36C4
9459  36C5
9460  36C6
9461  36C7
9462  36C8
9463  36C9
9464  36CA
9465  36CB
9466  36CC
9467  36CD
9468  36CE
9469  36CF
9470  36D0
9471  36D1
9472  36D2
9473  36D3
9474  36D4
9475  36D5
9476  36D6
9477  36D7
9478  36D8
9479  36D9
9480  36DA
9481  36DB
9482  36DC
9483  36DD
9484  36DE
9485  36DF
9486  36E0
9487  36E1
9488  36E2
9489  36E3
9490  36E4
9491  36E5
9492  36E6
9493  36E7
9494  36E8
9495  36E9
9496  36EA
9497  36EB
9498  36EC
9499  36ED
9500  36EE
9501  36EF
9502  36F0
9503  36F1
9504  36F2
9505  36F3
9506  36F4
9507  36F5
9508  36F6
9509  36F7
9510  36F8
9511  36F9
9512  36FA
9513  36FB
9514  36FC
9515  36FD
9516  36FE
9517  36FF
9518  3700
9519  3701
9520  3702
9521  3703
9522  3704
9523  3705
9524  3706
9525  3707
9526  3708
9527  3709
9528  370A
9529  370B
9530  370C
9531  370D
9532  370E
9533  370F
9534  3710
9535  3711
9536  3712
9537  3713
9538  3714
9539  3715
9540  3716
9541  3717
9542  3718
9543  3719
9544  371A
9545  371B
9546  371C
9547  371D
9548  371E
9549  371F
9550  3720
9551  3721
9552  3722
9553  3723
9554  3724
9555  3725
9556  3726
9557  3727
9558  3728
9559  3729
9560  372A
9561  372B
9562  372C
9563  372D
9564  372E
9565  372F
9566  3730
9567  3731
9568  3732
9569  3733
9570  3734
9571  3735
9572  3736
9573  3737
9574  3738
9575  3739
9576  373A
9577  373B
9578  373C
9579  373D
9580  373E
9581  373F
9582  3740
9583  3741
9584  3742
9585  3743
9586  3744
9587  3745
9588  3746
9589  3747
9590  3748
9591  3749
9592  374A
9593  374B
9594  374C
9595  374D
9596  374E
9597  374F
9598  3750
9599  3751
9600  3752
9601  3753
9602  3754
9603  3755
9604  3756
9605  3757
9606  3758
9607  3759
9608  375A
9609  375B
9610  375C
9611  375D
9612  375E
9613  375F
9614  3760
9615  3761
9616  3762
9617  3763
9618  3764
9619  3765
9620  3766
9621  3767
9622  3768
9623  3769
9624  376A
9625  376B
9626  376C
9627  376D
9628  376E
9629  376F
9630  3770
9631  3771
9632  3772
9633  3773
9634  3774
9635  3775
9636  3776
9637  3777
9638  3778
9639  3779
9640  377A
9641  377B
9642  377C
9643  377D
9644  377E
9645  377F
9646  3780
9647  3781
9648  3782
9649  3783
9650  3784
9651  3785
9652  3786
9653  3787
9654  3788
9655  3789
9656  378A
9657  378B
9658  378C
9659  378D
9660  378E
9661  378F
9662  3790
9663  3791
9664  3792
9665  3793
9666  3794
9667  3795
9668  3796
9669  3797
9670  3798
9671  3799
9672  379A
9673  379B
9674  379C
9675  379D
9676  379E
9677  379F
9678  37A0
9679  37A1
9680  37A2
9681  37A3
9682  37A4
9683  37A5
9684  37A6
9685  37A7
9686  37A8
9687  37A9
9688  37AA
9689  37AB
9690  37AC
9691  37AD
9692  37AE
9693  37AF
9694  37B0
9695  37B1
9696  37B2
9697  37B3
9698  37B4
9699  37B5
9700  37B6
9701  37B7
9702  37B8
9703  37B9
9704  37BA
9705  37BB
9706  37BC
9707  37BD
9708  37BE
9709  37BF
9710  37C0
9711  37C1
9712  37C2
9713  37C3
9714  37C4
9715  37C5
9716  37C6
9717  37C7
9718  37C8
9719  37C9
9720  37CA
9721  37CB
9722  37CC
9723  37CD
9724  37CE
9725  37CF
9726  37D0
9727  37D1
9728  37D2
9729  37D3
9730  37D4
9731  37D5
9732  37D6
9733  37D7
9734  37D8
9735  37D9
9736  37DA
9737  37DB
9738  37DC
9739  37DD
9740  37DE
9741  37DF
9742  37E0
9743  37E1
9744  37E2
9745  37E3
9746  37E4
9747  37E5
9748  37E6
9749  37E7
9750  37E8
9751  37E9
9752  37EA
9753  37EB
9754  37EC
9755  37ED
9756  37EE
9757  37EF
9758  37F0
9759  37F1
9760  37F2
9761  37F3
9762  37F4
9763  37F5
9764  37F6
9765  37F7
9766  37F8
9767  37F9
9768  37FA
9769  37FB
9770  37FC
9771  37FD
9772  37FE
9773  37FF
9774  3800
9775  3801
9776  3802
9777  3803
9778  3804
9779  3805
9780  3806
9781  3807
9782  3808
9783  3809
9784  380A
9785  380B
9786  380C
9787  380D
9788  380E
9789  380F
9790  3810
9791  3811
9792  3812
9793  3813
9794  3814
9795  3815
9796  3816
9797  3817
9798  3818
9799  3819
9800  381A
9801  381B
9802  381C
9803  381D
9804  381E
9805  381F
9806  3820
9807  3821
9808  3822
9809  3823
9810  3824
9811  3825
9812  3826
9813  3827
9814  3828
9815  3829
9816  382A
9817  382B
9818  382C
9819  382D
9820  382E
9821  382F
9822  3830
9823  3831
9824  3832
9825  3833
9826  3834
9827  3835
9828  3836
9829  3837
9830  3838
9831  3839
9832  383A
9833  383B
9834  383C
9835  383D
9836  383E
9837  383F
9838  3840
9839  3841
9840  3842
9841  3843
9842  3844
9843  3845
9844  3846
9845  3847
9846  3848
9847  3849
9848  384A
9849  384B
9850  384C
9851  384D
9852  384E
9853  384F
9854  3850
9855  3851
9856  3852
9857  3853
9858  3854
9859  3855
9860  3856
9861  3857
9862  3858
9863  3859
9864  385A
9865  385B
9866  385C
9867  385D
9868  385E
9869  385F
9870  3860
9871  3861
9872  3862
9873  3863
9874  3864
9875  3865
9876  3866
9877  3867
9878  3868
9879  3869
9880  386A
9881  386B
9882  386C
9883  386D
9884  386E
9885  386F
9886  3870
9887  3871
9888  3872
9889  3873
9890  3874
9891  3875
9892  3876
9893  3877
9894  3878
9895  3879
9896  387A
9897  387B
9898  387C
9899  387D
9900  387E
9901  387F
9902  3880
9903  3881
9904  3882
9905  3883
9906  3884
9907  3885
9908  3886
9909  3887
9910  3888
9911  3889
9912  388A
9913  388B
9914  388C
9915  388D
9916  388E
9917  388F
9918  3890
9919  3891
9920  3892
9921  3893
9922  3894
9923  3895
9924  3896
9925  3897
9926  3898
9927  3899
9928  389A
9929  389B
9930  389C
9931  389D
9932  389E
9933  389F
9934  38A0
9935  38A1
9936  38A2
9937  38A3
9938  38A4
9939  38A5
9940  38A6
9941  38A7
9942  38A8
9943  38A9
9944  38AA
9945  38AB
9946  38AC
9947  38AD
9948  38AE
9949  38AF
9950  38B0
9951  38B1
9952  38B2
9953  38B3
9954  38B4
9955  38B5
9956  38B6
9957  38B7
9958  38B8
9959  38B9
9960  38BA
9961  38BB
9962  38BC
9963  38BD
9964  38BE
9965  38BF
9966  38C0
9967  38C1
9968  38C2
9969  38C3
9970  38C4
9971  38C5
9972  38C6
9973  38C7
9974  38C8
9975  38C9
9976  38CA
9977  38CB
9978  38CC
9979  38CD
9980  38CE
9981  38CF
9982  38D0
9983  38D1
9984  38D2
9985  38D3
9986  38D4
9987  38D5
9988  38D6
9989  38D7
9990  38D8
9991  38D9
9992  38DA
9993  38DB
9994  38DC
9995  38DD
9996  38DE
9997  38DF
9998  38E0
9999  38E1
10000  38E2
10001  38E3
10002  38E4
10003  38E5
10004  38E6
10005  38E7
10006  38E8
10007  38E9
10008  38EA
10009  38EB
10010  38EC
10011  38ED
10012  38EE
10013  38EF
10014  38F0
10015  38F1
10016  38F2
10017  38F3
10018  38F4
10019  38F5
10020  38F6
10021  38F7
10022  38F8
10023  38F9
10024  38FA
10025  38FB
10026  38FC
10027  38FD
10028  38FE
10029  38FF
10030  3900
10031  3901
10032  3902
10033  3903
10034  3904
10035  3905
10036  3906
10037  3907
10038  3908
10039  3909
10040  390A
10041  390B
10042  390C
10043  390D
10044  390E
10045  390F
10046  3910
10047  3911
10048  3912
10049  3913
10050  3914
10051  3915
10052  3916
10053  3917
10054  3918
10055  3919
10056  391A
10057  391B
10058  391C
10059  391D
10060  391E
10061  391F
10062  3920
10063  3921
10064  3922
10065  3923
10066  3924
10067  3925
10068  3926
10069  3927
10070  3928
10071  3929
10072  392A
10073  392B
10074  392C
10075  392D
10076  392E
10077  392F
10078  3930
10079  3931
10080  3932
10081  3933
10082  3934
10083  3935
10084  3936
10085  3937
10086  3938
10087  3939
10088  393A
10089  393B
10090  393C
10091  393D
10092  393E
10093  393F
10094  3940
10095  3941
10096  3942
10097  3943
10098  3944
10099  3945
10100  3946
10101  3947
10102  3948
10103  3949
10104  394A
10105  394B
10106  394C
10107  394D
10108  394E
10109  394F
10110  3950
10111  3951
10112  3952
10113  3953
10114  3954
10115  3955
10116  3956
10117  3957
10118  3958
10119  3959
10120  395A
10121  395B
10122  395C
10123  395D
10124  395E
10125  395F
10126  3960
10127  3961
10128  3962
10129  3963
10130  3964
10131  3965
10132  3966
10133  3967
10134  3968
10135  3969
10136  396A
10137  396B
10138  396C
10139  396D
10140  396E
10141  396F
10142  3970
10143  3971
10144  3972
10145  3973
10146  3974
10147  3975
10148  3976
10149  3977
10150  3978
10151  3979
10152  397A
10153  397B
10154  397C
10155  397D
10156  397E
10157  397F
10158  3980
10159  3981
10160  3982
10161  3983
10162  3984
10163  3985
10164  3986
10165  3987
10166  3988
10167  3989
10168  398A
10169  398B
10170  398C
10171  398D
10172  398E
10173  398F
10174  3990
10175  3991
10176  3992
10177  3993
10178  3994
10179  3995
10180  3996
10181  3997
10182  3998
10183  3999
10184  399A
10185  399B
10186  399C
10187  399D
10188  399E
10189  399F
10190  39A0
10191  39A1
10192  39A2
10193  39A3
10194  39A4
10195  39A5
10196  39A6
10197  39A7
10198  39A8
10199  39A9
10200  39AA
10201  39AB
10202  39AC
10203  39AD
10204  39AE
10205  39AF
10206  39B0
10207  39B1
10208  39B2
10209  39B3
10210  39B4
10211  39B5
10212  39B6
10213  39B7
10214  39B8
10215  39B9
10216  39BA
10217  39BB
10218  39BC
10219  39BD
10220  39BE
10221  39BF
10222  39C0
10223  39C1
10224  39C2
10225  39C3
10226  39C4
10227  39C5
10228  39C6
10229  39C7
10230  39C8
10231  39C9
10232  39CA
10233  39CB
10234  39CC
10235  39CD
10236  39CE
10237  39CF
10238  39D0
10239  39D1
10240  39D2
10241  39D3
10242  39D4
10243  39D5
10244  39D6
10245  39D7
10246  39D8
10247  39D9
10248  39DA
10249  39DB
10250  39DC
10251  39DD
10252  39DE
10253  39DF
10254  39E0
10255  39E1
10256  39E2
10257  39E3
10258  39E4
10259  39E5
10260  39E6
10261  39E7
10262  39E8
10263  39E9
10264  39EA
10265  39EB
10266  39EC
10267  39ED
10268  39EE
10269  39EF
10270  39F0
10271  39F1
10272  39F2
10273  39F3
10274  39F4
10275  39F5
10276  39F6
10277  39F7
10278  39F8
10279  39F9
10280  39FA
10281  39FB
10282  39FC
10283  39FD
10284  39FE
10285  39FF
10286  3A00
10287  3A01
10288  3A02
10289  3A03
10290  3A04
10291  3A05
10292  3A06
10293  3A07
10294  3A08
10295  3A09
10296  3A0A
10297  3A0B
10298  3A0C
10299  3A0D
10300  3A0E
10301  3A0F
10302  3A10
10303  3A11
10304  3A12
10305  3A13
10306  3A14
10307  3A15
10308  3A16
10309  3A17
10310  3A18
10311  3A19
10312  3A1A
10313  3A1B
10314  3A1C
10315  3A1D
10316  3A1E
10317  3A1F
10318  3A20
10319  3A21
10320  3A22
10321  3A23
10322  3A24
10323  3A25
10324  3A26
10325  3A27
10326  3A28
10327  3A29
10328  3A2A
10329  3A2B
10330  3A2C
10331  3A2D
10332  3A2E
10333  3A2F
10334  3A30
10335  3A31
10336  3A32
10337  3A33
10338  3A34
10339  3A35
10340  3A36
10341  3A37
10342  3A38
10343  3A39
10344  3A3A
10345  3A3B
10346  3A3C
10347  3A3D
10348  3A3E
10349  3A3F
10350  3A40
10351  3A41
10352  3A42
10353  3A43
10354  3A44
10355  3A45
10356  3A46
10357  3A47
10358  3A48
10359  3A49
10360  3A4A
10361  3A4B
10362  3A4C
10363  3A4D
10364  3A4E
10365  3A4F
10366  3A50
10367  3A51
10368  3A52
10369  3A53
10370  3A54
10371  3A55
10372  3A56
10373  3A57
10374  3A58
10375  3A59
10376  3A5A
10377  3A5B
10378  3A5C
10379  3A5D
10380  3A5E
10381  3A5F
10382  3A60
10383  3A61
10384  3A62
10385  3A63
10386  3A64
10387  3A65
10388  3A66
10389  3A67
10390  3A68
10391  3A69
10392  3A6A
10393  3A6B
10394  3A6C
10395  3A6D
10396  3A6E
10397  3A6F
10398  3A70
10399  3A71
10400  3A72
10401  3A73
10402  3A74
10403  3A75
10404  3A76
10405  3A77
10406  3A78
10407  3A79
10408  3A7A
10409  3A7B
10410  3A7C
10411  3A7D
10412  3A7E
10413  3A7F
10414  3A80
10415  3A81
10416  3A82
10417  3A83
10418  3A84
10419  3A85
10420  3A86
10421  3A87
10422  3A88
10423  3A89
10424  3A8A
10425  3A8B
10426  3A8C
10427  3A8D
10428  3A8E
10429  3A8F
10430  3A90
10431  3A91
10432  3A92
10433  3A93
10434  3A94
10435  3A95
10436  3A96
10437  3A97
10438  3A98
10439  3A99
10440  3A9A
10441  3A9B
10442  3A9C
10443  3A9D
10444  3A9E
10445  3A9F
10446  3AA0
10447  3AA1
10448  3AA2
10449  3AA3
10450  3AA4
10451  3AA5
10452  3AA6
10453  3AA7
10454  3AA8
10455  3AA9
10456  3AAA
10457  3AAB
10458  3AAC
10459  3AAD
10460  3AAE
10461  3AAF
10462  3AB0
10463  3AB1
10464  3AB2
10465  3AB3
10466  3AB4
10467  3AB5
10468  3AB6
10469  3AB7
10470  3AB8
10471  3AB9
10472  3ABA
10473  3ABB
10474  3ABC
10475  3ABD
10476  3ABE
10477  3ABF
10478  3AC0
10479  3AC1
10480  3AC2
10481  3AC3
10482  3AC4
10483  3AC5
10484  3AC6
10485  3AC7
10486  3AC8
10487  3AC9
10488  3ACA
10489  3ACB
10490  3ACC
10491  3ACD
10492  3ACE
10493  3ACF
10494  3AD0
10495  3AD1
10496  3AD2
10497  3AD3
10498  3AD4
10499  3AD5
10500  3AD6
10501  3AD7
10502  3AD8
10503  3AD9
10504  3ADA
10505  3ADB
10506  3ADC
10507  3ADD
10508  3ADE
10509  3ADF
10510  3AE0
10511  3AE1
10512  3AE2
10513  3AE3
10514  3AE4
10515  3AE5
10516  3AE6
10517  3AE7
10518  3AE8
10519  3AE9
10520  3AEA
10521  3AEB
10522  3AEC
10523  3AED
10524  3AEE
10525  3AEF
10526  3AF0
10527  3AF1
10528  3AF2
10529  3AF3
10530  3AF4
10531  3AF5
10532  3AF6
10533  3AF7
10534  3AF8
10535  3AF9
10536  3AFA
10537  3AFB
10538  3AFC
10539  3AFD
10540  3AFE
10541  3AFF
10542  3B00
10543  3B01
10544  3B02
10545  3B03
10546  3B04
10547  3B05
10548  3B06
10549  3B07
10550  3B08
10551  3B09
10552  3B0A
10553  3B0B
10554  3B0C
10555  3B0D
10556  3B0E
10557  3B0F
10558  3B10
10559  3B11
10560  3B12
10561  3B13
10562  3B14
10563  3B15
10564  3B16
10565  3B17
10566  3B18
10567  3B19
10568  3B1A
10569  3B1B
10570  3B1C
10571  3B1D
10572  3B1E
10573  3B1F
10574  3B20
10575  3B21
10576  3B22
10577  3B23
10578  3B24
10579  3B25
10580  3B26
10581  3B27
10582  3B28
10583  3B29
10584  3B2A
10585  3B2B
10586  3B2C
10587  3B2D
10588  3B2E
10589  3B2F
10590  3B30
10591  3B31
10592  3B32
10593  3B33
10594  3B34
10595  3B35
10596  3B36
10597  3B37
10598  3B38
10599  3B39
10600  3B3A
10601  3B3B
10602  3B3C
10603  3B3D
10604  3B3E
10605  3B3F
10606  3B40
10607  3B41
10608  3B42
10609  3B43
10610  3B44
10611  3B45
10612  3B46
10613  3B47
10614  3B48
10615  3B49
10616  3B4A
10617  3B4B
10618  3B4C
10619  3B4D
10620  3B4E
10621  3B4F
10622  3B50
10623  3B51
10624  3B52
10625  3B53
10626  3B54
10627  3B55
10628  3B56
10629  3B57
10630  3B58
10631  3B59
10632  3B5A
10633  3B5B
10634  3B5C
10635  3B5D
10636  3B5E
10637  3B5F
10638  3B60
10639  3B61
10640  3B62
10641  3B63
10642  3B64
10643  3B65
10644  3B66
10645  3B67
10646  3B68
10647  3B69
10648  3B6A
10649  3B6B
10650  3B6C
10651  3B6D
10652  3B6E
10653  3B6F
10654  3B70
10655  3B71
10656  3B72
10657  3B73
10658  3B74
10659  3B75
10660  3B76
10661  3B77
10662  3B78
10663  3B79
10664  3B7A
10665  3B7B
10666  3B7C
10667  3B7D
10668  3B7E
10669  3B7F
10670  3B80
10671  3B81
10672  3B82
10673  3B83
10674  3B84
10675  3B85
10676  3B86
10677  3B87
10678  3B88
10679  3B89
10680  3B8A
10681  3B8B
10682  3B8C
10683  3B8D
10684  3B8E
10685  3B8F
10686  3B90
10687  3B91
10688  3B92
10689  3B93
10690  3B94
10691  3B95
10692  3B96
10693  3B97
10694  3B98
10695  3B99
10696  3B9A
10697  3B9B
10698  3B9C
10699  3B9D
10700  3B9E
10701  3B9F
10702  3BA0
10703  3BA1
10704  3BA2
10705  3BA3
10706  3BA4
10707  3BA5
10708  3BA6
10709  3BA7
10710  3BA8
10711  3BA9
10712  3BAA
10713  3BAB
10714  3BAC
10715  3BAD
10716  3BAE
10717  3BAF
10718  3BB0
10719  3BB1
10720  3BB2
10721  3BB3
10722  3BB4
10723  3BB5
10724  3BB6
10725  3BB7
10726  3BB8
10727  3BB9
10728  3BBA
10729  3BBB
10730  3BBC
10731  3BBD
10732  3BBE
10733  3BBF
10734  3BC0
10735  3BC1
10736  3BC2
10737  3BC3
10738  3BC4
10739  3BC5
10740  3BC6
10741  3BC7
10742  3BC8
10743  3BC9
10744  3BCA
10745  3BCB
10746  3BCC
10747  3BCD
10748  3BCE
10749  3BCF
10750  3BD0
10751  3BD1
10752  3BD2
10753  3BD3
10754  3BD4
10755  3BD5
10756  3BD6
10757  3BD7
10758  3BD8
10759  3BD9
10760  3BDA
10761  3BDB
10762  3BDC
10763  3BDD
10764  3BDE
10765  3BDF
10766  3BE0
10767  3BE1
10768  3BE2
10769  3BE3
10770  3BE4
10771  3BE5
10772  3BE6
10773  3BE7
10774  3BE8
10775  3BE9
10776  3BEA
10777  3BEB
10778  3BEC
10779  3BED
10780  3BEE
10781  3BEF
10782  3BF0
10783  3BF1
10784  3BF2
10785  3BF3
10786  3BF4
10787  3BF5
10788  3BF6
10789  3BF7
10790  3BF8
10791  3BF9
10792  3BFA
10793  3BFB
10794  3BFC
10795  3BFD
10796  3BFE
10797  3BFF
10798  3C00
10799  3C01
10800  3C02
10801  3C03
10802  3C04
10803  3C05
10804  3C06
10805  3C07
10806  3C08
10807  3C09
10808  3C0A
10809  3C0B
10810  3C0C
10811  3C0D
10812  3C0E
10813  3C0F
10814  3C10
10815  3C11
10816  3C12
10817  3C13
10818  3C14
10819  3C15
10820  3C16
10821  3C17
10822  3C18
10823  3C19
10824  3C1A
10825  3C1B
10826  3C1C
10827  3C1D
10828  3C1E
10829  3C1F
10830  3C20
10831  3C21
10832  3C22
10833  3C23
10834  3C24
10835  3C25
10836  3C26
10837  3C27
10838  3C28
10839  3C29
10840  3C2A
10841  3C2B
10842  3C2C
10843  3C2D
10844  3C2E
10845  3C2F
10846  3C30
10847  3C31
10848  3C32
10849  3C33
10850  3C34
10851  3C35
10852  3C36
10853  3C37
10854  3C38
10855  3C39
10856  3C3A
10857  3C3B
10858  3C3C
10859  3C3D
10860  3C3E
10861  3C3F
10862  3C40
10863  3C41
10864  3C42
10865  3C43
10866  3C44
10867  3C45
10868  3C46
10869  3C47
10870  3C48
10871  3C49
10872  3C4A
10873  3C4B
10874  3C4C
10875  3C4D
10876  3C4E
10877  3C4F
10878  3C50
10879  3C51
10880  3C52
10881  3C53
10882  3C54
10883  3C55
10884  3C56
10885  3C57
10886  3C58
10887  3C59
10888  3C5A
10889  3C5B
10890  3C5C
10891  3C5D
10892  3C5E
10893  3C5F
10894  3C60
10895  3C61
10896  3C62
10897  3C63
10898  3C64
10899  3C65
10900  3C66
10901  3C67
10902  3C68
10903  3C69
10904  3C6A
10905  3C6B
10906  3C6C
10907  3C6D
10908  3C6E
10909  3C6F
10910  3C70
10911  3C71
10912  3C72
10913  3C73
10914  3C74
10915  3C75
10916  3C76
10917  3C77
10918  3C78
10919  3C79
10920  3C7A
10921  3C7B
10922  3C7C
10923  3C7D
10924  3C7E
10925  3C7F
10926  3C80
10927  3C81
10928  3C82
10929  3C83
10930  3C84
10931  3C85
10932  3C86
10933  3C87
10934  3C88
10935  3C89
10936  3C8A
10937  3C8B
10938  3C8C
10939  3C8D
10940  3C8E
10941  3C8F
10942  3C90
10943  3C91
10944  3C92
10945  3C93
10946  3C94
10947  3C95
10948  3C96
10949  3C97
10950  3C98
10951  3C99
10952  3C9A
10953  3C9B
10954  3C9C
10955  3C9D
10956  3C9E
10957  3C9F
10958  3CA0
10959  3CA1
10960  3CA2
10961  3CA3
10962  3CA4
10963  3CA5
10964  3CA6
10965  3CA7
10966  3CA8
10967  3CA9
10968  3CAA
10969  3CAB
10970  3CAC
10971  3CAD
10972  3CAE
10973  3CAF
10974  3CB0
10975  3CB1
10976  3CB2
10977  3CB3
10978  3CB4
10979  3CB5
10980  3CB6
10981  3CB7
10982  3CB8
10983  3CB9
10984  3CBA
10985  3CBB
10986  3CBC
10987  3CBD
10988  3CBE
10989  3CBF
10990  3CC0
10991  3CC1
10992  3CC2
10993  3CC3
10994  3CC4
10995  3CC5
10996  3CC6
10997  3CC7
10998  3CC8
10999  3CC9
11000  3CCA
11001  3CCB
11002  3CCC
11003  3CCD
11004  3CCE
11005  3CCF
11006  3CD0
11007  3CD1
11008  3CD2
11009  3CD3
11010  3CD4
11011  3CD5
11012  3CD6
11013  3CD7
11014  3CD8
11015  3CD9
11016  3CDA
11017  3CDB
11018  3CDC
11019  3CDD
11020  3CDE
11021  3CDF
11022  3CE0
11023  3CE1
11024  3CE2
11025  3CE3
11026  3CE4
11027  3CE5
11028  3CE6
11029  3CE7
11030  3CE8
11031  3CE9
11032  3CEA
11033  3CEB
11034  3CEC
11035  3CED
11036  3CEE
11037  3CEF
11038  3CF0
11039  3CF1
11040  3CF2
11041  3CF3
11042  3CF4
11043  3CF5
11044  3CF6
11045  3CF7
11046  3CF8
11047  3CF9
11048  3CFA
11049  3CFB
11050  3CFC
11051  3CFD
11052  3CFE
11053  3CFF
11054  3D00
11055  3D01
11056  3D02
11057  3D03
11058  3D04
11059  3D05
11060  3D06
11061  3D07
11062  3D08
11063  3D09
11064  3D0A
11065  3D0B
11066  3D0C
11067  3D0D
11068  3D0E
11069  3D0F
11070  3D10
11071  3D11
11072  3D12
11073  3D13
11074  3D14
11075  3D15
11076  3D16
11077  3D17
11078  3D18
11079  3D19
11080  3D1A
11081  3D1B
11082  3D1C
11083  3D1D
11084  3D1E
11085  3D1F
11086  3D20
11087  3D21
11088  3D22
11089  3D23
11090  3D24
11091  3D25
11092  3D26
11093  3D27
11094  3D28
11095  3D29
11096  3D2A
11097  3D2B
11098  3D2C
11099  3D2D
11100  3D2E
11101  3D2F
11102  3D30
11103  3D31
11104  3D32
11105  3D33
11106  3D34
11107  3D35
11108  3D36
11109  3D37
11110  3D38
11111  3D39
11112  3D3A
11113  3D3B
11114  3D3C
11115  3D3D
11116  3D3E
11117  3D3F
11118  3D40
11119  3D41
11120  3D42
11121  3D43
11122  3D44
11123  3D45
11124  3D46
11125  3D47
11126  3D48
11127  3D49
11128  3D4A
11129  3D4B
11130  3D4C
11131  3D4D
11132  3D4E
11133  3D4F
11134  3D50
11135  3D51
11136  3D52
11137  3D53
11138  3D54
11139  3D55
11140  3D56
11141  3D57
11142  3D58
11143  3D59
11144  3D5A
11145  3D5B
11146  3D5C
11147  3D5D
11148  3D5E
11149  3D5F
11150  3D60
11151  3D61
11152  3D62
11153  3D63
11154  3D64
11155  3D65
11156  3D66
11157  3D67
11158  3D68
11159  3D69
11160  3D6A
11161  3D6B
11162  3D6C
11163  3D6D
11164  3D6E
11165  3D6F
11166  3D70
11167  3D71
11168  3D72
11169  3D73
11170  3D74
11171  3D75
11172  3D76
11173  3D77
11174  3D78
11175  3D79
11176  3D7A
11177  3D7B
11178  3D7C
11179  3D7D
11180  3D7E
11181  3D7F
11182  3D80
11183  3D81
11184  3D82
11185  3D83
11186  3D84
11187  3D85
11188  3D86
11189  3D87
11190  3D88
11191  3D89
11192  3D8A
11193  3D8B
11194  3D8C
11195  3D8D
11196  3D8E
11197  3D8F
11198  3D90
11199  3D91
11200  3D92
11201  3D93
11202  3D94
11203  3D95
11204  3D96
11205  3D97
11206  3D98
11207  3D99
11208  3D9A
11209  3D9B
11210  3D9C
11211  3D9D
11212  3D9E
11213  3D9F
11214  3DA0
11215  3DA1
11216  3DA2
11217  3DA3
11218  3DA4
11219  3DA5
11220  3DA6
11221  3DA7
11222  3DA8
11223  3DA9
11224  3DAA
11225  3DAB
11226  3DAC
11227  3DAD
11228  3DAE
11229  3DAF
11230  3DB0
11231  3DB1
11232  3DB2
11233  3DB3
11234  3DB4
11235  3DB5
11236  3DB6
11237  3DB7
11238  3DB8
11239  3DB9
11240  3DBA
11241  3DBB
11242  3DBC
11243  3DBD
11244  3DBE
11245  3DBF
11246  3DC0
11247  3DC1
11248  3DC2
11249  3DC3
11250  3DC4
11251  3DC5
11252  3DC6
11253  3DC7
11254  3DC8
11255  3DC9
11256  3DCA
11257  3DCB
11258  3DCC
11259  3DCD
11260  3DCE
11261  3DCF
11262  3DD0
11263  3DD1
11264  3DD2
11265  3DD3
11266  3DD4
11267  3DD5
11268  3DD6
11269  3DD7
11270  3DD8
11271  3DD9
11272  3DDA
11273  3DDB
11274  3DDC
11275  3DDD
11276  3DDE
11277  3DDF
11278  3DE0
11279  3DE1
11280  3DE2
11281  3DE3
11282  3DE4
11283  3DE5
11284  3DE6
11285  3DE7
11286  3DE8
11287  3DE9
11288  3DEA
11289  3DEB
11290  3DEC
11291  3DED
11292  3DEE
11293  3DEF
11294  3DF0
11295  3DF1
11296  3DF2
11297  3DF3
11298  3DF4
11299  3DF5
11300  3DF6
11301  3DF7
11302  3DF8
11303  3DF9
11304  3DFA
11305  3DFB
11306  3DFC
11307  3DFD
11308  3DFE
11309  3DFF
11310  3E00
11311  3E01
11312  3E02
11313  3E03
11314  3E04
11315  3E05
11316  3E06
11317  3E07
11318  3E08
11319  3E09
11320  3E0A
11321  3E0B
11322  3E0C
11323  3E0D
11324  3E0E
11325  3E0F
11326  3E10
11327  3E11
11328  3E12
11329  3E13
11330  3E14
11331  3E15
11332  3E16
11333  3E17
11334  3E18
11335  3E19
11336  3E1A
11337  3E1B
11338  3E1C
11339  3E1D
11340  3E1E
11341  3E1F
11342  3E20
11343  3E21
11344  3E22
11345  3E23
11346  3E24
11347  3E25
11348  3E26
11349  3E27
11350  3E28
11351  3E29
11352  3E2A
11353  3E2B
11354  3E2C
11355  3E2D
11356  3E2E
11357  3E2F
11358  3E30
11359  3E31
11360  3E32
11361  3E33
11362  3E34
11363  3E35
11364  3E36
11365  3E37
11366  3E38
11367  3E39
11368  3E3A
11369  3E3B
11370  3E3C
11371  3E3D
11372  3E3E
11373  3E3F
11374  3E40
11375  3E41
11376  3E42
11377  3E43
11378  3E44
11379  3E45
11380  3E46
11381  3E47
11382  3E48
11383  3E49
11384  3E4A
11385  3E4B
11386  3E4C
11387  3E4D
11388  3E4E
11389  3E4F
11390  3E50
11391  3E51
11392  3E52
11393  3E53
11394  3E54
11395  3E55
11396  3E56
11397  3E57
11398  3E58
11399  3E59
11400  3E5A
11401  3E5B
11402  3E5C
11403  3E5D
11404  3E5E
11405  3E5F
11406  3E60
11407  3E61
11408  3E62
11409  3E63
11410  3E64
11411  3E65
11412  3E66
11413  3E67
11414  3E68
11415  3E69
11416  3E6A
11417  3E6B
11418  3E6C
11419  3E6D
11420  3E6E
11421  3E6F
11422  3E70
11423  3E71
11424  3E72
11425  3E73
11426  3E74
11427  3E75
11428  3E76
11429  3E77
11430  3E78
11431  3E79
11432  3E7A
11433  3E7B
11434  3E7C
11435  3E7D
11436  3E7E
11437  3E7F
11438  3E80
11439  3E81
11440  3E82
11441  3E83
11442  3E84
11443  3E85
11444  3E86
11445  3E87
11446  3E88
11447  3E89
11448  3E8A
11449  3E8B
11450  3E8C
11451  3E8D
11452  3E8E
11453  3E8F
11454  3E90
11455  3E91
11456  3E92
11457  3E93
11458  3E94
11459  3E95
11460  3E96
11461  3E97
11462  3E98
11463  3E99
11464  3E9A
11465  3E9B
11466  3E9C
11467  3E9D
11468  3E9E
11469  3E9F
11470  3EA0
11471  3EA1
11472  3EA2
11473  3EA3
11474  3EA4
11475  3EA5
11476  3EA6
11477  3EA7
11478  3EA8
11479  3EA9
11480  3EAA
11481  3EAB
11482  3EAC
11483  3EAD
11484  3EAE
11485  3EAF
11486  3EB0
11487  3EB1
11488  3EB2
11489  3EB3
11490  3EB4
11491  3EB5
11492  3EB6
11493  3EB7
11494  3EB8
11495  3EB9
11496  3EBA
11497  3EBB
11498  3EBC
11499  3EBD
11500  3EBE
11501  3EBF
11502  3EC0
11503  3EC1
11504  3EC2
11505  3EC3
11506  3EC4
11507  3EC5
11508  3EC6
11509  3EC7
11510  3EC8
11511  3EC9
11512  3ECA
11513  3ECB
11514  3ECC
11515  3ECD
11516  3ECE
11517  3ECF
11518  3ED0
11519  3ED1
11520  3ED2
11521  3ED3
11522  3ED4
11523  3ED5
11524  3ED6
11525  3ED7
11526  3ED8
11527  3ED9
11528  3EDA
11529  3EDB
11530  3EDC
11531  3EDD
11532  3EDE
11533  3EDF
11534  3EE0
11535  3EE1
11536  3EE2
11537  3EE3
11538  3EE4
11539  3EE5
11540  3EE6
11541  3EE7
11542  3EE8
11543  3EE9
11544  3EEA
11545  3EEB
11546  3EEC
11547  3EED
11548  3EEE
11549  3EEF
11550  3EF0
11551  3EF1
11552  3EF2
11553  3EF3
11554  3EF4
11555  3EF5
11556  3EF6
11557  3EF7
11558  3EF8
11559  3EF9
11560  3EFA
11561  3EFB
11562  3EFC
11563  3EFD
11564  3EFE
11565  3EFF
11566  3F00
11567  3F01
11568  3F02
11569  3F03
11570  3F04
11571  3F05
11572  3F06
11573  3F07
11574  3F08
11575  3F09
11576  3F0A
11577  3F0B
11578  3F0C
11579  3F0D
11580  3F0E
11581  3F0F
11582  3F10
11583  3F11
11584  3F12
11585  3F13
11586  3F14
11587  3F15
11588  3F16
11589  3F17
11590  3F18
11591  3F19
11592  3F1A
11593  3F1B
11594  3F1C
11595  3F1D
11596  3F1E
11597  3F1F
11598  3F20
11599  3F21
11600  3F22
11601  3F23
11602  3F24
11603  3F25
11604  3F26
11605  3F27
11606  3F28
11607  3F29
11608  3F2A
11609  3F2B
11610  3F2C
11611  3F2D
11612  3F2E
11613  3F2F
11614  3F30
11615  3F31
11616  3F32
11617  3F33
11618  3F34
11619  3F35
11620  3F36
11621  3F37
11622  3F38
11623  3F39
11624  3F3A
11625  3F3B
11626  3F3C
11627  3F3D
11628  3F3E
11629  3F3F
11630  3F40
11631  3F41
11632  3F42
11633  3F43
11634  3F44
11635  3F45
11636  3F46
11637  3F47
11638  3F48
11639  3F49
11640  3F4A
11641  3F4B
11642  3F4C
11643  3F4D
11644  3F4E
11645  3F4F
11646  3F50
11647  3F51
11648  3F52
11649  3F53
11650  3F54
11651  3F55
11652  3F56
11653  3F57
11654  3F58
11655  3F59
11656  3F5A
11657  3F5B
11658  3F5C
11659  3F5D
11660  3F5E
11661  3F5F
11662  3F60
11663  3F61
11664  3F62
11665  3F63
11666  3F64
11667  3F65
11668  3F66
11669  3F67
11670  3F68
11671  3F69
11672  3F6A
11673  3F6B
11674  3F6C
11675  3F6D
11676  3F6E
11677  3F6F
11678  3F70
11679  3F71
11680  3F72
11681  3F73
11682  3F74
11683  3F75
11684  3F76
11685  3F77
11686  3F78
11687  3F79
11688  3F7A
11689  3F7B
11690  3F7C
11691  3F7D
11692  3F7E
11693  3F7F
11694  3F80
11695  3F81
11696  3F82
11697  3F83
11698  3F84
11699  3F85
11700  3F86
11701  3F87
11702  3F88
11703  3F89
11704  3F8A
11705  3F8B
11706  3F8C
11707  3F8D
11708  3F8E
11709  3F8F
11710  3F90
11711  3F91
11712  3F92
11713  3F93
11714  3F94
11715  3F95
11716  3F96
11717  3F97
11718  3F98
11719  3F99
11720  3F9A
11721  3F9B
11722  3F9C
11723  3F9D
11724  3F9E
11725  3F9F
11726  3FA0
11727  3FA1
11728  3FA2
11729  3FA3
11730  3FA4
11731  3FA5
11732  3FA6
11733  3FA7
11734  3FA8
11735  3FA9
11736  3FAA
11737  3FAB
11738  3FAC
11739  3FAD
11740  3FAE
11741  3FAF
11742  3FB0
11743  3FB1
11744  3FB2
11745  3FB3
11746  3FB4
11747  3FB5
11748  3FB6
11749  3FB7
11750  3FB8
11751  3FB9
11752  3FBA
11753  3FBB
11754  3FBC
11755  3FBD
11756  3FBE
11757  3FBF
11758  3FC0
11759  3FC1
11760  3FC2
11761  3FC3
11762  3FC4
11763  3FC5
11764  3FC6
11765  3FC7
11766  3FC8
11767  3FC9
11768  3FCA
11769  3FCB
11770  3FCC
11771  3FCD
11772  3FCE
11773  3FCF
11774  3FD0
11775  3FD1
11776  3FD2
11777  3FD3
11778  3FD4
11779  3FD5
11780  3FD6
11781  3FD7
11782  3FD8
11783  3FD9
11784  3FDA
11785  3FDB
11786  3FDC
11787  3FDD
11788  3FDE
11789  3FDF
11790  3FE0
11791  3FE1
11792  3FE2
11793  3FE3
11794  3FE4
11795  3FE5
11796  3FE6
11797  3FE7
11798  3FE8
11799  3FE9
11800  3FEA
11801  3FEB
11802  3FEC
11803  3FED
11804  3FEE
11805  3FEF
11806  3FF0
11807  3FF1
11808  3FF2
11809  3FF3
11810  3FF4
11811  3FF5
11812  3FF6
11813  3FF7
11814  3FF8
11815  3FF9
11816  3FFA
11817  3FFB
11818  3FFC
11819  3FFD
11820  3FFE
11821  3FFF
11822  4000
11823  4001
11824  4002
11825  4003
11826  4004
11827  4005
11828  4006
11829  4007
11830  4008
11831  4009
11832  400A
11833  400B
11834  400C
11835  400D
11836  400E
11837  400F
11838  4010
11839  4011
11840  4012
11841  4013
11842  4014
11843  4015
11844  4016
11845  4017
11846  4018
11847  4019
11848  401A
11849  401B
11850  401C
11851  401D
11852  401E
11853  401F
11854  4020
11855  4021
11856  4022
11857  4023
11858  4024
11859  4025
11860  4026
11861  4027
11862  4028
11863  4029
11864  402A
11865  402B
11866  402C
11867  402D
11868  402E
11869  402F
11870  4030
11871  4031
11872  4032
11873  4033
11874  4034
11875  4035
11876  4036
11877  4037
11878  4038
11879  4039
11880  403A
11881  403B
11882  403C
11883  403D
11884  403E
11885  403F
11886  4040
11887  4041
11888  4042
11889  4043
11890  4044
11891  4045
11892  4046
11893  4047
11894  4048
11895  4049
11896  404A
11897  404B
11898  404C
11899  404D
11900  404E
11901  404F
11902  4050
11903  4051
11904  4052
11905  4053
11906  4054
11907  4055
11908  4056
11909  4057
11910  4058
11911  4059
11912  405A
11913  405B
11914  405C
11915  405D
11916  405E
11917  405F
11918  4060
11919  4061
11920  4062
11921  4063
11922  4064
11923  4065
11924  4066
11925  4067
11926  4068
11927  4069
11928  406A
11929  406B
11930  406C
11931  406D
11932  406E
11933  406F
11934  4070
11935  4071
11936  4072
11937  4073
11938  4074
11939  4075
11940  4076
11941  4077
11942  4078
11943  4079
11944  407A
11945  407B
11946  407C
11947  407D
11948  407E
11949  407F
11950  4080
11951  4081
11952  4082
11953  4083
11954  4084
11955  4085
11956  4086
11957  4087
11958  4088
11959  4089
11960  408A
11961  408B
11962  408C
11963  408D
11964  408E
11965  408F
11966  4090
11967  4091
11968  4092
11969  4093
11970  4094
11971  4095
11972  4096
11973  4097
11974  4098
11975  4099
11976  409A
11977  409B
11978  409C
11979  409D
11980  409E
11981  409F
11982  40A0
11983  40A1
11984  40A2
11985  40A3
11986  40A4
11987  40A5
11988  40A6
11989  40A7
11990  40A8
11991  40A9
11992  40AA
11993  40AB
11994  40AC
11995  40AD
11996  40AE
11997  40AF
11998  40B0
11999  40B1
12000  40B2
12001  40B3
12002  40B4
12003  40B5
12004  40B6
12005  40B7
12006  40B8
12007  40B9
12008  40BA
12009  40BB
12010  40BC
12011  40BD
12012  40BE
12013  40BF
12014  40C0
12015  40C1
12016  40C2
12017  40C3
12018  40C4
12019  40C5
12020  40C6
12021  40C7
12022  40C8
12023  40C9
12024  40CA
12025  40CB
12026  40CC
12027  40CD
12028  40CE
12029  40CF
12030  40D0
12031  40D1
12032  40D2
12033  40D3
12034  40D4
12035  40D5
12036  40D6
12037  40D7
12038  40D8
12039  40D9
12040  40DA
12041  40DB
12042  40DC
12043  40DD
12044  40DE
12045  40DF
12046  40E0
12047  40E1
12048  40E2
12049  40E3
12050  40E4
12051  40E5
12052  40E6
12053  40E7
12054  40E8
12055  40E9
12056  40EA
12057  40EB
12058  40EC
12059  40ED
12060  40EE
12061  40EF
12062  40F0
12063  40F1
12064  40F2
12065  40F3
12066  40F4
12067  40F5
12068  40F6
12069  40F7
12070  40F8
12071  40F9
12072  40FA
12073  40FB
12074  40FC
12075  40FD
12076  40FE
12077  40FF
12078  4100
12079  4101
12080  4102
12081  4103
12082  4104
12083  4105
12084  4106
12085  4107
12086  4108
12087  4109
12088  410A
12089  410B
12090  410C
12091  410D
12092  410E
12093  410F
12094  4110
12095  4111
12096  4112
12097  4113
12098  4114
12099  4115
12100  4116
12101  4117
12102  4118
12103  4119
12104  411A
12105  411B
12106  411C
12107  411D
12108  411E
12109  411F
12110  4120
12111  4121
12112  4122
12113  4123
12114  4124
12115  4125
12116  4126
12117  4127
12118  4128
12119  4129
12120  412A
12121  412B
12122  412C
12123  412D
12124  412E
12125  412F
12126  4130
12127  4131
12128  4132
12129  4133
12130  4134
12131  4135
12132  4136
12133  4137
12134  4138
12135  4139
12136  413A
12137  413B
12138  413C
12139  413D
12140  413E
12141  413F
12142  4140
12143  4141
12144  4142
12145  4143
12146  4144
12147  4145
12148  4146
12149  4147
12150  4148
12151  4149
12152  414A
12153  414B
12154  414C
12155  414D
12156  414E
12157  414F
12158  4150
12159  4151
12160  4152
12161  4153
12162  4154
12163  4155
12164  4156
12165  4157
12166  4158
12167  4159
12168  415A
12169  415B
12170  415C
12171  415D
12172  415E
12173  415F
12174  4160
12175  4161
12176  4162
12177  4163
12178  4164
12179  4165
12180  4166
12181  4167
12182  4168
12183  4169
12184  416A
12185  416B
12186  416C
12187  416D
12188  416E
12189  416F
12190  4170
12191  4171
12192  4172
12193  4173
12194  4174
12195  4175
12196  4176
12197  4177
12198  4178
12199  4179
12200  417A
12201  417B
12202  417C
12203  417D
12204  417E
12205  417F
12206  4180
12207  4181
12208  4182
12209  4183
12210  4184
12211  4185
12212  4186
12213  4187
12214  4188
12215  4189
12216  418A
12217  418B
12218  418C
12219  418D
12220  418E
12221  418F
12222  4190
12223  4191
12224  4192
12225  4193
12226  4194
12227  4195
12228  4196
12229  4197
12230  4198
12231  4199
12232  419A
12233  419B
12234  419C
12235  419D
12236  419E
12237  419F
12238  41A0
12239  41A1
12240  41A2
12241  41A3
12242  41A4
12243  41A5
12244  41A6
12245  41A7
12246  41A8
12247  41A9
12248  41AA
12249  41AB
12250  41AC
12251  41AD
12252  41AE
12253  41AF
12254  41B0
12255  41B1
12256  41B2
12257  41B3
12258  41B4
12259  41B5
12260  41B6
12261  41B7
12262  41B8
12263  41B9
12264  41BA
12265  41BB
12266  41BC
12267  41BD
12268  41BE
12269  41BF
12270  41C0
12271  41C1
12272  41C2
12273  41C3
12274  41C4
12275  41C5
12276  41C6
12277  41C7
12278  41C8
12279  41C9
12280  41CA
12281  41CB
12282  41CC
12283  41CD
12284  41CE
12285  41CF
12286  41D0
12287  41D1
12288  41D2
12289  41D3
12290  41D4
12291  41D5
12292  41D6
12293  41D7
12294  41D8
12295  41D9
12296  41DA
12297  41DB
12298  41DC
12299  41DD
12300  41DE
12301  41DF
12302  41E0
12303  41E1
12304  41E2
12305  41E3
12306  41E4
12307  41E5
12308  41E6
12309  41E7
12310  41E8
12311  41E9
12312  41EA
12313  41EB
12314  41EC
12315  41ED
12316  41EE
12317  41EF
12318  41F0
12319  41F1
12320  41F2
12321  41F3
12322  41F4
12323  41F5
12324  41F6
12325  41F7
12326  41F8
12327  41F9
12328  41FA
12329  41FB
12330  41FC
12331  41FD
12332  41FE
12333  41FF
12334  4200
12335  4201
12336  4202
12337  4203
12338  4204
12339  4205
12340  4206
12341  4207
12342  4208
12343  4209
12344  420A
12345  420B
12346  420C
12347  420D
12348  420E
12349  420F
12350  4210
12351  4211
12352  4212
12353  4213
12354  4214
12355  4215
12356  4216
12357  4217
12358  4218
12359  4219
12360  421A
12361  421B
12362  421C
12363  421D
12364  421E
12365  421F
12366  4220
12367  4221
12368  4222
12369  4223
12370  4224
12371  4225
12372  4226
12373  4227
12374  4228
12375  4229
12376  422A
12377  422B
12378  422C
12379  422D
12380  422E
12381  422F
12382  4230
12383  4231
12384  4232
12385  4233
12386  4234
12387  4235
12388  4236
12389  4237
12390  4238
12391  4239
12392  423A
12393  423B
12394  423C
12395  423D
12396  423E
12397  423F
12398  4240
12399  4241
12400  4242
12401  4243
12402  4244
12403  4245
12404  4246
12405  4247
12406  4248
12407  4249
12408  424A
12409  424B
12410  424C
12411  424D
12412  424E
12413  424F
12414  4250
12415  4251
12416  4252
12417  4253
12418  4254
12419  4255
12420  4256
12421  4257
12422  4258
12423  4259
12424  425A
12425  425B
12426  425C
12427  425D
12428  425E
12429  425F
12430  4260
12431  4261
12432  4262
12433  4263
12434  4264
12435  4265
12436  4266
12437  4267
12438  4268
12439  4269
12440  426A
12441  426B
12442  426C
12443  426D
12444  426E
12445  426F
12446  4270
12447  4271
12448  4272
12449  4273
12450  4274
12451  4275
12452  4276
12453  4277
12454  4278
12455  4279
12456  427A
12457  427B
12458  427C
12459  427D
12460  427E
12461  427F
12462  4280
12463  4281
12464  4282
12465  4283
12466  4284
12467  4285
12468  4286
12469  4287
12470  4288
12471  4289
12472  428A
12473  428B
12474  428C
12475  428D
12476  428E
12477  428F
12478  4290
12479  4291
12480  4292
12481  4293
12482  4294
12483  4295
12484  4296
12485  4297
12486  4298
12487  4299
12488  429A
12489  429B
12490  429C
12491  429D
12492  429E
12493  429F
12494  42A0
12495  42A1
12496  42A2
12497  42A3
12498  42A4
12499  42A5
12500  42A6
12501  42A7
12502  42A8
12503  42A9
12504  42AA
12505  42AB
12506  42AC
12507  42AD
12508  42AE
12509  42AF
12510  42B0
12511  42B1
12512  42B2
12513  42B3
12514  42B4
12515  42B5
12516  42B6
12517  42B7
12518  42B8
12519  42B9
12520  42BA
12521  42BB
12522  42BC
12523  42BD
12524  42BE
12525  42BF
12526  42C0
12527  42C1
12528  42C2
12529  42C3
12530  42C4
12531  42C5
12532  42C6
12533  42C7
12534  42C8
12535  42C9
12536  42CA
12537  42CB
12538  42CC
12539  42CD
12540  42CE
12541  42CF
12542  42D0
12543  42D1
12544  42D2
12545  42D3
12546  42D4
12547  42D5
12548  42D6
12549  42D7
12550  42D8
12551  42D9
12552  42DA
12553  42DB
12554  42DC
12555  42DD
12556  42DE
12557  42DF
12558  42E0
12559  42E1
12560  42E2
12561  42E3
12562  42E4
12563  42E5
12564  42E6
12565  42E7
12566  42E8
12567  42E9
12568  42EA
12569  42EB
12570  42EC
12571  42ED
12572  42EE
12573  42EF
12574  42F0
12575  42F1
12576  42F2
12577  42F3
12578  42F4
12579  42F5
12580  42F6
12581  42F7
12582  42F8
12583  42F9
12584  42FA
12585  42FB
12586  42FC
12587  42FD
12588  42FE
12589  42FF
12590  4300
12591  4301
12592  4302
12593  4303
12594  4304
12595  4305
12596  4306
12597  4307
12598  4308
12599  4309
12600  430A
12601  430B
12602  430C
12603  430D
12604  430E
12605  430F
12606  4310
12607  4311
12608  4312
12609  4313
12610  4314
12611  4315
12612  4316
12613  4317
12614  4318
12615  4319
12616  431A
12617  431B
12618  431C
12619  431D
12620  431E
12621  431F
12622  4320
12623  4321
12624  4322
12625  4323
12626  4324
12627  4325
12628  4326
12629  4327
12630  4328
12631  4329
12632  432A
12633  432B
12634  432C
12635  432D
12636  432E
12637  432F
12638  4330
12639  4331
12640  4332
12641  4333
12642  4334
12643  4335
12644  4336
12645  4337
12646  4338
12647  4339
12648  433A
12649  433B
12650  433C
12651  433D
12652  433E
12653  433F
12654  4340
12655  4341
12656  4342
12657  4343
12658  4344
12659  4345
12660  4346
12661  4347
12662  4348
12663  4349
12664  434A
12665  434B
12666  434C
12667  434D
12668  434E
12669  434F
12670  4350
12671  4351
12672  4352
12673  4353
12674  4354
12675  4355
12676  4356
12677  4357
12678  4358
12679  4359
12680  435A
12681  435B
12682  435C
12683  435D
12684  435E
12685  435F
12686  4360
12687  4361
12688  4362
12689  4363
12690  4364
12691  4365
12692  4366
12693  4367
12694  4368
12695  4369
12696  436A
12697  436B
12698  436C
12699  436D
12700  436E
12701  436F
12702  4370
12703  4371
12704  4372
12705  4373
12706  4374
12707  4375
12708  4376
12709  4377
12710  4378
12711  4379
12712  437A
12713  437B
12714  437C
12715  437D
12716  437E
12717  437F
12718  4380
12719  4381
12720  4382
12721  4383
12722  4384
12723  4385
12724  4386
12725  4387
12726  4388
12727  4389
12728  438A
12729  438B
12730  438C
12731  438D
12732  438E
12733  438F
12734  4390
12735  4391
12736  4392
12737  4393
12738  4394
12739  4395
12740  4396
12741  4397
12742  4398
12743  4399
12744  439A
12745  439B
12746  439C
12747  439D
12748  439E
12749  439F
12750  43A0
12751  43A1
12752  43A2
12753  43A3
12754  43A4
12755  43A5
12756  43A6
12757  43A7
12758  43A8
12759  43A9
12760  43AA
12761  43AB
12762  43AC
12763  43AD
12764  43AE
12765  43AF
12766  43B0
12767  43B1
12768  43B2
12769  43B3
12770  43B4
12771  43B5
12772  43B6
12773  43B7
12774  43B8
12775  43B9
12776  43BA
12777  43BB
12778  43BC
12779  43BD
12780  43BE
12781  43BF
12782  43C0
12783  43C1
12784  43C2
12785  43C3
12786  43C4
12787  43C5
12788  43C6
12789  43C7
12790  43C8
12791  43C9
12792  43CA
12793  43CB
12794  43CC
12795  43CD
12796  43CE
12797  43CF
12798  43D0
12799  43D1
12800  43D2
12801  43D3
12802  43D4
12803  43D5
12804  43D6
12805  43D7
12806  43D8
12807  43D9
12808  43DA
12809  43DB
12810  43DC
12811  43DD
12812  43DE
12813  43DF
12814  43E0
12815  43E1
12816  43E2
12817  43E3
12818  43E4
12819  43E5
12820  43E6
12821  43E7
12822  43E8
12823  43E9
12824  43EA
12825  43EB
12826  43EC
12827  43ED
12828  43EE
12829  43EF
12830  43F0
12831  43F1
12832  43F2
12833  43F3
12834  43F4
12835  43F5
12836  43F6
12837  43F7
12838  43F8
12839  43F9
12840  43FA
12841  43FB
12842  43FC
12843  43FD
12844  43FE
12845  43FF
12846  4400
12847  4401
12848  4402
12849  4403
12850  4404
12851  4405
12852  4406
12853  4407
12854  4408
12855  4409
12856  440A
12857  440B
12858  440C
12859  440D
12860  440E
12861  440F
12862  4410
12863  4411
12864  4412
12865  4413
12866  4414
12867  4415
12868  4416
12869  4417
12870  4418
12871  4419
12872  441A
12873  441B
12874  441C
12875  441D
12876  441E
12877  441F
12878  4420
12879  4421
12880  4422
12881  4423
12882  4424
12883  4425
12884  4426
12885  4427
12886  4428
12887  4429
12888  442A
12889  442B
12890  442C
12891  442D
12892  442E
12893  442F
12894  4430
12895  4431
12896  4432
12897  4433
12898  4434
12899  4435
12900  4436
12901  4437
12902  4438
12903  4439
12904  443A
12905  443B
12906  443C
12907  443D
12908  443E
12909  443F
12910  4440
12911  4441
12912  4442
12913  4443
12914  4444
12915  4445
12916  4446
12917  4447
12918  4448
12919  4449
12920  444A
12921  444B
12922  444C
12923  444D
12924  444E
12925  444F
12926  4450
12927  4451
12928  4452
12929  4453
12930  4454
12931  4455
12932  4456
12933  4457
12934  4458
12935  4459
12936  445A
12937  445B
12938  445C
12939  445D
12940  445E
12941  445F
12942  4460
12943  4461
12944  4462
12945  4463
12946  4464
12947  4465
12948  4466
12949  4467
12950  4468
12951  4469
12952  446A
12953  446B
12954  446C
12955  446D
12956  446E
12957  446F
12958  4470
12959  4471
12960  4472
12961  4473
12962  4474
12963  4475
12964  4476
12965  4477
12966  4478
12967  4479
12968  447A
12969  447B
12970  447C
12971  447D
12972  447E
12973  447F
12974  4480
12975  4481
12976  4482
12977  4483
12978  4484
12979  4485
12980  4486
12981  4487
12982  4488
12983  4489
12984  448A
12985  448B
12986  448C
12987  448D
12988  448E
12989  448F
12990  4490
12991  4491
12992  4492
12993  4493
12994  4494
12995  4495
12996  4496
12997  4497
12998  4498
12999  4499
13000  449A
13001  449B
13002  449C
13003  449D
13004  449E
13005  449F
13006  44A0
13007  44A1
13008  44A2
13009  44A3
13010  44A4
13011  44A5
13012  44A6
13013  44A7
13014  44A8
13015  44A9
13016  44AA
13017  44AB
13018  44AC
13019  44AD
13020  44AE
13021  44AF
13022  44B0
13023  44B1
13024  44B2
13025  44B3
13026  44B4
13027  44B5
13028  44B6
13029  44B7
13030  44B8
13031  44B9
13032  44BA
13033  44BB
13034  44BC
13035  44BD
13036  44BE
13037  44BF
13038  44C0
13039  44C1
13040  44C2
13041  44C3
13042  44C4
13043  44C5
13044  44C6
13045  44C7
13046  44C8
13047  44C9
13048  44CA
13049  44CB
13050  44CC
13051  44CD
13052  44CE
13053  44CF
13054  44D0
13055  44D1
13056  44D2
13057  44D3
13058  44D4
13059  44D5
13060  44D6
13061  44D7
13062  44D8
13063  44D9
13064  44DA
13065  44DB
13066  44DC
13067  44DD
13068  44DE
13069  44DF
13070  44E0
13071  44E1
13072  44E2
13073  44E3
13074  44E4
13075  44E5
13076  44E6
13077  44E7
13078  44E8
13079  44E9
13080  44EA
13081  44EB
13082  44EC
13083  44ED
13084  44EE
13085  44EF
13086  44F0
13087  44F1
13088  44F2
13089  44F3
13090  44F4
13091  44F5
13092  44F6
13093  44F7
13094  44F8
13095  44F9
13096  44FA
13097  44FB
13098  44FC
13099  44FD
13100  44FE
13101  44FF
13102  4500
13103  4501
13104  4502
13105  4503
13106  4504
13107  4505
13108  4506
13109  4507
13110  4508
13111  4509
13112  450A
13113  450B
13114  450C
13115  450D
13116  450E
13117  450F
13118  4510
13119  4511
13120  4512
13121  4513
13122  4514
13123  4515
13124  4516
13125  4517
13126  4518
13127  4519
13128  451A
13129  451B
13130  451C
13131  451D
13132  451E
13133  451F
13134  4520
13135  4521
13136  4522
13137  4523
13138  4524
13139  4525
13140  4526
13141  4527
13142  4528
13143  4529
13144  452A
13145  452B
13146  452C
13147  452D
13148  452E
13149  452F
13150  4530
13151  4531
13152  4532
13153  4533
13154  4534
13155  4535
13156  4536
13157  4537
13158  4538
13159  4539
13160  453A
13161  453B
13162  453C
13163  453D
13164  453E
13165  453F
13166  4540
13167  4541
13168  4542
13169  4543
13170  4544
13171  4545
13172  4546
13173  4547
13174  4548
13175  4549
13176  454A
13177  454B
13178  454C
13179  454D
13180  454E
13181  454F
13182  4550
13183  4551
13184  4552
13185  4553
13186  4554
13187  4555
13188  4556
13189  4557
13190  4558
13191  4559
13192  455A
13193  455B
13194  455C
13195  455D
13196  455E
13197  455F
13198  4560
13199  4561
13200  4562
13201  4563
13202  4564
13203  4565
13204  4566
13205  4567
13206  4568
13207  4569
13208  456A
13209  456B
13210  456C
13211  456D
13212  456E
13213  456F
13214  4570
13215  4571
13216  4572
13217  4573
13218  4574
13219  4575
13220  4576
13221  4577
13222  4578
13223  4579
13224  457A
13225  457B
13226  457C
13227  457D
13228  457E
13229  457F
13230  4580
13231  4581
13232  4582
13233  4583
13234  4584
13235  4585
13236  4586
13237  4587
13238  4588
13239  4589
13240  458A
13241  458B
13242  458C
13243  458D
13244  458E
13245  458F
13246  4590
13247  4591
13248  4592
13249  4593
13250  4594
13251  4595
13252  4596
13253  4597
13254  4598
13255  4599
13256  459A
13257  459B
13258  459C
13259  459D
13260  459E
13261  459F
13262  45A0
13263  45A1
13264  45A2
13265  45A3
13266  45A4
13267  45A5
13268  45A6
13269  45A7
13270  45A8
13271  45A9
13272  45AA
13273  45AB
13274  45AC
13275  45AD
13276  45AE
13277  45AF
13278  45B0
13279  45B1
13280  45B2
13281  45B3
13282  45B4
13283  45B5
13284  45B6
13285  45B7
13286  45B8
13287  45B9
13288  45BA
13289  45BB
13290  45BC
13291  45BD
13292  45BE
13293  45BF
13294  45C0
13295  45C1
13296  45C2
13297  45C3
13298  45C4
13299  45C5
13300  45C6
13301  45C7
13302  45C8
13303  45C9
13304  45CA
13305  45CB
13306  45CC
13307  45CD
13308  45CE
13309  45CF
13310  45D0
13311  45D1
13312  45D2
13313  45D3
13314  45D4
13315  45D5
13316  45D6
13317  45D7
13318  45D8
13319  45D9
13320  45DA
13321  45DB
13322  45DC
13323  45DD
13324  45DE
13325  45DF
13326  45E0
13327  45E1
13328  45E2
13329  45E3
13330  45E4
13331  45E5
13332  45E6
13333  45E7
13334  45E8
13335  45E9
13336  45EA
13337  45EB
13338  45EC
13339  45ED
13340  45EE
13341  45EF
13342  45F0
13343  45F1
13344  45F2
13345  45F3
13346  45F4
13347  45F5
13348  45F6
13349  45F7
13350  45F8
13351  45F9
13352  45FA
13353  45FB
13354  45FC
13355  45FD
13356  45FE
13357  45FF
13358  4600
13359  4601
13360  4602
13361  4603
13362  4604
13363  4605
13364  4606
13365  4607
13366  4608
13367  4609
13368  460A
13369  460B
13370  460C
13371  460D
13372  460E
13373  460F
13374  4610
13375  4611
13376  4612
13377  4613
13378  4614
13379  4615
13380  4616
13381  4617
13382  4618
13383  4619
13384  461A
13385  461B
13386  461C
13387  461D
13388  461E
13389  461F
13390  4620
13391  4621
13392  4622
13393  4623
13394  4624
13395  4625
13396  4626
13397  4627
13398  4628
13399  4629
13400  462A
13401  462B
13402  462C
13403  462D
13404  462E
13405  462F
13406  4630
13407  4631
13408  4632
13409  4633
13410  4634
13411  4635
13412  4636
13413  4637
13414  4638
13415  4639
13416  463A
13417  463B
13418  463C
13419  463D
13420  463E
13421  463F
13422  4640
13423  4641
13424  4642
13425  4643
13426  4644
13427  4645
13428  4646
13429  4647
13430  4648
13431  4649
13432  464A
13433  464B
13434  464C
13435  464D
13436  464E
13437  464F
13438  4650
13439  4651
13440  4652
13441  4653
13442  4654
13443  4655
13444  4656
13445  4657
13446  4658
13447  4659
13448  465A
13449  465B
13450  465C
13451  465D
13452  465E
13453  465F
13454  4660
13455  4661
13456  4662
13457  4663
13458  4664
13459  4665
13460  4666
13461  4667
13462  4668
13463  4669
13464  466A
13465  466B
13466  466C
13467  466D
13468  466E
13469  466F
13470  4670
13471  4671
13472  4672
13473  4673
13474  4674
13475  4675
13476  4676
13477  4677
13478  4678
13479  4679
13480  467A
13481  467B
13482  467C
13483  467D
13484  467E
13485  467F
13486  4680
13487  4681
13488  4682
13489  4683
13490  4684
13491  4685
13492  4686
13493  4687
13494  4688
13495  4689
13496  468A
13497  468B
13498  468C
13499  468D
13500  468E
13501  468F
13502  4690
13503  4691
13504  4692
13505  4693
13506  4694
13507  4695
13508  4696
13509  4697
13510  4698
13511  4699
13512  469A
13513  469B
13514  469C
13515  469D
13516  469E
13517  469F
13518  46A0
13519  46A1
13520  46A2
13521  46A3
13522  46A4
13523  46A5
13524  46A6
13525  46A7
13526  46A8
13527  46A9
13528  46AA
13529  46AB
13530  46AC
13531  46AD
13532  46AE
13533  46AF
13534  46B0
13535  46B1
13536  46B2
13537  46B3
13538  46B4
13539  46B5
13540  46B6
13541  46B7
13542  46B8
13543  46B9
13544  46BA
13545  46BB
13546  46BC
13547  46BD
13548  46BE
13549  46BF
13550  46C0
13551  46C1
13552  46C2
13553  46C3
13554  46C4
13555  46C5
13556  46C6
13557  46C7
13558  46C8
13559  46C9
13560  46CA
13561  46CB
13562  46CC
13563  46CD
13564  46CE
13565  46CF
13566  46D0
13567  46D1
13568  46D2
13569  46D3
13570  46D4
13571  46D5
13572  46D6
13573  46D7
13574  46D8
13575  46D9
13576  46DA
13577  46DB
13578  46DC
13579  46DD
13580  46DE
13581  46DF
13582  46E0
13583  46E1
13584  46E2
13585  46E3
13586  46E4
13587  46E5
13588  46E6
13589  46E7
13590  46E8
13591  46E9
13592  46EA
13593  46EB
13594  46EC
13595  46ED
13596  46EE
13597  46EF
13598  46F0
13599  46F1
13600  46F2
13601  46F3
13602  46F4
13603  46F5
13604  46F6
13605  46F7
13606  46F8
13607  46F9
13608  46FA
13609  46FB
13610  46FC
13611  46FD
13612  46FE
13613  46FF
13614  4700
13615  4701
13616  4702
13617  4703
13618  4704
13619  4705
13620  4706
13621  4707
13622  4708
13623  4709
13624  470A
13625  470B
13626  470C
13627  470D
13628  470E
13629  470F
13630  4710
13631  4711
13632  4712
13633  4713
13634  4714
13635  4715
13636  4716
13637  4717
13638  4718
13639  4719
13640  471A
13641  471B
13642  471C
13643  471D
13644  471E
13645  471F
13646  4720
13647  4721
13648  4722
13649  4723
13650  4724
13651  4725
13652  4726
13653  4727
13654  4728
13655  4729
13656  472A
13657  472B
13658  472C
13659  472D
13660  472E
13661  472F
13662  4730
13663  4731
13664  4732
13665  4733
13666  4734
13667  4735
13668  4736
13669  4737
13670  4738
13671  4739
13672  473A
13673  473B
13674  473C
13675  473D
13676  473E
13677  473F
13678  4740
13679  4741
13680  4742
13681  4743
13682  4744
13683  4745
13684  4746
13685  4747
13686  4748
13687  4749
13688  474A
13689  474B
13690  474C
13691  474D
13692  474E
13693  474F
13694  4750
13695  4751
13696  4752
13697  4753
13698  4754
13699  4755
13700  4756
13701  4757
13702  4758
13703  4759
13704  475A
13705  475B
13706  475C
13707  475D
13708  475E
13709  475F
13710  4760
13711  4761
13712  4762
13713  4763
13714  4764
13715  4765
13716  4766
13717  4767
13718  4768
13719  4769
13720  476A
13721  476B
13722  476C
13723  476D
13724  476E
13725  476F
13726  4770
13727  4771
13728  4772
13729  4773
13730  4774
13731  4775
13732  4776
13733  4777
13734  4778
13735  4779
13736  477A
13737  477B
13738  477C
13739  477D
13740  477E
13741  477F
13742  4780
13743  4781
13744  4782
13745  4783
13746  4784
13747  4785
13748  4786
13749  4787
13750  4788
13751  4789
13752  478A
13753  478B
13754  478C
13755  478D
13756  478E
13757  478F
13758  4790
13759  4791
13760  4792
13761  4793
13762  4794
13763  4795
13764  4796
13765  4797
13766  4798
13767  4799
13768  479A
13769  479B
13770  479C
13771  479D
13772  479E
13773  479F
13774  47A0
13775  47A1
13776  47A2
13777  47A3
13778  47A4
13779  47A5
13780  47A6
13781  47A7
13782  47A8
13783  47A9
13784  47AA
13785  47AB
13786  47AC
13787  47AD
13788  47AE
13789  47AF
13790  47B0
13791  47B1
13792  47B2
13793  47B3
13794  47B4
13795  47B5
13796  47B6
13797  47B7
13798  47B8
13799  47B9
13800  47BA
13801  47BB
13802  47BC
13803  47BD
13804  47BE
13805  47BF
13806  47C0
13807  47C1
13808  47C2
13809  47C3
13810  47C4
13811  47C5
13812  47C6
13813  47C7
13814  47C8
13815  47C9
13816  47CA
13817  47CB
13818  47CC
13819  47CD
13820  47CE
13821  47CF
13822  47D0
13823  47D1
13824  47D2
13825  47D3
13826  47D4
13827  47D5
13828  47D6
13829  47D7
13830  47D8
13831  47D9
13832  47DA
13833  47DB
13834  47DC
13835  47DD
13836  47DE
13837  47DF
13838  47E0
13839  47E1
13840  47E2
13841  47E3
13842  47E4
13843  47E5
13844  47E6
13845  47E7
13846  47E8
13847  47E9
13848  47EA
13849  47EB
13850  47EC
13851  47ED
13852  47EE
13853  47EF
13854  47F0
13855  47F1
13856  47F2
13857  47F3
13858  47F4
13859  47F5
13860  47F6
13861  47F7
13862  47F8
13863  47F9
13864  47FA
13865  47FB
13866  47FC
13867  47FD
13868  47FE
13869  47FF
13870  4800
13871  4801
13872  4802
13873  4803
13874  4804
13875  4805
13876  4806
13877  4807
13878  4808
13879  4809
13880  480A
13881  480B
13882  480C
13883  480D
13884  480E
13885  480F
13886  4810
13887  4811
13888  4812
13889  4813
13890  4814
13891  4815
13892  4816
13893  4817
13894  4818
13895  4819
13896  481A
13897  481B
13898  481C
13899  481D
13900  481E
13901  481F
13902  4820
13903  4821
13904  4822
13905  4823
13906  4824
13907  4825
13908  4826
13909  4827
13910  4828
13911  4829
13912  482A
13913  482B
13914  482C
13915  482D
13916  482E
13917  482F
13918  4830
13919  4831
13920  4832
13921  4833
13922  4834
13923  4835
13924  4836
13925  4837
13926  4838
13927  4839
13928  483A
13929  483B
13930  483C
13931  483D
13932  483E
13933  483F
13934  4840
13935  4841
13936  4842
13937  4843
13938  4844
13939  4845
13940  4846
13941  4847
13942  4848
13943  4849
13944  484A
13945  484B
13946  484C
13947  484D
13948  484E
13949  484F
13950  4850
13951  4851
13952  4852
13953  4853
13954  4854
13955  4855
13956  4856
13957  4857
13958  4858
13959  4859
13960  485A
13961  485B
13962  485C
13963  485D
13964  485E
13965  485F
13966  4860
13967  4861
13968  4862
13969  4863
13970  4864
13971  4865
13972  4866
13973  4867
13974  4868
13975  4869
13976  486A
13977  486B
13978  486C
13979  486D
13980  486E
13981  486F
13982  4870
13983  4871
13984  4872
13985  4873
13986  4874
13987  4875
13988  4876
13989  4877
13990  4878
13991  4879
13992  487A
13993  487B
13994  487C
13995  487D
13996  487E
13997  487F
13998  4880
13999  4881
14000  4882
14001  4883
14002  4884
14003  4885
14004  4886
14005  4887
14006  4888
14007  4889
14008  488A
14009  488B
14010  488C
14011  488D
14012  488E
14013  488F
14014  4890
14015  4891
14016  4892
14017  4893
14018  4894
14019  4895
14020  4896
14021  4897
14022  4898
14023  4899
14024  489A
14025  489B
14026  489C
14027  489D
14028  489E
14029  489F
14030  48A0
14031  48A1
14032  48A2
14033  48A3
14034  48A4
14035  48A5
14036  48A6
14037  48A7
14038  48A8
14039  48A9
14040  48AA
14041  48AB
14042  48AC
14043  48AD
14044  48AE
14045  48AF
14046  48B0
14047  48B1
14048  48B2
14049  48B3
14050  48B4
14051  48B5
14052  48B6
14053  48B7
14054  48B8
14055  48B9
14056  48BA
14057  48BB
14058  48BC
14059  48BD
14060  48BE
14061  48BF
14062  48C0
14063  48C1
14064  48C2
14065  48C3
14066  48C4
14067  48C5
14068  48C6
14069  48C7
14070  48C8
14071  48C9
14072  48CA
14073  48CB
14074  48CC
14075  48CD
14076  48CE
14077  48CF
14078  48D0
14079  48D1
14080  48D2
14081  48D3
14082  48D4
14083  48D5
14084  48D6
14085  48D7
14086  48D8
14087  48D9
14088  48DA
14089  48DB
14090  48DC
14091  48DD
14092  48DE
14093  48DF
14094  48E0
14095  48E1
14096  48E2
14097  48E3
14098  48E4
14099  48E5
14100  48E6
14101  48E7
14102  48E8
14103  48E9
14104  48EA
14105  48EB
14106  48EC
14107  48ED
14108  48EE
14109  48EF
14110  48F0
14111  48F1
14112  48F2
14113  48F3
14114  48F4
14115  48F5
14116  48F6
14117  48F7
14118  48F8
14119  48F9
14120  48FA
14121  48FB
14122  48FC
14123  48FD
14124  48FE
14125  48FF
14126  4900
14127  4901
14128  4902
14129  4903
14130  4904
14131  4905
14132  4906
14133  4907
14134  4908
14135  4909
14136  490A
14137  490B
14138  490C
14139  490D
14140  490E
14141  490F
14142  4910
14143  4911
14144  4912
14145  4913
14146  4914
14147  4915
14148  4916
14149  4917
14150  4918
14151  4919
14152  491A
14153  491B
14154  491C
14155  491D
14156  491E
14157  491F
14158  4920
14159  4921
14160  4922
14161  4923
14162  4924
14163  4925
14164  4926
14165  4927
14166  4928
14167  4929
14168  492A
14169  492B
14170  492C
14171  492D
14172  492E
14173  492F
14174  4930
14175  4931
14176  4932
14177  4933
14178  4934
14179  4935
14180  4936
14181  4937
14182  4938
14183  4939
14184  493A
14185  493B
14186  493C
14187  493D
14188  493E
14189  493F
14190  4940
14191  4941
14192  4942
14193  4943
14194  4944
14195  4945
14196  4946
14197  4947
14198  4948
14199  4949
14200  494A
14201  494B
14202  494C
14203  494D
14204  494E
14205  494F
14206  4950
14207  4951
14208  4952
14209  4953
14210  4954
14211  4955
14212  4956
14213  4957
14214  4958
14215  4959
14216  495A
14217  495B
14218  495C
14219  495D
14220  495E
14221  495F
14222  4960
14223  4961
14224  4962
14225  4963
14226  4964
14227  4965
14228  4966
14229  4967
14230  4968
14231  4969
14232  496A
14233  496B
14234  496C
14235  496D
14236  496E
14237  496F
14238  4970
14239  4971
14240  4972
14241  4973
14242  4974
14243  4975
14244  4976
14245  4977
14246  4978
14247  4979
14248  497A
14249  497B
14250  497C
14251  497D
14252  497E
14253  497F
14254  4980
14255  4981
14256  4982
14257  4983
14258  4984
14259  4985
14260  4986
14261  4987
14262  4988
14263  4989
14264  498A
14265  498B
14266  498C
14267  498D
14268  498E
14269  498F
14270  4990
14271  4991
14272  4992
14273  4993
14274  4994
14275  4995
14276  4996
14277  4997
14278  4998
14279  4999
14280  499A
14281  499B
14282  499C
14283  499D
14284  499E
14285  499F
14286  49A0
14287  49A1
14288  49A2
14289  49A3
14290  49A4
14291  49A5
14292  49A6
14293  49A7
14294  49A8
14295  49A9
14296  49AA
14297  49AB
14298  49AC
14299  49AD
14300  49AE
14301  49AF
14302  49B0
14303  49B1
14304  49B2
14305  49B3
14306  49B4
14307  49B5
14308  49B6
14309  49B7
14310  49B8
14311  49B9
14312  49BA
14313  49BB
14314  49BC
14315  49BD
14316  49BE
14317  49BF
14318  49C0
14319  49C1
14320  49C2
14321  49C3
14322  49C4
14323  49C5
14324  49C6
14325  49C7
14326  49C8
14327  49C9
14328  49CA
14329  49CB
14330  49CC
14331  49CD
14332  49CE
14333  49CF
14334  49D0
14335  49D1
14336  49D2
14337  49D3
14338  49D4
14339  49D5
14340  49D6
14341  49D7
14342  49D8
14343  49D9
14344  49DA
14345  49DB
14346  49DC
14347  49DD
14348  49DE
14349  49DF
14350  49E0
14351  49E1
14352  49E2
14353  49E3
14354  49E4
14355  49E5
14356  49E6
14357  49E7
14358  49E8
14359  49E9
14360  49EA
14361  49EB
14362  49EC
14363  49ED
14364  49EE
14365  49EF
14366  49F0
14367  49F1
14368  49F2
14369  49F3
14370  49F4
14371  49F5
14372  49F6
14373  49F7
14374  49F8
14375  49F9
14376  49FA
14377  49FB
14378  49FC
14379  49FD
14380  49FE
14381  49FF
14382  4A00
14383  4A01
14384  4A02
14385  4A03
14386  4A04
14387  4A05
14388  4A06
14389  4A07
14390  4A08
14391  4A09
14392  4A0A
14393  4A0B
14394  4A0C
14395  4A0D
14396  4A0E
14397  4A0F
14398  4A10
14399  4A11
14400  4A12
14401  4A13
14402  4A14
14403  4A15
14404  4A16
14405  4A17
14406  4A18
14407  4A19
14408  4A1A
14409  4A1B
14410  4A1C
14411  4A1D
14412  4A1E
14413  4A1F
14414  4A20
14415  4A21
14416  4A22
14417  4A23
14418  4A24
14419  4A25
14420  4A26
14421  4A27
14422  4A28
14423  4A29
14424  4A2A
14425  4A2B
14426  4A2C
14427  4A2D
14428  4A2E
14429  4A2F
14430  4A30
14431  4A31
14432  4A32
14433  4A33
14434  4A34
14435  4A35
14436  4A36
14437  4A37
14438  4A38
14439  4A39
14440  4A3A
14441  4A3B
14442  4A3C
14443  4A3D
14444  4A3E
14445  4A3F
14446  4A40
14447  4A41
14448  4A42
14449  4A43
14450  4A44
14451  4A45
14452  4A46
14453  4A47
14454  4A48
14455  4A49
14456  4A4A
14457  4A4B
14458  4A4C
14459  4A4D
14460  4A4E
14461  4A4F
14462  4A50
14463  4A51
14464  4A52
14465  4A53
14466  4A54
14467  4A55
14468  4A56
14469  4A57
14470  4A58
14471  4A59
14472  4A5A
14473  4A5B
14474  4A5C
14475  4A5D
14476  4A5E
14477  4A5F
14478  4A60
14479  4A61
14480  4A62
14481  4A63
14482  4A64
14483  4A65
14484  4A66
14485  4A67
14486  4A68
14487  4A69
14488  4A6A
14489  4A6B
14490  4A6C
14491  4A6D
14492  4A6E
14493  4A6F
14494  4A70
14495  4A71
14496  4A72
14497  4A73
14498  4A74
14499  4A75
14500  4A76
14501  4A77
14502  4A78
14503  4A79
14504  4A7A
14505  4A7B
14506  4A7C
14507  4A7D
14508  4A7E
14509  4A7F
14510  4A80
14511  4A81
14512  4A82
14513  4A83
14514  4A84
14515  4A85
14516  4A86
14517  4A87
14518  4A88
14519  4A89
14520  4A8A
14521  4A8B
14522  4A8C
14523  4A8D
14524  4A8E
14525  4A8F
14526  4A90
14527  4A91
14528  4A92
14529  4A93
14530  4A94
14531  4A95
14532  4A96
14533  4A97
14534  4A98
14535  4A99
14536  4A9A
14537  4A9B
14538  4A9C
14539  4A9D
14540  4A9E
14541  4A9F
14542  4AA0
14543  4AA1
14544  4AA2
14545  4AA3
14546  4AA4
14547  4AA5
14548  4AA6
14549  4AA7
14550  4AA8
14551  4AA9
14552  4AAA
14553  4AAB
14554  4AAC
14555  4AAD
14556  4AAE
14557  4AAF
14558  4AB0
14559  4AB1
14560  4AB2
14561  4AB3
14562  4AB4
14563  4AB5
14564  4AB6
14565  4AB7
14566  4AB8
14567  4AB9
14568  4ABA
14569  4ABB
14570  4ABC
14571  4ABD
14572  4ABE
14573  4ABF
14574  4AC0
14575  4AC1
14576  4AC2
14577  4AC3
14578  4AC4
14579  4AC5
14580  4AC6
14581  4AC7
14582  4AC8
14583  4AC9
14584  4ACA
14585  4ACB
14586  4ACC
14587  4ACD
14588  4ACE
14589  4ACF
14590  4AD0
14591  4AD1
14592  4AD2
14593  4AD3
14594  4AD4
14595  4AD5
14596  4AD6
14597  4AD7
14598  4AD8
14599  4AD9
14600  4ADA
14601  4ADB
14602  4ADC
14603  4ADD
14604  4ADE
14605  4ADF
14606  4AE0
14607  4AE1
14608  4AE2
14609  4AE3
14610  4AE4
14611  4AE5
14612  4AE6
14613  4AE7
14614  4AE8
14615  4AE9
14616  4AEA
14617  4AEB
14618  4AEC
14619  4AED
14620  4AEE
14621  4AEF
14622  4AF0
14623  4AF1
14624  4AF2
14625  4AF3
14626  4AF4
14627  4AF5
14628  4AF6
14629  4AF7
14630  4AF8
14631  4AF9
14632  4AFA
14633  4AFB
14634  4AFC
14635  4AFD
14636  4AFE
14637  4AFF
14638  4B00
14639  4B01
14640  4B02
14641  4B03
14642  4B04
14643  4B05
14644  4B06
14645  4B07
14646  4B08
14647  4B09
14648  4B0A
14649  4B0B
14650  4B0C
14651  4B0D
14652  4B0E
14653  4B0F
14654  4B10
14655  4B11
14656  4B12
14657  4B13
14658  4B14
14659  4B15
14660  4B16
14661  4B17
14662  4B18
14663  4B19
14664  4B1A
14665  4B1B
14666  4B1C
14667  4B1D
14668  4B1E
14669  4B1F
14670  4B20
14671  4B21
14672  4B22
14673  4B23
14674  4B24
14675  4B25
14676  4B26
14677  4B27
14678  4B28
14679  4B29
14680  4B2A
14681  4B2B
14682  4B2C
14683  4B2D
14684  4B2E
14685  4B2F
14686  4B30
14687  4B31
14688  4B32
14689  4B33
14690  4B34
14691  4B35
14692  4B36
14693  4B37
14694  4B38
14695  4B39
14696  4B3A
14697  4B3B
14698  4B3C
14699  4B3D
14700  4B3E
14701  4B3F
14702  4B40
14703  4B41
14704  4B42
14705  4B43
14706  4B44
14707  4B45
14708  4B46
14709  4B47
14710  4B48
14711  4B49
14712  4B4A
14713  4B4B
14714  4B4C
14715  4B4D
14716  4B4E
14717  4B4F
14718  4B50
14719  4B51
14720  4B52
14721  4B53
14722  4B54
14723  4B55
14724  4B56
14725  4B57
14726  4B58
14727  4B59
14728  4B5A
14729  4B5B
14730  4B5C
14731  4B5D
14732  4B5E
14733  4B5F
14734  4B60
14735  4B61
14736  4B62
14737  4B63
14738  4B64
14739  4B65
14740  4B66
14741  4B67
14742  4B68
14743  4B69
14744  4B6A
14745  4B6B
14746  4B6C
14747  4B6D
14748  4B6E
14749  4B6F
14750  4B70
14751  4B71
14752  4B72
14753  4B73
14754  4B74
14755  4B75
14756  4B76
14757  4B77
14758  4B78
14759  4B79
14760  4B7A
14761  4B7B
14762  4B7C
14763  4B7D
14764  4B7E
14765  4B7F
14766  4B80
14767  4B81
14768  4B82
14769  4B83
14770  4B84
14771  4B85
14772  4B86
14773  4B87
14774  4B88
14775  4B89
14776  4B8A
14777  4B8B
14778  4B8C
14779  4B8D
14780  4B8E
14781  4B8F
14782  4B90
14783  4B91
14784  4B92
14785  4B93
14786  4B94
14787  4B95
14788  4B96
14789  4B97
14790  4B98
14791  4B99
14792  4B9A
14793  4B9B
14794  4B9C
14795  4B9D
14796  4B9E
14797  4B9F
14798  4BA0
14799  4BA1
14800  4BA2
14801  4BA3
14802  4BA4
14803  4BA5
14804  4BA6
14805  4BA7
14806  4BA8
14807  4BA9
14808  4BAA
14809  4BAB
14810  4BAC
14811  4BAD
14812  4BAE
14813  4BAF
14814  4BB0
14815  4BB1
14816  4BB2
14817  4BB3
14818  4BB4
14819  4BB5
14820  4BB6
14821  4BB7
14822  4BB8
14823  4BB9
14824  4BBA
14825  4BBB
14826  4BBC
14827  4BBD
14828  4BBE
14829  4BBF
14830  4BC0
14831  4BC1
14832  4BC2
14833  4BC3
14834  4BC4
14835  4BC5
14836  4BC6
14837  4BC7
14838  4BC8
14839  4BC9
14840  4BCA
14841  4BCB
14842  4BCC
14843  4BCD
14844  4BCE
14845  4BCF
14846  4BD0
14847  4BD1
14848  4BD2
14849  4BD3
14850  4BD4
14851  4BD5
14852  4BD6
14853  4BD7
14854  4BD8
14855  4BD9
14856  4BDA
14857  4BDB
14858  4BDC
14859  4BDD
14860  4BDE
14861  4BDF
14862  4BE0
14863  4BE1
14864  4BE2
14865  4BE3
14866  4BE4
14867  4BE5
14868  4BE6
14869  4BE7
14870  4BE8
14871  4BE9
14872  4BEA
14873  4BEB
14874  4BEC
14875  4BED
14876  4BEE
14877  4BEF
14878  4BF0
14879  4BF1
14880  4BF2
14881  4BF3
14882  4BF4
14883  4BF5
14884  4BF6
14885  4BF7
14886  4BF8
14887  4BF9
14888  4BFA
14889  4BFB
14890  4BFC
14891  4BFD
14892  4BFE
14893  4BFF
14894  4C00
14895  4C01
14896  4C02
14897  4C03
14898  4C04
14899  4C05
14900  4C06
14901  4C07
14902  4C08
14903  4C09
14904  4C0A
14905  4C0B
14906  4C0C
14907  4C0D
14908  4C0E
14909  4C0F
14910  4C10
14911  4C11
14912  4C12
14913  4C13
14914  4C14
14915  4C15
14916  4C16
14917  4C17
14918  4C18
14919  4C19
14920  4C1A
14921  4C1B
14922  4C1C
14923  4C1D
14924  4C1E
14925  4C1F
14926  4C20
14927  4C21
14928  4C22
14929  4C23
14930  4C24
14931  4C25
14932  4C26
14933  4C27
14934  4C28
14935  4C29
14936  4C2A
14937  4C2B
14938  4C2C
14939  4C2D
14940  4C2E
14941  4C2F
14942  4C30
14943  4C31
14944  4C32
14945  4C33
14946  4C34
14947  4C35
14948  4C36
14949  4C37
14950  4C38
14951  4C39
14952  4C3A
14953  4C3B
14954  4C3C
14955  4C3D
14956  4C3E
14957  4C3F
14958  4C40
14959  4C41
14960  4C42
14961  4C43
14962  4C44
14963  4C45
14964  4C46
14965  4C47
14966  4C48
14967  4C49
14968  4C4A
14969  4C4B
14970  4C4C
14971  4C4D
14972  4C4E
14973  4C4F
14974  4C50
14975  4C51
14976  4C52
14977  4C53
14978  4C54
14979  4C55
14980  4C56
14981  4C57
14982  4C58
14983  4C59
14984  4C5A
14985  4C5B
14986  4C5C
14987  4C5D
14988  4C5E
14989  4C5F
14990  4C60
14991  4C61
14992  4C62
14993  4C63
14994  4C64
14995  4C65
14996  4C66
14997  4C67
14998  4C68
14999  4C69
15000  4C6A
15001  4C6B
15002  4C6C
15003  4C6D
15004  4C6E
15005  4C6F
15006  4C70
15007  4C71
15008  4C72
15009  4C73
15010  4C74
15011  4C75
15012  4C76
15013  4C77
15014  4C78
15015  4C79
15016  4C7A
15017  4C7B
15018  4C7C
15019  4C7D
15020  4C7E
15021  4C7F
15022  4C80
15023  4C81
15024  4C82
15025  4C83
15026  4C84
15027  4C85
15028  4C86
15029  4C87
15030  4C88
15031  4C89
15032  4C8A
15033  4C8B
15034  4C8C
15035  4C8D
15036  4C8E
15037  4C8F
15038  4C90
15039  4C91
15040  4C92
15041  4C93
15042  4C94
15043  4C95
15044  4C96
15045  4C97
15046  4C98
15047  4C99
15048  4C9A
15049  4C9B
15050  4C9C
15051  4C9D
15052  4C9E
15053  4C9F
15054  4CA0
15055  4CA1
15056  4CA2
15057  4CA3
15058  4CA4
15059  4CA5
15060  4CA6
15061  4CA7
15062  4CA8
15063  4CA9
15064  4CAA
15065  4CAB
15066  4CAC
15067  4CAD
15068  4CAE
15069  4CAF
15070  4CB0
15071  4CB1
15072  4CB2
15073  4CB3
15074  4CB4
15075  4CB5
15076  4CB6
15077  4CB7
15078  4CB8
15079  4CB9
15080  4CBA
15081  4CBB
15082  4CBC
15083  4CBD
15084  4CBE
15085  4CBF
15086  4CC0
15087  4CC1
15088  4CC2
15089  4CC3
15090  4CC4
15091  4CC5
15092  4CC6
15093  4CC7
15094  4CC8
15095  4CC9
15096  4CCA
15097  4CCB
15098  4CCC
15099  4CCD
15100  4CCE
15101  4CCF
15102  4CD0
15103  4CD1
15104  4CD2
15105  4CD3
15106  4CD4
15107  4CD5
15108  4CD6
15109  4CD7
15110  4CD8
15111  4CD9
15112  4CDA
15113  4CDB
15114  4CDC
15115  4CDD
15116  4CDE
15117  4CDF
15118  4CE0
15119  4CE1
15120  4CE2
15121  4CE3
15122  4CE4
15123  4CE5
15124  4CE6
15125  4CE7
15126  4CE8
15127  4CE9
15128  4CEA
15129  4CEB
15130  4CEC
15131  4CED
15132  4CEE
15133  4CEF
15134  4CF0
15135  4CF1
15136  4CF2
15137  4CF3
15138  4CF4
15139  4CF5
15140  4CF6
15141  4CF7
15142  4CF8
15143  4CF9
15144  4CFA
15145  4CFB
15146  4CFC
15147  4CFD
15148  4CFE
15149  4CFF
15150  4D00
15151  4D01
15152  4D02
15153  4D03
15154  4D04
15155  4D05
15156  4D06
15157  4D07
15158  4D08
15159  4D09
15160  4D0A
15161  4D0B
15162  4D0C
15163  4D0D
15164  4D0E
15165  4D0F
15166  4D10
15167  4D11
15168  4D12
15169  4D13
15170  4D14
15171  4D15
15172  4D16
15173  4D17
15174  4D18
15175  4D19
15176  4D1A
15177  4D1B
15178  4D1C
15179  4D1D
15180  4D1E
15181  4D1F
15182  4D20
15183  4D21
15184  4D22
15185  4D23
15186  4D24
15187  4D25
15188  4D26
15189  4D27
15190  4D28
15191  4D29
15192  4D2A
15193  4D2B
15194  4D2C
15195  4D2D
15196  4D2E
15197  4D2F
15198  4D30
15199  4D31
15200  4D32
15201  4D33
15202  4D34
15203  4D35
15204  4D36
15205  4D37
15206  4D38
15207  4D39
15208  4D3A
15209  4D3B
15210  4D3C
15211  4D3D
15212  4D3E
15213  4D3F
15214  4D40
15215  4D41
15216  4D42
15217  4D43
15218  4D44
15219  4D45
15220  4D46
15221  4D47
15222  4D48
15223  4D49
15224  4D4A
15225  4D4B
15226  4D4C
15227  4D4D
15228  4D4E
15229  4D4F
15230  4D50
15231  4D51
15232  4D52
15233  4D53
15234  4D54
15235  4D55
15236  4D56
15237  4D57
15238  4D58
15239  4D59
15240  4D5A
15241  4D5B
15242  4D5C
15243  4D5D
15244  4D5E
15245  4D5F
15246  4D60
15247  4D61
15248  4D62
15249  4D63
15250  4D64
15251  4D65
15252  4D66
15253  4D67
15254  4D68
15255  4D69
15256  4D6A
15257  4D6B
15258  4D6C
15259  4D6D
15260  4D6E
15261  4D6F
15262  4D70
15263  4D71
15264  4D72
15265  4D73
15266  4D74
15267  4D75
15268  4D76
15269  4D77
15270  4D78
15271  4D79
15272  4D7A
15273  4D7B
15274  4D7C
15275  4D7D
15276  4D7E
15277  4D7F
15278  4D80
15279  4D81
15280  4D82
15281  4D83
15282  4D84
15283  4D85
15284  4D86
15285  4D87
15286  4D88
15287  4D89
15288  4D8A
15289  4D8B
15290  4D8C
15291  4D8D
15292  4D8E
15293  4D8F
15294  4D90
15295  4D91
15296  4D92
15297  4D93
15298  4D94
15299  4D95
15300  4D96
15301  4D97
15302  4D98
15303  4D99
15304  4D9A
15305  4D9B
15306  4D9C
15307  4D9D
15308  4D9E
15309  4D9F
15310  4DA0
15311  4DA1
15312  4DA2
15313  4DA3
15314  4DA4
15315  4DA5
15316  4DA6
15317  4DA7
15318  4DA8
15319  4DA9
15320  4DAA
15321  4DAB
15322  4DAC
15323  4DAD
15324  4DAE
15325  4DAF
15326  4DB0
15327  4DB1
15328  4DB2
15329  4DB3
15330  4DB4
15331  4DB5
15332  4DB6
15333  4DB7
15334  4DB8
15335  4DB9
15336  4DBA
15337  4DBB
15338  4DBC
15339  4DBD
15340  4DBE
15341  4DBF
15342  4DC0
15343  4DC1
15344  4DC2
15345  4DC3
15346  4DC4
15347  4DC5
15348  4DC6
15349  4DC7
15350  4DC8
15351  4DC9
15352  4DCA
15353  4DCB
15354  4DCC
15355  4DCD
15356  4DCE
15357  4DCF
15358  4DD0
15359  4DD1
15360  4DD2
15361  4DD3
15362  4DD4
15363  4DD5
15364  4DD6
15365  4DD7
15366  4DD8
15367  4DD9
15368  4DDA
15369  4DDB
15370  4DDC
15371  4DDD
15372  4DDE
15373  4DDF
15374  4DE0
15375  4DE1
15376  4DE2
15377  4DE3
15378  4DE4
15379  4DE5
15380  4DE6
15381  4DE7
15382  4DE8
15383  4DE9
15384  4DEA
15385  4DEB
15386  4DEC
15387  4DED
15388  4DEE
15389  4DEF
15390  4DF0
15391  4DF1
15392  4DF2
15393  4DF3
15394  4DF4
15395  4DF5
15396  4DF6
15397  4DF7
15398  4DF8
15399  4DF9
15400  4DFA
15401  4DFB
15402  4DFC
15403  4DFD
15404  4DFE
15405  4DFF
15406  4E00
15407  4E01
15408  4E02
15409  4E03
15410  4E04
15411  4E05
15412  4E06
15413  4E07
15414  4E08
15415  4E09
15416  4E0A
15417  4E0B
15418  4E0C
15419  4E0D
15420  4E0E
15421  4E0F
15422  4E10
15423  4E11
15424  4E12
15425  4E13
15426  4E14
15427  4E15
15428  4E16
15429  4E17
15430  4E18
15431  4E19
15432  4E1A
15433  4E1B
15434  4E1C
15435  4E1D
15436  4E1E
15437  4E1F
15438  4E20
15439  4E21
15440  4E22
15441  4E23
15442  4E24
15443  4E25
15444  4E26
15445  4E27
15446  4E28
15447  4E29
15448  4E2A
15449  4E2B
15450  4E2C
15451  4E2D
15452  4E2E
15453  4E2F
15454  4E30
15455  4E31
15456  4E32
15457  4E33
15458  4E34
15459  4E35
15460  4E36
15461  4E37
15462  4E38
15463  4E39
15464  4E3A
15465  4E3B
15466  4E3C
15467  4E3D
15468  4E3E
15469  4E3F
15470  4E40
15471  4E41
15472  4E42
15473  4E43
15474  4E44
15475  4E45
15476  4E46
15477  4E47
15478  4E48
15479  4E49
15480  4E4A
15481  4E4B
15482  4E4C
15483  4E4D
15484  4E4E
15485  4E4F
15486  4E50
15487  4E51
15488  4E52
15489  4E53
15490  4E54
15491  4E55
15492  4E56
15493  4E57
15494  4E58
15495  4E59
15496  4E5A
15497  4E5B
15498  4E5C
15499  4E5D
15500  4E5E
15501  4E5F
15502  4E60
15503  4E61
15504  4E62
15505  4E63
15506  4E64
15507  4E65
15508  4E66
15509  4E67
15510  4E68
15511  4E69
15512  4E6A
15513  4E6B
15514  4E6C
15515  4E6D
15516  4E6E
15517  4E6F
15518  4E70
15519  4E71
15520  4E72
15521  4E73
15522  4E74
15523  4E75
15524  4E76
15525  4E77
15526  4E78
15527  4E79
15528  4E7A
15529  4E7B
15530  4E7C
15531  4E7D
15532  4E7E
15533  4E7F
15534  4E80
15535  4E81
15536  4E82
15537  4E83
15538  4E84
15539  4E85
15540  4E86
15541  4E87
15542  4E88
15543  4E89
15544  4E8A
15545  4E8B
15546  4E8C
15547  4E8D
15548  4E8E
15549  4E8F
15550  4E90
15551  4E91
15552  4E92
15553  4E93
15554  4E94
15555  4E95
15556  4E96
15557  4E97
15558  4E98
15559  4E99
15560  4E9A
15561  4E9B
15562  4E9C
15563  4E9D
15564  4E9E
15565  4E9F
15566  4EA0
15567  4EA1
15568  4EA2
15569  4EA3
15570  4EA4
15571  4EA5
15572  4EA6
15573  4EA7
15574  4EA8
15575  4EA9
15576  4EAA
15577  4EAB
15578  4EAC
15579  4EAD
15580  4EAE
15581  4EAF
15582  4EB0
15583  4EB1
15584  4EB2
15585  4EB3
15586  4EB4
15587  4EB5
15588  4EB6
15589  4EB7
15590  4EB8
15591  4EB9
15592  4EBA
15593  4EBB
15594  4EBC
15595  4EBD
15596  4EBE
15597  4EBF
15598  4EC0
15599  4EC1
15600  4EC2
15601  4EC3
15602  4EC4
15603  4EC5
15604  4EC6
15605  4EC7
15606  4EC8
15607  4EC9
15608  4ECA
15609  4ECB
15610  4ECC
15611  4ECD
15612  4ECE
15613  4ECF
15614  4ED0
15615  4ED1
15616  4ED2
15617  4ED3
15618  4ED4
15619  4ED5
15620  4ED6
15621  4ED7
15622  4ED8
15623  4ED9
15624  4EDA
15625  4EDB
15626  4EDC
15627  4EDD
15628  4EDE
15629  4EDF
15630  4EE0
15631  4EE1
15632  4EE2
15633  4EE3
15634  4EE4
15635  4EE5
15636  4EE6
15637  4EE7
15638  4EE8
15639  4EE9
15640  4EEA
15641  4EEB
15642  4EEC
15643  4EED
15644  4EEE
15645  4EEF
15646  4EF0
15647  4EF1
15648  4EF2
15649  4EF3
15650  4EF4
15651  4EF5
15652  4EF6
15653  4EF7
15654  4EF8
15655  4EF9
15656  4EFA
15657  4EFB
15658  4EFC
15659  4EFD
15660  4EFE
15661  4EFF
15662  4F00
15663  4F01
15664  4F02
15665  4F03
15666  4F04
15667  4F05
15668  4F06
15669  4F07
15670  4F08
15671  4F09
15672  4F0A
15673  4F0B
15674  4F0C
15675  4F0D
15676  4F0E
15677  4F0F
15678  4F10
15679  4F11
15680  4F12
15681  4F13
15682  4F14
15683  4F15
15684  4F16
15685  4F17
15686  4F18
15687  4F19
15688  4F1A
15689  4F1B
15690  4F1C
15691  4F1D
15692  4F1E
15693  4F1F
15694  4F20
15695  4F21
015696  000579        
015697  000580  var hFonts[54] ;
015698  000581  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15699  2800
15700  2801
15701  2802
15702  2803
15703  2804
15704  2805
15705  2806
15706  2807
15707  2808
15708  2809
15709  280A
15710  280B
15711  280C
15712  280D
15713  280E
15714  280F
15715  2810
15716  2811
15717  2812
15718  2813
15719  2814
15720  2815
15721  2816
15722  2817
15723  2818
15724  2819
15725  281A
15726  281B
15727  281C
15728  281D
15729  281E
15730  281F
15731  2820
15732  2821
15733  2822
15734  2823
15735  2824
15736  2825
15737  2826
15738  2827
15739  2828
15740  2829
15741  282A
15742  282B
15743  282C
15744  282D
15745  282E
15746  282F
15747  2830
15748  2831
15749  2832
15750  2833
15751  2834
15752  2835
15753  2836
15754  2837
15755  2838
15756  2839
15757  283A
15758  283B
15759  283C
15760  283D
15761  283E
15762  283F
15763  2840
15764  2841
15765  2842
15766  2843
15767  2844
15768  2845
15769  2846
15770  2847
15771  2848
15772  2849
15773  284A
15774  284B
15775  284C
15776  284D
15777  284E
15778  284F
15779  2850
15780  2851
15781  2852
15782  2853
15783  2854
15784  2855
15785  2856
15786  2857
15787  2858
15788  2859
15789  285A
15790  285B
15791  285C
15792  285D
15793  285E
15794  285F
15795  2860
15796  2861
15797  2862
15798  2863
15799  2864
15800  2865
15801  2866
15802  2867
15803  2868
15804  2869
15805  286A
15806  286B
015807  000582  // Start P2.inc
015808  000583  var oObjects[MaxTotObjects+1] ;                 // address of objects
015809  000584  var CurrentForm ;
015810  000585  var TouchXpos, TouchYpos ;
015811  000586  var InputType, TouchState, CurInputData, pInputIndex ;
015812  000587  var comRX[40], cmd[CMDLenMAX] ;
015813  000588        
015814  000589  var InputCS, OutputCS ;
015815  000590        
015816  000591        
015817  000592        
015818  000593  func seroutCS(var op)
015819  000594      serout(op) ;
015820  000595      OutputCS ^= op ;
015821  000596  endfunc
015822  000597        
015823  000598  func nak0()
015824  000599      serout(NAK) ;
015825  000600      InputCS := 0 ;
015826  000601  endfunc
015827  000602        
015828  000603  func seroutOcs()
015829  000604      serout(OutputCS) ;
015830  000605      OutputCS := 0 ;
015831  000606  endfunc
015832  000607        
015833  000608  func SendReport(var id, var objt, var objn, var val)
015834  000609      seroutCS(id) ;
015835  000610      seroutCS(objt) ;
015836  000611      seroutCS(objn) ;
015837  000612      seroutCS(val >> 8) ; // first 8 bits
015838  000613      seroutCS(val) ;
015839  000614      seroutOcs() ;
015840  000615  endfunc
015841  000616        
015842  000617        
015843  000618  func ReadObject(var ObjectType, var ObjectIdx)
015844  000619      var j, k, Objects ;
015845  000620      Objects := *(oObjects+ObjectType) ;
015846  000621        
015847  000622      j := 2 + ObjectIdx * 2 + Objects ;
015848  000623       if (ObjectType == tForm)
015849  000624          k := CurrentForm ;
015850  000625      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015851  000626          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015852  000627      else if (ObjectType == tStrings)
015853  000628          k := stringsCV[ObjectIdx];
015854  000629          else
015855  000630          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015856  000631          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015857  000632                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015858  000633      endif
015859  000634      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015860  000635  endfunc
015861  000636        
015862  000637        
015863  000638  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015864  000639      var i, j, k, Objects ;
015865  000640      ObjectType &= 0x3f ;
015866  000641      if (ObjectType == tForm)
015867  000642          ActivateForm(ObjectIdx) ;
015868  000643      else
015869  000644          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015870  000645          i := *(Objects) ;
015871  000646          switch (ObjectType)
015872  000647              case tWinButton :
015873  000648                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015874  000649                  break ;
015875  000650              case tUserButton :
015876  000651                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015877  000652                  break ;
015878  000653              default : j := -1 ;
015879  000654          endswitch
015880  000655          if (j != -1)
015881  000656              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015882  000657              NewVal := NewVal << 1 ;
015883  000658              if (OVF())      // button group index change
015884  000659                  if (*(j+InputData+Ofs_IPD_P1))
015885  000660                      k &= 1 ;    // mask off old group index for momentary
015886  000661                  else
015887  000662                      k &= 3 ;    // mask off old group index for toggle
015888  000663                  endif
015889  000664              else            // normal set
015890  000665                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015891  000666                  k &= 0xfffc ;    // retain only group index for state set
015892  000667              endif
015893  000668              NewVal |= k ;
015894  000669          endif
015895  000670           if (ObjectType == tLeddigits)
015896  000671              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015897  000672              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015898  000673          else if (ObjectType == tStrings)
015899  000674              PrintStrings(ObjectIdx, NewVal, 0);
015900  000675          else
015901  000676              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015902  000677              img_Show(hndl, i) ; // will only display if form is current
015903  000678          endif
015904  000679      endif
015905  000680  endfunc
015906  000681        
015907  000682  func TurnOffButtons(var group)
015908  000683      var j, k, l;
015909  000684      for (j := 0; j < nInputs; j++)
015910  000685          k := j*IPDatasize ;
015911  000686          if (*(InputData+k+Ofs_IPD_P2) == group)
015912  000687              l := -1 ;
015913  000688               if (*(InputData+k) == tWinButton)
015914  000689                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015915  000690                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015916  000691                  img_Show(hndl, l);      // only shows on current form
015917  000692              else if (*(InputData+k) == tUserButton)
015918  000693                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015919  000694                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015920  000695                  img_Show(hndl, l);      // only shows on current form
015921  000696              endif
015922  000697          endif
015923  000698      next
015924  000699  endfunc
015925  000700        
015926  000701        
015927  000702  // WARNING, this code will crash if newval exceeds maximum displayable number
015928  000703  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015929  000704      var i, j, k, l, lb, newval ;
015930  000705      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015931  000706      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015932  000707      i := -1 ;
015933  000708      j := *(typeptr) ;
015934  000709      repeat
015935  000710          typeptr += 2 ;
015936  000711          i++ ;
015937  000712          until (*(typeptr) == imgidx);
015938  000713      j := setptr + i*10 ;
015939  000714        
015940  000715      imgidx++ ;
015941  000716      l := 1 ;
015942  000717      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015943  000718          l *= 10 ;
015944  000719      next
015945  000720      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015946  000721      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015947  000722          k := newval / l ;
015948  000723          newval -= k * l ;
015949  000724          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015950  000725              if (k == 0)
015951  000726                  k := 10 ;
015952  000727              else
015953  000728                  lb := 0 ;
015954  000729              endif
015955  000730          endif
015956  000731          l /= 10 ;
015957  000732          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015958  000733          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015959  000734          img_Show(hndl, imgidx);
015960  000735      next
015961  000736  endfunc
015962  000737        
015963  000738        
015964  000739  func ActivateForm(var newform)
015965  000740      var i, j, *p ;
015966  000741        
015967  000742      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015968  000743          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015969  000744              if (img_GetWord(hndl, i, IMAGE_TAG))
015970  000745                  img_Disable(hndl,i) ;
015971  000746              endif
015972  000747          next
015973  000748      endif
015974  000749      CurrentForm := newform ;
015975  000750      // display newform image or clear to image color
015976  000751      if (FormBGcolors[CurrentForm] != ColorBGimage)
015977  000752          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015978  000753          gfx_Cls() ;
015979  000754          DoGFXObjects() ;                                    // display GFX 'widgets'
015980  000755      endif
015981  000756        
015982  000757      // enable inputs
015983  000758      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015984  000759          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015985  000760          if (j)
015986  000761              j-- ;
015987  000762              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015988  000763              //if (j != tKeyboard)
015989  000764              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015990  000765                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015991  000766              endif
015992  000767              img_Show(hndl,i) ; // show initialy, if required
015993  000768              if (j == tForm)
015994  000769                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015995  000770              else if (j == tLeddigits)
015996  000771                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015997  000772              endif
015998  000773          endif
015999  000774      next
016000  000775      for (i := 0; i < nStrings; i++)
016001  000776          if (stringsCV[i] != -1)
016002  000777              WriteObject(tStrings, i, stringsCV[i]) ;
016003  000778          endif
016004  000779      next
016005  000780        
016006  000781  endfunc
016007  000782        
016008  000783  func UpdateObjects(var newval)
016009  000784      var IPidx, otherOBJ ;
016010  000785      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
016011  000786        
016012  000787          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
016013  000788              img_Show(hndl, *(pInputIndex));      // only shows on current form
016014  000789          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
016015  000790              if (*(CurInputData+Ofs_IPD_P1))
016016  000791                  newval &= 1;
016017  000792              else
016018  000793                  newval &= 3;
016019  000794              endif
016020  000795              if (newval > 1) newval := 1;
016021  000796          endif
016022  000797          IPidx := *(CurInputData+TouchState) ;
016023  000798          while(IPidx != 0)
016024  000799              otherOBJ := IPidx + InputData;
016025  000800              if (*(otherOBJ) == OT_REPORT)
016026  000801          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
016027  000802              else if (*(otherOBJ) == OT_MAGIC)
016028  000803                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
016029  000804                  IPidx(newval) ;
016030  000805              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
016031  000806                  if (*(otherOBJ) == OT_ACTIVATE)
016032  000807                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
016033  000808                      InputType := tForm ;
016034  000809                  else if (*(otherOBJ) == OT_SETCONST)
016035  000810                      newval := *(otherOBJ+Ofs_IPD_P3) ;
016036  000811                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
016037  000812                  else if (*(otherOBJ) == OT_SETANOTHER)
016038  000813                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
016039  000814                  else if (*(otherOBJ) == OT_PREVFRAME)
016040  000815                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
016041  000816                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
016042  000817                      endif
016043  000818                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
016044  000819                  else if (*(otherOBJ) == OT_NEXTFRAME)
016045  000820                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
016046  000821                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
016047  000822                      endif
016048  000823                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
016049  000824                  else if (*(otherOBJ) == OT_PREVSTRING)
016050  000825                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
016051  000826                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
016052  000827                      endif
016053  000828                  else if (*(otherOBJ) == OT_NEXTSTRING)
016054  000829                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
016055  000830                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
016056  000831                      endif
016057  000832                  endif
016058  000833              endif
016059  000834              IPidx := *(otherOBJ+TouchState) ;
016060  000835          wend
016061  000836      endif
016062  000837  endfunc
016063  000838        
016064  000839  // End P2.inc
016065  000840  func DoGFXObjects()
016066  000841  endfunc
016067  000842        
016068  000843  // Start P3.inc
016069  000844  func main()
016070  000845      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
016071  000846        
016072  000847      putstr("Mounting...\n");
016073  000848      if (!(file_Mount()))
016074  000849          while(!(file_Mount()))
016075  000850              putstr("Drive not mounted...");
016076  000851              pause(200);
016077  000852              gfx_Cls();
016078  000853              pause(200);
016079  000854          wend
016080  000855      endif
016081  000856  //    gfx_MoveTo(0, 0);
016082  000857  //    print(mem_Heap()," ") ;
016083  000858  //    gfx_TransparentColour(0x0020);
016084  000859  //    gfx_Transparency(ON);
016085  000860        
016086  000861      gfx_ScreenMode(LANDSCAPE) ;
016087  000862        
016088  000863      // open image control
016089  000864      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
016090  000865        
016091  000866      // init 'constants'
016092  000867  // End P3.inc
016093  000868        
016094  000869      oObjects[tDipSwitch] := oDipSwitchs ;
016095  000870      oObjects[tKnob] := oKnobs ;
016096  000871      oObjects[tRockerSwitch] := oRockerSwitchs ;
016097  000872      oObjects[tRotarySwitch] := oRotarySwitchs ;
016098  000873      oObjects[tGSlider] := oGSliders ;
016099  000874      oObjects[tTrackbar] := oTrackbars ;
016100  000875      oObjects[tWinButton] := oWinButtons ;
016101  000876      oObjects[tAngularmeter] := oAngularmeters ;
016102  000877      oObjects[tCoolgauge] := oCoolgauges ;
016103  000878      oObjects[tCustomdigits] := oCustomdigitss ;
016104  000879      oObjects[tForm] := oForms ;
016105  000880      oObjects[tGauge] := oGauges ;
016106  000881      oObjects[tImage] := oImages ;
016107  000882      oObjects[tKeyboard] := oKeyboards ;
016108  000883      oObjects[tLed] := oLeds ;
016109  000884      oObjects[tLeddigits] := oLeddigitss ;
016110  000885      oObjects[tMeter] := oMeters ;
016111  000886      oObjects[tStrings] := oStringss ;
016112  000887      oObjects[tThermometer] := oThermometers ;
016113  000888      oObjects[tUserled] := oUserleds ;
016114  000889      oObjects[tVideo] := oVideos ;
016115  000890      oObjects[tStaticText] := oStaticTexts ;
016116  000891      oObjects[tSounds] := oSoundss ;
016117  000892      oObjects[tTimer] := oTimers ;
016118  000893      oObjects[tSpectrum] := oSpectrums ;
016119  000894      oObjects[tTank] := oTanks ;
016120  000895      oObjects[tUserImages] := oUserImagess ;
016121  000896      oObjects[tPinOutput] := oPinOutputs ;
016122  000897      oObjects[tPinInput] := oPinInputs ;
016123  000898      oObjects[t4Dbutton] := o4Dbuttons ;
016124  000899      oObjects[tAniButton] := oAniButtons ;
016125  000900      oObjects[tColorPicker] := oColorPickers ;
016126  000901      oObjects[tUserButton] := oUserButtons ;
016127  000902      hFonts[0] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
016128  000903      hFonts[1] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
016129  000904      hFonts[2] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
016130  000905      hFonts[3] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
016131  000906      hFonts[4] := FONT3 ;
016132  000907      hFonts[5] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
016133  000908      hFonts[6] := FONT3 ;
016134  000909      hFonts[10] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
016135  000910      hFonts[11] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
016136  000911      hFonts[12] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
016137  000912      hFonts[13] := file_LoadImageControl("RepRap_T.d0D", "RepRap_T.g0D", 1)  ;
016138  000913      hFonts[16] := FONT3 ;
016139  000914      hFonts[17] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
016140  000915      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
016141  000916      hFonts[37] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
016142  000917      hFonts[50] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
016143  000918      hFonts[51] := FONT3 ;
016144  000919      hFonts[52] := FONT3 ;
016145  000920      hFonts[7] := hFonts[37] ;
016146  000921      hFonts[8] := hFonts[37] ;
016147  000922      hFonts[9] := hFonts[0] ;
016148  000923      hFonts[14] := hFonts[13] ;
016149  000924      hFonts[15] := hFonts[13] ;
016150  000925      hFonts[29] := hFonts[11] ;
016151  000926      hFonts[32] := hFonts[31] ;
016152  000927      hFonts[34] := hFonts[0] ;
016153  000928      hFonts[36] := hFonts[0] ;
016154  000929      hFonts[38] := hFonts[37] ;
016155  000930      hFonts[39] := hFonts[37] ;
016156  000931      hFonts[40] := hFonts[0] ;
016157  000932      hFonts[41] := hFonts[0] ;
016158  000933      hFonts[42] := hFonts[0] ;
016159  000934      hFonts[43] := hFonts[37] ;
016160  000935      hFonts[44] := hFonts[37] ;
016161  000936      hFonts[45] := hFonts[37] ;
016162  000937      hFonts[53] := hFonts[50] ;
016163  000938  // Start P4.inc
016164  000939      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
016165  000940      // init comms
016166  000941      com_Init(comRX,CMDLenMAX,0);
016167  000942      com_SetBaud(COM0,19886);
016168  000943      com_TXbuffer(comTX, 100, 0);
016169  000944      snd_BufSize(2) ;
016170  000945      // tag 'real' objects
016171  000946      for (i := 0; i <= MaxTotObjects; i++)
016172  000947          if (   (i != tSounds)
016173  000948              && (i != tTimer)
016174  000949              && (i != tPinOutput)
016175  000950              && (i != tPinInput) )
016176  000951              TouchXpos := oObjects[i] ;
016177  000952              TouchYpos := *(TouchXpos) ;
016178  000953              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
016179  000954                  oldn := *(TouchXpos+ImageTouched*2) ;
016180  000955                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
016181  000956                  if (oldn != -1)
016182  000957                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
016183  000958                      img_Disable(hndl, oldn) ;
016184  000959                  endif
016185  000960              next
016186  000961          endif
016187  000962      next
016188  000963        
016189  000964      // display initial form
016190  000965      CurrentForm := -1 ;
016191  000966      ActivateForm(0) ; // need to change this according to first actual form
016192  000967        
016193  000968  // End P4.inc
016194  000969  // Start P5.inc
016195  000970      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016196  000971      oldn := -1 ;
016197  000972      repeat
016198  000973        
016199  000974          // check comms for command, how to NAK invalid command
016200  000975          if (com_Count() != 0)
016201  000976              i := serin() ;
016202  000977              InputCS ^= i ;               // update checksum
016203  000978              if (   (cmdi > 2)
016204  000979                  && (cmd[0] == WRITE_STRU) )
016205  000980                  j := (cmdi-1) >> 1 + 2 ;
016206  000981                  if (j == CMDLenMAX)    // max length exceeded
016207  000982                      nak0() ;
016208  000983                      cmdi := -1 ;
016209  000984                  else if (cmdi & 1)
016210  000985                      cmd[j] := i ;
016211  000986                      if (cmd[2] == 0)    // if string complete
016212  000987                          if (InputCS)
016213  000988                              nak0() ;
016214  000989                          else
016215  000990                              if (cmd[0] == WRITE_STRU)
016216  000991                              cmd[j] := 0 ;                     // terminate it
016217  000992                              PrintStrings(cmd[1], &cmd[3], 1) ;
016218  000993                              serout(ACK) ;
016219  000994                              else
016220  000995                              endif
016221  000996                          endif
016222  000997                          cmdi := -1 ;
016223  000998                      endif
016224  000999                  else
016225  001000                      cmd[j] := cmd[j] << 8 + i ;
016226  001001                      cmd[2]-- ;          // dec length
016227  001002                  endif
016228  001003                  cmdi++ ;
016229  001004              else // not unicode string
016230  001005                  cmd[cmdi++] := i ;
016231  001006                   if (cmd[0] == WRITE_STR)                  // Ansi String
016232  001007                      if (cmdi == CMDLenMAX)      // max length exceeded
016233  001008                          nak0() ;
016234  001009                          cmdi := 0 ;
016235  001010                      else if (cmdi > 2)
016236  001011                          if (cmd[2] == -1)
016237  001012                              if (InputCS)
016238  001013                                  nak0() ;
016239  001014                              else
016240  001015                                  if (cmd[0] == WRITE_STR)
016241  001016                                  cmd[cmdi-1] := 0 ;                     // terminate it
016242  001017                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016243  001018                                  serout(ACK) ;
016244  001019                                  else
016245  001020                                  endif
016246  001021                              endif
016247  001022                              cmdi := 0 ;
016248  001023                          else
016249  001024                              cmd[2]-- ;          // dec length
016250  001025                          endif
016251  001026                      endif
016252  001027                  else if (   (cmd[0] == READ_OBJ)
016253  001028                           && (cmdi == 4)         )
016254  001029                      if (InputCS)
016255  001030                          nak0() ;
016256  001031                      else
016257  001032                          ReadObject(cmd[1], cmd[2]) ;
016258  001033                      endif
016259  001034                      cmdi := 0 ;
016260  001035                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016261  001036                           && (cmdi == 6)          )
016262  001037                      if (InputCS)
016263  001038                          nak0() ;
016264  001039                      else
016265  001040                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016266  001041                          serout(ACK) ;
016267  001042                      endif
016268  001043                      cmdi := 0 ;
016269  001044                  else if (   (cmd[0] == WRITE_CONTRAST)
016270  001045                           && (cmdi == 3)         )
016271  001046                      if (InputCS)
016272  001047                          nak0() ;
016273  001048                      else
016274  001049                          gfx_Contrast(cmd[1]) ;
016275  001050                          serout(ACK) ;
016276  001051                      endif
016277  001052                      cmdi := 0 ;
016278  001053                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016279  001054                      nak0() ;
016280  001055                      cmdi := 0 ;
016281  001056                  endif
016282  001057              endif   // not unicode string
016283  001058          endif   // a character is available
016284  001059        
016285  001060        
016286  001061      // touch code processing
016287  001062        
016288  001063          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016289  001064          ImageTouched := img_Touched(hndl,-1) ;
016290  001065          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016291  001066              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016292  001067                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016293  001068              endif
016294  001069              if (TouchStatus != TOUCH_RELEASED)        // if not released
016295  001070                  if (oldn != -1)
016296  001071                      ImageTouched := oldn ;
016297  001072                  else
016298  001073                      if (oldn != ImageTouched)
016299  001074                  oldn := ImageTouched ;
016300  001075                          TouchStatus := TOUCH_PRESSED ;
016301  001076                      endif
016302  001077                  endif
016303  001078                  TouchXpos  := touch_Get(TOUCH_GETX);
016304  001079                  TouchYpos  := touch_Get(TOUCH_GETY);
016305  001080                  TouchState := Ofs_IPD_DOWN ;
016306  001081              else
016307  001082                  ImageTouched := oldn ;                     // simulate release of what we touched
016308  001083                  oldn := -1 ;                    // prevent double release
016309  001084                  TouchState := Ofs_IPD_RELEASE ;
016310  001085              endif
016311  001086              if (ImageTouched != -1)
016312  001087                          CurInputData := InputControls[ImageTouched] + InputData;
016313  001088                          InputType := *(CurInputData) ;
016314  001089                          i := InputType ;
016315  001090                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016316  001091                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016317  001092              endif
016318  001093          endif
016319  001094   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016320  001095        
016321  001096          sys_EventsResume() ;
016322  001097      forever
016323  001098        
016324  001099  cDipswitch:
016325  001100        
016326  001101  cKnob:
016327  001102        
016328  001103  cRockerswitch:
016329  001104        
016330  001105  cRotaryswitch:
016331  001106        
016332  001107  cSlider:
016333  001108  cTrackbar:
016334  001109        
016335  001110  c4DButton:
016336  001111  cUserButton:
016337  001112      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016338  001113      goto gbutton ;
016339  001114  cWinbutton:
016340  001115      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016341  001116  gbutton:
016342  001117      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016343  001118      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016344  001119          if (TouchStatus == TOUCH_RELEASED)
016345  001120              i &= 0xfffe ;
016346  001121              TouchState == Ofs_IPD_DOWN ;
016347  001122          else
016348  001123              i |= 1 ;
016349  001124              TouchState == Ofs_IPD_RELEASE ;
016350  001125          endif
016351  001126      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016352  001127          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016353  001128              if ((i & 3) == 3)
016354  001129                  i &= 0xfffc ;
016355  001130              else
016356  001131                  i++ ;
016357  001132              endif
016358  001133          else
016359  001134              i |= 1 ;                                      // make down regardless of current state
016360  001135          endif
016361  001136      else                        // group action, up all other buttons on touch press, reports 0 for button down
016362  001137          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016363  001138              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016364  001139          endif
016365  001140          i := (i & 0xfffc) | 2 ;
016366  001141      endif
016367  001142        
016368  001143      UpdateObjects(i) ;
016369  001144  endsub ;
016370  001145        
016371  001146  cAniButton:
016372  001147        
016373  001148  cColorPicker:
016374  001149        
016375  001150  endfunc
016376  001151  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 804 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 740 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13287  0x000033e7 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 96)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 159)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 6)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12655  0x0000316f (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 42)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 15)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9993  0x00002709FormBGcolors                        9993  0x00002709 (mem) word[53] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         113  0x00000071FormEndIndex                         113  0x00000071 (mem) word[53] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[53] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 165)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               87  0x00000057 (const ??? 0)  (usage 3)
iForm11                               73  0x00000049 (const ??? 0)  (usage 3)
iForm12                               46  0x0000002e (const ??? 0)  (usage 3)
iForm13                              180  0x000000b4 (const ??? 0)  (usage 3)
iForm14                               47  0x0000002f (const ??? 0)  (usage 3)
iForm15                              184  0x000000b8 (const ??? 0)  (usage 3)
iForm16                              143  0x0000008f (const ??? 0)  (usage 3)
iForm18                              146  0x00000092 (const ??? 0)  (usage 3)
iForm19                               51  0x00000033 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               54  0x00000036 (const ??? 0)  (usage 3)
iForm21                               58  0x0000003a (const ??? 0)  (usage 3)
iForm22                              186  0x000000ba (const ??? 0)  (usage 3)
iForm23                               62  0x0000003e (const ??? 0)  (usage 3)
iForm24                               66  0x00000042 (const ??? 0)  (usage 3)
iForm25                              208  0x000000d0 (const ??? 0)  (usage 3)
iForm26                               70  0x00000046 (const ??? 0)  (usage 3)
iForm27                               75  0x0000004b (const ??? 0)  (usage 3)
iForm28                               97  0x00000061 (const ??? 0)  (usage 3)
iForm29                              101  0x00000065 (const ??? 0)  (usage 3)
iForm3                               176  0x000000b0 (const ??? 0)  (usage 3)
iForm30                              110  0x0000006e (const ??? 0)  (usage 3)
iForm31                              114  0x00000072 (const ??? 0)  (usage 3)
iForm32                              117  0x00000075 (const ??? 0)  (usage 3)
iForm33                              120  0x00000078 (const ??? 0)  (usage 3)
iForm34                              132  0x00000084 (const ??? 0)  (usage 3)
iForm35                              136  0x00000088 (const ??? 0)  (usage 3)
iForm36                              189  0x000000bd (const ??? 0)  (usage 3)
iForm37                              191  0x000000bf (const ??? 0)  (usage 3)
iForm38                              148  0x00000094 (const ??? 0)  (usage 3)
iForm39                              193  0x000000c1 (const ??? 0)  (usage 3)
iForm4                                 9  0x00000009 (const ??? 0)  (usage 3)
iForm40                              158  0x0000009e (const ??? 0)  (usage 3)
iForm41                              161  0x000000a1 (const ??? 0)  (usage 3)
iForm42                              196  0x000000c4 (const ??? 0)  (usage 3)
iForm43                              164  0x000000a4 (const ??? 0)  (usage 3)
iForm44                              167  0x000000a7 (const ??? 0)  (usage 3)
iForm45                              199  0x000000c7 (const ??? 0)  (usage 3)
iForm46                              202  0x000000ca (const ??? 0)  (usage 3)
iForm47                              205  0x000000cd (const ??? 0)  (usage 3)
iForm48                              214  0x000000d6 (const ??? 0)  (usage 3)
iForm49                              220  0x000000dc (const ??? 0)  (usage 3)
iForm5                                14  0x0000000e (const ??? 0)  (usage 3)
iForm50                              224  0x000000e0 (const ??? 0)  (usage 3)
iForm51                              230  0x000000e6 (const ??? 0)  (usage 3)
iForm52                              236  0x000000ec (const ??? 0)  (usage 3)
iForm6                                17  0x00000011 (const ??? 0)  (usage 3)
iForm7                               140  0x0000008c (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        219  0x000000dbInputControls                        219  0x000000db (mem) word[245] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            709  0x000002c5InputData                            709  0x000002c5 (mem) word[3828] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          67  0x00000043 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext13                        160  0x000000a0 (const ??? 0)  (usage 3)
iStatictext14                        207  0x000000cf (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext6                         159  0x0000009f (const ??? 0)  (usage 3)
iStatictext8                          60  0x0000003c (const ??? 0)  (usage 3)
iStrings0                           8365  0x000020adiStrings0                           8365  0x000020ad (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           8391  0x000020c7iStrings1                           8391  0x000020c7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8625  0x000021b1iStrings10                          8625  0x000021b1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8651  0x000021cbiStrings11                          8651  0x000021cb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8677  0x000021e5iStrings12                          8677  0x000021e5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8703  0x000021ffiStrings13                          8703  0x000021ff (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8729  0x00002219iStrings14                          8729  0x00002219 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8755  0x00002233iStrings15                          8755  0x00002233 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8781  0x0000224diStrings16                          8781  0x0000224d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8807  0x00002267iStrings17                          8807  0x00002267 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           8417  0x000020e1iStrings2                           8417  0x000020e1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8833  0x00002281iStrings29                          8833  0x00002281 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           8443  0x000020fbiStrings3                           8443  0x000020fb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8859  0x0000229biStrings31                          8859  0x0000229b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8885  0x000022b5iStrings32                          8885  0x000022b5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8911  0x000022cfiStrings34                          8911  0x000022cf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8937  0x000022e9iStrings36                          8937  0x000022e9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8963  0x00002303iStrings37                          8963  0x00002303 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8989  0x0000231diStrings38                          8989  0x0000231d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          9015  0x00002337iStrings39                          9015  0x00002337 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           8469  0x00002115iStrings4                           8469  0x00002115 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          9041  0x00002351iStrings40                          9041  0x00002351 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          9067  0x0000236biStrings41                          9067  0x0000236b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          9093  0x00002385iStrings42                          9093  0x00002385 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          9119  0x0000239fiStrings43                          9119  0x0000239f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          9145  0x000023b9iStrings44                          9145  0x000023b9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          9171  0x000023d3iStrings45                          9171  0x000023d3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           8495  0x0000212fiStrings5                           8495  0x0000212f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9197  0x000023ediStrings50                          9197  0x000023ed (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9223  0x00002407iStrings51                          9223  0x00002407 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9249  0x00002421iStrings52                          9249  0x00002421 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9275  0x0000243biStrings53                          9275  0x0000243b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           8521  0x00002149iStrings6                           8521  0x00002149 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           8547  0x00002163iStrings7                           8547  0x00002163 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           8573  0x0000217diStrings8                           8573  0x0000217d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8599  0x00002197iStrings9                           8599  0x00002197 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton100                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton101                        85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton102                       121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton103                       122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton104                       123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton105                       124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton106                       125  0x0000007d (const ??? 0)  (usage 3)
iUserbutton107                       126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton108                       127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton109                       128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton11                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton110                       129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton111                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton112                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton113                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton114                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton115                       137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton116                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton117                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton118                        65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton119                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton12                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton120                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton121                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton122                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton123                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton124                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton125                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton126                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton127                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton128                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton129                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton13                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton130                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton131                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton132                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton133                       226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton134                       227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton135                       228  0x000000e4 (const ??? 0)  (usage 3)
iUserbutton136                       229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton137                       231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton138                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton139                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton141                       235  0x000000eb (const ??? 0)  (usage 3)
iUserbutton142                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton143                       238  0x000000ee (const ??? 0)  (usage 3)
iUserbutton144                       239  0x000000ef (const ??? 0)  (usage 3)
iUserbutton145                       240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton146                       241  0x000000f1 (const ??? 0)  (usage 3)
iUserbutton147                       242  0x000000f2 (const ??? 0)  (usage 3)
iUserbutton148                       243  0x000000f3 (const ??? 0)  (usage 3)
iUserbutton149                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton151                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton152                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton153                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton154                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton155                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton156                       173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton157                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton158                       145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton159                        21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton160                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton17                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton20                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton21                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton22                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton23                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton24                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton25                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton26                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton27                        177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton28                        178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton29                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton31                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton32                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton33                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton34                        165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton35                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton36                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton37                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton38                        192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton39                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                        194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton41                        144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton42                        197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton43                        209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton44                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton45                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton46                        203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton47                        210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton48                        211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton49                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton51                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton52                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton53                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton54                        204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton55                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton56                        198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton57                        201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton58                        206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton59                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton6                          10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton60                        215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton65                        149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton66                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton67                        162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton68                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton69                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton7                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton70                        150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton71                        219  0x000000db (const ??? 0)  (usage 3)
iUserbutton72                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton73                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton74                        166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton75                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton76                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton77                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton78                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton79                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton8                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton80                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton81                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton82                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton83                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton84                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton85                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton86                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton87                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton88                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton89                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton9                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton90                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton91                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton92                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton93                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton94                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton95                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton96                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton97                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton98                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton99                         83  0x00000053 (const ??? 0)  (usage 3)
iUserimages0                          72  0x00000048 (const ??? 0)  (usage 3)
iUserimages1                          53  0x00000035 (const ??? 0)  (usage 3)
iUserimages10                         71  0x00000047 (const ??? 0)  (usage 3)
iUserimages11                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserimages13                         61  0x0000003d (const ??? 0)  (usage 3)
iUserimages16                         69  0x00000045 (const ??? 0)  (usage 3)
iUserimages2                          74  0x0000004a (const ??? 0)  (usage 3)
iUserimages3                         111  0x0000006f (const ??? 0)  (usage 3)
iUserimages4                         116  0x00000074 (const ??? 0)  (usage 3)
iUserimages5                         119  0x00000077 (const ??? 0)  (usage 3)
iUserimages7                         113  0x00000071 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                10099  0x00002773kKeyboardKeystrokes                10099  0x00002773 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13633  0x00003541 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10691  0x000029c3 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14755  0x000039a3 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              348  0x0000015c (const dword)  (usage 3)
nObjects                             245  0x000000f5 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9657  0x000025b9o4Dbuttons                          9657  0x000025b9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9333  0x00002475oAngularmeters                      9333  0x00002475 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9659  0x000025bboAniButtons                         9659  0x000025bb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9661  0x000025bdoColorPickers                       9661  0x000025bd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9335  0x00002477oCoolgauges                         9335  0x00002477 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9337  0x00002479oCustomdigitss                      9337  0x00002479 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9301  0x00002455oDipSwitchs                         9301  0x00002455 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9339  0x0000247boForms                              9339  0x0000247b (mem) word[54] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9447  0x000024e7oGauges                             9447  0x000024e7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9309  0x0000245doGSliders                           9309  0x0000245d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9449  0x000024e9oImages                             9449  0x000024e9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9451  0x000024eboKeyboards                          9451  0x000024eb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9303  0x00002457oKnobs                              9303  0x00002457 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                        10103  0x00002777oLedDigitsn                        10103  0x00002777 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9455  0x000024efoLeddigitss                         9455  0x000024ef (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9453  0x000024edoLeds                               9453  0x000024ed (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9463  0x000024f7oMeters                             9463  0x000024f7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9655  0x000025b7oPinInputs                          9655  0x000025b7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9991  0x00002707oPinOutputs                         9991  0x00002707 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9305  0x00002459oRockerSwitchs                      9305  0x00002459 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9307  0x0000245boRotarySwitchs                      9307  0x0000245b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9615  0x0000258foScopes                             9615  0x0000258f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9989  0x00002705oSoundss                            9989  0x00002705 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9613  0x0000258doSpectrums                          9613  0x0000258d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9581  0x0000256doStaticTexts                        9581  0x0000256d (mem) word[16] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9465  0x000024f9oStringss                           9465  0x000024f9 (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 96)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 447)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9617  0x00002591oTanks                              9617  0x00002591 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9575  0x00002567oThermometers                       9575  0x00002567 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9987  0x00002703oTimers                             9987  0x00002703 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9311  0x0000245foTrackbars                          9311  0x0000245f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9663  0x000025bfoUserButtons                        9663  0x000025bf (mem) word[162] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9619  0x00002593oUserImagess                        9619  0x00002593 (mem) word[18] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9577  0x00002569oUserleds                           9577  0x00002569 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9579  0x0000256boVideos                             9579  0x0000256b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9313  0x00002461oWinButtons                         9313  0x00002461 (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14790  0x000039c6 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14502  0x000038a6 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  10101  0x00002775rKeyboardRoutines                  10101  0x00002775 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14688  0x00003960 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14771  0x000039b3 (User func) args[1] r=0  (usage 15)
seroutOcs                          14738  0x00003992 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          5  0x00000005 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          7  0x00000007 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                          7  0x00000007 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                          7  0x00000007 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings17Count                         0  0x00000000 (const dword)  (not used)
Strings17Size                          1  0x00000001 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Size                          0  0x00000000 (const dword)  (not used)
Strings19StartH                        0  0x00000000 (const dword)  (not used)
Strings19StartL                        0  0x00000000 (const dword)  (not used)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Size                          0  0x00000000 (const dword)  (not used)
Strings24StartH                        0  0x00000000 (const dword)  (not used)
Strings24StartL                        0  0x00000000 (const dword)  (not used)
Strings25Size                          0  0x00000000 (const dword)  (not used)
Strings25StartH                        0  0x00000000 (const dword)  (not used)
Strings25StartL                        0  0x00000000 (const dword)  (not used)
Strings26Size                          0  0x00000000 (const dword)  (not used)
Strings26StartH                        0  0x00000000 (const dword)  (not used)
Strings26StartL                        0  0x00000000 (const dword)  (not used)
Strings27Size                          0  0x00000000 (const dword)  (not used)
Strings27StartH                        0  0x00000000 (const dword)  (not used)
Strings27StartL                        0  0x00000000 (const dword)  (not used)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Size                          0  0x00000000 (const dword)  (not used)
Strings30StartH                        0  0x00000000 (const dword)  (not used)
Strings30StartL                        0  0x00000000 (const dword)  (not used)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings46Size                          0  0x00000000 (const dword)  (not used)
Strings46StartH                        0  0x00000000 (const dword)  (not used)
Strings46StartL                        0  0x00000000 (const dword)  (not used)
Strings47Size                          0  0x00000000 (const dword)  (not used)
Strings47StartH                        0  0x00000000 (const dword)  (not used)
Strings47StartL                        0  0x00000000 (const dword)  (not used)
Strings48Size                          0  0x00000000 (const dword)  (not used)
Strings48StartH                        0  0x00000000 (const dword)  (not used)
Strings48StartL                        0  0x00000000 (const dword)  (not used)
Strings49Size                          0  0x00000000 (const dword)  (not used)
Strings49StartH                        0  0x00000000 (const dword)  (not used)
Strings49StartL                        0  0x00000000 (const dword)  (not used)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         67  0x00000043 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     15360  0x00003c00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      6656  0x00001a00 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      7168  0x00001c00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13947  0x0000367b (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 495)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12656  0x00003170 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 105)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        14147  0x00003743 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
