file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 08/09/2015 9:23:26
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 08/09/2015 9:23:03
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     30
005100  000006  #constant  Strings1Size     30
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings11Count    1
005154  000033  #constant  Strings11Count    1
005155  000034  #constant  Strings11Size     73
005156  000034  #constant  Strings11Size     73
005157  000035  #constant  Strings24Count    1
005158  000035  #constant  Strings24Count    1
005159  000036  #constant  Strings24Size     26
005160  000036  #constant  Strings24Size     26
005161  000037  #constant  Strings25Count    1
005162  000037  #constant  Strings25Count    1
005163  000038  #constant  Strings25Size     10
005164  000038  #constant  Strings25Size     10
005165  000039  #constant  Strings26Count    1
005166  000039  #constant  Strings26Count    1
005167  000040  #constant  Strings26Size     10
005168  000040  #constant  Strings26Size     10
005169  000041  #constant  Strings27Count    1
005170  000041  #constant  Strings27Count    1
005171  000042  #constant  Strings27Size     11
005172  000042  #constant  Strings27Size     11
005173  000043  #constant  Strings7Count    0
005174  000043  #constant  Strings7Count    0
005175  000044  #constant  Strings7Size     1
005176  000044  #constant  Strings7Size     1
005177  000045  #constant  Strings8Count    0
005178  000045  #constant  Strings8Count    0
005179  000046  #constant  Strings8Size     1
005180  000046  #constant  Strings8Size     1
005181  000047  #constant  Strings38Count    0
005182  000047  #constant  Strings38Count    0
005183  000048  #constant  Strings38Size     1
005184  000048  #constant  Strings38Size     1
005185  000049  #constant  Strings39Count    0
005186  000049  #constant  Strings39Count    0
005187  000050  #constant  Strings39Size     1
005188  000050  #constant  Strings39Size     1
005189  000051  #constant  Strings40Count    1
005190  000051  #constant  Strings40Count    1
005191  000052  #constant  Strings40Size     7
005192  000052  #constant  Strings40Size     7
005193  000053  #constant  Strings41Count    1
005194  000053  #constant  Strings41Count    1
005195  000054  #constant  Strings41Size     7
005196  000054  #constant  Strings41Size     7
005197  000055  #constant  Strings42Count    1
005198  000055  #constant  Strings42Count    1
005199  000056  #constant  Strings42Size     7
005200  000056  #constant  Strings42Size     7
005201  000057  #constant  Strings43Count    0
005202  000057  #constant  Strings43Count    0
005203  000058  #constant  Strings43Size     1
005204  000058  #constant  Strings43Size     1
005205  000059  #constant  Strings44Count    0
005206  000059  #constant  Strings44Count    0
005207  000060  #constant  Strings44Size     1
005208  000060  #constant  Strings44Size     1
005209  000061  #constant  Strings45Count    0
005210  000061  #constant  Strings45Count    0
005211  000062  #constant  Strings45Size     1
005212  000062  #constant  Strings45Size     1
005213  000063  #constant  Strings51Count    0
005214  000063  #constant  Strings51Count    0
005215  000064  #constant  Strings51Size     1
005216  000064  #constant  Strings51Size     1
005217  000065  #constant  Strings52Count    0
005218  000065  #constant  Strings52Count    0
005219  000066  #constant  Strings52Size     1
005220  000066  #constant  Strings52Size     1
005221  000067  #constant  Strings19Count    1
005222  000067  #constant  Strings19Count    1
005223  000068  #constant  Strings19Size     94
005224  000068  #constant  Strings19Size     94
005225  000069  #constant  Strings29Count    1
005226  000069  #constant  Strings29Count    1
005227  000070  #constant  Strings29Size     53
005228  000070  #constant  Strings29Size     53
005229  000071  #constant  Strings30Count    1
005230  000071  #constant  Strings30Count    1
005231  000072  #constant  Strings30Size     27
005232  000072  #constant  Strings30Size     27
005233  000073  #constant  Strings31Count    1
005234  000073  #constant  Strings31Count    1
005235  000074  #constant  Strings31Size     7
005236  000074  #constant  Strings31Size     7
005237  000075  #constant  Strings32Count    1
005238  000075  #constant  Strings32Count    1
005239  000076  #constant  Strings32Size     19
005240  000076  #constant  Strings32Size     19
005241  000077  #constant  Strings50Count    0
005242  000077  #constant  Strings50Count    0
005243  000078  #constant  Strings50Size     1
005244  000078  #constant  Strings50Size     1
005245  000079  #constant  Strings13Count    1
005246  000079  #constant  Strings13Count    1
005247  000080  #constant  Strings13Size     3
005248  000080  #constant  Strings13Size     3
005249  000081  #constant  Strings46Count    0
005250  000081  #constant  Strings46Count    0
005251  000082  #constant  Strings46Size     1
005252  000082  #constant  Strings46Size     1
005253  000083  #constant  Strings47Count    1
005254  000083  #constant  Strings47Count    1
005255  000084  #constant  Strings47Size     3
005256  000084  #constant  Strings47Size     3
005257  000085  #constant  Strings48Count    0
005258  000085  #constant  Strings48Count    0
005259  000086  #constant  Strings48Size     1
005260  000086  #constant  Strings48Size     1
005261  000087  #constant  Strings53Count    1
005262  000087  #constant  Strings53Count    1
005263  000088  #constant  Strings53Size     67
005264  000088  #constant  Strings53Size     67
005265  000089  #constant  Strings5Count    0
005266  000089  #constant  Strings5Count    0
005267  000090  #constant  Strings5Size     1
005268  000090  #constant  Strings5Size     1
005269  000091  #constant  Strings10Count    1
005270  000091  #constant  Strings10Count    1
005271  000092  #constant  Strings10Size     5
005272  000092  #constant  Strings10Size     5
005273  000093  #constant  Strings17Count    0
005274  000093  #constant  Strings17Count    0
005275  000094  #constant  Strings17Size     1
005276  000094  #constant  Strings17Size     1
005277  000095  // object indexes into ImageControl
005278  000096  #CONST
005279  000337  #END
005280  000338        
005281  000339  #constant  Strings18Size     0
005282  000339  #constant  Strings18Size     0
005283  000340  #constant  Strings18StartH   0
005284  000340  #constant  Strings18StartH   0
005285  000341  #constant  Strings18StartL   0
005286  000341  #constant  Strings18StartL   0
005287  000342  #constant  Strings20Size     0
005288  000342  #constant  Strings20Size     0
005289  000343  #constant  Strings20StartH   0
005290  000343  #constant  Strings20StartH   0
005291  000344  #constant  Strings20StartL   0
005292  000344  #constant  Strings20StartL   0
005293  000345  #constant  Strings21Size     0
005294  000345  #constant  Strings21Size     0
005295  000346  #constant  Strings21StartH   0
005296  000346  #constant  Strings21StartH   0
005297  000347  #constant  Strings21StartL   0
005298  000347  #constant  Strings21StartL   0
005299  000348  #constant  Strings22Size     0
005300  000348  #constant  Strings22Size     0
005301  000349  #constant  Strings22StartH   0
005302  000349  #constant  Strings22StartH   0
005303  000350  #constant  Strings22StartL   0
005304  000350  #constant  Strings22StartL   0
005305  000351  #constant  Strings23Size     0
005306  000351  #constant  Strings23Size     0
005307  000352  #constant  Strings23StartH   0
005308  000352  #constant  Strings23StartH   0
005309  000353  #constant  Strings23StartL   0
005310  000353  #constant  Strings23StartL   0
005311  000354  #constant  Strings28Size     0
005312  000354  #constant  Strings28Size     0
005313  000355  #constant  Strings28StartH   0
005314  000355  #constant  Strings28StartH   0
005315  000356  #constant  Strings28StartL   0
005316  000356  #constant  Strings28StartL   0
005317  000357  #constant  Strings33Size     0
005318  000357  #constant  Strings33Size     0
005319  000358  #constant  Strings33StartH   0
005320  000358  #constant  Strings33StartH   0
005321  000359  #constant  Strings33StartL   0
005322  000359  #constant  Strings33StartL   0
005323  000360  #constant  Strings35Size     0
005324  000360  #constant  Strings35Size     0
005325  000361  #constant  Strings35StartH   0
005326  000361  #constant  Strings35StartH   0
005327  000362  #constant  Strings35StartL   0
005328  000362  #constant  Strings35StartL   0
005329  000363  #constant  Strings49Size     0
005330  000363  #constant  Strings49Size     0
005331  000364  #constant  Strings49StartH   0
005332  000364  #constant  Strings49StartH   0
005333  000365  #constant  Strings49StartL   0
005334  000365  #constant  Strings49StartL   0
005335  000366  #constant  Strings1StartH   0x0
005336  000366  #constant  Strings1StartH   0x0
005337  000367  #constant  Strings1StartL   0x0
005338  000367  #constant  Strings1StartL   0x0
005339  000368  #constant  Strings3StartH   0x0
005340  000368  #constant  Strings3StartH   0x0
005341  000369  #constant  Strings3StartL   0x200
005342  000369  #constant  Strings3StartL   0x200
005343  000370  #constant  Strings4StartH   0x0
005344  000370  #constant  Strings4StartH   0x0
005345  000371  #constant  Strings4StartL   0x400
005346  000371  #constant  Strings4StartL   0x400
005347  000372  #constant  Strings6StartH   0x0
005348  000372  #constant  Strings6StartH   0x0
005349  000373  #constant  Strings6StartL   0x600
005350  000373  #constant  Strings6StartL   0x600
005351  000374  #constant  Strings2StartH   0x0
005352  000374  #constant  Strings2StartH   0x0
005353  000375  #constant  Strings2StartL   0x800
005354  000375  #constant  Strings2StartL   0x800
005355  000376  #constant  Strings0StartH   0x0
005356  000376  #constant  Strings0StartH   0x0
005357  000377  #constant  Strings0StartL   0xA00
005358  000377  #constant  Strings0StartL   0xA00
005359  000378  #constant  Strings9StartH   0x0
005360  000378  #constant  Strings9StartH   0x0
005361  000379  #constant  Strings9StartL   0xC00
005362  000379  #constant  Strings9StartL   0xC00
005363  000380  #constant  Strings34StartH   0x0
005364  000380  #constant  Strings34StartH   0x0
005365  000381  #constant  Strings34StartL   0xE00
005366  000381  #constant  Strings34StartL   0xE00
005367  000382  #constant  Strings36StartH   0x0
005368  000382  #constant  Strings36StartH   0x0
005369  000383  #constant  Strings36StartL   0x1000
005370  000383  #constant  Strings36StartL   0x1000
005371  000384  #constant  Strings37StartH   0x0
005372  000384  #constant  Strings37StartH   0x0
005373  000385  #constant  Strings37StartL   0x1200
005374  000385  #constant  Strings37StartL   0x1200
005375  000386  #constant  Strings12StartH   0x0
005376  000386  #constant  Strings12StartH   0x0
005377  000387  #constant  Strings12StartL   0x1400
005378  000387  #constant  Strings12StartL   0x1400
005379  000388  #constant  Strings14StartH   0x0
005380  000388  #constant  Strings14StartH   0x0
005381  000389  #constant  Strings14StartL   0x1600
005382  000389  #constant  Strings14StartL   0x1600
005383  000390  #constant  Strings16StartH   0x0
005384  000390  #constant  Strings16StartH   0x0
005385  000391  #constant  Strings16StartL   0x1800
005386  000391  #constant  Strings16StartL   0x1800
005387  000392  #constant  Strings15StartH   0x0
005388  000392  #constant  Strings15StartH   0x0
005389  000393  #constant  Strings15StartL   0x1A00
005390  000393  #constant  Strings15StartL   0x1A00
005391  000394  #constant  Strings11StartH   0x0
005392  000394  #constant  Strings11StartH   0x0
005393  000395  #constant  Strings11StartL   0x1C00
005394  000395  #constant  Strings11StartL   0x1C00
005395  000396  #constant  Strings24StartH   0x0
005396  000396  #constant  Strings24StartH   0x0
005397  000397  #constant  Strings24StartL   0x1E00
005398  000397  #constant  Strings24StartL   0x1E00
005399  000398  #constant  Strings25StartH   0x0
005400  000398  #constant  Strings25StartH   0x0
005401  000399  #constant  Strings25StartL   0x2000
005402  000399  #constant  Strings25StartL   0x2000
005403  000400  #constant  Strings26StartH   0x0
005404  000400  #constant  Strings26StartH   0x0
005405  000401  #constant  Strings26StartL   0x2200
005406  000401  #constant  Strings26StartL   0x2200
005407  000402  #constant  Strings27StartH   0x0
005408  000402  #constant  Strings27StartH   0x0
005409  000403  #constant  Strings27StartL   0x2400
005410  000403  #constant  Strings27StartL   0x2400
005411  000404  #constant  Strings7StartH   0x0
005412  000404  #constant  Strings7StartH   0x0
005413  000405  #constant  Strings7StartL   0x2600
005414  000405  #constant  Strings7StartL   0x2600
005415  000406  #constant  Strings8StartH   0x0
005416  000406  #constant  Strings8StartH   0x0
005417  000407  #constant  Strings8StartL   0x2800
005418  000407  #constant  Strings8StartL   0x2800
005419  000408  #constant  Strings38StartH   0x0
005420  000408  #constant  Strings38StartH   0x0
005421  000409  #constant  Strings38StartL   0x2A00
005422  000409  #constant  Strings38StartL   0x2A00
005423  000410  #constant  Strings39StartH   0x0
005424  000410  #constant  Strings39StartH   0x0
005425  000411  #constant  Strings39StartL   0x2C00
005426  000411  #constant  Strings39StartL   0x2C00
005427  000412  #constant  Strings40StartH   0x0
005428  000412  #constant  Strings40StartH   0x0
005429  000413  #constant  Strings40StartL   0x2E00
005430  000413  #constant  Strings40StartL   0x2E00
005431  000414  #constant  Strings41StartH   0x0
005432  000414  #constant  Strings41StartH   0x0
005433  000415  #constant  Strings41StartL   0x3000
005434  000415  #constant  Strings41StartL   0x3000
005435  000416  #constant  Strings42StartH   0x0
005436  000416  #constant  Strings42StartH   0x0
005437  000417  #constant  Strings42StartL   0x3200
005438  000417  #constant  Strings42StartL   0x3200
005439  000418  #constant  Strings43StartH   0x0
005440  000418  #constant  Strings43StartH   0x0
005441  000419  #constant  Strings43StartL   0x3400
005442  000419  #constant  Strings43StartL   0x3400
005443  000420  #constant  Strings44StartH   0x0
005444  000420  #constant  Strings44StartH   0x0
005445  000421  #constant  Strings44StartL   0x3600
005446  000421  #constant  Strings44StartL   0x3600
005447  000422  #constant  Strings45StartH   0x0
005448  000422  #constant  Strings45StartH   0x0
005449  000423  #constant  Strings45StartL   0x3800
005450  000423  #constant  Strings45StartL   0x3800
005451  000424  #constant  Strings51StartH   0x0
005452  000424  #constant  Strings51StartH   0x0
005453  000425  #constant  Strings51StartL   0x3A00
005454  000425  #constant  Strings51StartL   0x3A00
005455  000426  #constant  Strings52StartH   0x0
005456  000426  #constant  Strings52StartH   0x0
005457  000427  #constant  Strings52StartL   0x3C00
005458  000427  #constant  Strings52StartL   0x3C00
005459  000428  #constant  Strings19StartH   0x0
005460  000428  #constant  Strings19StartH   0x0
005461  000429  #constant  Strings19StartL   0x3E00
005462  000429  #constant  Strings19StartL   0x3E00
005463  000430  #constant  Strings29StartH   0x0
005464  000430  #constant  Strings29StartH   0x0
005465  000431  #constant  Strings29StartL   0x4000
005466  000431  #constant  Strings29StartL   0x4000
005467  000432  #constant  Strings30StartH   0x0
005468  000432  #constant  Strings30StartH   0x0
005469  000433  #constant  Strings30StartL   0x4200
005470  000433  #constant  Strings30StartL   0x4200
005471  000434  #constant  Strings31StartH   0x0
005472  000434  #constant  Strings31StartH   0x0
005473  000435  #constant  Strings31StartL   0x4400
005474  000435  #constant  Strings31StartL   0x4400
005475  000436  #constant  Strings32StartH   0x0
005476  000436  #constant  Strings32StartH   0x0
005477  000437  #constant  Strings32StartL   0x4600
005478  000437  #constant  Strings32StartL   0x4600
005479  000438  #constant  Strings50StartH   0x0
005480  000438  #constant  Strings50StartH   0x0
005481  000439  #constant  Strings50StartL   0x4800
005482  000439  #constant  Strings50StartL   0x4800
005483  000440  #constant  Strings13StartH   0x0
005484  000440  #constant  Strings13StartH   0x0
005485  000441  #constant  Strings13StartL   0x4A00
005486  000441  #constant  Strings13StartL   0x4A00
005487  000442  #constant  Strings46StartH   0x0
005488  000442  #constant  Strings46StartH   0x0
005489  000443  #constant  Strings46StartL   0x4C00
005490  000443  #constant  Strings46StartL   0x4C00
005491  000444  #constant  Strings47StartH   0x0
005492  000444  #constant  Strings47StartH   0x0
005493  000445  #constant  Strings47StartL   0x4E00
005494  000445  #constant  Strings47StartL   0x4E00
005495  000446  #constant  Strings48StartH   0x0
005496  000446  #constant  Strings48StartH   0x0
005497  000447  #constant  Strings48StartL   0x5000
005498  000447  #constant  Strings48StartL   0x5000
005499  000448  #constant  Strings53StartH   0x0
005500  000448  #constant  Strings53StartH   0x0
005501  000449  #constant  Strings53StartL   0x5200
005502  000449  #constant  Strings53StartL   0x5200
005503  000450  #constant  Strings5StartH   0x0
005504  000450  #constant  Strings5StartH   0x0
005505  000451  #constant  Strings5StartL   0x5400
005506  000451  #constant  Strings5StartL   0x5400
005507  000452  #constant  Strings10StartH   0x0
005508  000452  #constant  Strings10StartH   0x0
005509  000453  #constant  Strings10StartL   0x5600
005510  000453  #constant  Strings10StartL   0x5600
005511  000454  #constant  Strings17StartH   0x0
005512  000454  #constant  Strings17StartH   0x0
005513  000455  #constant  Strings17StartL   0x5800
005514  000455  #constant  Strings17StartL   0x5800
005515  000456  #IFNOT EXISTS NOGLOBALS
005516  000457  var hndl ;
005517  000458  #ENDIF
005518  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005519  000013  #inherit "CLPrintStrings.inc"
005520  000013  #inherit "CLPrintStrings.inc"
005521  000001  func PrintStrings(var ID, var *msgid, var String)
005522  000002      var StringID, i, ch, offs32[2], res32[2];
005523  000003      StringID := oStringss[1+ID] ;
005524  000004      if (String)
005525  000005          stringsCV[ID] := -1 ;
005526  000006      else
005527  000007          stringsCV[ID] := msgid ;
005528  000008      endif
005529  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005530  000010      txt_FontID(hFonts[ID]) ;
005531  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005532  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005533  000013        
005534  000014      if (*(StringID + Ofs_String_Transparent))
005535  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005536  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005537  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005538  000018      else
005539  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005540  000020          gfx_Clipping(ON) ;
005541  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005542  000022          gfx_Clipping(OFF) ;
005543  000023        
005544  000024      endif
005545  000025        
005546  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005547  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005548  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005549  000029        
005550  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005551  000031        
005552  000032      if (String)
005553  000033          i := 0 ;
005554  000034          ch := msgid[i++] ;
005555  000035          while (ch != 0)
005556  000036              putch(ch) ;
005557  000037              ch := msgid[i++] ;
005558  000038          wend
005559  000039      else
005560  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005561  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005562  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005563  000043          uadd_3232(res32,res32,offs32) ;
005564  000044          file_Seek(hstrings, res32[1], res32[0]);
005565  000045          repeat
005566  000046              if (*(StringID + Ofs_String_Ansi))
005567  000047                  ch := file_GetC(hstrings) ;
005568  000048              else
005569  000049                  ch := file_GetW(hstrings) ;
005570  000050              endif
005571  000051              putch(ch) ;
005572  000052          until (ch == 0) ;
005573  000053      endif
005574  000054        
005575  000055  endfunc
005576  000056        
005577  000014        
005578  000015  #constant IPDatasize 22
005579  000015  #constant IPDatasize 22
005580  000016        
005581  000017  #CONST
005582  000021  #END
005583  000022        
005584  000023  #CONST
005585  000130  #END
005586  000131        
005587  000565  #END
5588  2726
5589  2727
5590  2728
5591  2729
5592  272A
5593  272B
5594  272C
5595  272D
5596  272E
5597  272F
5598  2730
5599  2731
5600  2732
5601  2733
5602  2734
5603  2735
5604  2736
5605  2737
5606  2738
5607  2739
5608  273A
5609  273B
5610  273C
5611  273D
5612  273E
5613  273F
5614  2740
5615  2741
5616  2742
5617  2743
5618  2744
5619  2745
5620  2746
5621  2747
5622  2748
5623  2749
5624  274A
5625  274B
5626  274C
5627  274D
5628  274E
5629  274F
5630  2750
5631  2751
5632  2752
5633  2753
5634  2754
5635  2755
5636  2756
5637  2757
5638  2758
5639  2759
5640  275A
5641  275B
5642  275C
5643  275D
5644  275E
5645  275F
5646  2760
5647  2761
5648  2762
5649  2763
5650  2764
5651  2765
5652  2766
5653  2767
5654  2768
5655  2769
5656  276A
5657  276B
5658  276C
5659  276D
5660  276E
5661  276F
5662  2770
5663  2771
5664  2772
5665  2773
5666  2774
5667  2775
5668  2776
5669  2777
5670  2778
5671  2779
5672  277A
5673  277B
5674  277C
5675  277D
5676  277E
5677  277F
5678  2780
5679  2781
5680  2782
5681  2783
5682  2784
5683  2785
5684  2786
5685  2787
5686  2788
5687  2789
5688  278A
5689  278B
5690  278C
5691  278D
5692  278E
5693  278F
5694  2790
5695  2791
5696  2792
5697  2793
5698  2794
5699  2795
5700  2796
5701  2797
5702  2798
5703  2799
5704  279A
5705  279B
5706  279C
5707  279D
5708  279E
5709  279F
5710  27A0
5711  27A1
5712  27A2
5713  27A3
5714  27A4
5715  27A5
5716  27A6
5717  27A7
5718  27A8
5719  27A9
5720  27AA
5721  27AB
5722  27AC
5723  27AD
5724  27AE
5725  27AF
5726  27B0
5727  27B1
5728  27B2
5729  27B3
5730  27B4
5731  27B5
5732  27B6
5733  27B7
5734  27B8
5735  27B9
5736  27BA
5737  27BB
5738  27BC
5739  27BD
5740  27BE
5741  27BF
5742  27C0
5743  27C1
5744  27C2
5745  27C3
5746  27C4
5747  27C5
5748  27C6
5749  27C7
5750  27C8
5751  27C9
5752  27CA
5753  27CB
5754  27CC
5755  27CD
5756  27CE
5757  27CF
5758  27D0
5759  27D1
5760  27D2
5761  27D3
5762  27D4
5763  27D5
5764  27D6
5765  27D7
5766  27D8
5767  27D9
5768  27DA
5769  27DB
5770  27DC
5771  27DD
5772  27DE
5773  27DF
5774  27E0
5775  27E1
5776  27E2
5777  27E3
5778  27E4
5779  27E5
5780  27E6
5781  27E7
5782  27E8
5783  27E9
5784  27EA
5785  27EB
5786  27EC
5787  27ED
5788  27EE
5789  27EF
5790  27F0
5791  27F1
5792  27F2
5793  27F3
5794  27F4
5795  27F5
5796  27F6
5797  27F7
5798  27F8
5799  27F9
5800  27FA
5801  27FB
5802  27FC
5803  27FD
5804  27FE
5805  27FF
5806  2800
5807  2801
5808  2802
5809  2803
5810  2804
5811  2805
5812  2806
5813  2807
5814  2808
5815  2809
5816  280A
5817  280B
5818  280C
5819  280D
5820  280E
5821  280F
5822  2810
5823  2811
5824  2812
5825  2813
5826  2814
5827  2815
5828  2816
5829  2817
5830  2818
5831  2819
5832  281A
5833  281B
5834  281C
5835  281D
5836  281E
5837  281F
5838  2820
5839  2821
5840  2822
5841  2823
5842  2824
5843  2825
5844  2826
5845  2827
5846  2828
5847  2829
5848  282A
5849  282B
5850  282C
5851  282D
5852  282E
5853  282F
5854  2830
5855  2831
5856  2832
5857  2833
5858  2834
5859  2835
5860  2836
5861  2837
5862  2838
5863  2839
5864  283A
5865  283B
5866  283C
5867  283D
5868  283E
5869  283F
5870  2840
5871  2841
5872  2842
5873  2843
5874  2844
5875  2845
5876  2846
5877  2847
5878  2848
5879  2849
5880  284A
5881  284B
5882  284C
5883  284D
5884  284E
5885  284F
5886  2850
5887  2851
5888  2852
5889  2853
5890  2854
5891  2855
5892  2856
5893  2857
5894  2858
5895  2859
5896  285A
5897  285B
5898  285C
5899  285D
5900  285E
5901  285F
5902  2860
5903  2861
5904  2862
5905  2863
5906  2864
5907  2865
5908  2866
5909  2867
5910  2868
5911  2869
5912  286A
5913  286B
5914  286C
5915  286D
5916  286E
5917  286F
5918  2870
5919  2871
5920  2872
5921  2873
5922  2874
5923  2875
5924  2876
5925  2877
5926  2878
5927  2879
5928  287A
5929  287B
5930  287C
5931  287D
5932  287E
5933  287F
5934  2880
5935  2881
5936  2882
5937  2883
5938  2884
5939  2885
5940  2886
5941  2887
5942  2888
5943  2889
5944  288A
5945  288B
5946  288C
5947  288D
5948  288E
5949  288F
5950  2890
5951  2891
5952  2892
5953  2893
5954  2894
5955  2895
5956  2896
5957  2897
5958  2898
5959  2899
5960  289A
5961  289B
5962  289C
5963  289D
5964  289E
5965  289F
5966  28A0
5967  28A1
5968  28A2
5969  28A3
5970  28A4
5971  28A5
5972  28A6
5973  28A7
5974  28A8
5975  28A9
5976  28AA
5977  28AB
5978  28AC
5979  28AD
5980  28AE
5981  28AF
5982  28B0
5983  28B1
5984  28B2
5985  28B3
5986  28B4
5987  28B5
5988  28B6
5989  28B7
5990  28B8
5991  28B9
5992  28BA
5993  28BB
5994  28BC
5995  28BD
5996  28BE
5997  28BF
5998  28C0
5999  28C1
6000  28C2
6001  28C3
6002  28C4
6003  28C5
6004  28C6
6005  28C7
6006  28C8
6007  28C9
6008  28CA
6009  28CB
6010  28CC
6011  28CD
6012  28CE
6013  28CF
6014  28D0
6015  28D1
6016  28D2
6017  28D3
6018  28D4
6019  28D5
6020  28D6
6021  28D7
6022  28D8
6023  28D9
6024  28DA
6025  28DB
6026  28DC
6027  28DD
6028  28DE
6029  28DF
6030  28E0
6031  28E1
6032  28E2
6033  28E3
6034  28E4
6035  28E5
6036  28E6
6037  28E7
6038  28E8
6039  28E9
6040  28EA
6041  28EB
6042  28EC
6043  28ED
6044  28EE
6045  28EF
6046  28F0
6047  28F1
6048  28F2
6049  28F3
6050  28F4
6051  28F5
6052  28F6
6053  28F7
6054  28F8
6055  28F9
6056  28FA
6057  28FB
6058  28FC
6059  28FD
6060  28FE
6061  28FF
6062  2900
6063  2901
6064  2902
6065  2903
6066  2904
6067  2905
6068  2906
6069  2907
6070  2908
6071  2909
6072  290A
6073  290B
6074  290C
6075  290D
6076  290E
6077  290F
6078  2910
6079  2911
6080  2912
6081  2913
6082  2914
6083  2915
6084  2916
6085  2917
6086  2918
6087  2919
6088  291A
6089  291B
6090  291C
6091  291D
6092  291E
6093  291F
6094  2920
6095  2921
6096  2922
6097  2923
6098  2924
6099  2925
6100  2926
6101  2927
6102  2928
6103  2929
6104  292A
6105  292B
6106  292C
6107  292D
6108  292E
6109  292F
6110  2930
6111  2931
6112  2932
6113  2933
6114  2934
6115  2935
6116  2936
6117  2937
6118  2938
6119  2939
6120  293A
6121  293B
6122  293C
6123  293D
6124  293E
6125  293F
6126  2940
6127  2941
6128  2942
6129  2943
6130  2944
6131  2945
6132  2946
6133  2947
6134  2948
6135  2949
6136  294A
6137  294B
6138  294C
6139  294D
6140  294E
6141  294F
6142  2950
6143  2951
6144  2952
6145  2953
6146  2954
6147  2955
6148  2956
6149  2957
6150  2958
6151  2959
6152  295A
6153  295B
6154  295C
6155  295D
6156  295E
6157  295F
6158  2960
6159  2961
6160  2962
6161  2963
6162  2964
6163  2965
6164  2966
6165  2967
6166  2968
6167  2969
6168  296A
6169  296B
6170  296C
6171  296D
6172  296E
6173  296F
6174  2970
6175  2971
6176  2972
6177  2973
6178  2974
6179  2975
6180  2976
6181  2977
6182  2978
6183  2979
6184  297A
6185  297B
6186  297C
6187  297D
6188  297E
6189  297F
6190  2980
6191  2981
6192  2982
6193  2983
6194  2984
6195  2985
6196  2986
6197  2987
6198  2988
6199  2989
6200  298A
6201  298B
6202  298C
6203  298D
6204  298E
6205  298F
6206  2990
6207  2991
6208  2992
6209  2993
6210  2994
6211  2995
6212  2996
6213  2997
6214  2998
6215  2999
6216  299A
6217  299B
6218  299C
6219  299D
6220  299E
6221  299F
6222  29A0
6223  29A1
6224  29A2
6225  29A3
6226  29A4
6227  29A5
6228  29A6
6229  29A7
6230  29A8
6231  29A9
6232  29AA
6233  29AB
6234  29AC
6235  29AD
6236  29AE
6237  29AF
6238  29B0
6239  29B1
6240  29B2
6241  29B3
6242  29B4
6243  29B5
6244  29B6
6245  29B7
6246  29B8
6247  29B9
6248  29BA
6249  29BB
6250  29BC
6251  29BD
6252  29BE
6253  29BF
6254  29C0
6255  29C1
6256  29C2
6257  29C3
6258  29C4
6259  29C5
6260  29C6
6261  29C7
6262  29C8
6263  29C9
6264  29CA
6265  29CB
6266  29CC
6267  29CD
6268  29CE
6269  29CF
6270  29D0
6271  29D1
6272  29D2
6273  29D3
6274  29D4
6275  29D5
6276  29D6
6277  29D7
6278  29D8
6279  29D9
6280  29DA
6281  29DB
6282  29DC
6283  29DD
6284  29DE
6285  29DF
6286  29E0
6287  29E1
6288  29E2
6289  29E3
6290  29E4
6291  29E5
6292  29E6
6293  29E7
6294  29E8
6295  29E9
6296  29EA
6297  29EB
6298  29EC
6299  29ED
6300  29EE
6301  29EF
6302  29F0
6303  29F1
6304  29F2
6305  29F3
6306  29F4
6307  29F5
6308  29F6
6309  29F7
6310  29F8
6311  29F9
6312  29FA
6313  29FB
6314  29FC
6315  29FD
6316  29FE
6317  29FF
6318  2A00
6319  2A01
6320  2A02
6321  2A03
6322  2A04
6323  2A05
6324  2A06
6325  2A07
6326  2A08
6327  2A09
6328  2A0A
6329  2A0B
6330  2A0C
6331  2A0D
6332  2A0E
6333  2A0F
6334  2A10
6335  2A11
6336  2A12
6337  2A13
6338  2A14
6339  2A15
6340  2A16
6341  2A17
6342  2A18
6343  2A19
6344  2A1A
6345  2A1B
6346  2A1C
6347  2A1D
6348  2A1E
6349  2A1F
6350  2A20
6351  2A21
6352  2A22
6353  2A23
6354  2A24
6355  2A25
6356  2A26
6357  2A27
6358  2A28
6359  2A29
6360  2A2A
6361  2A2B
6362  2A2C
6363  2A2D
6364  2A2E
6365  2A2F
6366  2A30
6367  2A31
6368  2A32
6369  2A33
6370  2A34
6371  2A35
6372  2A36
6373  2A37
6374  2A38
6375  2A39
6376  2A3A
6377  2A3B
6378  2A3C
6379  2A3D
6380  2A3E
6381  2A3F
6382  2A40
6383  2A41
6384  2A42
6385  2A43
6386  2A44
6387  2A45
6388  2A46
6389  2A47
6390  2A48
6391  2A49
6392  2A4A
6393  2A4B
6394  2A4C
6395  2A4D
6396  2A4E
6397  2A4F
6398  2A50
6399  2A51
6400  2A52
6401  2A53
6402  2A54
6403  2A55
6404  2A56
6405  2A57
6406  2A58
6407  2A59
6408  2A5A
6409  2A5B
6410  2A5C
6411  2A5D
6412  2A5E
6413  2A5F
6414  2A60
6415  2A61
6416  2A62
6417  2A63
6418  2A64
6419  2A65
6420  2A66
6421  2A67
6422  2A68
6423  2A69
6424  2A6A
6425  2A6B
6426  2A6C
6427  2A6D
6428  2A6E
6429  2A6F
6430  2A70
6431  2A71
6432  2A72
6433  2A73
6434  2A74
6435  2A75
6436  2A76
6437  2A77
6438  2A78
6439  2A79
6440  2A7A
6441  2A7B
6442  2A7C
6443  2A7D
6444  2A7E
6445  2A7F
6446  2A80
6447  2A81
6448  2A82
6449  2A83
6450  2A84
6451  2A85
6452  2A86
6453  2A87
6454  2A88
6455  2A89
6456  2A8A
6457  2A8B
6458  2A8C
6459  2A8D
6460  2A8E
6461  2A8F
6462  2A90
6463  2A91
6464  2A92
6465  2A93
6466  2A94
6467  2A95
6468  2A96
6469  2A97
6470  2A98
6471  2A99
6472  2A9A
6473  2A9B
6474  2A9C
6475  2A9D
6476  2A9E
6477  2A9F
6478  2AA0
6479  2AA1
6480  2AA2
6481  2AA3
6482  2AA4
6483  2AA5
6484  2AA6
6485  2AA7
6486  2AA8
6487  2AA9
6488  2AAA
6489  2AAB
6490  2AAC
6491  2AAD
6492  2AAE
6493  2AAF
6494  2AB0
6495  2AB1
6496  2AB2
6497  2AB3
6498  2AB4
6499  2AB5
6500  2AB6
6501  2AB7
6502  2AB8
6503  2AB9
6504  2ABA
6505  2ABB
6506  2ABC
6507  2ABD
6508  2ABE
6509  2ABF
6510  2AC0
6511  2AC1
6512  2AC2
6513  2AC3
6514  2AC4
6515  2AC5
6516  2AC6
6517  2AC7
6518  2AC8
6519  2AC9
6520  2ACA
6521  2ACB
6522  2ACC
6523  2ACD
6524  2ACE
6525  2ACF
6526  2AD0
6527  2AD1
6528  2AD2
6529  2AD3
6530  2AD4
6531  2AD5
6532  2AD6
6533  2AD7
6534  2AD8
6535  2AD9
6536  2ADA
6537  2ADB
6538  2ADC
6539  2ADD
6540  2ADE
6541  2ADF
6542  2AE0
6543  2AE1
6544  2AE2
6545  2AE3
6546  2AE4
6547  2AE5
6548  2AE6
6549  2AE7
6550  2AE8
6551  2AE9
6552  2AEA
6553  2AEB
6554  2AEC
6555  2AED
6556  2AEE
6557  2AEF
6558  2AF0
6559  2AF1
6560  2AF2
6561  2AF3
6562  2AF4
6563  2AF5
6564  2AF6
6565  2AF7
6566  2AF8
6567  2AF9
6568  2AFA
6569  2AFB
6570  2AFC
6571  2AFD
6572  2AFE
6573  2AFF
6574  2B00
6575  2B01
6576  2B02
6577  2B03
6578  2B04
6579  2B05
6580  2B06
6581  2B07
6582  2B08
6583  2B09
6584  2B0A
6585  2B0B
6586  2B0C
6587  2B0D
6588  2B0E
6589  2B0F
6590  2B10
6591  2B11
6592  2B12
6593  2B13
6594  2B14
6595  2B15
6596  2B16
6597  2B17
6598  2B18
6599  2B19
6600  2B1A
6601  2B1B
6602  2B1C
6603  2B1D
6604  2B1E
6605  2B1F
6606  2B20
6607  2B21
6608  2B22
6609  2B23
6610  2B24
6611  2B25
6612  2B26
6613  2B27
6614  2B28
6615  2B29
6616  2B2A
6617  2B2B
6618  2B2C
6619  2B2D
6620  2B2E
6621  2B2F
6622  2B30
6623  2B31
6624  2B32
6625  2B33
6626  2B34
6627  2B35
6628  2B36
6629  2B37
6630  2B38
6631  2B39
6632  2B3A
6633  2B3B
6634  2B3C
6635  2B3D
6636  2B3E
6637  2B3F
6638  2B40
6639  2B41
6640  2B42
6641  2B43
6642  2B44
6643  2B45
6644  2B46
6645  2B47
6646  2B48
6647  2B49
6648  2B4A
6649  2B4B
6650  2B4C
6651  2B4D
6652  2B4E
6653  2B4F
6654  2B50
6655  2B51
6656  2B52
6657  2B53
6658  2B54
6659  2B55
6660  2B56
6661  2B57
6662  2B58
6663  2B59
6664  2B5A
6665  2B5B
6666  2B5C
6667  2B5D
6668  2B5E
6669  2B5F
6670  2B60
6671  2B61
6672  2B62
6673  2B63
6674  2B64
6675  2B65
6676  2B66
6677  2B67
6678  2B68
6679  2B69
6680  2B6A
6681  2B6B
6682  2B6C
6683  2B6D
6684  2B6E
6685  2B6F
6686  2B70
6687  2B71
6688  2B72
6689  2B73
6690  2B74
6691  2B75
6692  2B76
6693  2B77
6694  2B78
6695  2B79
6696  2B7A
6697  2B7B
6698  2B7C
6699  2B7D
6700  2B7E
6701  2B7F
6702  2B80
6703  2B81
6704  2B82
6705  2B83
6706  2B84
6707  2B85
6708  2B86
6709  2B87
6710  2B88
6711  2B89
6712  2B8A
6713  2B8B
6714  2B8C
6715  2B8D
6716  2B8E
6717  2B8F
6718  2B90
6719  2B91
6720  2B92
6721  2B93
6722  2B94
6723  2B95
6724  2B96
6725  2B97
6726  2B98
6727  2B99
6728  2B9A
6729  2B9B
6730  2B9C
6731  2B9D
6732  2B9E
6733  2B9F
6734  2BA0
6735  2BA1
6736  2BA2
6737  2BA3
6738  2BA4
6739  2BA5
6740  2BA6
6741  2BA7
6742  2BA8
6743  2BA9
6744  2BAA
6745  2BAB
6746  2BAC
6747  2BAD
6748  2BAE
6749  2BAF
6750  2BB0
6751  2BB1
6752  2BB2
6753  2BB3
6754  2BB4
6755  2BB5
6756  2BB6
6757  2BB7
6758  2BB8
6759  2BB9
6760  2BBA
6761  2BBB
6762  2BBC
6763  2BBD
6764  2BBE
6765  2BBF
6766  2BC0
6767  2BC1
6768  2BC2
6769  2BC3
6770  2BC4
6771  2BC5
6772  2BC6
6773  2BC7
6774  2BC8
6775  2BC9
6776  2BCA
6777  2BCB
6778  2BCC
6779  2BCD
6780  2BCE
6781  2BCF
6782  2BD0
6783  2BD1
6784  2BD2
6785  2BD3
6786  2BD4
6787  2BD5
6788  2BD6
6789  2BD7
6790  2BD8
6791  2BD9
6792  2BDA
6793  2BDB
6794  2BDC
6795  2BDD
6796  2BDE
6797  2BDF
6798  2BE0
6799  2BE1
6800  2BE2
6801  2BE3
6802  2BE4
6803  2BE5
6804  2BE6
6805  2BE7
6806  2BE8
6807  2BE9
6808  2BEA
6809  2BEB
6810  2BEC
6811  2BED
6812  2BEE
6813  2BEF
6814  2BF0
6815  2BF1
6816  2BF2
6817  2BF3
6818  2BF4
6819  2BF5
6820  2BF6
6821  2BF7
6822  2BF8
6823  2BF9
6824  2BFA
6825  2BFB
6826  2BFC
6827  2BFD
6828  2BFE
6829  2BFF
6830  2C00
6831  2C01
6832  2C02
6833  2C03
6834  2C04
6835  2C05
6836  2C06
6837  2C07
6838  2C08
6839  2C09
6840  2C0A
6841  2C0B
6842  2C0C
6843  2C0D
6844  2C0E
6845  2C0F
6846  2C10
6847  2C11
6848  2C12
6849  2C13
6850  2C14
6851  2C15
6852  2C16
6853  2C17
6854  2C18
6855  2C19
6856  2C1A
6857  2C1B
6858  2C1C
6859  2C1D
6860  2C1E
6861  2C1F
6862  2C20
6863  2C21
6864  2C22
6865  2C23
6866  2C24
6867  2C25
6868  2C26
6869  2C27
6870  2C28
6871  2C29
6872  2C2A
6873  2C2B
6874  2C2C
6875  2C2D
6876  2C2E
6877  2C2F
6878  2C30
6879  2C31
6880  2C32
6881  2C33
6882  2C34
6883  2C35
6884  2C36
6885  2C37
6886  2C38
6887  2C39
6888  2C3A
6889  2C3B
6890  2C3C
6891  2C3D
6892  2C3E
6893  2C3F
6894  2C40
6895  2C41
6896  2C42
6897  2C43
6898  2C44
6899  2C45
6900  2C46
6901  2C47
6902  2C48
6903  2C49
6904  2C4A
6905  2C4B
6906  2C4C
6907  2C4D
6908  2C4E
6909  2C4F
6910  2C50
6911  2C51
6912  2C52
6913  2C53
6914  2C54
6915  2C55
6916  2C56
6917  2C57
6918  2C58
6919  2C59
6920  2C5A
6921  2C5B
6922  2C5C
6923  2C5D
6924  2C5E
6925  2C5F
6926  2C60
6927  2C61
6928  2C62
6929  2C63
6930  2C64
6931  2C65
6932  2C66
6933  2C67
6934  2C68
6935  2C69
6936  2C6A
6937  2C6B
6938  2C6C
6939  2C6D
6940  2C6E
6941  2C6F
6942  2C70
6943  2C71
6944  2C72
6945  2C73
6946  2C74
6947  2C75
6948  2C76
6949  2C77
6950  2C78
6951  2C79
6952  2C7A
6953  2C7B
6954  2C7C
6955  2C7D
6956  2C7E
6957  2C7F
6958  2C80
6959  2C81
6960  2C82
6961  2C83
6962  2C84
6963  2C85
6964  2C86
6965  2C87
6966  2C88
6967  2C89
6968  2C8A
6969  2C8B
6970  2C8C
6971  2C8D
6972  2C8E
6973  2C8F
6974  2C90
6975  2C91
6976  2C92
6977  2C93
6978  2C94
6979  2C95
6980  2C96
6981  2C97
6982  2C98
6983  2C99
6984  2C9A
6985  2C9B
6986  2C9C
6987  2C9D
6988  2C9E
6989  2C9F
6990  2CA0
6991  2CA1
6992  2CA2
6993  2CA3
6994  2CA4
6995  2CA5
6996  2CA6
6997  2CA7
6998  2CA8
6999  2CA9
7000  2CAA
7001  2CAB
7002  2CAC
7003  2CAD
7004  2CAE
7005  2CAF
7006  2CB0
7007  2CB1
7008  2CB2
7009  2CB3
7010  2CB4
7011  2CB5
7012  2CB6
7013  2CB7
7014  2CB8
7015  2CB9
7016  2CBA
7017  2CBB
7018  2CBC
7019  2CBD
7020  2CBE
7021  2CBF
7022  2CC0
7023  2CC1
7024  2CC2
7025  2CC3
7026  2CC4
7027  2CC5
7028  2CC6
7029  2CC7
7030  2CC8
7031  2CC9
7032  2CCA
7033  2CCB
7034  2CCC
7035  2CCD
7036  2CCE
7037  2CCF
7038  2CD0
7039  2CD1
7040  2CD2
7041  2CD3
7042  2CD4
7043  2CD5
7044  2CD6
7045  2CD7
7046  2CD8
7047  2CD9
7048  2CDA
7049  2CDB
7050  2CDC
7051  2CDD
7052  2CDE
7053  2CDF
7054  2CE0
7055  2CE1
7056  2CE2
7057  2CE3
7058  2CE4
7059  2CE5
7060  2CE6
7061  2CE7
7062  2CE8
7063  2CE9
7064  2CEA
7065  2CEB
7066  2CEC
7067  2CED
7068  2CEE
7069  2CEF
7070  2CF0
7071  2CF1
7072  2CF2
7073  2CF3
7074  2CF4
7075  2CF5
7076  2CF6
7077  2CF7
7078  2CF8
7079  2CF9
7080  2CFA
7081  2CFB
7082  2CFC
7083  2CFD
7084  2CFE
7085  2CFF
7086  2D00
7087  2D01
7088  2D02
7089  2D03
7090  2D04
7091  2D05
7092  2D06
7093  2D07
7094  2D08
7095  2D09
7096  2D0A
7097  2D0B
7098  2D0C
7099  2D0D
7100  2D0E
7101  2D0F
7102  2D10
7103  2D11
7104  2D12
7105  2D13
7106  2D14
7107  2D15
7108  2D16
7109  2D17
7110  2D18
7111  2D19
7112  2D1A
7113  2D1B
7114  2D1C
7115  2D1D
7116  2D1E
7117  2D1F
7118  2D20
7119  2D21
7120  2D22
7121  2D23
7122  2D24
7123  2D25
7124  2D26
7125  2D27
7126  2D28
7127  2D29
7128  2D2A
7129  2D2B
7130  2D2C
7131  2D2D
7132  2D2E
7133  2D2F
7134  2D30
7135  2D31
7136  2D32
7137  2D33
7138  2D34
7139  2D35
7140  2D36
7141  2D37
7142  2D38
7143  2D39
7144  2D3A
7145  2D3B
7146  2D3C
7147  2D3D
7148  2D3E
7149  2D3F
7150  2D40
7151  2D41
7152  2D42
7153  2D43
7154  2D44
7155  2D45
7156  2D46
7157  2D47
7158  2D48
7159  2D49
7160  2D4A
7161  2D4B
7162  2D4C
7163  2D4D
7164  2D4E
7165  2D4F
7166  2D50
7167  2D51
7168  2D52
7169  2D53
7170  2D54
7171  2D55
7172  2D56
7173  2D57
7174  2D58
7175  2D59
7176  2D5A
7177  2D5B
7178  2D5C
7179  2D5D
7180  2D5E
7181  2D5F
7182  2D60
7183  2D61
7184  2D62
7185  2D63
7186  2D64
7187  2D65
7188  2D66
7189  2D67
7190  2D68
7191  2D69
7192  2D6A
7193  2D6B
7194  2D6C
7195  2D6D
7196  2D6E
7197  2D6F
7198  2D70
7199  2D71
7200  2D72
7201  2D73
7202  2D74
7203  2D75
7204  2D76
7205  2D77
7206  2D78
7207  2D79
7208  2D7A
7209  2D7B
7210  2D7C
7211  2D7D
7212  2D7E
7213  2D7F
7214  2D80
7215  2D81
7216  2D82
7217  2D83
7218  2D84
7219  2D85
7220  2D86
7221  2D87
7222  2D88
7223  2D89
7224  2D8A
7225  2D8B
7226  2D8C
7227  2D8D
7228  2D8E
7229  2D8F
7230  2D90
7231  2D91
7232  2D92
7233  2D93
7234  2D94
7235  2D95
7236  2D96
7237  2D97
7238  2D98
7239  2D99
7240  2D9A
7241  2D9B
7242  2D9C
7243  2D9D
7244  2D9E
7245  2D9F
7246  2DA0
7247  2DA1
7248  2DA2
7249  2DA3
7250  2DA4
7251  2DA5
7252  2DA6
7253  2DA7
7254  2DA8
7255  2DA9
7256  2DAA
7257  2DAB
7258  2DAC
7259  2DAD
7260  2DAE
7261  2DAF
7262  2DB0
7263  2DB1
7264  2DB2
7265  2DB3
7266  2DB4
7267  2DB5
7268  2DB6
7269  2DB7
7270  2DB8
7271  2DB9
7272  2DBA
7273  2DBB
7274  2DBC
7275  2DBD
7276  2DBE
7277  2DBF
7278  2DC0
7279  2DC1
7280  2DC2
7281  2DC3
7282  2DC4
7283  2DC5
7284  2DC6
7285  2DC7
7286  2DC8
7287  2DC9
7288  2DCA
7289  2DCB
7290  2DCC
7291  2DCD
7292  2DCE
7293  2DCF
7294  2DD0
7295  2DD1
7296  2DD2
7297  2DD3
7298  2DD4
7299  2DD5
7300  2DD6
7301  2DD7
7302  2DD8
7303  2DD9
7304  2DDA
7305  2DDB
7306  2DDC
7307  2DDD
7308  2DDE
7309  2DDF
7310  2DE0
7311  2DE1
7312  2DE2
7313  2DE3
7314  2DE4
7315  2DE5
7316  2DE6
7317  2DE7
7318  2DE8
7319  2DE9
7320  2DEA
7321  2DEB
7322  2DEC
7323  2DED
7324  2DEE
7325  2DEF
7326  2DF0
7327  2DF1
7328  2DF2
7329  2DF3
7330  2DF4
7331  2DF5
7332  2DF6
7333  2DF7
7334  2DF8
7335  2DF9
7336  2DFA
7337  2DFB
7338  2DFC
7339  2DFD
7340  2DFE
7341  2DFF
7342  2E00
7343  2E01
7344  2E02
7345  2E03
7346  2E04
7347  2E05
7348  2E06
7349  2E07
7350  2E08
7351  2E09
7352  2E0A
7353  2E0B
7354  2E0C
7355  2E0D
7356  2E0E
7357  2E0F
7358  2E10
7359  2E11
7360  2E12
7361  2E13
7362  2E14
7363  2E15
7364  2E16
7365  2E17
7366  2E18
7367  2E19
7368  2E1A
7369  2E1B
7370  2E1C
7371  2E1D
7372  2E1E
7373  2E1F
7374  2E20
7375  2E21
7376  2E22
7377  2E23
7378  2E24
7379  2E25
7380  2E26
7381  2E27
7382  2E28
7383  2E29
7384  2E2A
7385  2E2B
7386  2E2C
7387  2E2D
7388  2E2E
7389  2E2F
7390  2E30
7391  2E31
7392  2E32
7393  2E33
7394  2E34
7395  2E35
7396  2E36
7397  2E37
7398  2E38
7399  2E39
7400  2E3A
7401  2E3B
7402  2E3C
7403  2E3D
7404  2E3E
7405  2E3F
7406  2E40
7407  2E41
7408  2E42
7409  2E43
7410  2E44
7411  2E45
7412  2E46
7413  2E47
7414  2E48
7415  2E49
7416  2E4A
7417  2E4B
7418  2E4C
7419  2E4D
7420  2E4E
7421  2E4F
7422  2E50
7423  2E51
7424  2E52
7425  2E53
7426  2E54
7427  2E55
7428  2E56
7429  2E57
7430  2E58
7431  2E59
7432  2E5A
7433  2E5B
7434  2E5C
7435  2E5D
7436  2E5E
7437  2E5F
7438  2E60
7439  2E61
7440  2E62
7441  2E63
7442  2E64
7443  2E65
7444  2E66
7445  2E67
7446  2E68
7447  2E69
7448  2E6A
7449  2E6B
7450  2E6C
7451  2E6D
7452  2E6E
7453  2E6F
7454  2E70
7455  2E71
7456  2E72
7457  2E73
7458  2E74
7459  2E75
7460  2E76
7461  2E77
7462  2E78
7463  2E79
7464  2E7A
7465  2E7B
7466  2E7C
7467  2E7D
7468  2E7E
7469  2E7F
7470  2E80
7471  2E81
7472  2E82
7473  2E83
7474  2E84
7475  2E85
7476  2E86
7477  2E87
7478  2E88
7479  2E89
7480  2E8A
7481  2E8B
7482  2E8C
7483  2E8D
7484  2E8E
7485  2E8F
7486  2E90
7487  2E91
7488  2E92
7489  2E93
7490  2E94
7491  2E95
7492  2E96
7493  2E97
7494  2E98
7495  2E99
7496  2E9A
7497  2E9B
7498  2E9C
7499  2E9D
7500  2E9E
7501  2E9F
7502  2EA0
7503  2EA1
7504  2EA2
7505  2EA3
7506  2EA4
7507  2EA5
7508  2EA6
7509  2EA7
7510  2EA8
7511  2EA9
7512  2EAA
7513  2EAB
7514  2EAC
7515  2EAD
7516  2EAE
7517  2EAF
7518  2EB0
7519  2EB1
7520  2EB2
7521  2EB3
7522  2EB4
7523  2EB5
7524  2EB6
7525  2EB7
7526  2EB8
7527  2EB9
7528  2EBA
7529  2EBB
7530  2EBC
7531  2EBD
7532  2EBE
7533  2EBF
7534  2EC0
7535  2EC1
7536  2EC2
7537  2EC3
7538  2EC4
7539  2EC5
7540  2EC6
7541  2EC7
7542  2EC8
7543  2EC9
7544  2ECA
7545  2ECB
7546  2ECC
7547  2ECD
7548  2ECE
7549  2ECF
7550  2ED0
7551  2ED1
7552  2ED2
7553  2ED3
7554  2ED4
7555  2ED5
7556  2ED6
7557  2ED7
7558  2ED8
7559  2ED9
7560  2EDA
7561  2EDB
7562  2EDC
7563  2EDD
7564  2EDE
7565  2EDF
7566  2EE0
7567  2EE1
7568  2EE2
7569  2EE3
7570  2EE4
7571  2EE5
7572  2EE6
7573  2EE7
7574  2EE8
7575  2EE9
7576  2EEA
7577  2EEB
7578  2EEC
7579  2EED
7580  2EEE
7581  2EEF
7582  2EF0
7583  2EF1
7584  2EF2
7585  2EF3
7586  2EF4
7587  2EF5
7588  2EF6
7589  2EF7
7590  2EF8
7591  2EF9
7592  2EFA
7593  2EFB
7594  2EFC
7595  2EFD
7596  2EFE
7597  2EFF
7598  2F00
7599  2F01
7600  2F02
7601  2F03
7602  2F04
7603  2F05
7604  2F06
7605  2F07
7606  2F08
7607  2F09
7608  2F0A
7609  2F0B
7610  2F0C
7611  2F0D
7612  2F0E
7613  2F0F
7614  2F10
7615  2F11
7616  2F12
7617  2F13
7618  2F14
7619  2F15
7620  2F16
7621  2F17
7622  2F18
7623  2F19
7624  2F1A
7625  2F1B
7626  2F1C
7627  2F1D
7628  2F1E
7629  2F1F
7630  2F20
7631  2F21
7632  2F22
7633  2F23
7634  2F24
7635  2F25
7636  2F26
7637  2F27
7638  2F28
7639  2F29
7640  2F2A
7641  2F2B
7642  2F2C
7643  2F2D
7644  2F2E
7645  2F2F
7646  2F30
7647  2F31
7648  2F32
7649  2F33
7650  2F34
7651  2F35
7652  2F36
7653  2F37
7654  2F38
7655  2F39
7656  2F3A
7657  2F3B
7658  2F3C
7659  2F3D
7660  2F3E
7661  2F3F
7662  2F40
7663  2F41
7664  2F42
7665  2F43
7666  2F44
7667  2F45
7668  2F46
7669  2F47
7670  2F48
7671  2F49
7672  2F4A
7673  2F4B
7674  2F4C
7675  2F4D
7676  2F4E
7677  2F4F
7678  2F50
7679  2F51
7680  2F52
7681  2F53
7682  2F54
7683  2F55
7684  2F56
7685  2F57
7686  2F58
7687  2F59
7688  2F5A
7689  2F5B
7690  2F5C
7691  2F5D
7692  2F5E
7693  2F5F
7694  2F60
7695  2F61
7696  2F62
7697  2F63
7698  2F64
7699  2F65
7700  2F66
7701  2F67
7702  2F68
7703  2F69
7704  2F6A
7705  2F6B
7706  2F6C
7707  2F6D
7708  2F6E
7709  2F6F
7710  2F70
7711  2F71
7712  2F72
7713  2F73
7714  2F74
7715  2F75
7716  2F76
7717  2F77
7718  2F78
7719  2F79
7720  2F7A
7721  2F7B
7722  2F7C
7723  2F7D
7724  2F7E
7725  2F7F
7726  2F80
7727  2F81
7728  2F82
7729  2F83
7730  2F84
7731  2F85
7732  2F86
7733  2F87
7734  2F88
7735  2F89
7736  2F8A
7737  2F8B
7738  2F8C
7739  2F8D
7740  2F8E
7741  2F8F
7742  2F90
7743  2F91
7744  2F92
7745  2F93
7746  2F94
7747  2F95
7748  2F96
7749  2F97
7750  2F98
7751  2F99
7752  2F9A
7753  2F9B
7754  2F9C
7755  2F9D
7756  2F9E
7757  2F9F
7758  2FA0
7759  2FA1
7760  2FA2
7761  2FA3
7762  2FA4
7763  2FA5
7764  2FA6
7765  2FA7
7766  2FA8
7767  2FA9
7768  2FAA
7769  2FAB
7770  2FAC
7771  2FAD
7772  2FAE
7773  2FAF
7774  2FB0
7775  2FB1
7776  2FB2
7777  2FB3
7778  2FB4
7779  2FB5
7780  2FB6
7781  2FB7
7782  2FB8
7783  2FB9
7784  2FBA
7785  2FBB
7786  2FBC
7787  2FBD
7788  2FBE
7789  2FBF
7790  2FC0
7791  2FC1
7792  2FC2
7793  2FC3
7794  2FC4
7795  2FC5
7796  2FC6
7797  2FC7
7798  2FC8
7799  2FC9
7800  2FCA
7801  2FCB
7802  2FCC
7803  2FCD
7804  2FCE
7805  2FCF
7806  2FD0
7807  2FD1
7808  2FD2
7809  2FD3
7810  2FD4
7811  2FD5
7812  2FD6
7813  2FD7
7814  2FD8
7815  2FD9
7816  2FDA
7817  2FDB
7818  2FDC
7819  2FDD
7820  2FDE
7821  2FDF
7822  2FE0
7823  2FE1
7824  2FE2
7825  2FE3
7826  2FE4
7827  2FE5
7828  2FE6
7829  2FE7
7830  2FE8
7831  2FE9
7832  2FEA
7833  2FEB
7834  2FEC
7835  2FED
7836  2FEE
7837  2FEF
7838  2FF0
7839  2FF1
7840  2FF2
7841  2FF3
7842  2FF4
7843  2FF5
7844  2FF6
7845  2FF7
7846  2FF8
7847  2FF9
7848  2FFA
7849  2FFB
7850  2FFC
7851  2FFD
7852  2FFE
7853  2FFF
7854  3000
7855  3001
7856  3002
7857  3003
7858  3004
7859  3005
7860  3006
7861  3007
7862  3008
7863  3009
7864  300A
7865  300B
7866  300C
7867  300D
7868  300E
7869  300F
7870  3010
7871  3011
7872  3012
7873  3013
7874  3014
7875  3015
7876  3016
7877  3017
7878  3018
7879  3019
7880  301A
7881  301B
7882  301C
7883  301D
7884  301E
7885  301F
7886  3020
7887  3021
7888  3022
7889  3023
7890  3024
7891  3025
7892  3026
7893  3027
7894  3028
7895  3029
7896  302A
7897  302B
7898  302C
7899  302D
7900  302E
7901  302F
7902  3030
7903  3031
7904  3032
7905  3033
7906  3034
7907  3035
7908  3036
7909  3037
7910  3038
7911  3039
7912  303A
7913  303B
7914  303C
7915  303D
7916  303E
7917  303F
7918  3040
7919  3041
7920  3042
7921  3043
7922  3044
7923  3045
7924  3046
7925  3047
7926  3048
7927  3049
7928  304A
7929  304B
7930  304C
7931  304D
7932  304E
7933  304F
7934  3050
7935  3051
7936  3052
7937  3053
7938  3054
7939  3055
7940  3056
7941  3057
7942  3058
7943  3059
7944  305A
7945  305B
7946  305C
7947  305D
7948  305E
7949  305F
7950  3060
7951  3061
7952  3062
7953  3063
7954  3064
7955  3065
7956  3066
7957  3067
7958  3068
7959  3069
7960  306A
7961  306B
7962  306C
7963  306D
7964  306E
7965  306F
7966  3070
7967  3071
7968  3072
7969  3073
7970  3074
7971  3075
7972  3076
7973  3077
7974  3078
7975  3079
7976  307A
7977  307B
7978  307C
7979  307D
7980  307E
7981  307F
7982  3080
7983  3081
7984  3082
7985  3083
7986  3084
7987  3085
7988  3086
7989  3087
7990  3088
7991  3089
7992  308A
7993  308B
7994  308C
7995  308D
7996  308E
7997  308F
7998  3090
7999  3091
8000  3092
8001  3093
8002  3094
8003  3095
8004  3096
8005  3097
8006  3098
8007  3099
8008  309A
8009  309B
8010  309C
8011  309D
8012  309E
8013  309F
8014  30A0
8015  30A1
8016  30A2
8017  30A3
8018  30A4
8019  30A5
8020  30A6
8021  30A7
8022  30A8
8023  30A9
8024  30AA
8025  30AB
8026  30AC
8027  30AD
8028  30AE
8029  30AF
8030  30B0
8031  30B1
8032  30B2
8033  30B3
8034  30B4
8035  30B5
8036  30B6
8037  30B7
8038  30B8
8039  30B9
8040  30BA
8041  30BB
8042  30BC
8043  30BD
8044  30BE
8045  30BF
8046  30C0
8047  30C1
8048  30C2
8049  30C3
8050  30C4
8051  30C5
8052  30C6
8053  30C7
8054  30C8
8055  30C9
8056  30CA
8057  30CB
8058  30CC
8059  30CD
8060  30CE
8061  30CF
8062  30D0
8063  30D1
8064  30D2
8065  30D3
8066  30D4
8067  30D5
8068  30D6
8069  30D7
8070  30D8
8071  30D9
8072  30DA
8073  30DB
8074  30DC
8075  30DD
8076  30DE
8077  30DF
8078  30E0
8079  30E1
8080  30E2
8081  30E3
8082  30E4
8083  30E5
8084  30E6
8085  30E7
8086  30E8
8087  30E9
8088  30EA
8089  30EB
8090  30EC
8091  30ED
8092  30EE
8093  30EF
8094  30F0
8095  30F1
8096  30F2
8097  30F3
8098  30F4
8099  30F5
8100  30F6
8101  30F7
8102  30F8
8103  30F9
8104  30FA
8105  30FB
8106  30FC
8107  30FD
8108  30FE
8109  30FF
8110  3100
8111  3101
8112  3102
8113  3103
8114  3104
8115  3105
8116  3106
8117  3107
8118  3108
8119  3109
8120  310A
8121  310B
8122  310C
8123  310D
8124  310E
8125  310F
8126  3110
8127  3111
8128  3112
8129  3113
8130  3114
8131  3115
8132  3116
8133  3117
8134  3118
8135  3119
8136  311A
8137  311B
8138  311C
8139  311D
8140  311E
8141  311F
8142  3120
8143  3121
8144  3122
8145  3123
8146  3124
8147  3125
8148  3126
8149  3127
8150  3128
8151  3129
8152  312A
8153  312B
8154  312C
8155  312D
8156  312E
8157  312F
8158  3130
8159  3131
8160  3132
8161  3133
8162  3134
8163  3135
8164  3136
8165  3137
8166  3138
8167  3139
8168  313A
8169  313B
8170  313C
8171  313D
8172  313E
8173  313F
8174  3140
8175  3141
8176  3142
8177  3143
8178  3144
8179  3145
8180  3146
8181  3147
8182  3148
8183  3149
8184  314A
8185  314B
8186  314C
8187  314D
8188  314E
8189  314F
8190  3150
8191  3151
8192  3152
8193  3153
8194  3154
8195  3155
8196  3156
8197  3157
8198  3158
8199  3159
8200  315A
8201  315B
8202  315C
8203  315D
8204  315E
8205  315F
8206  3160
8207  3161
8208  3162
8209  3163
8210  3164
8211  3165
8212  3166
8213  3167
8214  3168
8215  3169
8216  316A
8217  316B
8218  316C
8219  316D
8220  316E
8221  316F
8222  3170
8223  3171
8224  3172
8225  3173
8226  3174
8227  3175
8228  3176
8229  3177
8230  3178
8231  3179
8232  317A
8233  317B
8234  317C
8235  317D
8236  317E
8237  317F
8238  3180
8239  3181
8240  3182
8241  3183
8242  3184
8243  3185
8244  3186
8245  3187
8246  3188
8247  3189
8248  318A
8249  318B
8250  318C
8251  318D
8252  318E
8253  318F
8254  3190
8255  3191
8256  3192
8257  3193
8258  3194
8259  3195
8260  3196
8261  3197
8262  3198
8263  3199
8264  319A
8265  319B
8266  319C
8267  319D
8268  319E
8269  319F
8270  31A0
8271  31A1
8272  31A2
8273  31A3
8274  31A4
8275  31A5
8276  31A6
8277  31A7
8278  31A8
8279  31A9
8280  31AA
8281  31AB
8282  31AC
8283  31AD
8284  31AE
8285  31AF
8286  31B0
8287  31B1
8288  31B2
8289  31B3
8290  31B4
8291  31B5
8292  31B6
8293  31B7
8294  31B8
8295  31B9
8296  31BA
8297  31BB
8298  31BC
8299  31BD
8300  31BE
8301  31BF
8302  31C0
8303  31C1
8304  31C2
8305  31C3
8306  31C4
8307  31C5
8308  31C6
8309  31C7
8310  31C8
8311  31C9
8312  31CA
8313  31CB
8314  31CC
8315  31CD
8316  31CE
8317  31CF
8318  31D0
8319  31D1
8320  31D2
8321  31D3
8322  31D4
8323  31D5
8324  31D6
8325  31D7
8326  31D8
8327  31D9
8328  31DA
8329  31DB
8330  31DC
8331  31DD
8332  31DE
8333  31DF
8334  31E0
8335  31E1
8336  31E2
8337  31E3
8338  31E4
8339  31E5
8340  31E6
8341  31E7
8342  31E8
8343  31E9
8344  31EA
8345  31EB
8346  31EC
8347  31ED
8348  31EE
8349  31EF
8350  31F0
8351  31F1
8352  31F2
8353  31F3
8354  31F4
8355  31F5
8356  31F6
8357  31F7
8358  31F8
8359  31F9
8360  31FA
8361  31FB
8362  31FC
8363  31FD
8364  31FE
8365  31FF
8366  3200
8367  3201
8368  3202
8369  3203
8370  3204
8371  3205
8372  3206
8373  3207
8374  3208
8375  3209
8376  320A
8377  320B
8378  320C
8379  320D
8380  320E
8381  320F
8382  3210
8383  3211
8384  3212
8385  3213
8386  3214
8387  3215
8388  3216
8389  3217
8390  3218
8391  3219
8392  321A
8393  321B
8394  321C
8395  321D
8396  321E
8397  321F
8398  3220
8399  3221
8400  3222
8401  3223
8402  3224
8403  3225
8404  3226
8405  3227
8406  3228
8407  3229
8408  322A
8409  322B
8410  322C
8411  322D
8412  322E
8413  322F
8414  3230
8415  3231
8416  3232
8417  3233
8418  3234
8419  3235
8420  3236
8421  3237
8422  3238
8423  3239
8424  323A
8425  323B
8426  323C
8427  323D
8428  323E
8429  323F
8430  3240
8431  3241
8432  3242
8433  3243
8434  3244
8435  3245
8436  3246
8437  3247
8438  3248
8439  3249
8440  324A
8441  324B
8442  324C
8443  324D
8444  324E
8445  324F
8446  3250
8447  3251
8448  3252
8449  3253
8450  3254
8451  3255
8452  3256
8453  3257
8454  3258
8455  3259
8456  325A
8457  325B
8458  325C
8459  325D
8460  325E
8461  325F
8462  3260
8463  3261
8464  3262
8465  3263
8466  3264
8467  3265
8468  3266
8469  3267
8470  3268
8471  3269
8472  326A
8473  326B
8474  326C
8475  326D
8476  326E
8477  326F
8478  3270
8479  3271
8480  3272
8481  3273
8482  3274
8483  3275
8484  3276
8485  3277
8486  3278
8487  3279
8488  327A
8489  327B
8490  327C
8491  327D
8492  327E
8493  327F
8494  3280
8495  3281
8496  3282
8497  3283
8498  3284
8499  3285
8500  3286
8501  3287
8502  3288
8503  3289
8504  328A
8505  328B
8506  328C
8507  328D
8508  328E
8509  328F
8510  3290
8511  3291
8512  3292
8513  3293
8514  3294
8515  3295
8516  3296
8517  3297
8518  3298
8519  3299
8520  329A
8521  329B
8522  329C
8523  329D
8524  329E
8525  329F
8526  32A0
8527  32A1
8528  32A2
8529  32A3
8530  32A4
8531  32A5
8532  32A6
8533  32A7
8534  32A8
8535  32A9
8536  32AA
8537  32AB
8538  32AC
8539  32AD
8540  32AE
8541  32AF
8542  32B0
8543  32B1
8544  32B2
8545  32B3
8546  32B4
8547  32B5
8548  32B6
8549  32B7
8550  32B8
8551  32B9
8552  32BA
8553  32BB
8554  32BC
8555  32BD
8556  32BE
8557  32BF
8558  32C0
8559  32C1
8560  32C2
8561  32C3
8562  32C4
8563  32C5
8564  32C6
8565  32C7
8566  32C8
8567  32C9
8568  32CA
8569  32CB
8570  32CC
8571  32CD
8572  32CE
8573  32CF
8574  32D0
8575  32D1
8576  32D2
8577  32D3
8578  32D4
8579  32D5
8580  32D6
8581  32D7
8582  32D8
8583  32D9
8584  32DA
8585  32DB
8586  32DC
8587  32DD
8588  32DE
8589  32DF
8590  32E0
8591  32E1
8592  32E2
8593  32E3
8594  32E4
8595  32E5
8596  32E6
8597  32E7
8598  32E8
8599  32E9
8600  32EA
8601  32EB
8602  32EC
8603  32ED
8604  32EE
8605  32EF
8606  32F0
8607  32F1
8608  32F2
8609  32F3
8610  32F4
8611  32F5
8612  32F6
8613  32F7
8614  32F8
8615  32F9
8616  32FA
8617  32FB
8618  32FC
8619  32FD
8620  32FE
8621  32FF
8622  3300
8623  3301
8624  3302
8625  3303
8626  3304
8627  3305
8628  3306
8629  3307
8630  3308
8631  3309
8632  330A
8633  330B
8634  330C
8635  330D
8636  330E
8637  330F
8638  3310
8639  3311
8640  3312
8641  3313
8642  3314
8643  3315
8644  3316
8645  3317
8646  3318
8647  3319
8648  331A
8649  331B
8650  331C
8651  331D
8652  331E
8653  331F
8654  3320
8655  3321
8656  3322
8657  3323
8658  3324
8659  3325
8660  3326
8661  3327
8662  3328
8663  3329
8664  332A
8665  332B
8666  332C
8667  332D
8668  332E
8669  332F
8670  3330
8671  3331
8672  3332
8673  3333
8674  3334
8675  3335
8676  3336
8677  3337
8678  3338
8679  3339
8680  333A
8681  333B
8682  333C
8683  333D
8684  333E
8685  333F
8686  3340
8687  3341
8688  3342
8689  3343
8690  3344
8691  3345
8692  3346
8693  3347
8694  3348
8695  3349
8696  334A
8697  334B
8698  334C
8699  334D
8700  334E
8701  334F
8702  3350
8703  3351
8704  3352
8705  3353
8706  3354
8707  3355
8708  3356
8709  3357
8710  3358
8711  3359
8712  335A
8713  335B
8714  335C
8715  335D
8716  335E
8717  335F
8718  3360
8719  3361
8720  3362
8721  3363
8722  3364
8723  3365
8724  3366
8725  3367
8726  3368
8727  3369
8728  336A
8729  336B
8730  336C
8731  336D
8732  336E
8733  336F
8734  3370
8735  3371
8736  3372
8737  3373
8738  3374
8739  3375
8740  3376
8741  3377
8742  3378
8743  3379
8744  337A
8745  337B
8746  337C
8747  337D
8748  337E
8749  337F
8750  3380
8751  3381
8752  3382
8753  3383
8754  3384
8755  3385
8756  3386
8757  3387
8758  3388
8759  3389
8760  338A
8761  338B
8762  338C
8763  338D
8764  338E
8765  338F
8766  3390
8767  3391
8768  3392
8769  3393
8770  3394
8771  3395
8772  3396
8773  3397
8774  3398
8775  3399
8776  339A
8777  339B
8778  339C
8779  339D
8780  339E
8781  339F
8782  33A0
8783  33A1
8784  33A2
8785  33A3
8786  33A4
8787  33A5
8788  33A6
8789  33A7
8790  33A8
8791  33A9
8792  33AA
8793  33AB
8794  33AC
8795  33AD
8796  33AE
8797  33AF
8798  33B0
8799  33B1
8800  33B2
8801  33B3
8802  33B4
8803  33B5
8804  33B6
8805  33B7
8806  33B8
8807  33B9
8808  33BA
8809  33BB
8810  33BC
8811  33BD
8812  33BE
8813  33BF
8814  33C0
8815  33C1
8816  33C2
8817  33C3
8818  33C4
8819  33C5
8820  33C6
8821  33C7
8822  33C8
8823  33C9
8824  33CA
8825  33CB
8826  33CC
8827  33CD
8828  33CE
8829  33CF
8830  33D0
8831  33D1
8832  33D2
8833  33D3
8834  33D4
8835  33D5
8836  33D6
8837  33D7
8838  33D8
8839  33D9
8840  33DA
8841  33DB
8842  33DC
8843  33DD
8844  33DE
8845  33DF
8846  33E0
8847  33E1
8848  33E2
8849  33E3
8850  33E4
8851  33E5
8852  33E6
8853  33E7
8854  33E8
8855  33E9
8856  33EA
8857  33EB
8858  33EC
8859  33ED
8860  33EE
8861  33EF
8862  33F0
8863  33F1
8864  33F2
8865  33F3
8866  33F4
8867  33F5
8868  33F6
8869  33F7
8870  33F8
8871  33F9
8872  33FA
8873  33FB
8874  33FC
8875  33FD
8876  33FE
8877  33FF
8878  3400
8879  3401
8880  3402
8881  3403
8882  3404
8883  3405
8884  3406
8885  3407
8886  3408
8887  3409
8888  340A
8889  340B
8890  340C
8891  340D
8892  340E
8893  340F
8894  3410
8895  3411
8896  3412
8897  3413
8898  3414
8899  3415
8900  3416
8901  3417
8902  3418
8903  3419
8904  341A
8905  341B
8906  341C
8907  341D
8908  341E
8909  341F
8910  3420
8911  3421
8912  3422
8913  3423
8914  3424
8915  3425
8916  3426
8917  3427
8918  3428
8919  3429
8920  342A
8921  342B
8922  342C
8923  342D
8924  342E
8925  342F
8926  3430
8927  3431
8928  3432
8929  3433
8930  3434
8931  3435
8932  3436
8933  3437
8934  3438
8935  3439
8936  343A
8937  343B
8938  343C
8939  343D
8940  343E
8941  343F
8942  3440
8943  3441
8944  3442
8945  3443
8946  3444
8947  3445
8948  3446
8949  3447
8950  3448
8951  3449
8952  344A
8953  344B
8954  344C
8955  344D
8956  344E
8957  344F
8958  3450
8959  3451
8960  3452
8961  3453
8962  3454
8963  3455
8964  3456
8965  3457
8966  3458
8967  3459
8968  345A
8969  345B
8970  345C
8971  345D
8972  345E
8973  345F
8974  3460
8975  3461
8976  3462
8977  3463
8978  3464
8979  3465
8980  3466
8981  3467
8982  3468
8983  3469
8984  346A
8985  346B
8986  346C
8987  346D
8988  346E
8989  346F
8990  3470
8991  3471
8992  3472
8993  3473
8994  3474
8995  3475
8996  3476
8997  3477
8998  3478
8999  3479
9000  347A
9001  347B
9002  347C
9003  347D
9004  347E
9005  347F
9006  3480
9007  3481
9008  3482
9009  3483
9010  3484
9011  3485
9012  3486
9013  3487
9014  3488
9015  3489
9016  348A
9017  348B
9018  348C
9019  348D
9020  348E
9021  348F
9022  3490
9023  3491
9024  3492
9025  3493
9026  3494
9027  3495
9028  3496
9029  3497
9030  3498
9031  3499
9032  349A
9033  349B
9034  349C
9035  349D
9036  349E
9037  349F
9038  34A0
9039  34A1
9040  34A2
9041  34A3
9042  34A4
9043  34A5
9044  34A6
9045  34A7
9046  34A8
9047  34A9
9048  34AA
9049  34AB
9050  34AC
9051  34AD
9052  34AE
9053  34AF
9054  34B0
9055  34B1
9056  34B2
9057  34B3
9058  34B4
9059  34B5
9060  34B6
9061  34B7
9062  34B8
9063  34B9
9064  34BA
9065  34BB
9066  34BC
9067  34BD
9068  34BE
9069  34BF
9070  34C0
9071  34C1
9072  34C2
9073  34C3
9074  34C4
9075  34C5
9076  34C6
9077  34C7
9078  34C8
9079  34C9
9080  34CA
9081  34CB
9082  34CC
9083  34CD
9084  34CE
9085  34CF
9086  34D0
9087  34D1
9088  34D2
9089  34D3
9090  34D4
9091  34D5
9092  34D6
9093  34D7
9094  34D8
9095  34D9
9096  34DA
9097  34DB
9098  34DC
9099  34DD
9100  34DE
9101  34DF
9102  34E0
9103  34E1
9104  34E2
9105  34E3
9106  34E4
9107  34E5
9108  34E6
9109  34E7
9110  34E8
9111  34E9
9112  34EA
9113  34EB
9114  34EC
9115  34ED
9116  34EE
9117  34EF
9118  34F0
9119  34F1
9120  34F2
9121  34F3
9122  34F4
9123  34F5
9124  34F6
9125  34F7
9126  34F8
9127  34F9
9128  34FA
9129  34FB
9130  34FC
9131  34FD
9132  34FE
9133  34FF
9134  3500
9135  3501
9136  3502
9137  3503
9138  3504
9139  3505
9140  3506
9141  3507
9142  3508
9143  3509
9144  350A
9145  350B
9146  350C
9147  350D
9148  350E
9149  350F
9150  3510
9151  3511
9152  3512
9153  3513
9154  3514
9155  3515
9156  3516
9157  3517
9158  3518
9159  3519
9160  351A
9161  351B
9162  351C
9163  351D
9164  351E
9165  351F
9166  3520
9167  3521
9168  3522
9169  3523
9170  3524
9171  3525
9172  3526
9173  3527
9174  3528
9175  3529
9176  352A
9177  352B
9178  352C
9179  352D
9180  352E
9181  352F
9182  3530
9183  3531
9184  3532
9185  3533
9186  3534
9187  3535
9188  3536
9189  3537
9190  3538
9191  3539
9192  353A
9193  353B
9194  353C
9195  353D
9196  353E
9197  353F
9198  3540
9199  3541
9200  3542
9201  3543
9202  3544
9203  3545
9204  3546
9205  3547
9206  3548
9207  3549
9208  354A
9209  354B
9210  354C
9211  354D
9212  354E
9213  354F
9214  3550
9215  3551
9216  3552
9217  3553
9218  3554
9219  3555
9220  3556
9221  3557
9222  3558
9223  3559
9224  355A
9225  355B
9226  355C
9227  355D
9228  355E
9229  355F
9230  3560
9231  3561
9232  3562
9233  3563
9234  3564
9235  3565
9236  3566
9237  3567
9238  3568
9239  3569
9240  356A
9241  356B
9242  356C
9243  356D
9244  356E
9245  356F
9246  3570
9247  3571
9248  3572
9249  3573
9250  3574
9251  3575
9252  3576
9253  3577
9254  3578
9255  3579
9256  357A
9257  357B
9258  357C
9259  357D
9260  357E
9261  357F
9262  3580
9263  3581
9264  3582
9265  3583
9266  3584
9267  3585
9268  3586
9269  3587
9270  3588
9271  3589
9272  358A
9273  358B
9274  358C
9275  358D
9276  358E
9277  358F
9278  3590
9279  3591
9280  3592
9281  3593
9282  3594
9283  3595
9284  3596
9285  3597
9286  3598
9287  3599
9288  359A
9289  359B
9290  359C
9291  359D
9292  359E
9293  359F
9294  35A0
9295  35A1
9296  35A2
9297  35A3
9298  35A4
9299  35A5
9300  35A6
9301  35A7
9302  35A8
9303  35A9
9304  35AA
9305  35AB
9306  35AC
9307  35AD
9308  35AE
9309  35AF
9310  35B0
9311  35B1
9312  35B2
9313  35B3
9314  35B4
9315  35B5
9316  35B6
9317  35B7
9318  35B8
9319  35B9
9320  35BA
9321  35BB
9322  35BC
9323  35BD
9324  35BE
9325  35BF
9326  35C0
9327  35C1
9328  35C2
9329  35C3
9330  35C4
9331  35C5
9332  35C6
9333  35C7
9334  35C8
9335  35C9
9336  35CA
9337  35CB
9338  35CC
9339  35CD
9340  35CE
9341  35CF
9342  35D0
9343  35D1
9344  35D2
9345  35D3
9346  35D4
9347  35D5
9348  35D6
9349  35D7
9350  35D8
9351  35D9
9352  35DA
9353  35DB
9354  35DC
9355  35DD
9356  35DE
9357  35DF
9358  35E0
9359  35E1
9360  35E2
9361  35E3
9362  35E4
9363  35E5
9364  35E6
9365  35E7
9366  35E8
9367  35E9
9368  35EA
9369  35EB
9370  35EC
9371  35ED
9372  35EE
9373  35EF
9374  35F0
9375  35F1
9376  35F2
9377  35F3
9378  35F4
9379  35F5
9380  35F6
9381  35F7
9382  35F8
9383  35F9
9384  35FA
9385  35FB
9386  35FC
9387  35FD
9388  35FE
9389  35FF
9390  3600
9391  3601
9392  3602
9393  3603
9394  3604
9395  3605
9396  3606
9397  3607
9398  3608
9399  3609
9400  360A
9401  360B
9402  360C
9403  360D
9404  360E
9405  360F
9406  3610
9407  3611
9408  3612
9409  3613
9410  3614
9411  3615
9412  3616
9413  3617
9414  3618
9415  3619
9416  361A
9417  361B
9418  361C
9419  361D
9420  361E
9421  361F
9422  3620
9423  3621
9424  3622
9425  3623
9426  3624
9427  3625
9428  3626
9429  3627
9430  3628
9431  3629
9432  362A
9433  362B
9434  362C
9435  362D
9436  362E
9437  362F
9438  3630
9439  3631
9440  3632
9441  3633
9442  3634
9443  3635
9444  3636
9445  3637
9446  3638
9447  3639
9448  363A
9449  363B
9450  363C
9451  363D
9452  363E
9453  363F
9454  3640
9455  3641
9456  3642
9457  3643
9458  3644
9459  3645
9460  3646
9461  3647
9462  3648
9463  3649
9464  364A
9465  364B
9466  364C
9467  364D
9468  364E
9469  364F
9470  3650
9471  3651
9472  3652
9473  3653
9474  3654
9475  3655
9476  3656
9477  3657
9478  3658
9479  3659
9480  365A
9481  365B
9482  365C
9483  365D
9484  365E
9485  365F
9486  3660
9487  3661
9488  3662
9489  3663
9490  3664
9491  3665
9492  3666
9493  3667
9494  3668
9495  3669
9496  366A
9497  366B
9498  366C
9499  366D
9500  366E
9501  366F
9502  3670
9503  3671
9504  3672
9505  3673
9506  3674
9507  3675
9508  3676
9509  3677
9510  3678
9511  3679
9512  367A
9513  367B
9514  367C
9515  367D
9516  367E
9517  367F
9518  3680
9519  3681
9520  3682
9521  3683
9522  3684
9523  3685
9524  3686
9525  3687
9526  3688
9527  3689
9528  368A
9529  368B
9530  368C
9531  368D
9532  368E
9533  368F
9534  3690
9535  3691
9536  3692
9537  3693
9538  3694
9539  3695
9540  3696
9541  3697
9542  3698
9543  3699
9544  369A
9545  369B
9546  369C
9547  369D
9548  369E
9549  369F
9550  36A0
9551  36A1
9552  36A2
9553  36A3
9554  36A4
9555  36A5
9556  36A6
9557  36A7
9558  36A8
9559  36A9
9560  36AA
9561  36AB
9562  36AC
9563  36AD
9564  36AE
9565  36AF
9566  36B0
9567  36B1
9568  36B2
9569  36B3
9570  36B4
9571  36B5
9572  36B6
9573  36B7
9574  36B8
9575  36B9
9576  36BA
9577  36BB
9578  36BC
9579  36BD
9580  36BE
9581  36BF
9582  36C0
9583  36C1
9584  36C2
9585  36C3
9586  36C4
9587  36C5
9588  36C6
9589  36C7
9590  36C8
9591  36C9
9592  36CA
9593  36CB
9594  36CC
9595  36CD
9596  36CE
9597  36CF
9598  36D0
9599  36D1
9600  36D2
9601  36D3
9602  36D4
9603  36D5
9604  36D6
9605  36D7
9606  36D8
9607  36D9
9608  36DA
9609  36DB
9610  36DC
9611  36DD
9612  36DE
9613  36DF
9614  36E0
9615  36E1
9616  36E2
9617  36E3
9618  36E4
9619  36E5
9620  36E6
9621  36E7
9622  36E8
9623  36E9
9624  36EA
9625  36EB
9626  36EC
9627  36ED
9628  36EE
9629  36EF
9630  36F0
9631  36F1
9632  36F2
9633  36F3
9634  36F4
9635  36F5
9636  36F6
9637  36F7
9638  36F8
9639  36F9
9640  36FA
9641  36FB
9642  36FC
9643  36FD
9644  36FE
9645  36FF
9646  3700
9647  3701
9648  3702
9649  3703
9650  3704
9651  3705
9652  3706
9653  3707
9654  3708
9655  3709
9656  370A
9657  370B
9658  370C
9659  370D
9660  370E
9661  370F
9662  3710
9663  3711
9664  3712
9665  3713
9666  3714
9667  3715
9668  3716
9669  3717
9670  3718
9671  3719
9672  371A
9673  371B
9674  371C
9675  371D
9676  371E
9677  371F
9678  3720
9679  3721
9680  3722
9681  3723
9682  3724
9683  3725
9684  3726
9685  3727
9686  3728
9687  3729
9688  372A
9689  372B
9690  372C
9691  372D
9692  372E
9693  372F
9694  3730
9695  3731
9696  3732
9697  3733
9698  3734
9699  3735
9700  3736
9701  3737
9702  3738
9703  3739
9704  373A
9705  373B
9706  373C
9707  373D
9708  373E
9709  373F
9710  3740
9711  3741
9712  3742
9713  3743
9714  3744
9715  3745
9716  3746
9717  3747
9718  3748
9719  3749
9720  374A
9721  374B
9722  374C
9723  374D
9724  374E
9725  374F
9726  3750
9727  3751
9728  3752
9729  3753
9730  3754
9731  3755
9732  3756
9733  3757
9734  3758
9735  3759
9736  375A
9737  375B
9738  375C
9739  375D
9740  375E
9741  375F
9742  3760
9743  3761
9744  3762
9745  3763
9746  3764
9747  3765
9748  3766
9749  3767
9750  3768
9751  3769
9752  376A
9753  376B
9754  376C
9755  376D
9756  376E
9757  376F
9758  3770
9759  3771
9760  3772
9761  3773
9762  3774
9763  3775
9764  3776
9765  3777
9766  3778
9767  3779
9768  377A
9769  377B
9770  377C
9771  377D
9772  377E
9773  377F
9774  3780
9775  3781
9776  3782
9777  3783
9778  3784
9779  3785
9780  3786
9781  3787
9782  3788
9783  3789
9784  378A
9785  378B
9786  378C
9787  378D
9788  378E
9789  378F
9790  3790
9791  3791
9792  3792
9793  3793
9794  3794
9795  3795
9796  3796
9797  3797
9798  3798
9799  3799
9800  379A
9801  379B
9802  379C
9803  379D
9804  379E
9805  379F
9806  37A0
9807  37A1
9808  37A2
9809  37A3
9810  37A4
9811  37A5
9812  37A6
9813  37A7
9814  37A8
9815  37A9
9816  37AA
9817  37AB
9818  37AC
9819  37AD
9820  37AE
9821  37AF
9822  37B0
9823  37B1
9824  37B2
9825  37B3
9826  37B4
9827  37B5
9828  37B6
9829  37B7
9830  37B8
9831  37B9
9832  37BA
9833  37BB
9834  37BC
9835  37BD
9836  37BE
9837  37BF
9838  37C0
9839  37C1
9840  37C2
9841  37C3
9842  37C4
9843  37C5
9844  37C6
9845  37C7
9846  37C8
9847  37C9
9848  37CA
9849  37CB
9850  37CC
9851  37CD
9852  37CE
9853  37CF
9854  37D0
9855  37D1
9856  37D2
9857  37D3
9858  37D4
9859  37D5
9860  37D6
9861  37D7
9862  37D8
9863  37D9
9864  37DA
9865  37DB
9866  37DC
9867  37DD
9868  37DE
9869  37DF
9870  37E0
9871  37E1
9872  37E2
9873  37E3
9874  37E4
9875  37E5
9876  37E6
9877  37E7
9878  37E8
9879  37E9
9880  37EA
9881  37EB
9882  37EC
9883  37ED
9884  37EE
9885  37EF
9886  37F0
9887  37F1
9888  37F2
9889  37F3
9890  37F4
9891  37F5
9892  37F6
9893  37F7
9894  37F8
9895  37F9
9896  37FA
9897  37FB
9898  37FC
9899  37FD
9900  37FE
9901  37FF
9902  3800
9903  3801
9904  3802
9905  3803
9906  3804
9907  3805
9908  3806
9909  3807
9910  3808
9911  3809
9912  380A
9913  380B
9914  380C
9915  380D
9916  380E
9917  380F
9918  3810
9919  3811
9920  3812
9921  3813
9922  3814
9923  3815
9924  3816
9925  3817
9926  3818
9927  3819
9928  381A
9929  381B
9930  381C
9931  381D
9932  381E
9933  381F
9934  3820
9935  3821
9936  3822
9937  3823
9938  3824
9939  3825
9940  3826
9941  3827
9942  3828
9943  3829
9944  382A
9945  382B
9946  382C
9947  382D
9948  382E
9949  382F
9950  3830
9951  3831
9952  3832
9953  3833
9954  3834
9955  3835
9956  3836
9957  3837
9958  3838
9959  3839
9960  383A
9961  383B
9962  383C
9963  383D
9964  383E
9965  383F
9966  3840
9967  3841
9968  3842
9969  3843
9970  3844
9971  3845
9972  3846
9973  3847
9974  3848
9975  3849
9976  384A
9977  384B
9978  384C
9979  384D
9980  384E
9981  384F
9982  3850
9983  3851
9984  3852
9985  3853
9986  3854
9987  3855
9988  3856
9989  3857
9990  3858
9991  3859
9992  385A
9993  385B
9994  385C
9995  385D
9996  385E
9997  385F
9998  3860
9999  3861
10000  3862
10001  3863
10002  3864
10003  3865
10004  3866
10005  3867
10006  3868
10007  3869
10008  386A
10009  386B
10010  386C
10011  386D
10012  386E
10013  386F
10014  3870
10015  3871
10016  3872
10017  3873
10018  3874
10019  3875
10020  3876
10021  3877
10022  3878
10023  3879
10024  387A
10025  387B
10026  387C
10027  387D
10028  387E
10029  387F
10030  3880
10031  3881
10032  3882
10033  3883
10034  3884
10035  3885
10036  3886
10037  3887
10038  3888
10039  3889
10040  388A
10041  388B
10042  388C
10043  388D
10044  388E
10045  388F
10046  3890
10047  3891
10048  3892
10049  3893
10050  3894
10051  3895
10052  3896
10053  3897
10054  3898
10055  3899
10056  389A
10057  389B
10058  389C
10059  389D
10060  389E
10061  389F
10062  38A0
10063  38A1
10064  38A2
10065  38A3
10066  38A4
10067  38A5
10068  38A6
10069  38A7
10070  38A8
10071  38A9
10072  38AA
10073  38AB
10074  38AC
10075  38AD
10076  38AE
10077  38AF
10078  38B0
10079  38B1
10080  38B2
10081  38B3
10082  38B4
10083  38B5
10084  38B6
10085  38B7
10086  38B8
10087  38B9
10088  38BA
10089  38BB
10090  38BC
10091  38BD
10092  38BE
10093  38BF
10094  38C0
10095  38C1
10096  38C2
10097  38C3
10098  38C4
10099  38C5
10100  38C6
10101  38C7
10102  38C8
10103  38C9
10104  38CA
10105  38CB
10106  38CC
10107  38CD
10108  38CE
10109  38CF
10110  38D0
10111  38D1
10112  38D2
10113  38D3
10114  38D4
10115  38D5
10116  38D6
10117  38D7
10118  38D8
10119  38D9
10120  38DA
10121  38DB
10122  38DC
10123  38DD
10124  38DE
10125  38DF
10126  38E0
10127  38E1
10128  38E2
10129  38E3
10130  38E4
10131  38E5
10132  38E6
10133  38E7
10134  38E8
10135  38E9
10136  38EA
10137  38EB
10138  38EC
10139  38ED
10140  38EE
10141  38EF
10142  38F0
10143  38F1
10144  38F2
10145  38F3
10146  38F4
10147  38F5
10148  38F6
10149  38F7
10150  38F8
10151  38F9
10152  38FA
10153  38FB
10154  38FC
10155  38FD
10156  38FE
10157  38FF
10158  3900
10159  3901
10160  3902
10161  3903
10162  3904
10163  3905
10164  3906
10165  3907
10166  3908
10167  3909
10168  390A
10169  390B
10170  390C
10171  390D
10172  390E
10173  390F
10174  3910
10175  3911
10176  3912
10177  3913
10178  3914
10179  3915
10180  3916
10181  3917
10182  3918
10183  3919
10184  391A
10185  391B
10186  391C
10187  391D
10188  391E
10189  391F
10190  3920
10191  3921
10192  3922
10193  3923
10194  3924
10195  3925
10196  3926
10197  3927
10198  3928
10199  3929
10200  392A
10201  392B
10202  392C
10203  392D
10204  392E
10205  392F
10206  3930
10207  3931
10208  3932
10209  3933
10210  3934
10211  3935
10212  3936
10213  3937
10214  3938
10215  3939
10216  393A
10217  393B
10218  393C
10219  393D
10220  393E
10221  393F
10222  3940
10223  3941
10224  3942
10225  3943
10226  3944
10227  3945
10228  3946
10229  3947
10230  3948
10231  3949
10232  394A
10233  394B
10234  394C
10235  394D
10236  394E
10237  394F
10238  3950
10239  3951
10240  3952
10241  3953
10242  3954
10243  3955
10244  3956
10245  3957
10246  3958
10247  3959
10248  395A
10249  395B
10250  395C
10251  395D
10252  395E
10253  395F
10254  3960
10255  3961
10256  3962
10257  3963
10258  3964
10259  3965
10260  3966
10261  3967
10262  3968
10263  3969
10264  396A
10265  396B
10266  396C
10267  396D
10268  396E
10269  396F
10270  3970
10271  3971
10272  3972
10273  3973
10274  3974
10275  3975
10276  3976
10277  3977
10278  3978
10279  3979
10280  397A
10281  397B
10282  397C
10283  397D
10284  397E
10285  397F
10286  3980
10287  3981
10288  3982
10289  3983
10290  3984
10291  3985
10292  3986
10293  3987
10294  3988
10295  3989
10296  398A
10297  398B
10298  398C
10299  398D
10300  398E
10301  398F
10302  3990
10303  3991
10304  3992
10305  3993
10306  3994
10307  3995
10308  3996
10309  3997
10310  3998
10311  3999
10312  399A
10313  399B
10314  399C
10315  399D
10316  399E
10317  399F
10318  39A0
10319  39A1
10320  39A2
10321  39A3
10322  39A4
10323  39A5
10324  39A6
10325  39A7
10326  39A8
10327  39A9
10328  39AA
10329  39AB
10330  39AC
10331  39AD
10332  39AE
10333  39AF
10334  39B0
10335  39B1
10336  39B2
10337  39B3
10338  39B4
10339  39B5
10340  39B6
10341  39B7
10342  39B8
10343  39B9
10344  39BA
10345  39BB
10346  39BC
10347  39BD
10348  39BE
10349  39BF
10350  39C0
10351  39C1
10352  39C2
10353  39C3
10354  39C4
10355  39C5
10356  39C6
10357  39C7
10358  39C8
10359  39C9
10360  39CA
10361  39CB
10362  39CC
10363  39CD
10364  39CE
10365  39CF
10366  39D0
10367  39D1
10368  39D2
10369  39D3
10370  39D4
10371  39D5
10372  39D6
10373  39D7
10374  39D8
10375  39D9
10376  39DA
10377  39DB
10378  39DC
10379  39DD
10380  39DE
10381  39DF
10382  39E0
10383  39E1
10384  39E2
10385  39E3
10386  39E4
10387  39E5
10388  39E6
10389  39E7
10390  39E8
10391  39E9
10392  39EA
10393  39EB
10394  39EC
10395  39ED
10396  39EE
10397  39EF
10398  39F0
10399  39F1
10400  39F2
10401  39F3
10402  39F4
10403  39F5
10404  39F6
10405  39F7
10406  39F8
10407  39F9
10408  39FA
10409  39FB
10410  39FC
10411  39FD
10412  39FE
10413  39FF
10414  3A00
10415  3A01
10416  3A02
10417  3A03
10418  3A04
10419  3A05
10420  3A06
10421  3A07
10422  3A08
10423  3A09
10424  3A0A
10425  3A0B
10426  3A0C
10427  3A0D
10428  3A0E
10429  3A0F
10430  3A10
10431  3A11
10432  3A12
10433  3A13
10434  3A14
10435  3A15
10436  3A16
10437  3A17
10438  3A18
10439  3A19
10440  3A1A
10441  3A1B
10442  3A1C
10443  3A1D
10444  3A1E
10445  3A1F
10446  3A20
10447  3A21
10448  3A22
10449  3A23
10450  3A24
10451  3A25
10452  3A26
10453  3A27
10454  3A28
10455  3A29
10456  3A2A
10457  3A2B
10458  3A2C
10459  3A2D
10460  3A2E
10461  3A2F
10462  3A30
10463  3A31
10464  3A32
10465  3A33
10466  3A34
10467  3A35
10468  3A36
10469  3A37
10470  3A38
10471  3A39
10472  3A3A
10473  3A3B
10474  3A3C
10475  3A3D
10476  3A3E
10477  3A3F
10478  3A40
10479  3A41
10480  3A42
10481  3A43
10482  3A44
10483  3A45
10484  3A46
10485  3A47
10486  3A48
10487  3A49
10488  3A4A
10489  3A4B
10490  3A4C
10491  3A4D
10492  3A4E
10493  3A4F
10494  3A50
10495  3A51
10496  3A52
10497  3A53
10498  3A54
10499  3A55
10500  3A56
10501  3A57
10502  3A58
10503  3A59
10504  3A5A
10505  3A5B
10506  3A5C
10507  3A5D
10508  3A5E
10509  3A5F
10510  3A60
10511  3A61
10512  3A62
10513  3A63
10514  3A64
10515  3A65
10516  3A66
10517  3A67
10518  3A68
10519  3A69
10520  3A6A
10521  3A6B
10522  3A6C
10523  3A6D
10524  3A6E
10525  3A6F
10526  3A70
10527  3A71
10528  3A72
10529  3A73
10530  3A74
10531  3A75
10532  3A76
10533  3A77
10534  3A78
10535  3A79
10536  3A7A
10537  3A7B
10538  3A7C
10539  3A7D
10540  3A7E
10541  3A7F
10542  3A80
10543  3A81
10544  3A82
10545  3A83
10546  3A84
10547  3A85
10548  3A86
10549  3A87
10550  3A88
10551  3A89
10552  3A8A
10553  3A8B
10554  3A8C
10555  3A8D
10556  3A8E
10557  3A8F
10558  3A90
10559  3A91
10560  3A92
10561  3A93
10562  3A94
10563  3A95
10564  3A96
10565  3A97
10566  3A98
10567  3A99
10568  3A9A
10569  3A9B
10570  3A9C
10571  3A9D
10572  3A9E
10573  3A9F
10574  3AA0
10575  3AA1
10576  3AA2
10577  3AA3
10578  3AA4
10579  3AA5
10580  3AA6
10581  3AA7
10582  3AA8
10583  3AA9
10584  3AAA
10585  3AAB
10586  3AAC
10587  3AAD
10588  3AAE
10589  3AAF
10590  3AB0
10591  3AB1
10592  3AB2
10593  3AB3
10594  3AB4
10595  3AB5
10596  3AB6
10597  3AB7
10598  3AB8
10599  3AB9
10600  3ABA
10601  3ABB
10602  3ABC
10603  3ABD
10604  3ABE
10605  3ABF
10606  3AC0
10607  3AC1
10608  3AC2
10609  3AC3
10610  3AC4
10611  3AC5
10612  3AC6
10613  3AC7
10614  3AC8
10615  3AC9
10616  3ACA
10617  3ACB
10618  3ACC
10619  3ACD
10620  3ACE
10621  3ACF
10622  3AD0
10623  3AD1
10624  3AD2
10625  3AD3
10626  3AD4
10627  3AD5
10628  3AD6
10629  3AD7
10630  3AD8
10631  3AD9
10632  3ADA
10633  3ADB
10634  3ADC
10635  3ADD
10636  3ADE
10637  3ADF
10638  3AE0
10639  3AE1
10640  3AE2
10641  3AE3
10642  3AE4
10643  3AE5
10644  3AE6
10645  3AE7
10646  3AE8
10647  3AE9
10648  3AEA
10649  3AEB
10650  3AEC
10651  3AED
10652  3AEE
10653  3AEF
10654  3AF0
10655  3AF1
10656  3AF2
10657  3AF3
10658  3AF4
10659  3AF5
10660  3AF6
10661  3AF7
10662  3AF8
10663  3AF9
10664  3AFA
10665  3AFB
10666  3AFC
10667  3AFD
10668  3AFE
10669  3AFF
10670  3B00
10671  3B01
10672  3B02
10673  3B03
10674  3B04
10675  3B05
10676  3B06
10677  3B07
10678  3B08
10679  3B09
10680  3B0A
10681  3B0B
10682  3B0C
10683  3B0D
10684  3B0E
10685  3B0F
10686  3B10
10687  3B11
10688  3B12
10689  3B13
10690  3B14
10691  3B15
10692  3B16
10693  3B17
10694  3B18
10695  3B19
10696  3B1A
10697  3B1B
10698  3B1C
10699  3B1D
10700  3B1E
10701  3B1F
10702  3B20
10703  3B21
10704  3B22
10705  3B23
10706  3B24
10707  3B25
10708  3B26
10709  3B27
10710  3B28
10711  3B29
10712  3B2A
10713  3B2B
10714  3B2C
10715  3B2D
10716  3B2E
10717  3B2F
10718  3B30
10719  3B31
10720  3B32
10721  3B33
10722  3B34
10723  3B35
10724  3B36
10725  3B37
10726  3B38
10727  3B39
10728  3B3A
10729  3B3B
10730  3B3C
10731  3B3D
10732  3B3E
10733  3B3F
10734  3B40
10735  3B41
10736  3B42
10737  3B43
10738  3B44
10739  3B45
10740  3B46
10741  3B47
10742  3B48
10743  3B49
10744  3B4A
10745  3B4B
10746  3B4C
10747  3B4D
10748  3B4E
10749  3B4F
10750  3B50
10751  3B51
10752  3B52
10753  3B53
10754  3B54
10755  3B55
10756  3B56
10757  3B57
10758  3B58
10759  3B59
10760  3B5A
10761  3B5B
10762  3B5C
10763  3B5D
10764  3B5E
10765  3B5F
10766  3B60
10767  3B61
10768  3B62
10769  3B63
10770  3B64
10771  3B65
10772  3B66
10773  3B67
10774  3B68
10775  3B69
10776  3B6A
10777  3B6B
10778  3B6C
10779  3B6D
10780  3B6E
10781  3B6F
10782  3B70
10783  3B71
10784  3B72
10785  3B73
10786  3B74
10787  3B75
10788  3B76
10789  3B77
10790  3B78
10791  3B79
10792  3B7A
10793  3B7B
10794  3B7C
10795  3B7D
10796  3B7E
10797  3B7F
10798  3B80
10799  3B81
10800  3B82
10801  3B83
10802  3B84
10803  3B85
10804  3B86
10805  3B87
10806  3B88
10807  3B89
10808  3B8A
10809  3B8B
10810  3B8C
10811  3B8D
10812  3B8E
10813  3B8F
10814  3B90
10815  3B91
10816  3B92
10817  3B93
10818  3B94
10819  3B95
10820  3B96
10821  3B97
10822  3B98
10823  3B99
10824  3B9A
10825  3B9B
10826  3B9C
10827  3B9D
10828  3B9E
10829  3B9F
10830  3BA0
10831  3BA1
10832  3BA2
10833  3BA3
10834  3BA4
10835  3BA5
10836  3BA6
10837  3BA7
10838  3BA8
10839  3BA9
10840  3BAA
10841  3BAB
10842  3BAC
10843  3BAD
10844  3BAE
10845  3BAF
10846  3BB0
10847  3BB1
10848  3BB2
10849  3BB3
10850  3BB4
10851  3BB5
10852  3BB6
10853  3BB7
10854  3BB8
10855  3BB9
10856  3BBA
10857  3BBB
10858  3BBC
10859  3BBD
10860  3BBE
10861  3BBF
10862  3BC0
10863  3BC1
10864  3BC2
10865  3BC3
10866  3BC4
10867  3BC5
10868  3BC6
10869  3BC7
10870  3BC8
10871  3BC9
10872  3BCA
10873  3BCB
10874  3BCC
10875  3BCD
10876  3BCE
10877  3BCF
10878  3BD0
10879  3BD1
10880  3BD2
10881  3BD3
10882  3BD4
10883  3BD5
10884  3BD6
10885  3BD7
10886  3BD8
10887  3BD9
10888  3BDA
10889  3BDB
10890  3BDC
10891  3BDD
10892  3BDE
10893  3BDF
10894  3BE0
10895  3BE1
10896  3BE2
10897  3BE3
10898  3BE4
10899  3BE5
10900  3BE6
10901  3BE7
10902  3BE8
10903  3BE9
10904  3BEA
10905  3BEB
10906  3BEC
10907  3BED
10908  3BEE
10909  3BEF
10910  3BF0
10911  3BF1
10912  3BF2
10913  3BF3
10914  3BF4
10915  3BF5
10916  3BF6
10917  3BF7
10918  3BF8
10919  3BF9
10920  3BFA
10921  3BFB
10922  3BFC
10923  3BFD
10924  3BFE
10925  3BFF
10926  3C00
10927  3C01
10928  3C02
10929  3C03
10930  3C04
10931  3C05
10932  3C06
10933  3C07
10934  3C08
10935  3C09
10936  3C0A
10937  3C0B
10938  3C0C
10939  3C0D
10940  3C0E
10941  3C0F
10942  3C10
10943  3C11
10944  3C12
10945  3C13
10946  3C14
10947  3C15
10948  3C16
10949  3C17
10950  3C18
10951  3C19
10952  3C1A
10953  3C1B
10954  3C1C
10955  3C1D
10956  3C1E
10957  3C1F
10958  3C20
10959  3C21
10960  3C22
10961  3C23
10962  3C24
10963  3C25
10964  3C26
10965  3C27
10966  3C28
10967  3C29
10968  3C2A
10969  3C2B
10970  3C2C
10971  3C2D
10972  3C2E
10973  3C2F
10974  3C30
10975  3C31
10976  3C32
10977  3C33
10978  3C34
10979  3C35
10980  3C36
10981  3C37
10982  3C38
10983  3C39
10984  3C3A
10985  3C3B
10986  3C3C
10987  3C3D
10988  3C3E
10989  3C3F
10990  3C40
10991  3C41
10992  3C42
10993  3C43
10994  3C44
10995  3C45
10996  3C46
10997  3C47
10998  3C48
10999  3C49
11000  3C4A
11001  3C4B
11002  3C4C
11003  3C4D
11004  3C4E
11005  3C4F
11006  3C50
11007  3C51
11008  3C52
11009  3C53
11010  3C54
11011  3C55
11012  3C56
11013  3C57
11014  3C58
11015  3C59
11016  3C5A
11017  3C5B
11018  3C5C
11019  3C5D
11020  3C5E
11021  3C5F
11022  3C60
11023  3C61
11024  3C62
11025  3C63
11026  3C64
11027  3C65
11028  3C66
11029  3C67
11030  3C68
11031  3C69
11032  3C6A
11033  3C6B
11034  3C6C
11035  3C6D
11036  3C6E
11037  3C6F
11038  3C70
11039  3C71
11040  3C72
11041  3C73
11042  3C74
11043  3C75
11044  3C76
11045  3C77
11046  3C78
11047  3C79
11048  3C7A
11049  3C7B
11050  3C7C
11051  3C7D
11052  3C7E
11053  3C7F
11054  3C80
11055  3C81
11056  3C82
11057  3C83
11058  3C84
11059  3C85
11060  3C86
11061  3C87
11062  3C88
11063  3C89
11064  3C8A
11065  3C8B
11066  3C8C
11067  3C8D
11068  3C8E
11069  3C8F
11070  3C90
11071  3C91
11072  3C92
11073  3C93
11074  3C94
11075  3C95
11076  3C96
11077  3C97
11078  3C98
11079  3C99
11080  3C9A
11081  3C9B
11082  3C9C
11083  3C9D
11084  3C9E
11085  3C9F
11086  3CA0
11087  3CA1
11088  3CA2
11089  3CA3
11090  3CA4
11091  3CA5
11092  3CA6
11093  3CA7
11094  3CA8
11095  3CA9
11096  3CAA
11097  3CAB
11098  3CAC
11099  3CAD
11100  3CAE
11101  3CAF
11102  3CB0
11103  3CB1
11104  3CB2
11105  3CB3
11106  3CB4
11107  3CB5
11108  3CB6
11109  3CB7
11110  3CB8
11111  3CB9
11112  3CBA
11113  3CBB
11114  3CBC
11115  3CBD
11116  3CBE
11117  3CBF
11118  3CC0
11119  3CC1
11120  3CC2
11121  3CC3
11122  3CC4
11123  3CC5
11124  3CC6
11125  3CC7
11126  3CC8
11127  3CC9
11128  3CCA
11129  3CCB
11130  3CCC
11131  3CCD
11132  3CCE
11133  3CCF
11134  3CD0
11135  3CD1
11136  3CD2
11137  3CD3
11138  3CD4
11139  3CD5
11140  3CD6
11141  3CD7
11142  3CD8
11143  3CD9
11144  3CDA
11145  3CDB
11146  3CDC
11147  3CDD
11148  3CDE
11149  3CDF
11150  3CE0
11151  3CE1
11152  3CE2
11153  3CE3
11154  3CE4
11155  3CE5
11156  3CE6
11157  3CE7
11158  3CE8
11159  3CE9
11160  3CEA
11161  3CEB
11162  3CEC
11163  3CED
11164  3CEE
11165  3CEF
11166  3CF0
11167  3CF1
11168  3CF2
11169  3CF3
11170  3CF4
11171  3CF5
11172  3CF6
11173  3CF7
11174  3CF8
11175  3CF9
11176  3CFA
11177  3CFB
11178  3CFC
11179  3CFD
11180  3CFE
11181  3CFF
11182  3D00
11183  3D01
11184  3D02
11185  3D03
11186  3D04
11187  3D05
11188  3D06
11189  3D07
11190  3D08
11191  3D09
11192  3D0A
11193  3D0B
11194  3D0C
11195  3D0D
11196  3D0E
11197  3D0F
11198  3D10
11199  3D11
11200  3D12
11201  3D13
11202  3D14
11203  3D15
11204  3D16
11205  3D17
11206  3D18
11207  3D19
11208  3D1A
11209  3D1B
11210  3D1C
11211  3D1D
11212  3D1E
11213  3D1F
11214  3D20
11215  3D21
11216  3D22
11217  3D23
11218  3D24
11219  3D25
11220  3D26
11221  3D27
11222  3D28
11223  3D29
11224  3D2A
11225  3D2B
11226  3D2C
11227  3D2D
11228  3D2E
11229  3D2F
11230  3D30
11231  3D31
11232  3D32
11233  3D33
11234  3D34
11235  3D35
11236  3D36
11237  3D37
11238  3D38
11239  3D39
11240  3D3A
11241  3D3B
11242  3D3C
11243  3D3D
11244  3D3E
11245  3D3F
11246  3D40
11247  3D41
11248  3D42
11249  3D43
11250  3D44
11251  3D45
11252  3D46
11253  3D47
11254  3D48
11255  3D49
11256  3D4A
11257  3D4B
11258  3D4C
11259  3D4D
11260  3D4E
11261  3D4F
11262  3D50
11263  3D51
11264  3D52
11265  3D53
11266  3D54
11267  3D55
11268  3D56
11269  3D57
11270  3D58
11271  3D59
11272  3D5A
11273  3D5B
11274  3D5C
11275  3D5D
11276  3D5E
11277  3D5F
11278  3D60
11279  3D61
11280  3D62
11281  3D63
11282  3D64
11283  3D65
11284  3D66
11285  3D67
11286  3D68
11287  3D69
11288  3D6A
11289  3D6B
11290  3D6C
11291  3D6D
11292  3D6E
11293  3D6F
11294  3D70
11295  3D71
11296  3D72
11297  3D73
11298  3D74
11299  3D75
11300  3D76
11301  3D77
11302  3D78
11303  3D79
11304  3D7A
11305  3D7B
11306  3D7C
11307  3D7D
11308  3D7E
11309  3D7F
11310  3D80
11311  3D81
11312  3D82
11313  3D83
11314  3D84
11315  3D85
11316  3D86
11317  3D87
11318  3D88
11319  3D89
11320  3D8A
11321  3D8B
11322  3D8C
11323  3D8D
11324  3D8E
11325  3D8F
11326  3D90
11327  3D91
11328  3D92
11329  3D93
11330  3D94
11331  3D95
11332  3D96
11333  3D97
11334  3D98
11335  3D99
11336  3D9A
11337  3D9B
11338  3D9C
11339  3D9D
11340  3D9E
11341  3D9F
11342  3DA0
11343  3DA1
11344  3DA2
11345  3DA3
11346  3DA4
11347  3DA5
11348  3DA6
11349  3DA7
11350  3DA8
11351  3DA9
11352  3DAA
11353  3DAB
11354  3DAC
11355  3DAD
11356  3DAE
11357  3DAF
11358  3DB0
11359  3DB1
11360  3DB2
11361  3DB3
11362  3DB4
11363  3DB5
11364  3DB6
11365  3DB7
11366  3DB8
11367  3DB9
11368  3DBA
11369  3DBB
11370  3DBC
11371  3DBD
11372  3DBE
11373  3DBF
11374  3DC0
11375  3DC1
11376  3DC2
11377  3DC3
11378  3DC4
11379  3DC5
11380  3DC6
11381  3DC7
11382  3DC8
11383  3DC9
11384  3DCA
11385  3DCB
11386  3DCC
11387  3DCD
11388  3DCE
11389  3DCF
11390  3DD0
11391  3DD1
11392  3DD2
11393  3DD3
11394  3DD4
11395  3DD5
11396  3DD6
11397  3DD7
11398  3DD8
11399  3DD9
11400  3DDA
11401  3DDB
11402  3DDC
11403  3DDD
11404  3DDE
11405  3DDF
11406  3DE0
11407  3DE1
11408  3DE2
11409  3DE3
11410  3DE4
11411  3DE5
11412  3DE6
11413  3DE7
11414  3DE8
11415  3DE9
11416  3DEA
11417  3DEB
11418  3DEC
11419  3DED
11420  3DEE
11421  3DEF
11422  3DF0
11423  3DF1
11424  3DF2
11425  3DF3
11426  3DF4
11427  3DF5
11428  3DF6
11429  3DF7
11430  3DF8
11431  3DF9
11432  3DFA
11433  3DFB
11434  3DFC
11435  3DFD
11436  3DFE
11437  3DFF
11438  3E00
11439  3E01
11440  3E02
11441  3E03
11442  3E04
11443  3E05
11444  3E06
11445  3E07
11446  3E08
11447  3E09
11448  3E0A
11449  3E0B
11450  3E0C
11451  3E0D
11452  3E0E
11453  3E0F
11454  3E10
11455  3E11
11456  3E12
11457  3E13
11458  3E14
11459  3E15
11460  3E16
11461  3E17
11462  3E18
11463  3E19
11464  3E1A
11465  3E1B
11466  3E1C
11467  3E1D
11468  3E1E
11469  3E1F
11470  3E20
11471  3E21
11472  3E22
11473  3E23
11474  3E24
11475  3E25
11476  3E26
11477  3E27
11478  3E28
11479  3E29
11480  3E2A
11481  3E2B
11482  3E2C
11483  3E2D
11484  3E2E
11485  3E2F
11486  3E30
11487  3E31
11488  3E32
11489  3E33
11490  3E34
11491  3E35
11492  3E36
11493  3E37
11494  3E38
11495  3E39
11496  3E3A
11497  3E3B
11498  3E3C
11499  3E3D
11500  3E3E
11501  3E3F
11502  3E40
11503  3E41
11504  3E42
11505  3E43
11506  3E44
11507  3E45
11508  3E46
11509  3E47
11510  3E48
11511  3E49
11512  3E4A
11513  3E4B
11514  3E4C
11515  3E4D
11516  3E4E
11517  3E4F
11518  3E50
11519  3E51
11520  3E52
11521  3E53
11522  3E54
11523  3E55
11524  3E56
11525  3E57
11526  3E58
11527  3E59
11528  3E5A
11529  3E5B
11530  3E5C
11531  3E5D
11532  3E5E
11533  3E5F
11534  3E60
11535  3E61
11536  3E62
11537  3E63
11538  3E64
11539  3E65
11540  3E66
11541  3E67
11542  3E68
11543  3E69
11544  3E6A
11545  3E6B
11546  3E6C
11547  3E6D
11548  3E6E
11549  3E6F
11550  3E70
11551  3E71
11552  3E72
11553  3E73
11554  3E74
11555  3E75
11556  3E76
11557  3E77
11558  3E78
11559  3E79
11560  3E7A
11561  3E7B
11562  3E7C
11563  3E7D
11564  3E7E
11565  3E7F
11566  3E80
11567  3E81
11568  3E82
11569  3E83
11570  3E84
11571  3E85
11572  3E86
11573  3E87
11574  3E88
11575  3E89
11576  3E8A
11577  3E8B
11578  3E8C
11579  3E8D
11580  3E8E
11581  3E8F
11582  3E90
11583  3E91
11584  3E92
11585  3E93
11586  3E94
11587  3E95
11588  3E96
11589  3E97
11590  3E98
11591  3E99
11592  3E9A
11593  3E9B
11594  3E9C
11595  3E9D
11596  3E9E
11597  3E9F
11598  3EA0
11599  3EA1
11600  3EA2
11601  3EA3
11602  3EA4
11603  3EA5
11604  3EA6
11605  3EA7
11606  3EA8
11607  3EA9
11608  3EAA
11609  3EAB
11610  3EAC
11611  3EAD
11612  3EAE
11613  3EAF
11614  3EB0
11615  3EB1
11616  3EB2
11617  3EB3
11618  3EB4
11619  3EB5
11620  3EB6
11621  3EB7
11622  3EB8
11623  3EB9
11624  3EBA
11625  3EBB
11626  3EBC
11627  3EBD
11628  3EBE
11629  3EBF
11630  3EC0
11631  3EC1
11632  3EC2
11633  3EC3
11634  3EC4
11635  3EC5
11636  3EC6
11637  3EC7
11638  3EC8
11639  3EC9
11640  3ECA
11641  3ECB
11642  3ECC
11643  3ECD
11644  3ECE
11645  3ECF
11646  3ED0
11647  3ED1
11648  3ED2
11649  3ED3
11650  3ED4
11651  3ED5
11652  3ED6
11653  3ED7
11654  3ED8
11655  3ED9
11656  3EDA
11657  3EDB
11658  3EDC
11659  3EDD
11660  3EDE
11661  3EDF
11662  3EE0
11663  3EE1
11664  3EE2
11665  3EE3
11666  3EE4
11667  3EE5
11668  3EE6
11669  3EE7
11670  3EE8
11671  3EE9
11672  3EEA
11673  3EEB
11674  3EEC
11675  3EED
11676  3EEE
11677  3EEF
11678  3EF0
11679  3EF1
11680  3EF2
11681  3EF3
11682  3EF4
11683  3EF5
11684  3EF6
11685  3EF7
11686  3EF8
11687  3EF9
11688  3EFA
11689  3EFB
11690  3EFC
11691  3EFD
11692  3EFE
11693  3EFF
11694  3F00
11695  3F01
11696  3F02
11697  3F03
11698  3F04
11699  3F05
11700  3F06
11701  3F07
11702  3F08
11703  3F09
11704  3F0A
11705  3F0B
11706  3F0C
11707  3F0D
11708  3F0E
11709  3F0F
11710  3F10
11711  3F11
11712  3F12
11713  3F13
11714  3F14
11715  3F15
11716  3F16
11717  3F17
11718  3F18
11719  3F19
11720  3F1A
11721  3F1B
11722  3F1C
11723  3F1D
11724  3F1E
11725  3F1F
11726  3F20
11727  3F21
11728  3F22
11729  3F23
11730  3F24
11731  3F25
11732  3F26
11733  3F27
11734  3F28
11735  3F29
11736  3F2A
11737  3F2B
11738  3F2C
11739  3F2D
11740  3F2E
11741  3F2F
11742  3F30
11743  3F31
11744  3F32
11745  3F33
11746  3F34
11747  3F35
11748  3F36
11749  3F37
11750  3F38
11751  3F39
11752  3F3A
11753  3F3B
11754  3F3C
11755  3F3D
11756  3F3E
11757  3F3F
11758  3F40
11759  3F41
11760  3F42
11761  3F43
11762  3F44
11763  3F45
11764  3F46
11765  3F47
11766  3F48
11767  3F49
11768  3F4A
11769  3F4B
11770  3F4C
11771  3F4D
11772  3F4E
11773  3F4F
11774  3F50
11775  3F51
11776  3F52
11777  3F53
11778  3F54
11779  3F55
11780  3F56
11781  3F57
11782  3F58
11783  3F59
11784  3F5A
11785  3F5B
11786  3F5C
11787  3F5D
11788  3F5E
11789  3F5F
11790  3F60
11791  3F61
11792  3F62
11793  3F63
11794  3F64
11795  3F65
11796  3F66
11797  3F67
11798  3F68
11799  3F69
11800  3F6A
11801  3F6B
11802  3F6C
11803  3F6D
11804  3F6E
11805  3F6F
11806  3F70
11807  3F71
11808  3F72
11809  3F73
11810  3F74
11811  3F75
11812  3F76
11813  3F77
11814  3F78
11815  3F79
11816  3F7A
11817  3F7B
11818  3F7C
11819  3F7D
11820  3F7E
11821  3F7F
11822  3F80
11823  3F81
11824  3F82
11825  3F83
11826  3F84
11827  3F85
11828  3F86
11829  3F87
11830  3F88
11831  3F89
11832  3F8A
11833  3F8B
11834  3F8C
11835  3F8D
11836  3F8E
11837  3F8F
11838  3F90
11839  3F91
11840  3F92
11841  3F93
11842  3F94
11843  3F95
11844  3F96
11845  3F97
11846  3F98
11847  3F99
11848  3F9A
11849  3F9B
11850  3F9C
11851  3F9D
11852  3F9E
11853  3F9F
11854  3FA0
11855  3FA1
11856  3FA2
11857  3FA3
11858  3FA4
11859  3FA5
11860  3FA6
11861  3FA7
11862  3FA8
11863  3FA9
11864  3FAA
11865  3FAB
11866  3FAC
11867  3FAD
11868  3FAE
11869  3FAF
11870  3FB0
11871  3FB1
11872  3FB2
11873  3FB3
11874  3FB4
11875  3FB5
11876  3FB6
11877  3FB7
11878  3FB8
11879  3FB9
11880  3FBA
11881  3FBB
11882  3FBC
11883  3FBD
11884  3FBE
11885  3FBF
11886  3FC0
11887  3FC1
11888  3FC2
11889  3FC3
11890  3FC4
11891  3FC5
11892  3FC6
11893  3FC7
11894  3FC8
11895  3FC9
11896  3FCA
11897  3FCB
11898  3FCC
11899  3FCD
11900  3FCE
11901  3FCF
11902  3FD0
11903  3FD1
11904  3FD2
11905  3FD3
11906  3FD4
11907  3FD5
11908  3FD6
11909  3FD7
11910  3FD8
11911  3FD9
11912  3FDA
11913  3FDB
11914  3FDC
11915  3FDD
11916  3FDE
11917  3FDF
11918  3FE0
11919  3FE1
11920  3FE2
11921  3FE3
11922  3FE4
11923  3FE5
11924  3FE6
11925  3FE7
11926  3FE8
11927  3FE9
11928  3FEA
11929  3FEB
11930  3FEC
11931  3FED
11932  3FEE
11933  3FEF
11934  3FF0
11935  3FF1
11936  3FF2
11937  3FF3
11938  3FF4
11939  3FF5
11940  3FF6
11941  3FF7
11942  3FF8
11943  3FF9
11944  3FFA
11945  3FFB
11946  3FFC
11947  3FFD
11948  3FFE
11949  3FFF
11950  4000
11951  4001
11952  4002
11953  4003
11954  4004
11955  4005
11956  4006
11957  4007
11958  4008
11959  4009
11960  400A
11961  400B
11962  400C
11963  400D
11964  400E
11965  400F
11966  4010
11967  4011
11968  4012
11969  4013
11970  4014
11971  4015
11972  4016
11973  4017
11974  4018
11975  4019
11976  401A
11977  401B
11978  401C
11979  401D
11980  401E
11981  401F
11982  4020
11983  4021
11984  4022
11985  4023
11986  4024
11987  4025
11988  4026
11989  4027
11990  4028
11991  4029
11992  402A
11993  402B
11994  402C
11995  402D
11996  402E
11997  402F
11998  4030
11999  4031
12000  4032
12001  4033
12002  4034
12003  4035
12004  4036
12005  4037
12006  4038
12007  4039
12008  403A
12009  403B
12010  403C
12011  403D
12012  403E
12013  403F
12014  4040
12015  4041
12016  4042
12017  4043
12018  4044
12019  4045
12020  4046
12021  4047
12022  4048
12023  4049
12024  404A
12025  404B
12026  404C
12027  404D
12028  404E
12029  404F
12030  4050
12031  4051
12032  4052
12033  4053
12034  4054
12035  4055
12036  4056
12037  4057
12038  4058
12039  4059
12040  405A
12041  405B
12042  405C
12043  405D
12044  405E
12045  405F
12046  4060
12047  4061
12048  4062
12049  4063
12050  4064
12051  4065
12052  4066
12053  4067
12054  4068
12055  4069
12056  406A
12057  406B
12058  406C
12059  406D
12060  406E
12061  406F
12062  4070
12063  4071
12064  4072
12065  4073
12066  4074
12067  4075
12068  4076
12069  4077
12070  4078
12071  4079
12072  407A
12073  407B
12074  407C
12075  407D
12076  407E
12077  407F
12078  4080
12079  4081
12080  4082
12081  4083
12082  4084
12083  4085
12084  4086
12085  4087
12086  4088
12087  4089
12088  408A
12089  408B
12090  408C
12091  408D
12092  408E
12093  408F
12094  4090
12095  4091
12096  4092
12097  4093
12098  4094
12099  4095
12100  4096
12101  4097
12102  4098
12103  4099
12104  409A
12105  409B
12106  409C
12107  409D
12108  409E
12109  409F
12110  40A0
12111  40A1
12112  40A2
12113  40A3
12114  40A4
12115  40A5
12116  40A6
12117  40A7
12118  40A8
12119  40A9
12120  40AA
12121  40AB
12122  40AC
12123  40AD
12124  40AE
12125  40AF
12126  40B0
12127  40B1
12128  40B2
12129  40B3
12130  40B4
12131  40B5
12132  40B6
12133  40B7
12134  40B8
12135  40B9
12136  40BA
12137  40BB
12138  40BC
12139  40BD
12140  40BE
12141  40BF
12142  40C0
12143  40C1
12144  40C2
12145  40C3
12146  40C4
12147  40C5
12148  40C6
12149  40C7
12150  40C8
12151  40C9
12152  40CA
12153  40CB
12154  40CC
12155  40CD
12156  40CE
12157  40CF
12158  40D0
12159  40D1
12160  40D2
12161  40D3
12162  40D4
12163  40D5
12164  40D6
12165  40D7
12166  40D8
12167  40D9
12168  40DA
12169  40DB
12170  40DC
12171  40DD
12172  40DE
12173  40DF
12174  40E0
12175  40E1
12176  40E2
12177  40E3
12178  40E4
12179  40E5
12180  40E6
12181  40E7
12182  40E8
12183  40E9
12184  40EA
12185  40EB
12186  40EC
12187  40ED
12188  40EE
12189  40EF
12190  40F0
12191  40F1
12192  40F2
12193  40F3
12194  40F4
12195  40F5
12196  40F6
12197  40F7
12198  40F8
12199  40F9
12200  40FA
12201  40FB
12202  40FC
12203  40FD
12204  40FE
12205  40FF
12206  4100
12207  4101
12208  4102
12209  4103
12210  4104
12211  4105
12212  4106
12213  4107
12214  4108
12215  4109
12216  410A
12217  410B
12218  410C
12219  410D
12220  410E
12221  410F
12222  4110
12223  4111
12224  4112
12225  4113
12226  4114
12227  4115
12228  4116
12229  4117
12230  4118
12231  4119
12232  411A
12233  411B
12234  411C
12235  411D
12236  411E
12237  411F
12238  4120
12239  4121
12240  4122
12241  4123
12242  4124
12243  4125
12244  4126
12245  4127
12246  4128
12247  4129
12248  412A
12249  412B
12250  412C
12251  412D
12252  412E
12253  412F
12254  4130
12255  4131
12256  4132
12257  4133
12258  4134
12259  4135
12260  4136
12261  4137
12262  4138
12263  4139
12264  413A
12265  413B
12266  413C
12267  413D
12268  413E
12269  413F
12270  4140
12271  4141
12272  4142
12273  4143
12274  4144
12275  4145
12276  4146
12277  4147
12278  4148
12279  4149
12280  414A
12281  414B
12282  414C
12283  414D
12284  414E
12285  414F
12286  4150
12287  4151
12288  4152
12289  4153
12290  4154
12291  4155
12292  4156
12293  4157
12294  4158
12295  4159
12296  415A
12297  415B
12298  415C
12299  415D
12300  415E
12301  415F
12302  4160
12303  4161
12304  4162
12305  4163
12306  4164
12307  4165
12308  4166
12309  4167
12310  4168
12311  4169
12312  416A
12313  416B
12314  416C
12315  416D
12316  416E
12317  416F
12318  4170
12319  4171
12320  4172
12321  4173
12322  4174
12323  4175
12324  4176
12325  4177
12326  4178
12327  4179
12328  417A
12329  417B
12330  417C
12331  417D
12332  417E
12333  417F
12334  4180
12335  4181
12336  4182
12337  4183
12338  4184
12339  4185
12340  4186
12341  4187
12342  4188
12343  4189
12344  418A
12345  418B
12346  418C
12347  418D
12348  418E
12349  418F
12350  4190
12351  4191
12352  4192
12353  4193
12354  4194
12355  4195
12356  4196
12357  4197
12358  4198
12359  4199
12360  419A
12361  419B
12362  419C
12363  419D
12364  419E
12365  419F
12366  41A0
12367  41A1
12368  41A2
12369  41A3
12370  41A4
12371  41A5
12372  41A6
12373  41A7
12374  41A8
12375  41A9
12376  41AA
12377  41AB
12378  41AC
12379  41AD
12380  41AE
12381  41AF
12382  41B0
12383  41B1
12384  41B2
12385  41B3
12386  41B4
12387  41B5
12388  41B6
12389  41B7
12390  41B8
12391  41B9
12392  41BA
12393  41BB
12394  41BC
12395  41BD
12396  41BE
12397  41BF
12398  41C0
12399  41C1
12400  41C2
12401  41C3
12402  41C4
12403  41C5
12404  41C6
12405  41C7
12406  41C8
12407  41C9
12408  41CA
12409  41CB
12410  41CC
12411  41CD
12412  41CE
12413  41CF
12414  41D0
12415  41D1
12416  41D2
12417  41D3
12418  41D4
12419  41D5
12420  41D6
12421  41D7
12422  41D8
12423  41D9
12424  41DA
12425  41DB
12426  41DC
12427  41DD
12428  41DE
12429  41DF
12430  41E0
12431  41E1
12432  41E2
12433  41E3
12434  41E4
12435  41E5
12436  41E6
12437  41E7
12438  41E8
12439  41E9
12440  41EA
12441  41EB
12442  41EC
12443  41ED
12444  41EE
12445  41EF
12446  41F0
12447  41F1
12448  41F2
12449  41F3
12450  41F4
12451  41F5
12452  41F6
12453  41F7
12454  41F8
12455  41F9
12456  41FA
12457  41FB
12458  41FC
12459  41FD
12460  41FE
12461  41FF
12462  4200
12463  4201
12464  4202
12465  4203
12466  4204
12467  4205
12468  4206
12469  4207
12470  4208
12471  4209
12472  420A
12473  420B
12474  420C
12475  420D
12476  420E
12477  420F
12478  4210
12479  4211
12480  4212
12481  4213
12482  4214
12483  4215
12484  4216
12485  4217
12486  4218
12487  4219
12488  421A
12489  421B
12490  421C
12491  421D
12492  421E
12493  421F
12494  4220
12495  4221
12496  4222
12497  4223
12498  4224
12499  4225
12500  4226
12501  4227
12502  4228
12503  4229
12504  422A
12505  422B
12506  422C
12507  422D
12508  422E
12509  422F
12510  4230
12511  4231
12512  4232
12513  4233
12514  4234
12515  4235
12516  4236
12517  4237
12518  4238
12519  4239
12520  423A
12521  423B
12522  423C
12523  423D
12524  423E
12525  423F
12526  4240
12527  4241
12528  4242
12529  4243
12530  4244
12531  4245
12532  4246
12533  4247
12534  4248
12535  4249
12536  424A
12537  424B
12538  424C
12539  424D
12540  424E
12541  424F
12542  4250
12543  4251
12544  4252
12545  4253
12546  4254
12547  4255
12548  4256
12549  4257
12550  4258
12551  4259
12552  425A
12553  425B
12554  425C
12555  425D
12556  425E
12557  425F
12558  4260
12559  4261
12560  4262
12561  4263
12562  4264
12563  4265
12564  4266
12565  4267
12566  4268
12567  4269
12568  426A
12569  426B
12570  426C
12571  426D
12572  426E
12573  426F
12574  4270
12575  4271
12576  4272
12577  4273
12578  4274
12579  4275
12580  4276
12581  4277
12582  4278
12583  4279
12584  427A
12585  427B
12586  427C
12587  427D
12588  427E
12589  427F
12590  4280
12591  4281
12592  4282
12593  4283
12594  4284
12595  4285
12596  4286
12597  4287
12598  4288
12599  4289
12600  428A
12601  428B
12602  428C
12603  428D
12604  428E
12605  428F
12606  4290
12607  4291
12608  4292
12609  4293
12610  4294
12611  4295
12612  4296
12613  4297
12614  4298
12615  4299
12616  429A
12617  429B
12618  429C
12619  429D
12620  429E
12621  429F
12622  42A0
12623  42A1
12624  42A2
12625  42A3
12626  42A4
12627  42A5
12628  42A6
12629  42A7
12630  42A8
12631  42A9
12632  42AA
12633  42AB
12634  42AC
12635  42AD
12636  42AE
12637  42AF
12638  42B0
12639  42B1
12640  42B2
12641  42B3
12642  42B4
12643  42B5
12644  42B6
12645  42B7
12646  42B8
12647  42B9
12648  42BA
12649  42BB
12650  42BC
12651  42BD
12652  42BE
12653  42BF
12654  42C0
12655  42C1
12656  42C2
12657  42C3
12658  42C4
12659  42C5
12660  42C6
12661  42C7
12662  42C8
12663  42C9
12664  42CA
12665  42CB
12666  42CC
12667  42CD
12668  42CE
12669  42CF
12670  42D0
12671  42D1
12672  42D2
12673  42D3
12674  42D4
12675  42D5
12676  42D6
12677  42D7
12678  42D8
12679  42D9
12680  42DA
12681  42DB
12682  42DC
12683  42DD
12684  42DE
12685  42DF
12686  42E0
12687  42E1
12688  42E2
12689  42E3
12690  42E4
12691  42E5
12692  42E6
12693  42E7
12694  42E8
12695  42E9
12696  42EA
12697  42EB
12698  42EC
12699  42ED
12700  42EE
12701  42EF
12702  42F0
12703  42F1
12704  42F2
12705  42F3
12706  42F4
12707  42F5
12708  42F6
12709  42F7
12710  42F8
12711  42F9
12712  42FA
12713  42FB
12714  42FC
12715  42FD
12716  42FE
12717  42FF
12718  4300
12719  4301
12720  4302
12721  4303
12722  4304
12723  4305
12724  4306
12725  4307
12726  4308
12727  4309
12728  430A
12729  430B
12730  430C
12731  430D
12732  430E
12733  430F
12734  4310
12735  4311
12736  4312
12737  4313
12738  4314
12739  4315
12740  4316
12741  4317
12742  4318
12743  4319
12744  431A
12745  431B
12746  431C
12747  431D
12748  431E
12749  431F
12750  4320
12751  4321
12752  4322
12753  4323
12754  4324
12755  4325
12756  4326
12757  4327
12758  4328
12759  4329
12760  432A
12761  432B
12762  432C
12763  432D
12764  432E
12765  432F
12766  4330
12767  4331
12768  4332
12769  4333
12770  4334
12771  4335
12772  4336
12773  4337
12774  4338
12775  4339
12776  433A
12777  433B
12778  433C
12779  433D
12780  433E
12781  433F
12782  4340
12783  4341
12784  4342
12785  4343
12786  4344
12787  4345
12788  4346
12789  4347
12790  4348
12791  4349
12792  434A
12793  434B
12794  434C
12795  434D
12796  434E
12797  434F
12798  4350
12799  4351
12800  4352
12801  4353
12802  4354
12803  4355
12804  4356
12805  4357
12806  4358
12807  4359
12808  435A
12809  435B
12810  435C
12811  435D
12812  435E
12813  435F
12814  4360
12815  4361
12816  4362
12817  4363
12818  4364
12819  4365
12820  4366
12821  4367
12822  4368
12823  4369
12824  436A
12825  436B
12826  436C
12827  436D
12828  436E
12829  436F
12830  4370
12831  4371
12832  4372
12833  4373
12834  4374
12835  4375
12836  4376
12837  4377
12838  4378
12839  4379
12840  437A
12841  437B
12842  437C
12843  437D
12844  437E
12845  437F
12846  4380
12847  4381
12848  4382
12849  4383
12850  4384
12851  4385
12852  4386
12853  4387
12854  4388
12855  4389
12856  438A
12857  438B
12858  438C
12859  438D
12860  438E
12861  438F
12862  4390
12863  4391
12864  4392
12865  4393
12866  4394
12867  4395
12868  4396
12869  4397
12870  4398
12871  4399
12872  439A
12873  439B
12874  439C
12875  439D
12876  439E
12877  439F
12878  43A0
12879  43A1
12880  43A2
12881  43A3
12882  43A4
12883  43A5
12884  43A6
12885  43A7
12886  43A8
12887  43A9
12888  43AA
12889  43AB
12890  43AC
12891  43AD
12892  43AE
12893  43AF
12894  43B0
12895  43B1
12896  43B2
12897  43B3
12898  43B4
12899  43B5
12900  43B6
12901  43B7
12902  43B8
12903  43B9
12904  43BA
12905  43BB
12906  43BC
12907  43BD
12908  43BE
12909  43BF
12910  43C0
12911  43C1
12912  43C2
12913  43C3
12914  43C4
12915  43C5
12916  43C6
12917  43C7
12918  43C8
12919  43C9
12920  43CA
12921  43CB
12922  43CC
12923  43CD
12924  43CE
12925  43CF
12926  43D0
12927  43D1
12928  43D2
12929  43D3
12930  43D4
12931  43D5
12932  43D6
12933  43D7
12934  43D8
12935  43D9
12936  43DA
12937  43DB
12938  43DC
12939  43DD
12940  43DE
12941  43DF
12942  43E0
12943  43E1
12944  43E2
12945  43E3
12946  43E4
12947  43E5
12948  43E6
12949  43E7
12950  43E8
12951  43E9
12952  43EA
12953  43EB
12954  43EC
12955  43ED
12956  43EE
12957  43EF
12958  43F0
12959  43F1
12960  43F2
12961  43F3
12962  43F4
12963  43F5
12964  43F6
12965  43F7
12966  43F8
12967  43F9
12968  43FA
12969  43FB
12970  43FC
12971  43FD
12972  43FE
12973  43FF
12974  4400
12975  4401
12976  4402
12977  4403
12978  4404
12979  4405
12980  4406
12981  4407
12982  4408
12983  4409
12984  440A
12985  440B
12986  440C
12987  440D
12988  440E
12989  440F
12990  4410
12991  4411
12992  4412
12993  4413
12994  4414
12995  4415
12996  4416
12997  4417
12998  4418
12999  4419
13000  441A
13001  441B
13002  441C
13003  441D
13004  441E
13005  441F
13006  4420
13007  4421
13008  4422
13009  4423
13010  4424
13011  4425
13012  4426
13013  4427
13014  4428
13015  4429
13016  442A
13017  442B
13018  442C
13019  442D
13020  442E
13021  442F
13022  4430
13023  4431
13024  4432
13025  4433
13026  4434
13027  4435
13028  4436
13029  4437
13030  4438
13031  4439
13032  443A
13033  443B
13034  443C
13035  443D
13036  443E
13037  443F
13038  4440
13039  4441
13040  4442
13041  4443
13042  4444
13043  4445
13044  4446
13045  4447
13046  4448
13047  4449
13048  444A
13049  444B
13050  444C
13051  444D
13052  444E
13053  444F
13054  4450
13055  4451
13056  4452
13057  4453
13058  4454
13059  4455
13060  4456
13061  4457
13062  4458
13063  4459
13064  445A
13065  445B
13066  445C
13067  445D
13068  445E
13069  445F
13070  4460
13071  4461
13072  4462
13073  4463
13074  4464
13075  4465
13076  4466
13077  4467
13078  4468
13079  4469
13080  446A
13081  446B
13082  446C
13083  446D
13084  446E
13085  446F
13086  4470
13087  4471
13088  4472
13089  4473
13090  4474
13091  4475
13092  4476
13093  4477
13094  4478
13095  4479
13096  447A
13097  447B
13098  447C
13099  447D
13100  447E
13101  447F
13102  4480
13103  4481
13104  4482
13105  4483
13106  4484
13107  4485
13108  4486
13109  4487
13110  4488
13111  4489
13112  448A
13113  448B
13114  448C
13115  448D
13116  448E
13117  448F
13118  4490
13119  4491
13120  4492
13121  4493
13122  4494
13123  4495
13124  4496
13125  4497
13126  4498
13127  4499
13128  449A
13129  449B
13130  449C
13131  449D
13132  449E
13133  449F
13134  44A0
13135  44A1
13136  44A2
13137  44A3
13138  44A4
13139  44A5
13140  44A6
13141  44A7
13142  44A8
13143  44A9
13144  44AA
13145  44AB
13146  44AC
13147  44AD
13148  44AE
13149  44AF
13150  44B0
13151  44B1
13152  44B2
13153  44B3
13154  44B4
13155  44B5
13156  44B6
13157  44B7
13158  44B8
13159  44B9
13160  44BA
13161  44BB
13162  44BC
13163  44BD
13164  44BE
13165  44BF
13166  44C0
13167  44C1
13168  44C2
13169  44C3
13170  44C4
13171  44C5
13172  44C6
13173  44C7
13174  44C8
13175  44C9
13176  44CA
13177  44CB
13178  44CC
13179  44CD
13180  44CE
13181  44CF
13182  44D0
13183  44D1
13184  44D2
13185  44D3
13186  44D4
13187  44D5
13188  44D6
13189  44D7
13190  44D8
13191  44D9
13192  44DA
13193  44DB
13194  44DC
13195  44DD
13196  44DE
13197  44DF
13198  44E0
13199  44E1
13200  44E2
13201  44E3
13202  44E4
13203  44E5
13204  44E6
13205  44E7
13206  44E8
13207  44E9
13208  44EA
13209  44EB
13210  44EC
13211  44ED
13212  44EE
13213  44EF
13214  44F0
13215  44F1
13216  44F2
13217  44F3
13218  44F4
13219  44F5
13220  44F6
13221  44F7
13222  44F8
13223  44F9
13224  44FA
13225  44FB
13226  44FC
13227  44FD
13228  44FE
13229  44FF
13230  4500
13231  4501
13232  4502
13233  4503
13234  4504
13235  4505
13236  4506
13237  4507
13238  4508
13239  4509
13240  450A
13241  450B
13242  450C
13243  450D
13244  450E
13245  450F
13246  4510
13247  4511
13248  4512
13249  4513
13250  4514
13251  4515
13252  4516
13253  4517
13254  4518
13255  4519
13256  451A
13257  451B
13258  451C
13259  451D
13260  451E
13261  451F
13262  4520
13263  4521
13264  4522
13265  4523
13266  4524
13267  4525
13268  4526
13269  4527
13270  4528
13271  4529
13272  452A
13273  452B
13274  452C
13275  452D
13276  452E
13277  452F
13278  4530
13279  4531
13280  4532
13281  4533
13282  4534
13283  4535
13284  4536
13285  4537
13286  4538
13287  4539
13288  453A
13289  453B
13290  453C
13291  453D
13292  453E
13293  453F
13294  4540
13295  4541
13296  4542
13297  4543
13298  4544
13299  4545
13300  4546
13301  4547
13302  4548
13303  4549
13304  454A
13305  454B
13306  454C
13307  454D
13308  454E
13309  454F
13310  4550
13311  4551
13312  4552
13313  4553
13314  4554
13315  4555
13316  4556
13317  4557
13318  4558
13319  4559
13320  455A
13321  455B
13322  455C
13323  455D
13324  455E
13325  455F
13326  4560
13327  4561
13328  4562
13329  4563
13330  4564
13331  4565
13332  4566
13333  4567
13334  4568
13335  4569
13336  456A
13337  456B
13338  456C
13339  456D
13340  456E
13341  456F
13342  4570
13343  4571
13344  4572
13345  4573
13346  4574
13347  4575
13348  4576
13349  4577
13350  4578
13351  4579
13352  457A
13353  457B
13354  457C
13355  457D
13356  457E
13357  457F
13358  4580
13359  4581
13360  4582
13361  4583
13362  4584
13363  4585
13364  4586
13365  4587
13366  4588
13367  4589
13368  458A
13369  458B
13370  458C
13371  458D
13372  458E
13373  458F
13374  4590
13375  4591
13376  4592
13377  4593
13378  4594
13379  4595
13380  4596
13381  4597
13382  4598
13383  4599
13384  459A
13385  459B
13386  459C
13387  459D
13388  459E
13389  459F
13390  45A0
13391  45A1
13392  45A2
13393  45A3
13394  45A4
13395  45A5
13396  45A6
13397  45A7
13398  45A8
13399  45A9
13400  45AA
13401  45AB
13402  45AC
13403  45AD
13404  45AE
13405  45AF
13406  45B0
13407  45B1
13408  45B2
13409  45B3
13410  45B4
13411  45B5
13412  45B6
13413  45B7
13414  45B8
13415  45B9
13416  45BA
13417  45BB
13418  45BC
13419  45BD
13420  45BE
13421  45BF
13422  45C0
13423  45C1
13424  45C2
13425  45C3
13426  45C4
13427  45C5
13428  45C6
13429  45C7
13430  45C8
13431  45C9
13432  45CA
13433  45CB
13434  45CC
13435  45CD
13436  45CE
13437  45CF
13438  45D0
13439  45D1
13440  45D2
13441  45D3
13442  45D4
13443  45D5
13444  45D6
13445  45D7
13446  45D8
13447  45D9
13448  45DA
13449  45DB
13450  45DC
13451  45DD
13452  45DE
13453  45DF
13454  45E0
13455  45E1
13456  45E2
13457  45E3
13458  45E4
13459  45E5
13460  45E6
13461  45E7
13462  45E8
13463  45E9
13464  45EA
13465  45EB
13466  45EC
13467  45ED
13468  45EE
13469  45EF
13470  45F0
13471  45F1
13472  45F2
13473  45F3
13474  45F4
13475  45F5
13476  45F6
13477  45F7
13478  45F8
13479  45F9
13480  45FA
13481  45FB
13482  45FC
13483  45FD
13484  45FE
13485  45FF
13486  4600
13487  4601
13488  4602
13489  4603
13490  4604
13491  4605
13492  4606
13493  4607
13494  4608
13495  4609
13496  460A
13497  460B
13498  460C
13499  460D
13500  460E
13501  460F
13502  4610
13503  4611
13504  4612
13505  4613
13506  4614
13507  4615
13508  4616
13509  4617
13510  4618
13511  4619
13512  461A
13513  461B
13514  461C
13515  461D
13516  461E
13517  461F
13518  4620
13519  4621
13520  4622
13521  4623
13522  4624
13523  4625
13524  4626
13525  4627
13526  4628
13527  4629
13528  462A
13529  462B
13530  462C
13531  462D
13532  462E
13533  462F
13534  4630
13535  4631
13536  4632
13537  4633
13538  4634
13539  4635
13540  4636
13541  4637
13542  4638
13543  4639
13544  463A
13545  463B
13546  463C
13547  463D
13548  463E
13549  463F
13550  4640
13551  4641
13552  4642
13553  4643
13554  4644
13555  4645
13556  4646
13557  4647
13558  4648
13559  4649
13560  464A
13561  464B
13562  464C
13563  464D
13564  464E
13565  464F
13566  4650
13567  4651
13568  4652
13569  4653
13570  4654
13571  4655
13572  4656
13573  4657
13574  4658
13575  4659
13576  465A
13577  465B
13578  465C
13579  465D
13580  465E
13581  465F
13582  4660
13583  4661
13584  4662
13585  4663
13586  4664
13587  4665
13588  4666
13589  4667
13590  4668
13591  4669
13592  466A
13593  466B
13594  466C
13595  466D
13596  466E
13597  466F
13598  4670
13599  4671
13600  4672
13601  4673
13602  4674
13603  4675
13604  4676
13605  4677
13606  4678
13607  4679
13608  467A
13609  467B
13610  467C
13611  467D
13612  467E
13613  467F
13614  4680
13615  4681
13616  4682
13617  4683
13618  4684
13619  4685
13620  4686
13621  4687
13622  4688
13623  4689
13624  468A
13625  468B
13626  468C
13627  468D
13628  468E
13629  468F
13630  4690
13631  4691
13632  4692
13633  4693
13634  4694
13635  4695
13636  4696
13637  4697
13638  4698
13639  4699
13640  469A
13641  469B
13642  469C
13643  469D
13644  469E
13645  469F
13646  46A0
13647  46A1
13648  46A2
13649  46A3
13650  46A4
13651  46A5
13652  46A6
13653  46A7
13654  46A8
13655  46A9
13656  46AA
13657  46AB
13658  46AC
13659  46AD
13660  46AE
13661  46AF
13662  46B0
13663  46B1
13664  46B2
13665  46B3
13666  46B4
13667  46B5
13668  46B6
13669  46B7
13670  46B8
13671  46B9
13672  46BA
13673  46BB
13674  46BC
13675  46BD
13676  46BE
13677  46BF
13678  46C0
13679  46C1
13680  46C2
13681  46C3
13682  46C4
13683  46C5
13684  46C6
13685  46C7
13686  46C8
13687  46C9
13688  46CA
13689  46CB
13690  46CC
13691  46CD
13692  46CE
13693  46CF
13694  46D0
13695  46D1
13696  46D2
13697  46D3
13698  46D4
13699  46D5
13700  46D6
13701  46D7
13702  46D8
13703  46D9
13704  46DA
13705  46DB
13706  46DC
13707  46DD
13708  46DE
13709  46DF
13710  46E0
13711  46E1
13712  46E2
13713  46E3
13714  46E4
13715  46E5
13716  46E6
13717  46E7
13718  46E8
13719  46E9
13720  46EA
13721  46EB
13722  46EC
13723  46ED
13724  46EE
13725  46EF
13726  46F0
13727  46F1
13728  46F2
13729  46F3
13730  46F4
13731  46F5
13732  46F6
13733  46F7
13734  46F8
13735  46F9
13736  46FA
13737  46FB
13738  46FC
13739  46FD
13740  46FE
13741  46FF
13742  4700
13743  4701
13744  4702
13745  4703
13746  4704
13747  4705
13748  4706
13749  4707
13750  4708
13751  4709
13752  470A
13753  470B
13754  470C
13755  470D
13756  470E
13757  470F
13758  4710
13759  4711
13760  4712
13761  4713
13762  4714
13763  4715
13764  4716
13765  4717
13766  4718
13767  4719
13768  471A
13769  471B
13770  471C
13771  471D
13772  471E
13773  471F
13774  4720
13775  4721
13776  4722
13777  4723
13778  4724
13779  4725
13780  4726
13781  4727
13782  4728
13783  4729
13784  472A
13785  472B
13786  472C
13787  472D
13788  472E
13789  472F
13790  4730
13791  4731
13792  4732
13793  4733
13794  4734
13795  4735
13796  4736
13797  4737
13798  4738
13799  4739
13800  473A
13801  473B
13802  473C
13803  473D
13804  473E
13805  473F
13806  4740
13807  4741
13808  4742
13809  4743
13810  4744
13811  4745
13812  4746
13813  4747
13814  4748
13815  4749
13816  474A
13817  474B
13818  474C
13819  474D
13820  474E
13821  474F
13822  4750
13823  4751
13824  4752
13825  4753
13826  4754
13827  4755
13828  4756
13829  4757
13830  4758
13831  4759
13832  475A
13833  475B
13834  475C
13835  475D
13836  475E
13837  475F
13838  4760
13839  4761
13840  4762
13841  4763
13842  4764
13843  4765
13844  4766
13845  4767
13846  4768
13847  4769
13848  476A
13849  476B
13850  476C
13851  476D
13852  476E
13853  476F
13854  4770
13855  4771
13856  4772
13857  4773
13858  4774
13859  4775
13860  4776
13861  4777
13862  4778
13863  4779
13864  477A
13865  477B
13866  477C
13867  477D
13868  477E
13869  477F
13870  4780
13871  4781
13872  4782
13873  4783
13874  4784
13875  4785
13876  4786
13877  4787
13878  4788
13879  4789
13880  478A
13881  478B
13882  478C
13883  478D
13884  478E
13885  478F
13886  4790
13887  4791
13888  4792
13889  4793
13890  4794
13891  4795
13892  4796
13893  4797
13894  4798
13895  4799
13896  479A
13897  479B
13898  479C
13899  479D
13900  479E
13901  479F
13902  47A0
13903  47A1
13904  47A2
13905  47A3
13906  47A4
13907  47A5
13908  47A6
13909  47A7
13910  47A8
13911  47A9
13912  47AA
13913  47AB
13914  47AC
13915  47AD
13916  47AE
13917  47AF
13918  47B0
13919  47B1
13920  47B2
13921  47B3
13922  47B4
13923  47B5
13924  47B6
13925  47B7
13926  47B8
13927  47B9
13928  47BA
13929  47BB
13930  47BC
13931  47BD
13932  47BE
13933  47BF
13934  47C0
13935  47C1
13936  47C2
13937  47C3
13938  47C4
13939  47C5
13940  47C6
13941  47C7
13942  47C8
13943  47C9
13944  47CA
13945  47CB
13946  47CC
13947  47CD
13948  47CE
13949  47CF
13950  47D0
13951  47D1
13952  47D2
13953  47D3
13954  47D4
13955  47D5
13956  47D6
13957  47D7
13958  47D8
13959  47D9
13960  47DA
13961  47DB
13962  47DC
13963  47DD
13964  47DE
13965  47DF
13966  47E0
13967  47E1
13968  47E2
13969  47E3
13970  47E4
13971  47E5
13972  47E6
13973  47E7
13974  47E8
13975  47E9
13976  47EA
13977  47EB
13978  47EC
13979  47ED
13980  47EE
13981  47EF
13982  47F0
13983  47F1
13984  47F2
13985  47F3
13986  47F4
13987  47F5
13988  47F6
13989  47F7
13990  47F8
13991  47F9
13992  47FA
13993  47FB
13994  47FC
13995  47FD
13996  47FE
13997  47FF
13998  4800
13999  4801
14000  4802
14001  4803
14002  4804
14003  4805
14004  4806
14005  4807
14006  4808
14007  4809
14008  480A
14009  480B
14010  480C
14011  480D
14012  480E
14013  480F
14014  4810
14015  4811
14016  4812
14017  4813
14018  4814
14019  4815
14020  4816
14021  4817
14022  4818
14023  4819
14024  481A
14025  481B
14026  481C
14027  481D
14028  481E
14029  481F
14030  4820
14031  4821
14032  4822
14033  4823
14034  4824
14035  4825
14036  4826
14037  4827
14038  4828
14039  4829
14040  482A
14041  482B
14042  482C
14043  482D
14044  482E
14045  482F
14046  4830
14047  4831
14048  4832
14049  4833
14050  4834
14051  4835
14052  4836
14053  4837
14054  4838
14055  4839
14056  483A
14057  483B
14058  483C
14059  483D
14060  483E
14061  483F
14062  4840
14063  4841
14064  4842
14065  4843
14066  4844
14067  4845
14068  4846
14069  4847
14070  4848
14071  4849
14072  484A
14073  484B
14074  484C
14075  484D
14076  484E
14077  484F
14078  4850
14079  4851
14080  4852
14081  4853
14082  4854
14083  4855
14084  4856
14085  4857
14086  4858
14087  4859
14088  485A
14089  485B
14090  485C
14091  485D
14092  485E
14093  485F
14094  4860
14095  4861
14096  4862
14097  4863
14098  4864
14099  4865
14100  4866
14101  4867
14102  4868
14103  4869
14104  486A
14105  486B
14106  486C
14107  486D
14108  486E
14109  486F
14110  4870
14111  4871
14112  4872
14113  4873
14114  4874
14115  4875
14116  4876
14117  4877
14118  4878
14119  4879
14120  487A
14121  487B
14122  487C
14123  487D
14124  487E
14125  487F
14126  4880
14127  4881
14128  4882
14129  4883
14130  4884
14131  4885
14132  4886
14133  4887
14134  4888
14135  4889
14136  488A
14137  488B
14138  488C
14139  488D
14140  488E
14141  488F
14142  4890
14143  4891
14144  4892
14145  4893
14146  4894
14147  4895
14148  4896
14149  4897
14150  4898
14151  4899
14152  489A
14153  489B
14154  489C
14155  489D
14156  489E
14157  489F
14158  48A0
14159  48A1
14160  48A2
14161  48A3
14162  48A4
14163  48A5
14164  48A6
14165  48A7
14166  48A8
14167  48A9
14168  48AA
14169  48AB
14170  48AC
14171  48AD
14172  48AE
14173  48AF
14174  48B0
14175  48B1
14176  48B2
14177  48B3
14178  48B4
14179  48B5
14180  48B6
14181  48B7
14182  48B8
14183  48B9
14184  48BA
14185  48BB
14186  48BC
14187  48BD
14188  48BE
14189  48BF
14190  48C0
14191  48C1
14192  48C2
14193  48C3
14194  48C4
14195  48C5
14196  48C6
14197  48C7
14198  48C8
14199  48C9
14200  48CA
14201  48CB
14202  48CC
14203  48CD
14204  48CE
14205  48CF
14206  48D0
14207  48D1
14208  48D2
14209  48D3
14210  48D4
14211  48D5
14212  48D6
14213  48D7
14214  48D8
14215  48D9
14216  48DA
14217  48DB
14218  48DC
14219  48DD
14220  48DE
14221  48DF
14222  48E0
14223  48E1
14224  48E2
14225  48E3
14226  48E4
14227  48E5
14228  48E6
14229  48E7
14230  48E8
14231  48E9
14232  48EA
14233  48EB
14234  48EC
14235  48ED
14236  48EE
14237  48EF
14238  48F0
14239  48F1
14240  48F2
14241  48F3
14242  48F4
14243  48F5
14244  48F6
14245  48F7
14246  48F8
14247  48F9
14248  48FA
14249  48FB
14250  48FC
14251  48FD
14252  48FE
14253  48FF
14254  4900
14255  4901
14256  4902
14257  4903
14258  4904
14259  4905
14260  4906
14261  4907
14262  4908
14263  4909
14264  490A
14265  490B
14266  490C
14267  490D
14268  490E
14269  490F
14270  4910
14271  4911
14272  4912
14273  4913
14274  4914
14275  4915
14276  4916
14277  4917
14278  4918
14279  4919
14280  491A
14281  491B
14282  491C
14283  491D
14284  491E
14285  491F
14286  4920
14287  4921
14288  4922
14289  4923
14290  4924
14291  4925
14292  4926
14293  4927
14294  4928
14295  4929
14296  492A
14297  492B
14298  492C
14299  492D
14300  492E
14301  492F
14302  4930
14303  4931
14304  4932
14305  4933
14306  4934
14307  4935
14308  4936
14309  4937
14310  4938
14311  4939
14312  493A
14313  493B
14314  493C
14315  493D
14316  493E
14317  493F
14318  4940
14319  4941
14320  4942
14321  4943
14322  4944
14323  4945
14324  4946
14325  4947
14326  4948
14327  4949
14328  494A
14329  494B
14330  494C
14331  494D
14332  494E
14333  494F
14334  4950
14335  4951
14336  4952
14337  4953
14338  4954
14339  4955
14340  4956
14341  4957
14342  4958
14343  4959
14344  495A
14345  495B
14346  495C
14347  495D
14348  495E
14349  495F
14350  4960
14351  4961
14352  4962
14353  4963
14354  4964
14355  4965
14356  4966
14357  4967
14358  4968
14359  4969
14360  496A
14361  496B
14362  496C
14363  496D
14364  496E
14365  496F
14366  4970
14367  4971
14368  4972
14369  4973
14370  4974
14371  4975
14372  4976
14373  4977
14374  4978
14375  4979
14376  497A
14377  497B
14378  497C
14379  497D
14380  497E
14381  497F
14382  4980
14383  4981
14384  4982
14385  4983
14386  4984
14387  4985
14388  4986
14389  4987
14390  4988
14391  4989
14392  498A
14393  498B
14394  498C
14395  498D
14396  498E
14397  498F
14398  4990
14399  4991
14400  4992
14401  4993
14402  4994
14403  4995
14404  4996
14405  4997
14406  4998
14407  4999
14408  499A
14409  499B
14410  499C
14411  499D
14412  499E
14413  499F
14414  49A0
14415  49A1
14416  49A2
14417  49A3
14418  49A4
14419  49A5
14420  49A6
14421  49A7
14422  49A8
14423  49A9
14424  49AA
14425  49AB
14426  49AC
14427  49AD
14428  49AE
14429  49AF
14430  49B0
14431  49B1
14432  49B2
14433  49B3
14434  49B4
14435  49B5
14436  49B6
14437  49B7
14438  49B8
14439  49B9
14440  49BA
14441  49BB
14442  49BC
14443  49BD
14444  49BE
14445  49BF
14446  49C0
14447  49C1
14448  49C2
14449  49C3
14450  49C4
14451  49C5
14452  49C6
14453  49C7
14454  49C8
14455  49C9
14456  49CA
14457  49CB
14458  49CC
14459  49CD
14460  49CE
14461  49CF
14462  49D0
14463  49D1
14464  49D2
14465  49D3
14466  49D4
14467  49D5
14468  49D6
14469  49D7
14470  49D8
14471  49D9
14472  49DA
14473  49DB
14474  49DC
14475  49DD
14476  49DE
14477  49DF
14478  49E0
14479  49E1
14480  49E2
14481  49E3
14482  49E4
14483  49E5
14484  49E6
14485  49E7
14486  49E8
14487  49E9
14488  49EA
14489  49EB
14490  49EC
14491  49ED
14492  49EE
14493  49EF
14494  49F0
14495  49F1
14496  49F2
14497  49F3
14498  49F4
14499  49F5
14500  49F6
14501  49F7
14502  49F8
14503  49F9
14504  49FA
14505  49FB
14506  49FC
14507  49FD
14508  49FE
14509  49FF
14510  4A00
14511  4A01
14512  4A02
14513  4A03
14514  4A04
14515  4A05
14516  4A06
14517  4A07
14518  4A08
14519  4A09
14520  4A0A
14521  4A0B
14522  4A0C
14523  4A0D
14524  4A0E
14525  4A0F
14526  4A10
14527  4A11
14528  4A12
14529  4A13
14530  4A14
14531  4A15
14532  4A16
14533  4A17
14534  4A18
14535  4A19
14536  4A1A
14537  4A1B
14538  4A1C
14539  4A1D
14540  4A1E
14541  4A1F
14542  4A20
14543  4A21
14544  4A22
14545  4A23
14546  4A24
14547  4A25
14548  4A26
14549  4A27
14550  4A28
14551  4A29
14552  4A2A
14553  4A2B
14554  4A2C
14555  4A2D
14556  4A2E
14557  4A2F
14558  4A30
14559  4A31
14560  4A32
14561  4A33
14562  4A34
14563  4A35
14564  4A36
14565  4A37
14566  4A38
14567  4A39
14568  4A3A
14569  4A3B
14570  4A3C
14571  4A3D
14572  4A3E
14573  4A3F
14574  4A40
14575  4A41
14576  4A42
14577  4A43
14578  4A44
14579  4A45
14580  4A46
14581  4A47
14582  4A48
14583  4A49
14584  4A4A
14585  4A4B
14586  4A4C
14587  4A4D
14588  4A4E
14589  4A4F
14590  4A50
14591  4A51
14592  4A52
14593  4A53
14594  4A54
14595  4A55
14596  4A56
14597  4A57
14598  4A58
14599  4A59
14600  4A5A
14601  4A5B
14602  4A5C
14603  4A5D
14604  4A5E
14605  4A5F
14606  4A60
14607  4A61
14608  4A62
14609  4A63
14610  4A64
14611  4A65
14612  4A66
14613  4A67
14614  4A68
14615  4A69
14616  4A6A
14617  4A6B
14618  4A6C
14619  4A6D
14620  4A6E
14621  4A6F
14622  4A70
14623  4A71
14624  4A72
14625  4A73
14626  4A74
14627  4A75
14628  4A76
14629  4A77
14630  4A78
14631  4A79
14632  4A7A
14633  4A7B
14634  4A7C
14635  4A7D
14636  4A7E
14637  4A7F
14638  4A80
14639  4A81
14640  4A82
14641  4A83
14642  4A84
14643  4A85
14644  4A86
14645  4A87
14646  4A88
14647  4A89
14648  4A8A
14649  4A8B
14650  4A8C
14651  4A8D
14652  4A8E
14653  4A8F
14654  4A90
14655  4A91
14656  4A92
14657  4A93
14658  4A94
14659  4A95
14660  4A96
14661  4A97
14662  4A98
14663  4A99
14664  4A9A
14665  4A9B
14666  4A9C
14667  4A9D
14668  4A9E
14669  4A9F
14670  4AA0
14671  4AA1
14672  4AA2
14673  4AA3
14674  4AA4
14675  4AA5
14676  4AA6
14677  4AA7
14678  4AA8
14679  4AA9
14680  4AAA
14681  4AAB
14682  4AAC
14683  4AAD
14684  4AAE
14685  4AAF
14686  4AB0
14687  4AB1
14688  4AB2
14689  4AB3
14690  4AB4
14691  4AB5
14692  4AB6
14693  4AB7
14694  4AB8
14695  4AB9
14696  4ABA
14697  4ABB
14698  4ABC
14699  4ABD
14700  4ABE
14701  4ABF
14702  4AC0
14703  4AC1
14704  4AC2
14705  4AC3
14706  4AC4
14707  4AC5
14708  4AC6
14709  4AC7
14710  4AC8
14711  4AC9
14712  4ACA
14713  4ACB
14714  4ACC
14715  4ACD
14716  4ACE
14717  4ACF
14718  4AD0
14719  4AD1
14720  4AD2
14721  4AD3
14722  4AD4
14723  4AD5
14724  4AD6
14725  4AD7
14726  4AD8
14727  4AD9
14728  4ADA
14729  4ADB
14730  4ADC
14731  4ADD
14732  4ADE
14733  4ADF
14734  4AE0
14735  4AE1
14736  4AE2
14737  4AE3
14738  4AE4
14739  4AE5
14740  4AE6
14741  4AE7
14742  4AE8
14743  4AE9
14744  4AEA
14745  4AEB
14746  4AEC
14747  4AED
14748  4AEE
14749  4AEF
14750  4AF0
14751  4AF1
14752  4AF2
14753  4AF3
14754  4AF4
14755  4AF5
14756  4AF6
14757  4AF7
14758  4AF8
14759  4AF9
14760  4AFA
14761  4AFB
14762  4AFC
14763  4AFD
14764  4AFE
14765  4AFF
14766  4B00
14767  4B01
14768  4B02
14769  4B03
14770  4B04
14771  4B05
14772  4B06
14773  4B07
14774  4B08
14775  4B09
14776  4B0A
14777  4B0B
14778  4B0C
14779  4B0D
14780  4B0E
14781  4B0F
14782  4B10
14783  4B11
14784  4B12
14785  4B13
14786  4B14
14787  4B15
14788  4B16
14789  4B17
14790  4B18
14791  4B19
14792  4B1A
14793  4B1B
14794  4B1C
14795  4B1D
14796  4B1E
14797  4B1F
14798  4B20
14799  4B21
14800  4B22
14801  4B23
14802  4B24
14803  4B25
14804  4B26
14805  4B27
14806  4B28
14807  4B29
14808  4B2A
14809  4B2B
14810  4B2C
14811  4B2D
14812  4B2E
14813  4B2F
14814  4B30
14815  4B31
14816  4B32
14817  4B33
14818  4B34
14819  4B35
14820  4B36
14821  4B37
14822  4B38
14823  4B39
14824  4B3A
14825  4B3B
14826  4B3C
14827  4B3D
14828  4B3E
14829  4B3F
14830  4B40
14831  4B41
14832  4B42
14833  4B43
14834  4B44
14835  4B45
14836  4B46
14837  4B47
14838  4B48
14839  4B49
14840  4B4A
14841  4B4B
14842  4B4C
14843  4B4D
14844  4B4E
14845  4B4F
14846  4B50
14847  4B51
14848  4B52
14849  4B53
14850  4B54
14851  4B55
14852  4B56
14853  4B57
14854  4B58
14855  4B59
14856  4B5A
14857  4B5B
14858  4B5C
14859  4B5D
14860  4B5E
14861  4B5F
14862  4B60
14863  4B61
14864  4B62
14865  4B63
14866  4B64
14867  4B65
14868  4B66
14869  4B67
14870  4B68
14871  4B69
14872  4B6A
14873  4B6B
14874  4B6C
14875  4B6D
14876  4B6E
14877  4B6F
14878  4B70
14879  4B71
14880  4B72
14881  4B73
14882  4B74
14883  4B75
14884  4B76
14885  4B77
14886  4B78
14887  4B79
14888  4B7A
14889  4B7B
14890  4B7C
14891  4B7D
14892  4B7E
14893  4B7F
14894  4B80
14895  4B81
14896  4B82
14897  4B83
14898  4B84
14899  4B85
14900  4B86
14901  4B87
14902  4B88
14903  4B89
14904  4B8A
14905  4B8B
14906  4B8C
14907  4B8D
14908  4B8E
14909  4B8F
14910  4B90
14911  4B91
14912  4B92
14913  4B93
14914  4B94
14915  4B95
14916  4B96
14917  4B97
14918  4B98
14919  4B99
14920  4B9A
14921  4B9B
14922  4B9C
14923  4B9D
14924  4B9E
14925  4B9F
14926  4BA0
14927  4BA1
14928  4BA2
14929  4BA3
14930  4BA4
14931  4BA5
14932  4BA6
14933  4BA7
14934  4BA8
14935  4BA9
14936  4BAA
14937  4BAB
14938  4BAC
14939  4BAD
14940  4BAE
14941  4BAF
14942  4BB0
14943  4BB1
14944  4BB2
14945  4BB3
14946  4BB4
14947  4BB5
14948  4BB6
14949  4BB7
14950  4BB8
14951  4BB9
14952  4BBA
14953  4BBB
14954  4BBC
14955  4BBD
14956  4BBE
14957  4BBF
14958  4BC0
14959  4BC1
14960  4BC2
14961  4BC3
14962  4BC4
14963  4BC5
14964  4BC6
14965  4BC7
14966  4BC8
14967  4BC9
14968  4BCA
14969  4BCB
14970  4BCC
14971  4BCD
14972  4BCE
14973  4BCF
14974  4BD0
14975  4BD1
14976  4BD2
14977  4BD3
14978  4BD4
14979  4BD5
14980  4BD6
14981  4BD7
14982  4BD8
14983  4BD9
14984  4BDA
14985  4BDB
14986  4BDC
14987  4BDD
14988  4BDE
14989  4BDF
14990  4BE0
14991  4BE1
14992  4BE2
14993  4BE3
14994  4BE4
14995  4BE5
14996  4BE6
14997  4BE7
14998  4BE8
14999  4BE9
15000  4BEA
15001  4BEB
15002  4BEC
15003  4BED
15004  4BEE
15005  4BEF
15006  4BF0
15007  4BF1
15008  4BF2
15009  4BF3
15010  4BF4
15011  4BF5
15012  4BF6
15013  4BF7
15014  4BF8
15015  4BF9
15016  4BFA
15017  4BFB
15018  4BFC
15019  4BFD
15020  4BFE
15021  4BFF
15022  4C00
15023  4C01
15024  4C02
15025  4C03
15026  4C04
15027  4C05
15028  4C06
15029  4C07
15030  4C08
15031  4C09
15032  4C0A
15033  4C0B
15034  4C0C
15035  4C0D
15036  4C0E
15037  4C0F
15038  4C10
15039  4C11
15040  4C12
15041  4C13
15042  4C14
15043  4C15
15044  4C16
15045  4C17
15046  4C18
15047  4C19
15048  4C1A
15049  4C1B
15050  4C1C
15051  4C1D
15052  4C1E
15053  4C1F
15054  4C20
15055  4C21
15056  4C22
15057  4C23
15058  4C24
15059  4C25
15060  4C26
15061  4C27
15062  4C28
15063  4C29
15064  4C2A
15065  4C2B
15066  4C2C
15067  4C2D
15068  4C2E
15069  4C2F
15070  4C30
15071  4C31
15072  4C32
15073  4C33
15074  4C34
15075  4C35
15076  4C36
15077  4C37
15078  4C38
15079  4C39
15080  4C3A
15081  4C3B
15082  4C3C
15083  4C3D
15084  4C3E
15085  4C3F
15086  4C40
15087  4C41
15088  4C42
15089  4C43
15090  4C44
15091  4C45
15092  4C46
15093  4C47
15094  4C48
15095  4C49
15096  4C4A
15097  4C4B
15098  4C4C
15099  4C4D
15100  4C4E
15101  4C4F
15102  4C50
15103  4C51
15104  4C52
15105  4C53
15106  4C54
15107  4C55
15108  4C56
15109  4C57
15110  4C58
15111  4C59
15112  4C5A
15113  4C5B
15114  4C5C
15115  4C5D
15116  4C5E
15117  4C5F
15118  4C60
15119  4C61
15120  4C62
15121  4C63
15122  4C64
15123  4C65
15124  4C66
15125  4C67
15126  4C68
15127  4C69
15128  4C6A
15129  4C6B
15130  4C6C
15131  4C6D
15132  4C6E
15133  4C6F
15134  4C70
15135  4C71
15136  4C72
15137  4C73
15138  4C74
15139  4C75
15140  4C76
15141  4C77
15142  4C78
15143  4C79
15144  4C7A
15145  4C7B
15146  4C7C
15147  4C7D
15148  4C7E
15149  4C7F
15150  4C80
15151  4C81
15152  4C82
15153  4C83
15154  4C84
15155  4C85
15156  4C86
15157  4C87
15158  4C88
15159  4C89
15160  4C8A
15161  4C8B
15162  4C8C
15163  4C8D
15164  4C8E
15165  4C8F
15166  4C90
15167  4C91
15168  4C92
15169  4C93
15170  4C94
15171  4C95
15172  4C96
15173  4C97
15174  4C98
15175  4C99
15176  4C9A
15177  4C9B
15178  4C9C
15179  4C9D
15180  4C9E
15181  4C9F
15182  4CA0
15183  4CA1
15184  4CA2
15185  4CA3
15186  4CA4
15187  4CA5
15188  4CA6
15189  4CA7
15190  4CA8
15191  4CA9
15192  4CAA
15193  4CAB
15194  4CAC
15195  4CAD
15196  4CAE
15197  4CAF
15198  4CB0
15199  4CB1
15200  4CB2
15201  4CB3
15202  4CB4
15203  4CB5
15204  4CB6
15205  4CB7
15206  4CB8
15207  4CB9
15208  4CBA
15209  4CBB
15210  4CBC
15211  4CBD
15212  4CBE
15213  4CBF
15214  4CC0
15215  4CC1
15216  4CC2
15217  4CC3
15218  4CC4
15219  4CC5
15220  4CC6
15221  4CC7
15222  4CC8
15223  4CC9
15224  4CCA
15225  4CCB
15226  4CCC
15227  4CCD
15228  4CCE
15229  4CCF
15230  4CD0
15231  4CD1
15232  4CD2
15233  4CD3
15234  4CD4
15235  4CD5
15236  4CD6
15237  4CD7
15238  4CD8
15239  4CD9
15240  4CDA
15241  4CDB
15242  4CDC
15243  4CDD
15244  4CDE
15245  4CDF
15246  4CE0
15247  4CE1
15248  4CE2
15249  4CE3
15250  4CE4
15251  4CE5
15252  4CE6
15253  4CE7
15254  4CE8
15255  4CE9
15256  4CEA
15257  4CEB
15258  4CEC
15259  4CED
15260  4CEE
15261  4CEF
15262  4CF0
15263  4CF1
15264  4CF2
15265  4CF3
15266  4CF4
15267  4CF5
15268  4CF6
15269  4CF7
15270  4CF8
15271  4CF9
15272  4CFA
15273  4CFB
15274  4CFC
15275  4CFD
15276  4CFE
15277  4CFF
15278  4D00
15279  4D01
15280  4D02
15281  4D03
15282  4D04
15283  4D05
15284  4D06
15285  4D07
15286  4D08
15287  4D09
15288  4D0A
15289  4D0B
15290  4D0C
15291  4D0D
15292  4D0E
15293  4D0F
15294  4D10
15295  4D11
15296  4D12
15297  4D13
15298  4D14
15299  4D15
15300  4D16
15301  4D17
15302  4D18
15303  4D19
15304  4D1A
15305  4D1B
15306  4D1C
15307  4D1D
15308  4D1E
15309  4D1F
15310  4D20
15311  4D21
15312  4D22
15313  4D23
15314  4D24
15315  4D25
15316  4D26
15317  4D27
15318  4D28
15319  4D29
15320  4D2A
15321  4D2B
15322  4D2C
15323  4D2D
15324  4D2E
15325  4D2F
15326  4D30
15327  4D31
15328  4D32
15329  4D33
15330  4D34
15331  4D35
15332  4D36
15333  4D37
15334  4D38
15335  4D39
15336  4D3A
15337  4D3B
15338  4D3C
15339  4D3D
15340  4D3E
15341  4D3F
15342  4D40
15343  4D41
15344  4D42
15345  4D43
15346  4D44
15347  4D45
15348  4D46
15349  4D47
15350  4D48
15351  4D49
15352  4D4A
15353  4D4B
15354  4D4C
15355  4D4D
15356  4D4E
15357  4D4F
15358  4D50
15359  4D51
15360  4D52
15361  4D53
15362  4D54
15363  4D55
15364  4D56
15365  4D57
15366  4D58
15367  4D59
15368  4D5A
15369  4D5B
15370  4D5C
15371  4D5D
15372  4D5E
15373  4D5F
15374  4D60
15375  4D61
15376  4D62
15377  4D63
15378  4D64
15379  4D65
15380  4D66
15381  4D67
15382  4D68
15383  4D69
15384  4D6A
15385  4D6B
15386  4D6C
15387  4D6D
15388  4D6E
15389  4D6F
15390  4D70
15391  4D71
15392  4D72
15393  4D73
15394  4D74
15395  4D75
15396  4D76
15397  4D77
15398  4D78
15399  4D79
15400  4D7A
15401  4D7B
15402  4D7C
15403  4D7D
15404  4D7E
15405  4D7F
15406  4D80
15407  4D81
15408  4D82
15409  4D83
15410  4D84
15411  4D85
15412  4D86
15413  4D87
15414  4D88
15415  4D89
15416  4D8A
15417  4D8B
15418  4D8C
15419  4D8D
15420  4D8E
15421  4D8F
15422  4D90
15423  4D91
15424  4D92
15425  4D93
15426  4D94
15427  4D95
15428  4D96
15429  4D97
15430  4D98
15431  4D99
15432  4D9A
15433  4D9B
15434  4D9C
15435  4D9D
15436  4D9E
15437  4D9F
15438  4DA0
15439  4DA1
15440  4DA2
15441  4DA3
15442  4DA4
15443  4DA5
15444  4DA6
15445  4DA7
15446  4DA8
15447  4DA9
15448  4DAA
15449  4DAB
15450  4DAC
15451  4DAD
15452  4DAE
15453  4DAF
15454  4DB0
15455  4DB1
15456  4DB2
15457  4DB3
15458  4DB4
15459  4DB5
15460  4DB6
15461  4DB7
15462  4DB8
15463  4DB9
15464  4DBA
15465  4DBB
15466  4DBC
15467  4DBD
15468  4DBE
15469  4DBF
15470  4DC0
15471  4DC1
15472  4DC2
15473  4DC3
15474  4DC4
15475  4DC5
15476  4DC6
15477  4DC7
15478  4DC8
15479  4DC9
15480  4DCA
15481  4DCB
15482  4DCC
15483  4DCD
15484  4DCE
15485  4DCF
15486  4DD0
15487  4DD1
15488  4DD2
15489  4DD3
15490  4DD4
15491  4DD5
15492  4DD6
15493  4DD7
15494  4DD8
15495  4DD9
15496  4DDA
15497  4DDB
15498  4DDC
15499  4DDD
15500  4DDE
15501  4DDF
15502  4DE0
15503  4DE1
15504  4DE2
15505  4DE3
15506  4DE4
15507  4DE5
15508  4DE6
15509  4DE7
15510  4DE8
15511  4DE9
15512  4DEA
15513  4DEB
15514  4DEC
15515  4DED
15516  4DEE
15517  4DEF
15518  4DF0
15519  4DF1
15520  4DF2
15521  4DF3
15522  4DF4
15523  4DF5
15524  4DF6
15525  4DF7
15526  4DF8
15527  4DF9
15528  4DFA
15529  4DFB
15530  4DFC
15531  4DFD
15532  4DFE
15533  4DFF
15534  4E00
15535  4E01
15536  4E02
15537  4E03
15538  4E04
15539  4E05
15540  4E06
15541  4E07
15542  4E08
15543  4E09
15544  4E0A
15545  4E0B
15546  4E0C
15547  4E0D
15548  4E0E
15549  4E0F
15550  4E10
15551  4E11
15552  4E12
15553  4E13
15554  4E14
15555  4E15
15556  4E16
15557  4E17
15558  4E18
15559  4E19
15560  4E1A
15561  4E1B
15562  4E1C
15563  4E1D
15564  4E1E
15565  4E1F
15566  4E20
15567  4E21
15568  4E22
15569  4E23
15570  4E24
15571  4E25
15572  4E26
15573  4E27
15574  4E28
15575  4E29
15576  4E2A
15577  4E2B
15578  4E2C
15579  4E2D
15580  4E2E
15581  4E2F
15582  4E30
15583  4E31
15584  4E32
15585  4E33
15586  4E34
15587  4E35
15588  4E36
15589  4E37
15590  4E38
15591  4E39
15592  4E3A
15593  4E3B
15594  4E3C
15595  4E3D
15596  4E3E
15597  4E3F
15598  4E40
15599  4E41
15600  4E42
15601  4E43
15602  4E44
15603  4E45
015604  000566        
015605  000567  var hFonts[54] ;
015606  000568  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15607  2792
15608  2793
15609  2794
15610  2795
15611  2796
15612  2797
15613  2798
15614  2799
15615  279A
15616  279B
15617  279C
15618  279D
15619  279E
15620  279F
15621  27A0
15622  27A1
15623  27A2
15624  27A3
15625  27A4
15626  27A5
15627  27A6
15628  27A7
15629  27A8
15630  27A9
15631  27AA
15632  27AB
15633  27AC
15634  27AD
15635  27AE
15636  27AF
15637  27B0
15638  27B1
15639  27B2
15640  27B3
15641  27B4
15642  27B5
15643  27B6
15644  27B7
15645  27B8
15646  27B9
15647  27BA
15648  27BB
15649  27BC
15650  27BD
15651  27BE
15652  27BF
15653  27C0
15654  27C1
15655  27C2
15656  27C3
15657  27C4
15658  27C5
15659  27C6
15660  27C7
15661  27C8
15662  27C9
15663  27CA
15664  27CB
15665  27CC
15666  27CD
15667  27CE
15668  27CF
15669  27D0
15670  27D1
15671  27D2
15672  27D3
15673  27D4
15674  27D5
15675  27D6
15676  27D7
15677  27D8
15678  27D9
15679  27DA
15680  27DB
15681  27DC
15682  27DD
15683  27DE
15684  27DF
15685  27E0
15686  27E1
15687  27E2
15688  27E3
15689  27E4
15690  27E5
15691  27E6
15692  27E7
15693  27E8
15694  27E9
15695  27EA
15696  27EB
15697  27EC
15698  27ED
15699  27EE
15700  27EF
15701  27F0
15702  27F1
15703  27F2
15704  27F3
15705  27F4
15706  27F5
15707  27F6
15708  27F7
15709  27F8
15710  27F9
15711  27FA
15712  27FB
15713  27FC
15714  27FD
015715  000569  // Start P2.inc
015716  000570  var oObjects[MaxTotObjects+1] ;                 // address of objects
015717  000571  var CurrentForm ;
015718  000572  var TouchXpos, TouchYpos ;
015719  000573  var InputType, TouchState, CurInputData, pInputIndex ;
015720  000574  var comRX[40], cmd[CMDLenMAX] ;
015721  000575        
015722  000576  var InputCS, OutputCS ;
015723  000577        
015724  000578        
015725  000579        
015726  000580  func seroutCS(var op)
015727  000581      serout(op) ;
015728  000582      OutputCS ^= op ;
015729  000583  endfunc
015730  000584        
015731  000585  func nak0()
015732  000586      serout(NAK) ;
015733  000587      InputCS := 0 ;
015734  000588  endfunc
015735  000589        
015736  000590  func seroutOcs()
015737  000591      serout(OutputCS) ;
015738  000592      OutputCS := 0 ;
015739  000593  endfunc
015740  000594        
015741  000595  func SendReport(var id, var objt, var objn, var val)
015742  000596      seroutCS(id) ;
015743  000597      seroutCS(objt) ;
015744  000598      seroutCS(objn) ;
015745  000599      seroutCS(val >> 8) ; // first 8 bits
015746  000600      seroutCS(val) ;
015747  000601      seroutOcs() ;
015748  000602  endfunc
015749  000603        
015750  000604        
015751  000605  func ReadObject(var ObjectType, var ObjectIdx)
015752  000606      var j, k, Objects ;
015753  000607      Objects := *(oObjects+ObjectType) ;
015754  000608        
015755  000609      j := 2 + ObjectIdx * 2 + Objects ;
015756  000610       if (ObjectType == tForm)
015757  000611          k := CurrentForm ;
015758  000612      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015759  000613          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015760  000614      else if (ObjectType == tStrings)
015761  000615          k := stringsCV[ObjectIdx];
015762  000616          else
015763  000617          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015764  000618          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015765  000619                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015766  000620      endif
015767  000621      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015768  000622  endfunc
015769  000623        
015770  000624        
015771  000625  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015772  000626      var i, j, k, Objects ;
015773  000627      ObjectType &= 0x3f ;
015774  000628      if (ObjectType == tForm)
015775  000629          ActivateForm(ObjectIdx) ;
015776  000630      else
015777  000631          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015778  000632          i := *(Objects) ;
015779  000633          switch (ObjectType)
015780  000634              case tWinButton :
015781  000635                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015782  000636                  break ;
015783  000637              case tUserButton :
015784  000638                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015785  000639                  break ;
015786  000640              default : j := -1 ;
015787  000641          endswitch
015788  000642          if (j != -1)
015789  000643              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015790  000644              NewVal := NewVal << 1 ;
015791  000645              if (OVF())      // button group index change
015792  000646                  if (*(j+InputData+Ofs_IPD_P1))
015793  000647                      k &= 1 ;    // mask off old group index for momentary
015794  000648                  else
015795  000649                      k &= 3 ;    // mask off old group index for toggle
015796  000650                  endif
015797  000651              else            // normal set
015798  000652                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015799  000653                  k &= 0xfffc ;    // retain only group index for state set
015800  000654              endif
015801  000655              NewVal |= k ;
015802  000656          endif
015803  000657           if (ObjectType == tLeddigits)
015804  000658              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015805  000659              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015806  000660          else if (ObjectType == tStrings)
015807  000661              PrintStrings(ObjectIdx, NewVal, 0);
015808  000662          else
015809  000663              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015810  000664              img_Show(hndl, i) ; // will only display if form is current
015811  000665          endif
015812  000666      endif
015813  000667  endfunc
015814  000668        
015815  000669  func TurnOffButtons(var group)
015816  000670      var j, k, l;
015817  000671      for (j := 0; j < nInputs; j++)
015818  000672          k := j*IPDatasize ;
015819  000673          if (*(InputData+k+Ofs_IPD_P2) == group)
015820  000674              l := -1 ;
015821  000675               if (*(InputData+k) == tWinButton)
015822  000676                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015823  000677                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015824  000678                  img_Show(hndl, l);      // only shows on current form
015825  000679              else if (*(InputData+k) == tUserButton)
015826  000680                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015827  000681                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015828  000682                  img_Show(hndl, l);      // only shows on current form
015829  000683              endif
015830  000684          endif
015831  000685      next
015832  000686  endfunc
015833  000687        
015834  000688        
015835  000689  // WARNING, this code will crash if newval exceeds maximum displayable number
015836  000690  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015837  000691      var i, j, k, l, lb, newval ;
015838  000692      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015839  000693      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015840  000694      i := -1 ;
015841  000695      j := *(typeptr) ;
015842  000696      repeat
015843  000697          typeptr += 2 ;
015844  000698          i++ ;
015845  000699          until (*(typeptr) == imgidx);
015846  000700      j := setptr + i*10 ;
015847  000701        
015848  000702      imgidx++ ;
015849  000703      l := 1 ;
015850  000704      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015851  000705          l *= 10 ;
015852  000706      next
015853  000707      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015854  000708      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015855  000709          k := newval / l ;
015856  000710          newval -= k * l ;
015857  000711          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015858  000712              if (k == 0)
015859  000713                  k := 10 ;
015860  000714              else
015861  000715                  lb := 0 ;
015862  000716              endif
015863  000717          endif
015864  000718          l /= 10 ;
015865  000719          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015866  000720          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015867  000721          img_Show(hndl, imgidx);
015868  000722      next
015869  000723  endfunc
015870  000724        
015871  000725        
015872  000726  func ActivateForm(var newform)
015873  000727      var i, j, *p ;
015874  000728        
015875  000729      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015876  000730          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015877  000731              if (img_GetWord(hndl, i, IMAGE_TAG))
015878  000732                  img_Disable(hndl,i) ;
015879  000733              endif
015880  000734          next
015881  000735      endif
015882  000736      CurrentForm := newform ;
015883  000737      // display newform image or clear to image color
015884  000738      if (FormBGcolors[CurrentForm] != ColorBGimage)
015885  000739          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015886  000740          gfx_Cls() ;
015887  000741          DoGFXObjects() ;                                    // display GFX 'widgets'
015888  000742      endif
015889  000743        
015890  000744      // enable inputs
015891  000745      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015892  000746          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015893  000747          if (j)
015894  000748              j-- ;
015895  000749              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015896  000750              //if (j != tKeyboard)
015897  000751              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015898  000752                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015899  000753              endif
015900  000754              img_Show(hndl,i) ; // show initialy, if required
015901  000755              if (j == tForm)
015902  000756                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015903  000757              else if (j == tLeddigits)
015904  000758                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015905  000759              endif
015906  000760          endif
015907  000761      next
015908  000762      for (i := 0; i < nStrings; i++)
015909  000763          if (stringsCV[i] != -1)
015910  000764              WriteObject(tStrings, i, stringsCV[i]) ;
015911  000765          endif
015912  000766      next
015913  000767        
015914  000768  endfunc
015915  000769        
015916  000770  func UpdateObjects(var newval)
015917  000771      var IPidx, otherOBJ ;
015918  000772      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015919  000773        
015920  000774          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015921  000775              img_Show(hndl, *(pInputIndex));      // only shows on current form
015922  000776          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015923  000777              if (*(CurInputData+Ofs_IPD_P1))
015924  000778                  newval &= 1;
015925  000779              else
015926  000780                  newval &= 3;
015927  000781              endif
015928  000782              if (newval > 1) newval := 1;
015929  000783          endif
015930  000784          IPidx := *(CurInputData+TouchState) ;
015931  000785          while(IPidx != 0)
015932  000786              otherOBJ := IPidx + InputData;
015933  000787              if (*(otherOBJ) == OT_REPORT)
015934  000788          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015935  000789              else if (*(otherOBJ) == OT_MAGIC)
015936  000790                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015937  000791                  IPidx(newval) ;
015938  000792              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015939  000793                  if (*(otherOBJ) == OT_ACTIVATE)
015940  000794                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015941  000795                      InputType := tForm ;
015942  000796                  else if (*(otherOBJ) == OT_SETCONST)
015943  000797                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015944  000798                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015945  000799                  else if (*(otherOBJ) == OT_SETANOTHER)
015946  000800                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015947  000801                  else if (*(otherOBJ) == OT_PREVFRAME)
015948  000802                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015949  000803                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015950  000804                      endif
015951  000805                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015952  000806                  else if (*(otherOBJ) == OT_NEXTFRAME)
015953  000807                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015954  000808                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015955  000809                      endif
015956  000810                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015957  000811                  else if (*(otherOBJ) == OT_PREVSTRING)
015958  000812                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015959  000813                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015960  000814                      endif
015961  000815                  else if (*(otherOBJ) == OT_NEXTSTRING)
015962  000816                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015963  000817                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015964  000818                      endif
015965  000819                  endif
015966  000820              endif
015967  000821              IPidx := *(otherOBJ+TouchState) ;
015968  000822          wend
015969  000823      endif
015970  000824  endfunc
015971  000825        
015972  000826  // End P2.inc
015973  000827  func DoGFXObjects()
015974  000828  endfunc
015975  000829        
015976  000830  // Start P3.inc
015977  000831  func main()
015978  000832      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015979  000833        
015980  000834      putstr("Mounting...\n");
015981  000835      if (!(file_Mount()))
015982  000836          while(!(file_Mount()))
015983  000837              putstr("Drive not mounted...");
015984  000838              pause(200);
015985  000839              gfx_Cls();
015986  000840              pause(200);
015987  000841          wend
015988  000842      endif
015989  000843  //    gfx_MoveTo(0, 0);
015990  000844  //    print(mem_Heap()," ") ;
015991  000845  //    gfx_TransparentColour(0x0020);
015992  000846  //    gfx_Transparency(ON);
015993  000847        
015994  000848      gfx_ScreenMode(LANDSCAPE) ;
015995  000849        
015996  000850      // open image control
015997  000851      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015998  000852        
015999  000853      // init 'constants'
016000  000854  // End P3.inc
016001  000855        
016002  000856      oObjects[tDipSwitch] := oDipSwitchs ;
016003  000857      oObjects[tKnob] := oKnobs ;
016004  000858      oObjects[tRockerSwitch] := oRockerSwitchs ;
016005  000859      oObjects[tRotarySwitch] := oRotarySwitchs ;
016006  000860      oObjects[tGSlider] := oGSliders ;
016007  000861      oObjects[tTrackbar] := oTrackbars ;
016008  000862      oObjects[tWinButton] := oWinButtons ;
016009  000863      oObjects[tAngularmeter] := oAngularmeters ;
016010  000864      oObjects[tCoolgauge] := oCoolgauges ;
016011  000865      oObjects[tCustomdigits] := oCustomdigitss ;
016012  000866      oObjects[tForm] := oForms ;
016013  000867      oObjects[tGauge] := oGauges ;
016014  000868      oObjects[tImage] := oImages ;
016015  000869      oObjects[tKeyboard] := oKeyboards ;
016016  000870      oObjects[tLed] := oLeds ;
016017  000871      oObjects[tLeddigits] := oLeddigitss ;
016018  000872      oObjects[tMeter] := oMeters ;
016019  000873      oObjects[tStrings] := oStringss ;
016020  000874      oObjects[tThermometer] := oThermometers ;
016021  000875      oObjects[tUserled] := oUserleds ;
016022  000876      oObjects[tVideo] := oVideos ;
016023  000877      oObjects[tStaticText] := oStaticTexts ;
016024  000878      oObjects[tSounds] := oSoundss ;
016025  000879      oObjects[tTimer] := oTimers ;
016026  000880      oObjects[tSpectrum] := oSpectrums ;
016027  000881      oObjects[tTank] := oTanks ;
016028  000882      oObjects[tUserImages] := oUserImagess ;
016029  000883      oObjects[tPinOutput] := oPinOutputs ;
016030  000884      oObjects[tPinInput] := oPinInputs ;
016031  000885      oObjects[t4Dbutton] := o4Dbuttons ;
016032  000886      oObjects[tAniButton] := oAniButtons ;
016033  000887      oObjects[tColorPicker] := oColorPickers ;
016034  000888      oObjects[tUserButton] := oUserButtons ;
016035  000889      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
016036  000890      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
016037  000891      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
016038  000892      hFonts[3] := FONT3 ;
016039  000893      hFonts[4] := FONT3 ;
016040  000894      hFonts[5] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
016041  000895      hFonts[6] := FONT3 ;
016042  000896      hFonts[10] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
016043  000897      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
016044  000898      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
016045  000899      hFonts[13] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
016046  000900      hFonts[14] := FONT3 ;
016047  000901      hFonts[15] := FONT3 ;
016048  000902      hFonts[16] := FONT3 ;
016049  000903      hFonts[17] := file_LoadImageControl("RepRap_T.d0D", "RepRap_T.g0D", 1)  ;
016050  000904      hFonts[24] := FONT3 ;
016051  000905      hFonts[25] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
016052  000906      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
016053  000907      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
016054  000908      hFonts[50] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
016055  000909      hFonts[51] := FONT3 ;
016056  000910      hFonts[52] := FONT3 ;
016057  000911      hFonts[7] := hFonts[37] ;
016058  000912      hFonts[8] := hFonts[37] ;
016059  000913      hFonts[9] := hFonts[0] ;
016060  000914      hFonts[19] := hFonts[11] ;
016061  000915      hFonts[26] := hFonts[25] ;
016062  000916      hFonts[27] := hFonts[25] ;
016063  000917      hFonts[29] := hFonts[11] ;
016064  000918      hFonts[30] := hFonts[11] ;
016065  000919      hFonts[32] := hFonts[31] ;
016066  000920      hFonts[34] := hFonts[0] ;
016067  000921      hFonts[36] := hFonts[0] ;
016068  000922      hFonts[38] := hFonts[37] ;
016069  000923      hFonts[39] := hFonts[37] ;
016070  000924      hFonts[40] := hFonts[0] ;
016071  000925      hFonts[41] := hFonts[0] ;
016072  000926      hFonts[42] := hFonts[0] ;
016073  000927      hFonts[43] := hFonts[37] ;
016074  000928      hFonts[44] := hFonts[37] ;
016075  000929      hFonts[45] := hFonts[37] ;
016076  000930      hFonts[46] := hFonts[13] ;
016077  000931      hFonts[47] := hFonts[13] ;
016078  000932      hFonts[48] := hFonts[13] ;
016079  000933      hFonts[53] := hFonts[50] ;
016080  000934      WriteObject(tUserButton, 155, 1) ;
016081  000935  // Start P4.inc
016082  000936      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
016083  000937      // init comms
016084  000938      com_Init(comRX,CMDLenMAX,0);
016085  000939      com_SetBaud(COM0,19886);
016086  000940      com_TXbuffer(comTX, 100, 0);
016087  000941      snd_BufSize(2) ;
016088  000942      // tag 'real' objects
016089  000943      for (i := 0; i <= MaxTotObjects; i++)
016090  000944          if (   (i != tSounds)
016091  000945              && (i != tTimer)
016092  000946              && (i != tPinOutput)
016093  000947              && (i != tPinInput) )
016094  000948              TouchXpos := oObjects[i] ;
016095  000949              TouchYpos := *(TouchXpos) ;
016096  000950              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
016097  000951                  oldn := *(TouchXpos+ImageTouched*2) ;
016098  000952                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
016099  000953                  if (oldn != -1)
016100  000954                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
016101  000955                      img_Disable(hndl, oldn) ;
016102  000956                  endif
016103  000957              next
016104  000958          endif
016105  000959      next
016106  000960        
016107  000961      // display initial form
016108  000962      CurrentForm := -1 ;
016109  000963      ActivateForm(0) ; // need to change this according to first actual form
016110  000964        
016111  000965  // End P4.inc
016112  000966  // Start P5.inc
016113  000967      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016114  000968      oldn := -1 ;
016115  000969      repeat
016116  000970        
016117  000971          // check comms for command, how to NAK invalid command
016118  000972          if (com_Count() != 0)
016119  000973              i := serin() ;
016120  000974              InputCS ^= i ;               // update checksum
016121  000975              if (   (cmdi > 2)
016122  000976                  && (cmd[0] == WRITE_STRU) )
016123  000977                  j := (cmdi-1) >> 1 + 2 ;
016124  000978                  if (j == CMDLenMAX)    // max length exceeded
016125  000979                      nak0() ;
016126  000980                      cmdi := -1 ;
016127  000981                  else if (cmdi & 1)
016128  000982                      cmd[j] := i ;
016129  000983                      if (cmd[2] == 0)    // if string complete
016130  000984                          if (InputCS)
016131  000985                              nak0() ;
016132  000986                          else
016133  000987                              if (cmd[0] == WRITE_STRU)
016134  000988                              cmd[j] := 0 ;                     // terminate it
016135  000989                              PrintStrings(cmd[1], &cmd[3], 1) ;
016136  000990                              serout(ACK) ;
016137  000991                              else
016138  000992                              endif
016139  000993                          endif
016140  000994                          cmdi := -1 ;
016141  000995                      endif
016142  000996                  else
016143  000997                      cmd[j] := cmd[j] << 8 + i ;
016144  000998                      cmd[2]-- ;          // dec length
016145  000999                  endif
016146  001000                  cmdi++ ;
016147  001001              else // not unicode string
016148  001002                  cmd[cmdi++] := i ;
016149  001003                   if (cmd[0] == WRITE_STR)                  // Ansi String
016150  001004                      if (cmdi == CMDLenMAX)      // max length exceeded
016151  001005                          nak0() ;
016152  001006                          cmdi := 0 ;
016153  001007                      else if (cmdi > 2)
016154  001008                          if (cmd[2] == -1)
016155  001009                              if (InputCS)
016156  001010                                  nak0() ;
016157  001011                              else
016158  001012                                  if (cmd[0] == WRITE_STR)
016159  001013                                  cmd[cmdi-1] := 0 ;                     // terminate it
016160  001014                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016161  001015                                  serout(ACK) ;
016162  001016                                  else
016163  001017                                  endif
016164  001018                              endif
016165  001019                              cmdi := 0 ;
016166  001020                          else
016167  001021                              cmd[2]-- ;          // dec length
016168  001022                          endif
016169  001023                      endif
016170  001024                  else if (   (cmd[0] == READ_OBJ)
016171  001025                           && (cmdi == 4)         )
016172  001026                      if (InputCS)
016173  001027                          nak0() ;
016174  001028                      else
016175  001029                          ReadObject(cmd[1], cmd[2]) ;
016176  001030                      endif
016177  001031                      cmdi := 0 ;
016178  001032                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016179  001033                           && (cmdi == 6)          )
016180  001034                      if (InputCS)
016181  001035                          nak0() ;
016182  001036                      else
016183  001037                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016184  001038                          serout(ACK) ;
016185  001039                      endif
016186  001040                      cmdi := 0 ;
016187  001041                  else if (   (cmd[0] == WRITE_CONTRAST)
016188  001042                           && (cmdi == 3)         )
016189  001043                      if (InputCS)
016190  001044                          nak0() ;
016191  001045                      else
016192  001046                          gfx_Contrast(cmd[1]) ;
016193  001047                          serout(ACK) ;
016194  001048                      endif
016195  001049                      cmdi := 0 ;
016196  001050                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016197  001051                      nak0() ;
016198  001052                      cmdi := 0 ;
016199  001053                  endif
016200  001054              endif   // not unicode string
016201  001055          endif   // a character is available
016202  001056        
016203  001057        
016204  001058      // touch code processing
016205  001059        
016206  001060          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016207  001061          ImageTouched := img_Touched(hndl,-1) ;
016208  001062          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016209  001063              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016210  001064                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016211  001065              endif
016212  001066              if (TouchStatus != TOUCH_RELEASED)        // if not released
016213  001067                  if (oldn != -1)
016214  001068                      ImageTouched := oldn ;
016215  001069                  else
016216  001070                      if (oldn != ImageTouched)
016217  001071                  oldn := ImageTouched ;
016218  001072                          TouchStatus := TOUCH_PRESSED ;
016219  001073                      endif
016220  001074                  endif
016221  001075                  TouchXpos  := touch_Get(TOUCH_GETX);
016222  001076                  TouchYpos  := touch_Get(TOUCH_GETY);
016223  001077                  TouchState := Ofs_IPD_DOWN ;
016224  001078              else
016225  001079                  ImageTouched := oldn ;                     // simulate release of what we touched
016226  001080                  oldn := -1 ;                    // prevent double release
016227  001081                  TouchState := Ofs_IPD_RELEASE ;
016228  001082              endif
016229  001083              if (ImageTouched != -1)
016230  001084                          CurInputData := InputControls[ImageTouched] + InputData;
016231  001085                          InputType := *(CurInputData) ;
016232  001086                          i := InputType ;
016233  001087                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016234  001088                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016235  001089              endif
016236  001090          endif
016237  001091   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016238  001092        
016239  001093          sys_EventsResume() ;
016240  001094      forever
016241  001095        
016242  001096  cDipswitch:
016243  001097        
016244  001098  cKnob:
016245  001099        
016246  001100  cRockerswitch:
016247  001101        
016248  001102  cRotaryswitch:
016249  001103        
016250  001104  cSlider:
016251  001105  cTrackbar:
016252  001106        
016253  001107  c4DButton:
016254  001108  cUserButton:
016255  001109      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016256  001110      goto gbutton ;
016257  001111  cWinbutton:
016258  001112      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016259  001113  gbutton:
016260  001114      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016261  001115      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016262  001116          if (TouchStatus == TOUCH_RELEASED)
016263  001117              i &= 0xfffe ;
016264  001118              TouchState == Ofs_IPD_DOWN ;
016265  001119          else
016266  001120              i |= 1 ;
016267  001121              TouchState == Ofs_IPD_RELEASE ;
016268  001122          endif
016269  001123      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016270  001124          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016271  001125              if ((i & 3) == 3)
016272  001126                  i &= 0xfffc ;
016273  001127              else
016274  001128                  i++ ;
016275  001129              endif
016276  001130          else
016277  001131              i |= 1 ;                                      // make down regardless of current state
016278  001132          endif
016279  001133      else                        // group action, up all other buttons on touch press, reports 0 for button down
016280  001134          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016281  001135              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016282  001136          endif
016283  001137          i := (i & 0xfffc) | 2 ;
016284  001138      endif
016285  001139        
016286  001140      UpdateObjects(i) ;
016287  001141  endsub ;
016288  001142        
016289  001143  cAniButton:
016290  001144        
016291  001145  cColorPicker:
016292  001146        
016293  001147  endfunc
016294  001148  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 791 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 727 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13243  0x000033bb (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 117)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 12)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12611  0x00003143 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 42)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 27)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9899  0x000026abFormBGcolors                        9899  0x000026ab (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          97  0x00000061FormEndIndex                          97  0x00000061 (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 207)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 2  0x00000002 (const ??? 0)  (usage 3)
iForm10                              110  0x0000006e (const ??? 0)  (usage 3)
iForm11                               97  0x00000061 (const ??? 0)  (usage 3)
iForm12                               48  0x00000030 (const ??? 0)  (usage 3)
iForm14                               55  0x00000037 (const ??? 0)  (usage 3)
iForm16                              172  0x000000ac (const ??? 0)  (usage 3)
iForm17                              177  0x000000b1 (const ??? 0)  (usage 3)
iForm18                              179  0x000000b3 (const ??? 0)  (usage 3)
iForm19                               68  0x00000044 (const ??? 0)  (usage 3)
iForm2                                 5  0x00000005 (const ??? 0)  (usage 3)
iForm20                               71  0x00000047 (const ??? 0)  (usage 3)
iForm21                               75  0x0000004b (const ??? 0)  (usage 3)
iForm23                               85  0x00000055 (const ??? 0)  (usage 3)
iForm24                               89  0x00000059 (const ??? 0)  (usage 3)
iForm25                              181  0x000000b5 (const ??? 0)  (usage 3)
iForm26                               93  0x0000005d (const ??? 0)  (usage 3)
iForm27                               99  0x00000063 (const ??? 0)  (usage 3)
iForm28                              120  0x00000078 (const ??? 0)  (usage 3)
iForm29                              127  0x0000007f (const ??? 0)  (usage 3)
iForm30                              136  0x00000088 (const ??? 0)  (usage 3)
iForm31                              140  0x0000008c (const ??? 0)  (usage 3)
iForm32                              144  0x00000090 (const ??? 0)  (usage 3)
iForm33                              148  0x00000094 (const ??? 0)  (usage 3)
iForm34                              159  0x0000009f (const ??? 0)  (usage 3)
iForm35                              163  0x000000a3 (const ??? 0)  (usage 3)
iForm38                              185  0x000000b9 (const ??? 0)  (usage 3)
iForm4                                11  0x0000000b (const ??? 0)  (usage 3)
iForm40                              196  0x000000c4 (const ??? 0)  (usage 3)
iForm41                              223  0x000000df (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm6                                19  0x00000013 (const ??? 0)  (usage 3)
iForm7                               167  0x000000a7 (const ??? 0)  (usage 3)
iForm9                                44  0x0000002c (const ??? 0)  (usage 3)
iiLeddigits0                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits1                          35  0x00000023 (const ??? 0)  (not used)
iiLeddigits2                          37  0x00000025 (const ??? 0)  (not used)
iLeddigits0                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits1                           34  0x00000022 (const ??? 0)  (usage 3)
iLeddigits2                           36  0x00000024 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        187  0x000000bbInputControls                        187  0x000000bb (mem) word[240] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            667  0x0000029bInputData                            667  0x0000029b (mem) word[3685] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          90  0x0000005a (const ??? 0)  (usage 3)
iStatictext1                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext10                         59  0x0000003b (const ??? 0)  (usage 3)
iStatictext11                        226  0x000000e2 (const ??? 0)  (usage 3)
iStatictext12                        238  0x000000ee (const ??? 0)  (usage 3)
iStatictext13                        198  0x000000c6 (const ??? 0)  (usage 3)
iStatictext14                          1  0x00000001 (const ??? 0)  (usage 3)
iStatictext19                         61  0x0000003d (const ??? 0)  (usage 3)
iStatictext2                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext3                          96  0x00000060 (const ??? 0)  (usage 3)
iStatictext4                          40  0x00000028 (const ??? 0)  (usage 3)
iStatictext5                         175  0x000000af (const ??? 0)  (usage 3)
iStatictext6                         197  0x000000c5 (const ??? 0)  (usage 3)
iStatictext7                         170  0x000000aa (const ??? 0)  (usage 3)
iStatictext8                          77  0x0000004d (const ??? 0)  (usage 3)
iStatictext9                          60  0x0000003c (const ??? 0)  (usage 3)
iStrings0                           8037  0x00001f65iStrings0                           8037  0x00001f65 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           8063  0x00001f7fiStrings1                           8063  0x00001f7f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8297  0x00002069iStrings10                          8297  0x00002069 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8323  0x00002083iStrings11                          8323  0x00002083 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8349  0x0000209diStrings12                          8349  0x0000209d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8375  0x000020b7iStrings13                          8375  0x000020b7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8401  0x000020d1iStrings14                          8401  0x000020d1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8427  0x000020ebiStrings15                          8427  0x000020eb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8453  0x00002105iStrings16                          8453  0x00002105 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8479  0x0000211fiStrings17                          8479  0x0000211f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8505  0x00002139iStrings19                          8505  0x00002139 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           8089  0x00001f99iStrings2                           8089  0x00001f99 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8531  0x00002153iStrings24                          8531  0x00002153 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8557  0x0000216diStrings25                          8557  0x0000216d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8583  0x00002187iStrings26                          8583  0x00002187 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8609  0x000021a1iStrings27                          8609  0x000021a1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8635  0x000021bbiStrings29                          8635  0x000021bb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           8115  0x00001fb3iStrings3                           8115  0x00001fb3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8661  0x000021d5iStrings30                          8661  0x000021d5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8687  0x000021efiStrings31                          8687  0x000021ef (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8713  0x00002209iStrings32                          8713  0x00002209 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8739  0x00002223iStrings34                          8739  0x00002223 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8765  0x0000223diStrings36                          8765  0x0000223d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8791  0x00002257iStrings37                          8791  0x00002257 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8817  0x00002271iStrings38                          8817  0x00002271 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8843  0x0000228biStrings39                          8843  0x0000228b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           8141  0x00001fcdiStrings4                           8141  0x00001fcd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8869  0x000022a5iStrings40                          8869  0x000022a5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8895  0x000022bfiStrings41                          8895  0x000022bf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8921  0x000022d9iStrings42                          8921  0x000022d9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8947  0x000022f3iStrings43                          8947  0x000022f3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8973  0x0000230diStrings44                          8973  0x0000230d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8999  0x00002327iStrings45                          8999  0x00002327 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          9025  0x00002341iStrings46                          9025  0x00002341 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          9051  0x0000235biStrings47                          9051  0x0000235b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          9077  0x00002375iStrings48                          9077  0x00002375 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           8167  0x00001fe7iStrings5                           8167  0x00001fe7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9103  0x0000238fiStrings50                          9103  0x0000238f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9129  0x000023a9iStrings51                          9129  0x000023a9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9155  0x000023c3iStrings52                          9155  0x000023c3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9181  0x000023ddiStrings53                          9181  0x000023dd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           8193  0x00002001iStrings6                           8193  0x00002001 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           8219  0x0000201biStrings7                           8219  0x0000201b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           8245  0x00002035iStrings8                           8245  0x00002035 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8271  0x0000204fiStrings9                           8271  0x0000204f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton1                           3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton10                        171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton100                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton101                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton102                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton103                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton104                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton105                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton106                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton107                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton108                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton109                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton11                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton110                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton111                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton112                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton113                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton114                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton115                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton116                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton117                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton118                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton119                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton121                       190  0x000000be (const ??? 0)  (usage 3)
iUserbutton122                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton123                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton124                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton125                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton126                       195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton127                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton128                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton129                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton131                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton132                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton133                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton134                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton135                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton136                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton137                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton138                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton139                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton14                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton140                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton141                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton142                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton143                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton144                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton145                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton146                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton147                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton149                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton15                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton150                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton151                       231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton152                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton153                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton154                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton155                       235  0x000000eb (const ??? 0)  (usage 3)
iUserbutton156                       236  0x000000ec (const ??? 0)  (usage 3)
iUserbutton157                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton158                       176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton159                        23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton16                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton160                       239  0x000000ef (const ??? 0)  (usage 3)
iUserbutton17                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton18                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton19                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton2                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton21                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton22                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton23                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton24                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton25                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton26                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton27                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton28                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton29                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton3                          31  0x0000001f (const ??? 0)  (usage 3)
iUserbutton30                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton31                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton32                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton33                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton34                        227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton35                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton36                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton37                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton38                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton39                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton4                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton40                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton41                        173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton43                        178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton45                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton47                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton48                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton49                        169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton5                           7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton50                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton51                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton52                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton53                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton55                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton56                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton57                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton58                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton59                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton6                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton60                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton61                          4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton62                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton63                         41  0x00000029 (const ??? 0)  (usage 3)
iUserbutton64                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton65                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton66                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton67                        224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton68                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton69                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton7                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton70                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton71                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton72                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton73                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton74                        228  0x000000e4 (const ??? 0)  (usage 3)
iUserbutton75                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton76                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton77                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton78                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton79                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton8                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton80                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton81                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton82                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton83                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton84                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton85                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton86                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton87                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton88                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton89                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton9                          15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton90                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton91                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton92                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton93                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton94                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton95                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton96                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton97                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton98                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton99                        107  0x0000006b (const ??? 0)  (usage 3)
iUserimages0                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages1                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages10                         95  0x0000005f (const ??? 0)  (usage 3)
iUserimages11                        225  0x000000e1 (const ??? 0)  (usage 3)
iUserimages12                        174  0x000000ae (const ??? 0)  (usage 3)
iUserimages13                         78  0x0000004e (const ??? 0)  (usage 3)
iUserimages14                        125  0x0000007d (const ??? 0)  (usage 3)
iUserimages15                        126  0x0000007e (const ??? 0)  (usage 3)
iUserimages16                         92  0x0000005c (const ??? 0)  (usage 3)
iUserimages17                        229  0x000000e5 (const ??? 0)  (usage 3)
iUserimages18                        230  0x000000e6 (const ??? 0)  (usage 3)
iUserimages2                          98  0x00000062 (const ??? 0)  (usage 3)
iUserimages3                         137  0x00000089 (const ??? 0)  (usage 3)
iUserimages4                         142  0x0000008e (const ??? 0)  (usage 3)
iUserimages5                         146  0x00000092 (const ??? 0)  (usage 3)
iUserimages6                         168  0x000000a8 (const ??? 0)  (usage 3)
iUserimages7                         139  0x0000008b (const ??? 0)  (usage 3)
iUserimages8                         143  0x0000008f (const ??? 0)  (usage 3)
iUserimages9                         147  0x00000093 (const ??? 0)  (usage 3)
iVideo0                               10  0x0000000a (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton1                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton2                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton3                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton4                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton5                           42  0x0000002a (const ??? 0)  (usage 3)
iWinbutton6                           43  0x0000002b (const ??? 0)  (usage 3)
iWinbutton7                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton8                           30  0x0000001e (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9989  0x00002705kKeyboardKeystrokes                 9989  0x00002705 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13589  0x00003515 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10581  0x00002955 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14711  0x00003977 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              335  0x0000014f (const dword)  (usage 3)
nObjects                             240  0x000000f0 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9563  0x0000255bo4Dbuttons                          9563  0x0000255b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9239  0x00002417oAngularmeters                      9239  0x00002417 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9565  0x0000255doAniButtons                         9565  0x0000255d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9567  0x0000255foColorPickers                       9567  0x0000255f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9241  0x00002419oCoolgauges                         9241  0x00002419 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9243  0x0000241boCustomdigitss                      9243  0x0000241b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9207  0x000023f7oDipSwitchs                         9207  0x000023f7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9245  0x0000241doForms                              9245  0x0000241d (mem) word[46] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9337  0x00002479oGauges                             9337  0x00002479 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9215  0x000023ffoGSliders                           9215  0x000023ff (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9339  0x0000247boImages                             9339  0x0000247b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9341  0x0000247doKeyboards                          9341  0x0000247d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9209  0x000023f9oKnobs                              9209  0x000023f9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9993  0x00002709oLedDigitsn                         9993  0x00002709 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9345  0x00002481oLeddigitss                         9345  0x00002481 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9343  0x0000247foLeds                               9343  0x0000247f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9353  0x00002489oMeters                             9353  0x00002489 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9561  0x00002559oPinInputs                          9561  0x00002559 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9897  0x000026a9oPinOutputs                         9897  0x000026a9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9211  0x000023fboRockerSwitchs                      9211  0x000023fb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9213  0x000023fdoRotarySwitchs                      9213  0x000023fd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9517  0x0000252doScopes                             9517  0x0000252d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9895  0x000026a7oSoundss                            9895  0x000026a7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9515  0x0000252boSpectrums                          9515  0x0000252b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9473  0x00002501oStaticTexts                        9473  0x00002501 (mem) word[21] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9355  0x0000248boStringss                           9355  0x0000248b (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 435)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9519  0x0000252foTanks                              9519  0x0000252f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9465  0x000024f9oThermometers                       9465  0x000024f9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9893  0x000026a5oTimers                             9893  0x000026a5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9217  0x00002401oTrackbars                          9217  0x00002401 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9569  0x00002561oUserButtons                        9569  0x00002561 (mem) word[162] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9521  0x00002531oUserImagess                        9521  0x00002531 (mem) word[20] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9467  0x000024fboUserleds                           9467  0x000024fb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9469  0x000024fdoVideos                             9469  0x000024fd (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9219  0x00002403oWinButtons                         9219  0x00002403 (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14746  0x0000399a (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14458  0x0000387a (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9991  0x00002707rKeyboardRoutines                   9991  0x00002707 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14644  0x00003934 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14727  0x00003987 (User func) args[1] r=0  (usage 15)
seroutOcs                          14694  0x00003966 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          5  0x00000005 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Count                         0  0x00000000 (const dword)  (not used)
Strings17Size                          1  0x00000001 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         94  0x0000005e (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         27  0x0000001b (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings49Size                          0  0x00000000 (const dword)  (not used)
Strings49StartH                        0  0x00000000 (const dword)  (not used)
Strings49StartL                        0  0x00000000 (const dword)  (not used)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         67  0x00000043 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     21504  0x00005400 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      9728  0x00002600 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     10240  0x00002800 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13903  0x0000364f (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 483)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12612  0x00003144 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 132)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        14103  0x00003717 (User func) args[3] r=0  (usage 27)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
