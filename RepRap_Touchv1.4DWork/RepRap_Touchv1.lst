file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 25/08/2015 13:59:08
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 25/08/2015 13:58:40
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     30
005100  000006  #constant  Strings1Size     30
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings11Count    1
005154  000033  #constant  Strings11Count    1
005155  000034  #constant  Strings11Size     73
005156  000034  #constant  Strings11Size     73
005157  000035  #constant  Strings24Count    1
005158  000035  #constant  Strings24Count    1
005159  000036  #constant  Strings24Size     26
005160  000036  #constant  Strings24Size     26
005161  000037  #constant  Strings25Count    1
005162  000037  #constant  Strings25Count    1
005163  000038  #constant  Strings25Size     10
005164  000038  #constant  Strings25Size     10
005165  000039  #constant  Strings26Count    1
005166  000039  #constant  Strings26Count    1
005167  000040  #constant  Strings26Size     10
005168  000040  #constant  Strings26Size     10
005169  000041  #constant  Strings27Count    1
005170  000041  #constant  Strings27Count    1
005171  000042  #constant  Strings27Size     11
005172  000042  #constant  Strings27Size     11
005173  000043  #constant  Strings7Count    0
005174  000043  #constant  Strings7Count    0
005175  000044  #constant  Strings7Size     1
005176  000044  #constant  Strings7Size     1
005177  000045  #constant  Strings8Count    0
005178  000045  #constant  Strings8Count    0
005179  000046  #constant  Strings8Size     1
005180  000046  #constant  Strings8Size     1
005181  000047  #constant  Strings38Count    0
005182  000047  #constant  Strings38Count    0
005183  000048  #constant  Strings38Size     1
005184  000048  #constant  Strings38Size     1
005185  000049  #constant  Strings39Count    0
005186  000049  #constant  Strings39Count    0
005187  000050  #constant  Strings39Size     1
005188  000050  #constant  Strings39Size     1
005189  000051  #constant  Strings40Count    1
005190  000051  #constant  Strings40Count    1
005191  000052  #constant  Strings40Size     7
005192  000052  #constant  Strings40Size     7
005193  000053  #constant  Strings41Count    1
005194  000053  #constant  Strings41Count    1
005195  000054  #constant  Strings41Size     7
005196  000054  #constant  Strings41Size     7
005197  000055  #constant  Strings42Count    1
005198  000055  #constant  Strings42Count    1
005199  000056  #constant  Strings42Size     7
005200  000056  #constant  Strings42Size     7
005201  000057  #constant  Strings43Count    0
005202  000057  #constant  Strings43Count    0
005203  000058  #constant  Strings43Size     1
005204  000058  #constant  Strings43Size     1
005205  000059  #constant  Strings44Count    0
005206  000059  #constant  Strings44Count    0
005207  000060  #constant  Strings44Size     1
005208  000060  #constant  Strings44Size     1
005209  000061  #constant  Strings45Count    0
005210  000061  #constant  Strings45Count    0
005211  000062  #constant  Strings45Size     1
005212  000062  #constant  Strings45Size     1
005213  000063  #constant  Strings51Count    0
005214  000063  #constant  Strings51Count    0
005215  000064  #constant  Strings51Size     1
005216  000064  #constant  Strings51Size     1
005217  000065  #constant  Strings52Count    0
005218  000065  #constant  Strings52Count    0
005219  000066  #constant  Strings52Size     1
005220  000066  #constant  Strings52Size     1
005221  000067  #constant  Strings19Count    1
005222  000067  #constant  Strings19Count    1
005223  000068  #constant  Strings19Size     94
005224  000068  #constant  Strings19Size     94
005225  000069  #constant  Strings29Count    1
005226  000069  #constant  Strings29Count    1
005227  000070  #constant  Strings29Size     53
005228  000070  #constant  Strings29Size     53
005229  000071  #constant  Strings30Count    1
005230  000071  #constant  Strings30Count    1
005231  000072  #constant  Strings30Size     27
005232  000072  #constant  Strings30Size     27
005233  000073  #constant  Strings31Count    1
005234  000073  #constant  Strings31Count    1
005235  000074  #constant  Strings31Size     7
005236  000074  #constant  Strings31Size     7
005237  000075  #constant  Strings32Count    1
005238  000075  #constant  Strings32Count    1
005239  000076  #constant  Strings32Size     19
005240  000076  #constant  Strings32Size     19
005241  000077  #constant  Strings49Count    1
005242  000077  #constant  Strings49Count    1
005243  000078  #constant  Strings49Size     17
005244  000078  #constant  Strings49Size     17
005245  000079  #constant  Strings50Count    0
005246  000079  #constant  Strings50Count    0
005247  000080  #constant  Strings50Size     1
005248  000080  #constant  Strings50Size     1
005249  000081  #constant  Strings13Count    1
005250  000081  #constant  Strings13Count    1
005251  000082  #constant  Strings13Size     3
005252  000082  #constant  Strings13Size     3
005253  000083  #constant  Strings46Count    0
005254  000083  #constant  Strings46Count    0
005255  000084  #constant  Strings46Size     1
005256  000084  #constant  Strings46Size     1
005257  000085  #constant  Strings47Count    1
005258  000085  #constant  Strings47Count    1
005259  000086  #constant  Strings47Size     3
005260  000086  #constant  Strings47Size     3
005261  000087  #constant  Strings48Count    0
005262  000087  #constant  Strings48Count    0
005263  000088  #constant  Strings48Size     1
005264  000088  #constant  Strings48Size     1
005265  000089  #constant  Strings53Count    1
005266  000089  #constant  Strings53Count    1
005267  000090  #constant  Strings53Size     68
005268  000090  #constant  Strings53Size     68
005269  000091  #constant  Strings5Count    0
005270  000091  #constant  Strings5Count    0
005271  000092  #constant  Strings5Size     1
005272  000092  #constant  Strings5Size     1
005273  000093  #constant  Strings10Count    0
005274  000093  #constant  Strings10Count    0
005275  000094  #constant  Strings10Size     1
005276  000094  #constant  Strings10Size     1
005277  000095  #constant  Strings17Count    0
005278  000095  #constant  Strings17Count    0
005279  000096  #constant  Strings17Size     1
005280  000096  #constant  Strings17Size     1
005281  000097  // object indexes into ImageControl
005282  000098  #CONST
005283  000344  #END
005284  000345        
005285  000346  #constant  Strings18Size     0
005286  000346  #constant  Strings18Size     0
005287  000347  #constant  Strings18StartH   0
005288  000347  #constant  Strings18StartH   0
005289  000348  #constant  Strings18StartL   0
005290  000348  #constant  Strings18StartL   0
005291  000349  #constant  Strings20Size     0
005292  000349  #constant  Strings20Size     0
005293  000350  #constant  Strings20StartH   0
005294  000350  #constant  Strings20StartH   0
005295  000351  #constant  Strings20StartL   0
005296  000351  #constant  Strings20StartL   0
005297  000352  #constant  Strings21Size     0
005298  000352  #constant  Strings21Size     0
005299  000353  #constant  Strings21StartH   0
005300  000353  #constant  Strings21StartH   0
005301  000354  #constant  Strings21StartL   0
005302  000354  #constant  Strings21StartL   0
005303  000355  #constant  Strings22Size     0
005304  000355  #constant  Strings22Size     0
005305  000356  #constant  Strings22StartH   0
005306  000356  #constant  Strings22StartH   0
005307  000357  #constant  Strings22StartL   0
005308  000357  #constant  Strings22StartL   0
005309  000358  #constant  Strings23Size     0
005310  000358  #constant  Strings23Size     0
005311  000359  #constant  Strings23StartH   0
005312  000359  #constant  Strings23StartH   0
005313  000360  #constant  Strings23StartL   0
005314  000360  #constant  Strings23StartL   0
005315  000361  #constant  Strings28Size     0
005316  000361  #constant  Strings28Size     0
005317  000362  #constant  Strings28StartH   0
005318  000362  #constant  Strings28StartH   0
005319  000363  #constant  Strings28StartL   0
005320  000363  #constant  Strings28StartL   0
005321  000364  #constant  Strings33Size     0
005322  000364  #constant  Strings33Size     0
005323  000365  #constant  Strings33StartH   0
005324  000365  #constant  Strings33StartH   0
005325  000366  #constant  Strings33StartL   0
005326  000366  #constant  Strings33StartL   0
005327  000367  #constant  Strings35Size     0
005328  000367  #constant  Strings35Size     0
005329  000368  #constant  Strings35StartH   0
005330  000368  #constant  Strings35StartH   0
005331  000369  #constant  Strings35StartL   0
005332  000369  #constant  Strings35StartL   0
005333  000370  #constant  Strings1StartH   0x0
005334  000370  #constant  Strings1StartH   0x0
005335  000371  #constant  Strings1StartL   0x0
005336  000371  #constant  Strings1StartL   0x0
005337  000372  #constant  Strings3StartH   0x0
005338  000372  #constant  Strings3StartH   0x0
005339  000373  #constant  Strings3StartL   0x200
005340  000373  #constant  Strings3StartL   0x200
005341  000374  #constant  Strings4StartH   0x0
005342  000374  #constant  Strings4StartH   0x0
005343  000375  #constant  Strings4StartL   0x400
005344  000375  #constant  Strings4StartL   0x400
005345  000376  #constant  Strings6StartH   0x0
005346  000376  #constant  Strings6StartH   0x0
005347  000377  #constant  Strings6StartL   0x600
005348  000377  #constant  Strings6StartL   0x600
005349  000378  #constant  Strings2StartH   0x0
005350  000378  #constant  Strings2StartH   0x0
005351  000379  #constant  Strings2StartL   0x800
005352  000379  #constant  Strings2StartL   0x800
005353  000380  #constant  Strings0StartH   0x0
005354  000380  #constant  Strings0StartH   0x0
005355  000381  #constant  Strings0StartL   0xA00
005356  000381  #constant  Strings0StartL   0xA00
005357  000382  #constant  Strings9StartH   0x0
005358  000382  #constant  Strings9StartH   0x0
005359  000383  #constant  Strings9StartL   0xC00
005360  000383  #constant  Strings9StartL   0xC00
005361  000384  #constant  Strings34StartH   0x0
005362  000384  #constant  Strings34StartH   0x0
005363  000385  #constant  Strings34StartL   0xE00
005364  000385  #constant  Strings34StartL   0xE00
005365  000386  #constant  Strings36StartH   0x0
005366  000386  #constant  Strings36StartH   0x0
005367  000387  #constant  Strings36StartL   0x1000
005368  000387  #constant  Strings36StartL   0x1000
005369  000388  #constant  Strings37StartH   0x0
005370  000388  #constant  Strings37StartH   0x0
005371  000389  #constant  Strings37StartL   0x1200
005372  000389  #constant  Strings37StartL   0x1200
005373  000390  #constant  Strings12StartH   0x0
005374  000390  #constant  Strings12StartH   0x0
005375  000391  #constant  Strings12StartL   0x1400
005376  000391  #constant  Strings12StartL   0x1400
005377  000392  #constant  Strings14StartH   0x0
005378  000392  #constant  Strings14StartH   0x0
005379  000393  #constant  Strings14StartL   0x1600
005380  000393  #constant  Strings14StartL   0x1600
005381  000394  #constant  Strings16StartH   0x0
005382  000394  #constant  Strings16StartH   0x0
005383  000395  #constant  Strings16StartL   0x1800
005384  000395  #constant  Strings16StartL   0x1800
005385  000396  #constant  Strings15StartH   0x0
005386  000396  #constant  Strings15StartH   0x0
005387  000397  #constant  Strings15StartL   0x1A00
005388  000397  #constant  Strings15StartL   0x1A00
005389  000398  #constant  Strings11StartH   0x0
005390  000398  #constant  Strings11StartH   0x0
005391  000399  #constant  Strings11StartL   0x1C00
005392  000399  #constant  Strings11StartL   0x1C00
005393  000400  #constant  Strings24StartH   0x0
005394  000400  #constant  Strings24StartH   0x0
005395  000401  #constant  Strings24StartL   0x1E00
005396  000401  #constant  Strings24StartL   0x1E00
005397  000402  #constant  Strings25StartH   0x0
005398  000402  #constant  Strings25StartH   0x0
005399  000403  #constant  Strings25StartL   0x2000
005400  000403  #constant  Strings25StartL   0x2000
005401  000404  #constant  Strings26StartH   0x0
005402  000404  #constant  Strings26StartH   0x0
005403  000405  #constant  Strings26StartL   0x2200
005404  000405  #constant  Strings26StartL   0x2200
005405  000406  #constant  Strings27StartH   0x0
005406  000406  #constant  Strings27StartH   0x0
005407  000407  #constant  Strings27StartL   0x2400
005408  000407  #constant  Strings27StartL   0x2400
005409  000408  #constant  Strings7StartH   0x0
005410  000408  #constant  Strings7StartH   0x0
005411  000409  #constant  Strings7StartL   0x2600
005412  000409  #constant  Strings7StartL   0x2600
005413  000410  #constant  Strings8StartH   0x0
005414  000410  #constant  Strings8StartH   0x0
005415  000411  #constant  Strings8StartL   0x2800
005416  000411  #constant  Strings8StartL   0x2800
005417  000412  #constant  Strings38StartH   0x0
005418  000412  #constant  Strings38StartH   0x0
005419  000413  #constant  Strings38StartL   0x2A00
005420  000413  #constant  Strings38StartL   0x2A00
005421  000414  #constant  Strings39StartH   0x0
005422  000414  #constant  Strings39StartH   0x0
005423  000415  #constant  Strings39StartL   0x2C00
005424  000415  #constant  Strings39StartL   0x2C00
005425  000416  #constant  Strings40StartH   0x0
005426  000416  #constant  Strings40StartH   0x0
005427  000417  #constant  Strings40StartL   0x2E00
005428  000417  #constant  Strings40StartL   0x2E00
005429  000418  #constant  Strings41StartH   0x0
005430  000418  #constant  Strings41StartH   0x0
005431  000419  #constant  Strings41StartL   0x3000
005432  000419  #constant  Strings41StartL   0x3000
005433  000420  #constant  Strings42StartH   0x0
005434  000420  #constant  Strings42StartH   0x0
005435  000421  #constant  Strings42StartL   0x3200
005436  000421  #constant  Strings42StartL   0x3200
005437  000422  #constant  Strings43StartH   0x0
005438  000422  #constant  Strings43StartH   0x0
005439  000423  #constant  Strings43StartL   0x3400
005440  000423  #constant  Strings43StartL   0x3400
005441  000424  #constant  Strings44StartH   0x0
005442  000424  #constant  Strings44StartH   0x0
005443  000425  #constant  Strings44StartL   0x3600
005444  000425  #constant  Strings44StartL   0x3600
005445  000426  #constant  Strings45StartH   0x0
005446  000426  #constant  Strings45StartH   0x0
005447  000427  #constant  Strings45StartL   0x3800
005448  000427  #constant  Strings45StartL   0x3800
005449  000428  #constant  Strings51StartH   0x0
005450  000428  #constant  Strings51StartH   0x0
005451  000429  #constant  Strings51StartL   0x3A00
005452  000429  #constant  Strings51StartL   0x3A00
005453  000430  #constant  Strings52StartH   0x0
005454  000430  #constant  Strings52StartH   0x0
005455  000431  #constant  Strings52StartL   0x3C00
005456  000431  #constant  Strings52StartL   0x3C00
005457  000432  #constant  Strings19StartH   0x0
005458  000432  #constant  Strings19StartH   0x0
005459  000433  #constant  Strings19StartL   0x3E00
005460  000433  #constant  Strings19StartL   0x3E00
005461  000434  #constant  Strings29StartH   0x0
005462  000434  #constant  Strings29StartH   0x0
005463  000435  #constant  Strings29StartL   0x4000
005464  000435  #constant  Strings29StartL   0x4000
005465  000436  #constant  Strings30StartH   0x0
005466  000436  #constant  Strings30StartH   0x0
005467  000437  #constant  Strings30StartL   0x4200
005468  000437  #constant  Strings30StartL   0x4200
005469  000438  #constant  Strings31StartH   0x0
005470  000438  #constant  Strings31StartH   0x0
005471  000439  #constant  Strings31StartL   0x4400
005472  000439  #constant  Strings31StartL   0x4400
005473  000440  #constant  Strings32StartH   0x0
005474  000440  #constant  Strings32StartH   0x0
005475  000441  #constant  Strings32StartL   0x4600
005476  000441  #constant  Strings32StartL   0x4600
005477  000442  #constant  Strings49StartH   0x0
005478  000442  #constant  Strings49StartH   0x0
005479  000443  #constant  Strings49StartL   0x4800
005480  000443  #constant  Strings49StartL   0x4800
005481  000444  #constant  Strings50StartH   0x0
005482  000444  #constant  Strings50StartH   0x0
005483  000445  #constant  Strings50StartL   0x4A00
005484  000445  #constant  Strings50StartL   0x4A00
005485  000446  #constant  Strings13StartH   0x0
005486  000446  #constant  Strings13StartH   0x0
005487  000447  #constant  Strings13StartL   0x4C00
005488  000447  #constant  Strings13StartL   0x4C00
005489  000448  #constant  Strings46StartH   0x0
005490  000448  #constant  Strings46StartH   0x0
005491  000449  #constant  Strings46StartL   0x4E00
005492  000449  #constant  Strings46StartL   0x4E00
005493  000450  #constant  Strings47StartH   0x0
005494  000450  #constant  Strings47StartH   0x0
005495  000451  #constant  Strings47StartL   0x5000
005496  000451  #constant  Strings47StartL   0x5000
005497  000452  #constant  Strings48StartH   0x0
005498  000452  #constant  Strings48StartH   0x0
005499  000453  #constant  Strings48StartL   0x5200
005500  000453  #constant  Strings48StartL   0x5200
005501  000454  #constant  Strings53StartH   0x0
005502  000454  #constant  Strings53StartH   0x0
005503  000455  #constant  Strings53StartL   0x5400
005504  000455  #constant  Strings53StartL   0x5400
005505  000456  #constant  Strings5StartH   0x0
005506  000456  #constant  Strings5StartH   0x0
005507  000457  #constant  Strings5StartL   0x5600
005508  000457  #constant  Strings5StartL   0x5600
005509  000458  #constant  Strings10StartH   0x0
005510  000458  #constant  Strings10StartH   0x0
005511  000459  #constant  Strings10StartL   0x5800
005512  000459  #constant  Strings10StartL   0x5800
005513  000460  #constant  Strings17StartH   0x0
005514  000460  #constant  Strings17StartH   0x0
005515  000461  #constant  Strings17StartL   0x5A00
005516  000461  #constant  Strings17StartL   0x5A00
005517  000462  #IFNOT EXISTS NOGLOBALS
005518  000463  var hndl ;
005519  000464  #ENDIF
005520  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005521  000013  #inherit "CLPrintStrings.inc"
005522  000013  #inherit "CLPrintStrings.inc"
005523  000001  func PrintStrings(var ID, var *msgid, var String)
005524  000002      var StringID, i, ch, offs32[2], res32[2];
005525  000003      StringID := oStringss[1+ID] ;
005526  000004      if (String)
005527  000005          stringsCV[ID] := -1 ;
005528  000006      else
005529  000007          stringsCV[ID] := msgid ;
005530  000008      endif
005531  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005532  000010      txt_FontID(hFonts[ID]) ;
005533  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005534  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005535  000013        
005536  000014      if (*(StringID + Ofs_String_Transparent))
005537  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005538  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005539  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005540  000018      else
005541  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005542  000020          gfx_Clipping(ON) ;
005543  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005544  000022          gfx_Clipping(OFF) ;
005545  000023        
005546  000024      endif
005547  000025        
005548  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005549  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005550  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005551  000029        
005552  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005553  000031        
005554  000032      if (String)
005555  000033          i := 0 ;
005556  000034          ch := msgid[i++] ;
005557  000035          while (ch != 0)
005558  000036              putch(ch) ;
005559  000037              ch := msgid[i++] ;
005560  000038          wend
005561  000039      else
005562  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005563  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005564  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005565  000043          uadd_3232(res32,res32,offs32) ;
005566  000044          file_Seek(hstrings, res32[1], res32[0]);
005567  000045          repeat
005568  000046              if (*(StringID + Ofs_String_Ansi))
005569  000047                  ch := file_GetC(hstrings) ;
005570  000048              else
005571  000049                  ch := file_GetW(hstrings) ;
005572  000050              endif
005573  000051              putch(ch) ;
005574  000052          until (ch == 0) ;
005575  000053      endif
005576  000054        
005577  000055  endfunc
005578  000056        
005579  000014        
005580  000015  #constant IPDatasize 22
005581  000015  #constant IPDatasize 22
005582  000016        
005583  000017  #CONST
005584  000021  #END
005585  000022        
005586  000023  #CONST
005587  000130  #END
005588  000131        
005589  000577  #END
5590  2852
5591  2853
5592  2854
5593  2855
5594  2856
5595  2857
5596  2858
5597  2859
5598  285A
5599  285B
5600  285C
5601  285D
5602  285E
5603  285F
5604  2860
5605  2861
5606  2862
5607  2863
5608  2864
5609  2865
5610  2866
5611  2867
5612  2868
5613  2869
5614  286A
5615  286B
5616  286C
5617  286D
5618  286E
5619  286F
5620  2870
5621  2871
5622  2872
5623  2873
5624  2874
5625  2875
5626  2876
5627  2877
5628  2878
5629  2879
5630  287A
5631  287B
5632  287C
5633  287D
5634  287E
5635  287F
5636  2880
5637  2881
5638  2882
5639  2883
5640  2884
5641  2885
5642  2886
5643  2887
5644  2888
5645  2889
5646  288A
5647  288B
5648  288C
5649  288D
5650  288E
5651  288F
5652  2890
5653  2891
5654  2892
5655  2893
5656  2894
5657  2895
5658  2896
5659  2897
5660  2898
5661  2899
5662  289A
5663  289B
5664  289C
5665  289D
5666  289E
5667  289F
5668  28A0
5669  28A1
5670  28A2
5671  28A3
5672  28A4
5673  28A5
5674  28A6
5675  28A7
5676  28A8
5677  28A9
5678  28AA
5679  28AB
5680  28AC
5681  28AD
5682  28AE
5683  28AF
5684  28B0
5685  28B1
5686  28B2
5687  28B3
5688  28B4
5689  28B5
5690  28B6
5691  28B7
5692  28B8
5693  28B9
5694  28BA
5695  28BB
5696  28BC
5697  28BD
5698  28BE
5699  28BF
5700  28C0
5701  28C1
5702  28C2
5703  28C3
5704  28C4
5705  28C5
5706  28C6
5707  28C7
5708  28C8
5709  28C9
5710  28CA
5711  28CB
5712  28CC
5713  28CD
5714  28CE
5715  28CF
5716  28D0
5717  28D1
5718  28D2
5719  28D3
5720  28D4
5721  28D5
5722  28D6
5723  28D7
5724  28D8
5725  28D9
5726  28DA
5727  28DB
5728  28DC
5729  28DD
5730  28DE
5731  28DF
5732  28E0
5733  28E1
5734  28E2
5735  28E3
5736  28E4
5737  28E5
5738  28E6
5739  28E7
5740  28E8
5741  28E9
5742  28EA
5743  28EB
5744  28EC
5745  28ED
5746  28EE
5747  28EF
5748  28F0
5749  28F1
5750  28F2
5751  28F3
5752  28F4
5753  28F5
5754  28F6
5755  28F7
5756  28F8
5757  28F9
5758  28FA
5759  28FB
5760  28FC
5761  28FD
5762  28FE
5763  28FF
5764  2900
5765  2901
5766  2902
5767  2903
5768  2904
5769  2905
5770  2906
5771  2907
5772  2908
5773  2909
5774  290A
5775  290B
5776  290C
5777  290D
5778  290E
5779  290F
5780  2910
5781  2911
5782  2912
5783  2913
5784  2914
5785  2915
5786  2916
5787  2917
5788  2918
5789  2919
5790  291A
5791  291B
5792  291C
5793  291D
5794  291E
5795  291F
5796  2920
5797  2921
5798  2922
5799  2923
5800  2924
5801  2925
5802  2926
5803  2927
5804  2928
5805  2929
5806  292A
5807  292B
5808  292C
5809  292D
5810  292E
5811  292F
5812  2930
5813  2931
5814  2932
5815  2933
5816  2934
5817  2935
5818  2936
5819  2937
5820  2938
5821  2939
5822  293A
5823  293B
5824  293C
5825  293D
5826  293E
5827  293F
5828  2940
5829  2941
5830  2942
5831  2943
5832  2944
5833  2945
5834  2946
5835  2947
5836  2948
5837  2949
5838  294A
5839  294B
5840  294C
5841  294D
5842  294E
5843  294F
5844  2950
5845  2951
5846  2952
5847  2953
5848  2954
5849  2955
5850  2956
5851  2957
5852  2958
5853  2959
5854  295A
5855  295B
5856  295C
5857  295D
5858  295E
5859  295F
5860  2960
5861  2961
5862  2962
5863  2963
5864  2964
5865  2965
5866  2966
5867  2967
5868  2968
5869  2969
5870  296A
5871  296B
5872  296C
5873  296D
5874  296E
5875  296F
5876  2970
5877  2971
5878  2972
5879  2973
5880  2974
5881  2975
5882  2976
5883  2977
5884  2978
5885  2979
5886  297A
5887  297B
5888  297C
5889  297D
5890  297E
5891  297F
5892  2980
5893  2981
5894  2982
5895  2983
5896  2984
5897  2985
5898  2986
5899  2987
5900  2988
5901  2989
5902  298A
5903  298B
5904  298C
5905  298D
5906  298E
5907  298F
5908  2990
5909  2991
5910  2992
5911  2993
5912  2994
5913  2995
5914  2996
5915  2997
5916  2998
5917  2999
5918  299A
5919  299B
5920  299C
5921  299D
5922  299E
5923  299F
5924  29A0
5925  29A1
5926  29A2
5927  29A3
5928  29A4
5929  29A5
5930  29A6
5931  29A7
5932  29A8
5933  29A9
5934  29AA
5935  29AB
5936  29AC
5937  29AD
5938  29AE
5939  29AF
5940  29B0
5941  29B1
5942  29B2
5943  29B3
5944  29B4
5945  29B5
5946  29B6
5947  29B7
5948  29B8
5949  29B9
5950  29BA
5951  29BB
5952  29BC
5953  29BD
5954  29BE
5955  29BF
5956  29C0
5957  29C1
5958  29C2
5959  29C3
5960  29C4
5961  29C5
5962  29C6
5963  29C7
5964  29C8
5965  29C9
5966  29CA
5967  29CB
5968  29CC
5969  29CD
5970  29CE
5971  29CF
5972  29D0
5973  29D1
5974  29D2
5975  29D3
5976  29D4
5977  29D5
5978  29D6
5979  29D7
5980  29D8
5981  29D9
5982  29DA
5983  29DB
5984  29DC
5985  29DD
5986  29DE
5987  29DF
5988  29E0
5989  29E1
5990  29E2
5991  29E3
5992  29E4
5993  29E5
5994  29E6
5995  29E7
5996  29E8
5997  29E9
5998  29EA
5999  29EB
6000  29EC
6001  29ED
6002  29EE
6003  29EF
6004  29F0
6005  29F1
6006  29F2
6007  29F3
6008  29F4
6009  29F5
6010  29F6
6011  29F7
6012  29F8
6013  29F9
6014  29FA
6015  29FB
6016  29FC
6017  29FD
6018  29FE
6019  29FF
6020  2A00
6021  2A01
6022  2A02
6023  2A03
6024  2A04
6025  2A05
6026  2A06
6027  2A07
6028  2A08
6029  2A09
6030  2A0A
6031  2A0B
6032  2A0C
6033  2A0D
6034  2A0E
6035  2A0F
6036  2A10
6037  2A11
6038  2A12
6039  2A13
6040  2A14
6041  2A15
6042  2A16
6043  2A17
6044  2A18
6045  2A19
6046  2A1A
6047  2A1B
6048  2A1C
6049  2A1D
6050  2A1E
6051  2A1F
6052  2A20
6053  2A21
6054  2A22
6055  2A23
6056  2A24
6057  2A25
6058  2A26
6059  2A27
6060  2A28
6061  2A29
6062  2A2A
6063  2A2B
6064  2A2C
6065  2A2D
6066  2A2E
6067  2A2F
6068  2A30
6069  2A31
6070  2A32
6071  2A33
6072  2A34
6073  2A35
6074  2A36
6075  2A37
6076  2A38
6077  2A39
6078  2A3A
6079  2A3B
6080  2A3C
6081  2A3D
6082  2A3E
6083  2A3F
6084  2A40
6085  2A41
6086  2A42
6087  2A43
6088  2A44
6089  2A45
6090  2A46
6091  2A47
6092  2A48
6093  2A49
6094  2A4A
6095  2A4B
6096  2A4C
6097  2A4D
6098  2A4E
6099  2A4F
6100  2A50
6101  2A51
6102  2A52
6103  2A53
6104  2A54
6105  2A55
6106  2A56
6107  2A57
6108  2A58
6109  2A59
6110  2A5A
6111  2A5B
6112  2A5C
6113  2A5D
6114  2A5E
6115  2A5F
6116  2A60
6117  2A61
6118  2A62
6119  2A63
6120  2A64
6121  2A65
6122  2A66
6123  2A67
6124  2A68
6125  2A69
6126  2A6A
6127  2A6B
6128  2A6C
6129  2A6D
6130  2A6E
6131  2A6F
6132  2A70
6133  2A71
6134  2A72
6135  2A73
6136  2A74
6137  2A75
6138  2A76
6139  2A77
6140  2A78
6141  2A79
6142  2A7A
6143  2A7B
6144  2A7C
6145  2A7D
6146  2A7E
6147  2A7F
6148  2A80
6149  2A81
6150  2A82
6151  2A83
6152  2A84
6153  2A85
6154  2A86
6155  2A87
6156  2A88
6157  2A89
6158  2A8A
6159  2A8B
6160  2A8C
6161  2A8D
6162  2A8E
6163  2A8F
6164  2A90
6165  2A91
6166  2A92
6167  2A93
6168  2A94
6169  2A95
6170  2A96
6171  2A97
6172  2A98
6173  2A99
6174  2A9A
6175  2A9B
6176  2A9C
6177  2A9D
6178  2A9E
6179  2A9F
6180  2AA0
6181  2AA1
6182  2AA2
6183  2AA3
6184  2AA4
6185  2AA5
6186  2AA6
6187  2AA7
6188  2AA8
6189  2AA9
6190  2AAA
6191  2AAB
6192  2AAC
6193  2AAD
6194  2AAE
6195  2AAF
6196  2AB0
6197  2AB1
6198  2AB2
6199  2AB3
6200  2AB4
6201  2AB5
6202  2AB6
6203  2AB7
6204  2AB8
6205  2AB9
6206  2ABA
6207  2ABB
6208  2ABC
6209  2ABD
6210  2ABE
6211  2ABF
6212  2AC0
6213  2AC1
6214  2AC2
6215  2AC3
6216  2AC4
6217  2AC5
6218  2AC6
6219  2AC7
6220  2AC8
6221  2AC9
6222  2ACA
6223  2ACB
6224  2ACC
6225  2ACD
6226  2ACE
6227  2ACF
6228  2AD0
6229  2AD1
6230  2AD2
6231  2AD3
6232  2AD4
6233  2AD5
6234  2AD6
6235  2AD7
6236  2AD8
6237  2AD9
6238  2ADA
6239  2ADB
6240  2ADC
6241  2ADD
6242  2ADE
6243  2ADF
6244  2AE0
6245  2AE1
6246  2AE2
6247  2AE3
6248  2AE4
6249  2AE5
6250  2AE6
6251  2AE7
6252  2AE8
6253  2AE9
6254  2AEA
6255  2AEB
6256  2AEC
6257  2AED
6258  2AEE
6259  2AEF
6260  2AF0
6261  2AF1
6262  2AF2
6263  2AF3
6264  2AF4
6265  2AF5
6266  2AF6
6267  2AF7
6268  2AF8
6269  2AF9
6270  2AFA
6271  2AFB
6272  2AFC
6273  2AFD
6274  2AFE
6275  2AFF
6276  2B00
6277  2B01
6278  2B02
6279  2B03
6280  2B04
6281  2B05
6282  2B06
6283  2B07
6284  2B08
6285  2B09
6286  2B0A
6287  2B0B
6288  2B0C
6289  2B0D
6290  2B0E
6291  2B0F
6292  2B10
6293  2B11
6294  2B12
6295  2B13
6296  2B14
6297  2B15
6298  2B16
6299  2B17
6300  2B18
6301  2B19
6302  2B1A
6303  2B1B
6304  2B1C
6305  2B1D
6306  2B1E
6307  2B1F
6308  2B20
6309  2B21
6310  2B22
6311  2B23
6312  2B24
6313  2B25
6314  2B26
6315  2B27
6316  2B28
6317  2B29
6318  2B2A
6319  2B2B
6320  2B2C
6321  2B2D
6322  2B2E
6323  2B2F
6324  2B30
6325  2B31
6326  2B32
6327  2B33
6328  2B34
6329  2B35
6330  2B36
6331  2B37
6332  2B38
6333  2B39
6334  2B3A
6335  2B3B
6336  2B3C
6337  2B3D
6338  2B3E
6339  2B3F
6340  2B40
6341  2B41
6342  2B42
6343  2B43
6344  2B44
6345  2B45
6346  2B46
6347  2B47
6348  2B48
6349  2B49
6350  2B4A
6351  2B4B
6352  2B4C
6353  2B4D
6354  2B4E
6355  2B4F
6356  2B50
6357  2B51
6358  2B52
6359  2B53
6360  2B54
6361  2B55
6362  2B56
6363  2B57
6364  2B58
6365  2B59
6366  2B5A
6367  2B5B
6368  2B5C
6369  2B5D
6370  2B5E
6371  2B5F
6372  2B60
6373  2B61
6374  2B62
6375  2B63
6376  2B64
6377  2B65
6378  2B66
6379  2B67
6380  2B68
6381  2B69
6382  2B6A
6383  2B6B
6384  2B6C
6385  2B6D
6386  2B6E
6387  2B6F
6388  2B70
6389  2B71
6390  2B72
6391  2B73
6392  2B74
6393  2B75
6394  2B76
6395  2B77
6396  2B78
6397  2B79
6398  2B7A
6399  2B7B
6400  2B7C
6401  2B7D
6402  2B7E
6403  2B7F
6404  2B80
6405  2B81
6406  2B82
6407  2B83
6408  2B84
6409  2B85
6410  2B86
6411  2B87
6412  2B88
6413  2B89
6414  2B8A
6415  2B8B
6416  2B8C
6417  2B8D
6418  2B8E
6419  2B8F
6420  2B90
6421  2B91
6422  2B92
6423  2B93
6424  2B94
6425  2B95
6426  2B96
6427  2B97
6428  2B98
6429  2B99
6430  2B9A
6431  2B9B
6432  2B9C
6433  2B9D
6434  2B9E
6435  2B9F
6436  2BA0
6437  2BA1
6438  2BA2
6439  2BA3
6440  2BA4
6441  2BA5
6442  2BA6
6443  2BA7
6444  2BA8
6445  2BA9
6446  2BAA
6447  2BAB
6448  2BAC
6449  2BAD
6450  2BAE
6451  2BAF
6452  2BB0
6453  2BB1
6454  2BB2
6455  2BB3
6456  2BB4
6457  2BB5
6458  2BB6
6459  2BB7
6460  2BB8
6461  2BB9
6462  2BBA
6463  2BBB
6464  2BBC
6465  2BBD
6466  2BBE
6467  2BBF
6468  2BC0
6469  2BC1
6470  2BC2
6471  2BC3
6472  2BC4
6473  2BC5
6474  2BC6
6475  2BC7
6476  2BC8
6477  2BC9
6478  2BCA
6479  2BCB
6480  2BCC
6481  2BCD
6482  2BCE
6483  2BCF
6484  2BD0
6485  2BD1
6486  2BD2
6487  2BD3
6488  2BD4
6489  2BD5
6490  2BD6
6491  2BD7
6492  2BD8
6493  2BD9
6494  2BDA
6495  2BDB
6496  2BDC
6497  2BDD
6498  2BDE
6499  2BDF
6500  2BE0
6501  2BE1
6502  2BE2
6503  2BE3
6504  2BE4
6505  2BE5
6506  2BE6
6507  2BE7
6508  2BE8
6509  2BE9
6510  2BEA
6511  2BEB
6512  2BEC
6513  2BED
6514  2BEE
6515  2BEF
6516  2BF0
6517  2BF1
6518  2BF2
6519  2BF3
6520  2BF4
6521  2BF5
6522  2BF6
6523  2BF7
6524  2BF8
6525  2BF9
6526  2BFA
6527  2BFB
6528  2BFC
6529  2BFD
6530  2BFE
6531  2BFF
6532  2C00
6533  2C01
6534  2C02
6535  2C03
6536  2C04
6537  2C05
6538  2C06
6539  2C07
6540  2C08
6541  2C09
6542  2C0A
6543  2C0B
6544  2C0C
6545  2C0D
6546  2C0E
6547  2C0F
6548  2C10
6549  2C11
6550  2C12
6551  2C13
6552  2C14
6553  2C15
6554  2C16
6555  2C17
6556  2C18
6557  2C19
6558  2C1A
6559  2C1B
6560  2C1C
6561  2C1D
6562  2C1E
6563  2C1F
6564  2C20
6565  2C21
6566  2C22
6567  2C23
6568  2C24
6569  2C25
6570  2C26
6571  2C27
6572  2C28
6573  2C29
6574  2C2A
6575  2C2B
6576  2C2C
6577  2C2D
6578  2C2E
6579  2C2F
6580  2C30
6581  2C31
6582  2C32
6583  2C33
6584  2C34
6585  2C35
6586  2C36
6587  2C37
6588  2C38
6589  2C39
6590  2C3A
6591  2C3B
6592  2C3C
6593  2C3D
6594  2C3E
6595  2C3F
6596  2C40
6597  2C41
6598  2C42
6599  2C43
6600  2C44
6601  2C45
6602  2C46
6603  2C47
6604  2C48
6605  2C49
6606  2C4A
6607  2C4B
6608  2C4C
6609  2C4D
6610  2C4E
6611  2C4F
6612  2C50
6613  2C51
6614  2C52
6615  2C53
6616  2C54
6617  2C55
6618  2C56
6619  2C57
6620  2C58
6621  2C59
6622  2C5A
6623  2C5B
6624  2C5C
6625  2C5D
6626  2C5E
6627  2C5F
6628  2C60
6629  2C61
6630  2C62
6631  2C63
6632  2C64
6633  2C65
6634  2C66
6635  2C67
6636  2C68
6637  2C69
6638  2C6A
6639  2C6B
6640  2C6C
6641  2C6D
6642  2C6E
6643  2C6F
6644  2C70
6645  2C71
6646  2C72
6647  2C73
6648  2C74
6649  2C75
6650  2C76
6651  2C77
6652  2C78
6653  2C79
6654  2C7A
6655  2C7B
6656  2C7C
6657  2C7D
6658  2C7E
6659  2C7F
6660  2C80
6661  2C81
6662  2C82
6663  2C83
6664  2C84
6665  2C85
6666  2C86
6667  2C87
6668  2C88
6669  2C89
6670  2C8A
6671  2C8B
6672  2C8C
6673  2C8D
6674  2C8E
6675  2C8F
6676  2C90
6677  2C91
6678  2C92
6679  2C93
6680  2C94
6681  2C95
6682  2C96
6683  2C97
6684  2C98
6685  2C99
6686  2C9A
6687  2C9B
6688  2C9C
6689  2C9D
6690  2C9E
6691  2C9F
6692  2CA0
6693  2CA1
6694  2CA2
6695  2CA3
6696  2CA4
6697  2CA5
6698  2CA6
6699  2CA7
6700  2CA8
6701  2CA9
6702  2CAA
6703  2CAB
6704  2CAC
6705  2CAD
6706  2CAE
6707  2CAF
6708  2CB0
6709  2CB1
6710  2CB2
6711  2CB3
6712  2CB4
6713  2CB5
6714  2CB6
6715  2CB7
6716  2CB8
6717  2CB9
6718  2CBA
6719  2CBB
6720  2CBC
6721  2CBD
6722  2CBE
6723  2CBF
6724  2CC0
6725  2CC1
6726  2CC2
6727  2CC3
6728  2CC4
6729  2CC5
6730  2CC6
6731  2CC7
6732  2CC8
6733  2CC9
6734  2CCA
6735  2CCB
6736  2CCC
6737  2CCD
6738  2CCE
6739  2CCF
6740  2CD0
6741  2CD1
6742  2CD2
6743  2CD3
6744  2CD4
6745  2CD5
6746  2CD6
6747  2CD7
6748  2CD8
6749  2CD9
6750  2CDA
6751  2CDB
6752  2CDC
6753  2CDD
6754  2CDE
6755  2CDF
6756  2CE0
6757  2CE1
6758  2CE2
6759  2CE3
6760  2CE4
6761  2CE5
6762  2CE6
6763  2CE7
6764  2CE8
6765  2CE9
6766  2CEA
6767  2CEB
6768  2CEC
6769  2CED
6770  2CEE
6771  2CEF
6772  2CF0
6773  2CF1
6774  2CF2
6775  2CF3
6776  2CF4
6777  2CF5
6778  2CF6
6779  2CF7
6780  2CF8
6781  2CF9
6782  2CFA
6783  2CFB
6784  2CFC
6785  2CFD
6786  2CFE
6787  2CFF
6788  2D00
6789  2D01
6790  2D02
6791  2D03
6792  2D04
6793  2D05
6794  2D06
6795  2D07
6796  2D08
6797  2D09
6798  2D0A
6799  2D0B
6800  2D0C
6801  2D0D
6802  2D0E
6803  2D0F
6804  2D10
6805  2D11
6806  2D12
6807  2D13
6808  2D14
6809  2D15
6810  2D16
6811  2D17
6812  2D18
6813  2D19
6814  2D1A
6815  2D1B
6816  2D1C
6817  2D1D
6818  2D1E
6819  2D1F
6820  2D20
6821  2D21
6822  2D22
6823  2D23
6824  2D24
6825  2D25
6826  2D26
6827  2D27
6828  2D28
6829  2D29
6830  2D2A
6831  2D2B
6832  2D2C
6833  2D2D
6834  2D2E
6835  2D2F
6836  2D30
6837  2D31
6838  2D32
6839  2D33
6840  2D34
6841  2D35
6842  2D36
6843  2D37
6844  2D38
6845  2D39
6846  2D3A
6847  2D3B
6848  2D3C
6849  2D3D
6850  2D3E
6851  2D3F
6852  2D40
6853  2D41
6854  2D42
6855  2D43
6856  2D44
6857  2D45
6858  2D46
6859  2D47
6860  2D48
6861  2D49
6862  2D4A
6863  2D4B
6864  2D4C
6865  2D4D
6866  2D4E
6867  2D4F
6868  2D50
6869  2D51
6870  2D52
6871  2D53
6872  2D54
6873  2D55
6874  2D56
6875  2D57
6876  2D58
6877  2D59
6878  2D5A
6879  2D5B
6880  2D5C
6881  2D5D
6882  2D5E
6883  2D5F
6884  2D60
6885  2D61
6886  2D62
6887  2D63
6888  2D64
6889  2D65
6890  2D66
6891  2D67
6892  2D68
6893  2D69
6894  2D6A
6895  2D6B
6896  2D6C
6897  2D6D
6898  2D6E
6899  2D6F
6900  2D70
6901  2D71
6902  2D72
6903  2D73
6904  2D74
6905  2D75
6906  2D76
6907  2D77
6908  2D78
6909  2D79
6910  2D7A
6911  2D7B
6912  2D7C
6913  2D7D
6914  2D7E
6915  2D7F
6916  2D80
6917  2D81
6918  2D82
6919  2D83
6920  2D84
6921  2D85
6922  2D86
6923  2D87
6924  2D88
6925  2D89
6926  2D8A
6927  2D8B
6928  2D8C
6929  2D8D
6930  2D8E
6931  2D8F
6932  2D90
6933  2D91
6934  2D92
6935  2D93
6936  2D94
6937  2D95
6938  2D96
6939  2D97
6940  2D98
6941  2D99
6942  2D9A
6943  2D9B
6944  2D9C
6945  2D9D
6946  2D9E
6947  2D9F
6948  2DA0
6949  2DA1
6950  2DA2
6951  2DA3
6952  2DA4
6953  2DA5
6954  2DA6
6955  2DA7
6956  2DA8
6957  2DA9
6958  2DAA
6959  2DAB
6960  2DAC
6961  2DAD
6962  2DAE
6963  2DAF
6964  2DB0
6965  2DB1
6966  2DB2
6967  2DB3
6968  2DB4
6969  2DB5
6970  2DB6
6971  2DB7
6972  2DB8
6973  2DB9
6974  2DBA
6975  2DBB
6976  2DBC
6977  2DBD
6978  2DBE
6979  2DBF
6980  2DC0
6981  2DC1
6982  2DC2
6983  2DC3
6984  2DC4
6985  2DC5
6986  2DC6
6987  2DC7
6988  2DC8
6989  2DC9
6990  2DCA
6991  2DCB
6992  2DCC
6993  2DCD
6994  2DCE
6995  2DCF
6996  2DD0
6997  2DD1
6998  2DD2
6999  2DD3
7000  2DD4
7001  2DD5
7002  2DD6
7003  2DD7
7004  2DD8
7005  2DD9
7006  2DDA
7007  2DDB
7008  2DDC
7009  2DDD
7010  2DDE
7011  2DDF
7012  2DE0
7013  2DE1
7014  2DE2
7015  2DE3
7016  2DE4
7017  2DE5
7018  2DE6
7019  2DE7
7020  2DE8
7021  2DE9
7022  2DEA
7023  2DEB
7024  2DEC
7025  2DED
7026  2DEE
7027  2DEF
7028  2DF0
7029  2DF1
7030  2DF2
7031  2DF3
7032  2DF4
7033  2DF5
7034  2DF6
7035  2DF7
7036  2DF8
7037  2DF9
7038  2DFA
7039  2DFB
7040  2DFC
7041  2DFD
7042  2DFE
7043  2DFF
7044  2E00
7045  2E01
7046  2E02
7047  2E03
7048  2E04
7049  2E05
7050  2E06
7051  2E07
7052  2E08
7053  2E09
7054  2E0A
7055  2E0B
7056  2E0C
7057  2E0D
7058  2E0E
7059  2E0F
7060  2E10
7061  2E11
7062  2E12
7063  2E13
7064  2E14
7065  2E15
7066  2E16
7067  2E17
7068  2E18
7069  2E19
7070  2E1A
7071  2E1B
7072  2E1C
7073  2E1D
7074  2E1E
7075  2E1F
7076  2E20
7077  2E21
7078  2E22
7079  2E23
7080  2E24
7081  2E25
7082  2E26
7083  2E27
7084  2E28
7085  2E29
7086  2E2A
7087  2E2B
7088  2E2C
7089  2E2D
7090  2E2E
7091  2E2F
7092  2E30
7093  2E31
7094  2E32
7095  2E33
7096  2E34
7097  2E35
7098  2E36
7099  2E37
7100  2E38
7101  2E39
7102  2E3A
7103  2E3B
7104  2E3C
7105  2E3D
7106  2E3E
7107  2E3F
7108  2E40
7109  2E41
7110  2E42
7111  2E43
7112  2E44
7113  2E45
7114  2E46
7115  2E47
7116  2E48
7117  2E49
7118  2E4A
7119  2E4B
7120  2E4C
7121  2E4D
7122  2E4E
7123  2E4F
7124  2E50
7125  2E51
7126  2E52
7127  2E53
7128  2E54
7129  2E55
7130  2E56
7131  2E57
7132  2E58
7133  2E59
7134  2E5A
7135  2E5B
7136  2E5C
7137  2E5D
7138  2E5E
7139  2E5F
7140  2E60
7141  2E61
7142  2E62
7143  2E63
7144  2E64
7145  2E65
7146  2E66
7147  2E67
7148  2E68
7149  2E69
7150  2E6A
7151  2E6B
7152  2E6C
7153  2E6D
7154  2E6E
7155  2E6F
7156  2E70
7157  2E71
7158  2E72
7159  2E73
7160  2E74
7161  2E75
7162  2E76
7163  2E77
7164  2E78
7165  2E79
7166  2E7A
7167  2E7B
7168  2E7C
7169  2E7D
7170  2E7E
7171  2E7F
7172  2E80
7173  2E81
7174  2E82
7175  2E83
7176  2E84
7177  2E85
7178  2E86
7179  2E87
7180  2E88
7181  2E89
7182  2E8A
7183  2E8B
7184  2E8C
7185  2E8D
7186  2E8E
7187  2E8F
7188  2E90
7189  2E91
7190  2E92
7191  2E93
7192  2E94
7193  2E95
7194  2E96
7195  2E97
7196  2E98
7197  2E99
7198  2E9A
7199  2E9B
7200  2E9C
7201  2E9D
7202  2E9E
7203  2E9F
7204  2EA0
7205  2EA1
7206  2EA2
7207  2EA3
7208  2EA4
7209  2EA5
7210  2EA6
7211  2EA7
7212  2EA8
7213  2EA9
7214  2EAA
7215  2EAB
7216  2EAC
7217  2EAD
7218  2EAE
7219  2EAF
7220  2EB0
7221  2EB1
7222  2EB2
7223  2EB3
7224  2EB4
7225  2EB5
7226  2EB6
7227  2EB7
7228  2EB8
7229  2EB9
7230  2EBA
7231  2EBB
7232  2EBC
7233  2EBD
7234  2EBE
7235  2EBF
7236  2EC0
7237  2EC1
7238  2EC2
7239  2EC3
7240  2EC4
7241  2EC5
7242  2EC6
7243  2EC7
7244  2EC8
7245  2EC9
7246  2ECA
7247  2ECB
7248  2ECC
7249  2ECD
7250  2ECE
7251  2ECF
7252  2ED0
7253  2ED1
7254  2ED2
7255  2ED3
7256  2ED4
7257  2ED5
7258  2ED6
7259  2ED7
7260  2ED8
7261  2ED9
7262  2EDA
7263  2EDB
7264  2EDC
7265  2EDD
7266  2EDE
7267  2EDF
7268  2EE0
7269  2EE1
7270  2EE2
7271  2EE3
7272  2EE4
7273  2EE5
7274  2EE6
7275  2EE7
7276  2EE8
7277  2EE9
7278  2EEA
7279  2EEB
7280  2EEC
7281  2EED
7282  2EEE
7283  2EEF
7284  2EF0
7285  2EF1
7286  2EF2
7287  2EF3
7288  2EF4
7289  2EF5
7290  2EF6
7291  2EF7
7292  2EF8
7293  2EF9
7294  2EFA
7295  2EFB
7296  2EFC
7297  2EFD
7298  2EFE
7299  2EFF
7300  2F00
7301  2F01
7302  2F02
7303  2F03
7304  2F04
7305  2F05
7306  2F06
7307  2F07
7308  2F08
7309  2F09
7310  2F0A
7311  2F0B
7312  2F0C
7313  2F0D
7314  2F0E
7315  2F0F
7316  2F10
7317  2F11
7318  2F12
7319  2F13
7320  2F14
7321  2F15
7322  2F16
7323  2F17
7324  2F18
7325  2F19
7326  2F1A
7327  2F1B
7328  2F1C
7329  2F1D
7330  2F1E
7331  2F1F
7332  2F20
7333  2F21
7334  2F22
7335  2F23
7336  2F24
7337  2F25
7338  2F26
7339  2F27
7340  2F28
7341  2F29
7342  2F2A
7343  2F2B
7344  2F2C
7345  2F2D
7346  2F2E
7347  2F2F
7348  2F30
7349  2F31
7350  2F32
7351  2F33
7352  2F34
7353  2F35
7354  2F36
7355  2F37
7356  2F38
7357  2F39
7358  2F3A
7359  2F3B
7360  2F3C
7361  2F3D
7362  2F3E
7363  2F3F
7364  2F40
7365  2F41
7366  2F42
7367  2F43
7368  2F44
7369  2F45
7370  2F46
7371  2F47
7372  2F48
7373  2F49
7374  2F4A
7375  2F4B
7376  2F4C
7377  2F4D
7378  2F4E
7379  2F4F
7380  2F50
7381  2F51
7382  2F52
7383  2F53
7384  2F54
7385  2F55
7386  2F56
7387  2F57
7388  2F58
7389  2F59
7390  2F5A
7391  2F5B
7392  2F5C
7393  2F5D
7394  2F5E
7395  2F5F
7396  2F60
7397  2F61
7398  2F62
7399  2F63
7400  2F64
7401  2F65
7402  2F66
7403  2F67
7404  2F68
7405  2F69
7406  2F6A
7407  2F6B
7408  2F6C
7409  2F6D
7410  2F6E
7411  2F6F
7412  2F70
7413  2F71
7414  2F72
7415  2F73
7416  2F74
7417  2F75
7418  2F76
7419  2F77
7420  2F78
7421  2F79
7422  2F7A
7423  2F7B
7424  2F7C
7425  2F7D
7426  2F7E
7427  2F7F
7428  2F80
7429  2F81
7430  2F82
7431  2F83
7432  2F84
7433  2F85
7434  2F86
7435  2F87
7436  2F88
7437  2F89
7438  2F8A
7439  2F8B
7440  2F8C
7441  2F8D
7442  2F8E
7443  2F8F
7444  2F90
7445  2F91
7446  2F92
7447  2F93
7448  2F94
7449  2F95
7450  2F96
7451  2F97
7452  2F98
7453  2F99
7454  2F9A
7455  2F9B
7456  2F9C
7457  2F9D
7458  2F9E
7459  2F9F
7460  2FA0
7461  2FA1
7462  2FA2
7463  2FA3
7464  2FA4
7465  2FA5
7466  2FA6
7467  2FA7
7468  2FA8
7469  2FA9
7470  2FAA
7471  2FAB
7472  2FAC
7473  2FAD
7474  2FAE
7475  2FAF
7476  2FB0
7477  2FB1
7478  2FB2
7479  2FB3
7480  2FB4
7481  2FB5
7482  2FB6
7483  2FB7
7484  2FB8
7485  2FB9
7486  2FBA
7487  2FBB
7488  2FBC
7489  2FBD
7490  2FBE
7491  2FBF
7492  2FC0
7493  2FC1
7494  2FC2
7495  2FC3
7496  2FC4
7497  2FC5
7498  2FC6
7499  2FC7
7500  2FC8
7501  2FC9
7502  2FCA
7503  2FCB
7504  2FCC
7505  2FCD
7506  2FCE
7507  2FCF
7508  2FD0
7509  2FD1
7510  2FD2
7511  2FD3
7512  2FD4
7513  2FD5
7514  2FD6
7515  2FD7
7516  2FD8
7517  2FD9
7518  2FDA
7519  2FDB
7520  2FDC
7521  2FDD
7522  2FDE
7523  2FDF
7524  2FE0
7525  2FE1
7526  2FE2
7527  2FE3
7528  2FE4
7529  2FE5
7530  2FE6
7531  2FE7
7532  2FE8
7533  2FE9
7534  2FEA
7535  2FEB
7536  2FEC
7537  2FED
7538  2FEE
7539  2FEF
7540  2FF0
7541  2FF1
7542  2FF2
7543  2FF3
7544  2FF4
7545  2FF5
7546  2FF6
7547  2FF7
7548  2FF8
7549  2FF9
7550  2FFA
7551  2FFB
7552  2FFC
7553  2FFD
7554  2FFE
7555  2FFF
7556  3000
7557  3001
7558  3002
7559  3003
7560  3004
7561  3005
7562  3006
7563  3007
7564  3008
7565  3009
7566  300A
7567  300B
7568  300C
7569  300D
7570  300E
7571  300F
7572  3010
7573  3011
7574  3012
7575  3013
7576  3014
7577  3015
7578  3016
7579  3017
7580  3018
7581  3019
7582  301A
7583  301B
7584  301C
7585  301D
7586  301E
7587  301F
7588  3020
7589  3021
7590  3022
7591  3023
7592  3024
7593  3025
7594  3026
7595  3027
7596  3028
7597  3029
7598  302A
7599  302B
7600  302C
7601  302D
7602  302E
7603  302F
7604  3030
7605  3031
7606  3032
7607  3033
7608  3034
7609  3035
7610  3036
7611  3037
7612  3038
7613  3039
7614  303A
7615  303B
7616  303C
7617  303D
7618  303E
7619  303F
7620  3040
7621  3041
7622  3042
7623  3043
7624  3044
7625  3045
7626  3046
7627  3047
7628  3048
7629  3049
7630  304A
7631  304B
7632  304C
7633  304D
7634  304E
7635  304F
7636  3050
7637  3051
7638  3052
7639  3053
7640  3054
7641  3055
7642  3056
7643  3057
7644  3058
7645  3059
7646  305A
7647  305B
7648  305C
7649  305D
7650  305E
7651  305F
7652  3060
7653  3061
7654  3062
7655  3063
7656  3064
7657  3065
7658  3066
7659  3067
7660  3068
7661  3069
7662  306A
7663  306B
7664  306C
7665  306D
7666  306E
7667  306F
7668  3070
7669  3071
7670  3072
7671  3073
7672  3074
7673  3075
7674  3076
7675  3077
7676  3078
7677  3079
7678  307A
7679  307B
7680  307C
7681  307D
7682  307E
7683  307F
7684  3080
7685  3081
7686  3082
7687  3083
7688  3084
7689  3085
7690  3086
7691  3087
7692  3088
7693  3089
7694  308A
7695  308B
7696  308C
7697  308D
7698  308E
7699  308F
7700  3090
7701  3091
7702  3092
7703  3093
7704  3094
7705  3095
7706  3096
7707  3097
7708  3098
7709  3099
7710  309A
7711  309B
7712  309C
7713  309D
7714  309E
7715  309F
7716  30A0
7717  30A1
7718  30A2
7719  30A3
7720  30A4
7721  30A5
7722  30A6
7723  30A7
7724  30A8
7725  30A9
7726  30AA
7727  30AB
7728  30AC
7729  30AD
7730  30AE
7731  30AF
7732  30B0
7733  30B1
7734  30B2
7735  30B3
7736  30B4
7737  30B5
7738  30B6
7739  30B7
7740  30B8
7741  30B9
7742  30BA
7743  30BB
7744  30BC
7745  30BD
7746  30BE
7747  30BF
7748  30C0
7749  30C1
7750  30C2
7751  30C3
7752  30C4
7753  30C5
7754  30C6
7755  30C7
7756  30C8
7757  30C9
7758  30CA
7759  30CB
7760  30CC
7761  30CD
7762  30CE
7763  30CF
7764  30D0
7765  30D1
7766  30D2
7767  30D3
7768  30D4
7769  30D5
7770  30D6
7771  30D7
7772  30D8
7773  30D9
7774  30DA
7775  30DB
7776  30DC
7777  30DD
7778  30DE
7779  30DF
7780  30E0
7781  30E1
7782  30E2
7783  30E3
7784  30E4
7785  30E5
7786  30E6
7787  30E7
7788  30E8
7789  30E9
7790  30EA
7791  30EB
7792  30EC
7793  30ED
7794  30EE
7795  30EF
7796  30F0
7797  30F1
7798  30F2
7799  30F3
7800  30F4
7801  30F5
7802  30F6
7803  30F7
7804  30F8
7805  30F9
7806  30FA
7807  30FB
7808  30FC
7809  30FD
7810  30FE
7811  30FF
7812  3100
7813  3101
7814  3102
7815  3103
7816  3104
7817  3105
7818  3106
7819  3107
7820  3108
7821  3109
7822  310A
7823  310B
7824  310C
7825  310D
7826  310E
7827  310F
7828  3110
7829  3111
7830  3112
7831  3113
7832  3114
7833  3115
7834  3116
7835  3117
7836  3118
7837  3119
7838  311A
7839  311B
7840  311C
7841  311D
7842  311E
7843  311F
7844  3120
7845  3121
7846  3122
7847  3123
7848  3124
7849  3125
7850  3126
7851  3127
7852  3128
7853  3129
7854  312A
7855  312B
7856  312C
7857  312D
7858  312E
7859  312F
7860  3130
7861  3131
7862  3132
7863  3133
7864  3134
7865  3135
7866  3136
7867  3137
7868  3138
7869  3139
7870  313A
7871  313B
7872  313C
7873  313D
7874  313E
7875  313F
7876  3140
7877  3141
7878  3142
7879  3143
7880  3144
7881  3145
7882  3146
7883  3147
7884  3148
7885  3149
7886  314A
7887  314B
7888  314C
7889  314D
7890  314E
7891  314F
7892  3150
7893  3151
7894  3152
7895  3153
7896  3154
7897  3155
7898  3156
7899  3157
7900  3158
7901  3159
7902  315A
7903  315B
7904  315C
7905  315D
7906  315E
7907  315F
7908  3160
7909  3161
7910  3162
7911  3163
7912  3164
7913  3165
7914  3166
7915  3167
7916  3168
7917  3169
7918  316A
7919  316B
7920  316C
7921  316D
7922  316E
7923  316F
7924  3170
7925  3171
7926  3172
7927  3173
7928  3174
7929  3175
7930  3176
7931  3177
7932  3178
7933  3179
7934  317A
7935  317B
7936  317C
7937  317D
7938  317E
7939  317F
7940  3180
7941  3181
7942  3182
7943  3183
7944  3184
7945  3185
7946  3186
7947  3187
7948  3188
7949  3189
7950  318A
7951  318B
7952  318C
7953  318D
7954  318E
7955  318F
7956  3190
7957  3191
7958  3192
7959  3193
7960  3194
7961  3195
7962  3196
7963  3197
7964  3198
7965  3199
7966  319A
7967  319B
7968  319C
7969  319D
7970  319E
7971  319F
7972  31A0
7973  31A1
7974  31A2
7975  31A3
7976  31A4
7977  31A5
7978  31A6
7979  31A7
7980  31A8
7981  31A9
7982  31AA
7983  31AB
7984  31AC
7985  31AD
7986  31AE
7987  31AF
7988  31B0
7989  31B1
7990  31B2
7991  31B3
7992  31B4
7993  31B5
7994  31B6
7995  31B7
7996  31B8
7997  31B9
7998  31BA
7999  31BB
8000  31BC
8001  31BD
8002  31BE
8003  31BF
8004  31C0
8005  31C1
8006  31C2
8007  31C3
8008  31C4
8009  31C5
8010  31C6
8011  31C7
8012  31C8
8013  31C9
8014  31CA
8015  31CB
8016  31CC
8017  31CD
8018  31CE
8019  31CF
8020  31D0
8021  31D1
8022  31D2
8023  31D3
8024  31D4
8025  31D5
8026  31D6
8027  31D7
8028  31D8
8029  31D9
8030  31DA
8031  31DB
8032  31DC
8033  31DD
8034  31DE
8035  31DF
8036  31E0
8037  31E1
8038  31E2
8039  31E3
8040  31E4
8041  31E5
8042  31E6
8043  31E7
8044  31E8
8045  31E9
8046  31EA
8047  31EB
8048  31EC
8049  31ED
8050  31EE
8051  31EF
8052  31F0
8053  31F1
8054  31F2
8055  31F3
8056  31F4
8057  31F5
8058  31F6
8059  31F7
8060  31F8
8061  31F9
8062  31FA
8063  31FB
8064  31FC
8065  31FD
8066  31FE
8067  31FF
8068  3200
8069  3201
8070  3202
8071  3203
8072  3204
8073  3205
8074  3206
8075  3207
8076  3208
8077  3209
8078  320A
8079  320B
8080  320C
8081  320D
8082  320E
8083  320F
8084  3210
8085  3211
8086  3212
8087  3213
8088  3214
8089  3215
8090  3216
8091  3217
8092  3218
8093  3219
8094  321A
8095  321B
8096  321C
8097  321D
8098  321E
8099  321F
8100  3220
8101  3221
8102  3222
8103  3223
8104  3224
8105  3225
8106  3226
8107  3227
8108  3228
8109  3229
8110  322A
8111  322B
8112  322C
8113  322D
8114  322E
8115  322F
8116  3230
8117  3231
8118  3232
8119  3233
8120  3234
8121  3235
8122  3236
8123  3237
8124  3238
8125  3239
8126  323A
8127  323B
8128  323C
8129  323D
8130  323E
8131  323F
8132  3240
8133  3241
8134  3242
8135  3243
8136  3244
8137  3245
8138  3246
8139  3247
8140  3248
8141  3249
8142  324A
8143  324B
8144  324C
8145  324D
8146  324E
8147  324F
8148  3250
8149  3251
8150  3252
8151  3253
8152  3254
8153  3255
8154  3256
8155  3257
8156  3258
8157  3259
8158  325A
8159  325B
8160  325C
8161  325D
8162  325E
8163  325F
8164  3260
8165  3261
8166  3262
8167  3263
8168  3264
8169  3265
8170  3266
8171  3267
8172  3268
8173  3269
8174  326A
8175  326B
8176  326C
8177  326D
8178  326E
8179  326F
8180  3270
8181  3271
8182  3272
8183  3273
8184  3274
8185  3275
8186  3276
8187  3277
8188  3278
8189  3279
8190  327A
8191  327B
8192  327C
8193  327D
8194  327E
8195  327F
8196  3280
8197  3281
8198  3282
8199  3283
8200  3284
8201  3285
8202  3286
8203  3287
8204  3288
8205  3289
8206  328A
8207  328B
8208  328C
8209  328D
8210  328E
8211  328F
8212  3290
8213  3291
8214  3292
8215  3293
8216  3294
8217  3295
8218  3296
8219  3297
8220  3298
8221  3299
8222  329A
8223  329B
8224  329C
8225  329D
8226  329E
8227  329F
8228  32A0
8229  32A1
8230  32A2
8231  32A3
8232  32A4
8233  32A5
8234  32A6
8235  32A7
8236  32A8
8237  32A9
8238  32AA
8239  32AB
8240  32AC
8241  32AD
8242  32AE
8243  32AF
8244  32B0
8245  32B1
8246  32B2
8247  32B3
8248  32B4
8249  32B5
8250  32B6
8251  32B7
8252  32B8
8253  32B9
8254  32BA
8255  32BB
8256  32BC
8257  32BD
8258  32BE
8259  32BF
8260  32C0
8261  32C1
8262  32C2
8263  32C3
8264  32C4
8265  32C5
8266  32C6
8267  32C7
8268  32C8
8269  32C9
8270  32CA
8271  32CB
8272  32CC
8273  32CD
8274  32CE
8275  32CF
8276  32D0
8277  32D1
8278  32D2
8279  32D3
8280  32D4
8281  32D5
8282  32D6
8283  32D7
8284  32D8
8285  32D9
8286  32DA
8287  32DB
8288  32DC
8289  32DD
8290  32DE
8291  32DF
8292  32E0
8293  32E1
8294  32E2
8295  32E3
8296  32E4
8297  32E5
8298  32E6
8299  32E7
8300  32E8
8301  32E9
8302  32EA
8303  32EB
8304  32EC
8305  32ED
8306  32EE
8307  32EF
8308  32F0
8309  32F1
8310  32F2
8311  32F3
8312  32F4
8313  32F5
8314  32F6
8315  32F7
8316  32F8
8317  32F9
8318  32FA
8319  32FB
8320  32FC
8321  32FD
8322  32FE
8323  32FF
8324  3300
8325  3301
8326  3302
8327  3303
8328  3304
8329  3305
8330  3306
8331  3307
8332  3308
8333  3309
8334  330A
8335  330B
8336  330C
8337  330D
8338  330E
8339  330F
8340  3310
8341  3311
8342  3312
8343  3313
8344  3314
8345  3315
8346  3316
8347  3317
8348  3318
8349  3319
8350  331A
8351  331B
8352  331C
8353  331D
8354  331E
8355  331F
8356  3320
8357  3321
8358  3322
8359  3323
8360  3324
8361  3325
8362  3326
8363  3327
8364  3328
8365  3329
8366  332A
8367  332B
8368  332C
8369  332D
8370  332E
8371  332F
8372  3330
8373  3331
8374  3332
8375  3333
8376  3334
8377  3335
8378  3336
8379  3337
8380  3338
8381  3339
8382  333A
8383  333B
8384  333C
8385  333D
8386  333E
8387  333F
8388  3340
8389  3341
8390  3342
8391  3343
8392  3344
8393  3345
8394  3346
8395  3347
8396  3348
8397  3349
8398  334A
8399  334B
8400  334C
8401  334D
8402  334E
8403  334F
8404  3350
8405  3351
8406  3352
8407  3353
8408  3354
8409  3355
8410  3356
8411  3357
8412  3358
8413  3359
8414  335A
8415  335B
8416  335C
8417  335D
8418  335E
8419  335F
8420  3360
8421  3361
8422  3362
8423  3363
8424  3364
8425  3365
8426  3366
8427  3367
8428  3368
8429  3369
8430  336A
8431  336B
8432  336C
8433  336D
8434  336E
8435  336F
8436  3370
8437  3371
8438  3372
8439  3373
8440  3374
8441  3375
8442  3376
8443  3377
8444  3378
8445  3379
8446  337A
8447  337B
8448  337C
8449  337D
8450  337E
8451  337F
8452  3380
8453  3381
8454  3382
8455  3383
8456  3384
8457  3385
8458  3386
8459  3387
8460  3388
8461  3389
8462  338A
8463  338B
8464  338C
8465  338D
8466  338E
8467  338F
8468  3390
8469  3391
8470  3392
8471  3393
8472  3394
8473  3395
8474  3396
8475  3397
8476  3398
8477  3399
8478  339A
8479  339B
8480  339C
8481  339D
8482  339E
8483  339F
8484  33A0
8485  33A1
8486  33A2
8487  33A3
8488  33A4
8489  33A5
8490  33A6
8491  33A7
8492  33A8
8493  33A9
8494  33AA
8495  33AB
8496  33AC
8497  33AD
8498  33AE
8499  33AF
8500  33B0
8501  33B1
8502  33B2
8503  33B3
8504  33B4
8505  33B5
8506  33B6
8507  33B7
8508  33B8
8509  33B9
8510  33BA
8511  33BB
8512  33BC
8513  33BD
8514  33BE
8515  33BF
8516  33C0
8517  33C1
8518  33C2
8519  33C3
8520  33C4
8521  33C5
8522  33C6
8523  33C7
8524  33C8
8525  33C9
8526  33CA
8527  33CB
8528  33CC
8529  33CD
8530  33CE
8531  33CF
8532  33D0
8533  33D1
8534  33D2
8535  33D3
8536  33D4
8537  33D5
8538  33D6
8539  33D7
8540  33D8
8541  33D9
8542  33DA
8543  33DB
8544  33DC
8545  33DD
8546  33DE
8547  33DF
8548  33E0
8549  33E1
8550  33E2
8551  33E3
8552  33E4
8553  33E5
8554  33E6
8555  33E7
8556  33E8
8557  33E9
8558  33EA
8559  33EB
8560  33EC
8561  33ED
8562  33EE
8563  33EF
8564  33F0
8565  33F1
8566  33F2
8567  33F3
8568  33F4
8569  33F5
8570  33F6
8571  33F7
8572  33F8
8573  33F9
8574  33FA
8575  33FB
8576  33FC
8577  33FD
8578  33FE
8579  33FF
8580  3400
8581  3401
8582  3402
8583  3403
8584  3404
8585  3405
8586  3406
8587  3407
8588  3408
8589  3409
8590  340A
8591  340B
8592  340C
8593  340D
8594  340E
8595  340F
8596  3410
8597  3411
8598  3412
8599  3413
8600  3414
8601  3415
8602  3416
8603  3417
8604  3418
8605  3419
8606  341A
8607  341B
8608  341C
8609  341D
8610  341E
8611  341F
8612  3420
8613  3421
8614  3422
8615  3423
8616  3424
8617  3425
8618  3426
8619  3427
8620  3428
8621  3429
8622  342A
8623  342B
8624  342C
8625  342D
8626  342E
8627  342F
8628  3430
8629  3431
8630  3432
8631  3433
8632  3434
8633  3435
8634  3436
8635  3437
8636  3438
8637  3439
8638  343A
8639  343B
8640  343C
8641  343D
8642  343E
8643  343F
8644  3440
8645  3441
8646  3442
8647  3443
8648  3444
8649  3445
8650  3446
8651  3447
8652  3448
8653  3449
8654  344A
8655  344B
8656  344C
8657  344D
8658  344E
8659  344F
8660  3450
8661  3451
8662  3452
8663  3453
8664  3454
8665  3455
8666  3456
8667  3457
8668  3458
8669  3459
8670  345A
8671  345B
8672  345C
8673  345D
8674  345E
8675  345F
8676  3460
8677  3461
8678  3462
8679  3463
8680  3464
8681  3465
8682  3466
8683  3467
8684  3468
8685  3469
8686  346A
8687  346B
8688  346C
8689  346D
8690  346E
8691  346F
8692  3470
8693  3471
8694  3472
8695  3473
8696  3474
8697  3475
8698  3476
8699  3477
8700  3478
8701  3479
8702  347A
8703  347B
8704  347C
8705  347D
8706  347E
8707  347F
8708  3480
8709  3481
8710  3482
8711  3483
8712  3484
8713  3485
8714  3486
8715  3487
8716  3488
8717  3489
8718  348A
8719  348B
8720  348C
8721  348D
8722  348E
8723  348F
8724  3490
8725  3491
8726  3492
8727  3493
8728  3494
8729  3495
8730  3496
8731  3497
8732  3498
8733  3499
8734  349A
8735  349B
8736  349C
8737  349D
8738  349E
8739  349F
8740  34A0
8741  34A1
8742  34A2
8743  34A3
8744  34A4
8745  34A5
8746  34A6
8747  34A7
8748  34A8
8749  34A9
8750  34AA
8751  34AB
8752  34AC
8753  34AD
8754  34AE
8755  34AF
8756  34B0
8757  34B1
8758  34B2
8759  34B3
8760  34B4
8761  34B5
8762  34B6
8763  34B7
8764  34B8
8765  34B9
8766  34BA
8767  34BB
8768  34BC
8769  34BD
8770  34BE
8771  34BF
8772  34C0
8773  34C1
8774  34C2
8775  34C3
8776  34C4
8777  34C5
8778  34C6
8779  34C7
8780  34C8
8781  34C9
8782  34CA
8783  34CB
8784  34CC
8785  34CD
8786  34CE
8787  34CF
8788  34D0
8789  34D1
8790  34D2
8791  34D3
8792  34D4
8793  34D5
8794  34D6
8795  34D7
8796  34D8
8797  34D9
8798  34DA
8799  34DB
8800  34DC
8801  34DD
8802  34DE
8803  34DF
8804  34E0
8805  34E1
8806  34E2
8807  34E3
8808  34E4
8809  34E5
8810  34E6
8811  34E7
8812  34E8
8813  34E9
8814  34EA
8815  34EB
8816  34EC
8817  34ED
8818  34EE
8819  34EF
8820  34F0
8821  34F1
8822  34F2
8823  34F3
8824  34F4
8825  34F5
8826  34F6
8827  34F7
8828  34F8
8829  34F9
8830  34FA
8831  34FB
8832  34FC
8833  34FD
8834  34FE
8835  34FF
8836  3500
8837  3501
8838  3502
8839  3503
8840  3504
8841  3505
8842  3506
8843  3507
8844  3508
8845  3509
8846  350A
8847  350B
8848  350C
8849  350D
8850  350E
8851  350F
8852  3510
8853  3511
8854  3512
8855  3513
8856  3514
8857  3515
8858  3516
8859  3517
8860  3518
8861  3519
8862  351A
8863  351B
8864  351C
8865  351D
8866  351E
8867  351F
8868  3520
8869  3521
8870  3522
8871  3523
8872  3524
8873  3525
8874  3526
8875  3527
8876  3528
8877  3529
8878  352A
8879  352B
8880  352C
8881  352D
8882  352E
8883  352F
8884  3530
8885  3531
8886  3532
8887  3533
8888  3534
8889  3535
8890  3536
8891  3537
8892  3538
8893  3539
8894  353A
8895  353B
8896  353C
8897  353D
8898  353E
8899  353F
8900  3540
8901  3541
8902  3542
8903  3543
8904  3544
8905  3545
8906  3546
8907  3547
8908  3548
8909  3549
8910  354A
8911  354B
8912  354C
8913  354D
8914  354E
8915  354F
8916  3550
8917  3551
8918  3552
8919  3553
8920  3554
8921  3555
8922  3556
8923  3557
8924  3558
8925  3559
8926  355A
8927  355B
8928  355C
8929  355D
8930  355E
8931  355F
8932  3560
8933  3561
8934  3562
8935  3563
8936  3564
8937  3565
8938  3566
8939  3567
8940  3568
8941  3569
8942  356A
8943  356B
8944  356C
8945  356D
8946  356E
8947  356F
8948  3570
8949  3571
8950  3572
8951  3573
8952  3574
8953  3575
8954  3576
8955  3577
8956  3578
8957  3579
8958  357A
8959  357B
8960  357C
8961  357D
8962  357E
8963  357F
8964  3580
8965  3581
8966  3582
8967  3583
8968  3584
8969  3585
8970  3586
8971  3587
8972  3588
8973  3589
8974  358A
8975  358B
8976  358C
8977  358D
8978  358E
8979  358F
8980  3590
8981  3591
8982  3592
8983  3593
8984  3594
8985  3595
8986  3596
8987  3597
8988  3598
8989  3599
8990  359A
8991  359B
8992  359C
8993  359D
8994  359E
8995  359F
8996  35A0
8997  35A1
8998  35A2
8999  35A3
9000  35A4
9001  35A5
9002  35A6
9003  35A7
9004  35A8
9005  35A9
9006  35AA
9007  35AB
9008  35AC
9009  35AD
9010  35AE
9011  35AF
9012  35B0
9013  35B1
9014  35B2
9015  35B3
9016  35B4
9017  35B5
9018  35B6
9019  35B7
9020  35B8
9021  35B9
9022  35BA
9023  35BB
9024  35BC
9025  35BD
9026  35BE
9027  35BF
9028  35C0
9029  35C1
9030  35C2
9031  35C3
9032  35C4
9033  35C5
9034  35C6
9035  35C7
9036  35C8
9037  35C9
9038  35CA
9039  35CB
9040  35CC
9041  35CD
9042  35CE
9043  35CF
9044  35D0
9045  35D1
9046  35D2
9047  35D3
9048  35D4
9049  35D5
9050  35D6
9051  35D7
9052  35D8
9053  35D9
9054  35DA
9055  35DB
9056  35DC
9057  35DD
9058  35DE
9059  35DF
9060  35E0
9061  35E1
9062  35E2
9063  35E3
9064  35E4
9065  35E5
9066  35E6
9067  35E7
9068  35E8
9069  35E9
9070  35EA
9071  35EB
9072  35EC
9073  35ED
9074  35EE
9075  35EF
9076  35F0
9077  35F1
9078  35F2
9079  35F3
9080  35F4
9081  35F5
9082  35F6
9083  35F7
9084  35F8
9085  35F9
9086  35FA
9087  35FB
9088  35FC
9089  35FD
9090  35FE
9091  35FF
9092  3600
9093  3601
9094  3602
9095  3603
9096  3604
9097  3605
9098  3606
9099  3607
9100  3608
9101  3609
9102  360A
9103  360B
9104  360C
9105  360D
9106  360E
9107  360F
9108  3610
9109  3611
9110  3612
9111  3613
9112  3614
9113  3615
9114  3616
9115  3617
9116  3618
9117  3619
9118  361A
9119  361B
9120  361C
9121  361D
9122  361E
9123  361F
9124  3620
9125  3621
9126  3622
9127  3623
9128  3624
9129  3625
9130  3626
9131  3627
9132  3628
9133  3629
9134  362A
9135  362B
9136  362C
9137  362D
9138  362E
9139  362F
9140  3630
9141  3631
9142  3632
9143  3633
9144  3634
9145  3635
9146  3636
9147  3637
9148  3638
9149  3639
9150  363A
9151  363B
9152  363C
9153  363D
9154  363E
9155  363F
9156  3640
9157  3641
9158  3642
9159  3643
9160  3644
9161  3645
9162  3646
9163  3647
9164  3648
9165  3649
9166  364A
9167  364B
9168  364C
9169  364D
9170  364E
9171  364F
9172  3650
9173  3651
9174  3652
9175  3653
9176  3654
9177  3655
9178  3656
9179  3657
9180  3658
9181  3659
9182  365A
9183  365B
9184  365C
9185  365D
9186  365E
9187  365F
9188  3660
9189  3661
9190  3662
9191  3663
9192  3664
9193  3665
9194  3666
9195  3667
9196  3668
9197  3669
9198  366A
9199  366B
9200  366C
9201  366D
9202  366E
9203  366F
9204  3670
9205  3671
9206  3672
9207  3673
9208  3674
9209  3675
9210  3676
9211  3677
9212  3678
9213  3679
9214  367A
9215  367B
9216  367C
9217  367D
9218  367E
9219  367F
9220  3680
9221  3681
9222  3682
9223  3683
9224  3684
9225  3685
9226  3686
9227  3687
9228  3688
9229  3689
9230  368A
9231  368B
9232  368C
9233  368D
9234  368E
9235  368F
9236  3690
9237  3691
9238  3692
9239  3693
9240  3694
9241  3695
9242  3696
9243  3697
9244  3698
9245  3699
9246  369A
9247  369B
9248  369C
9249  369D
9250  369E
9251  369F
9252  36A0
9253  36A1
9254  36A2
9255  36A3
9256  36A4
9257  36A5
9258  36A6
9259  36A7
9260  36A8
9261  36A9
9262  36AA
9263  36AB
9264  36AC
9265  36AD
9266  36AE
9267  36AF
9268  36B0
9269  36B1
9270  36B2
9271  36B3
9272  36B4
9273  36B5
9274  36B6
9275  36B7
9276  36B8
9277  36B9
9278  36BA
9279  36BB
9280  36BC
9281  36BD
9282  36BE
9283  36BF
9284  36C0
9285  36C1
9286  36C2
9287  36C3
9288  36C4
9289  36C5
9290  36C6
9291  36C7
9292  36C8
9293  36C9
9294  36CA
9295  36CB
9296  36CC
9297  36CD
9298  36CE
9299  36CF
9300  36D0
9301  36D1
9302  36D2
9303  36D3
9304  36D4
9305  36D5
9306  36D6
9307  36D7
9308  36D8
9309  36D9
9310  36DA
9311  36DB
9312  36DC
9313  36DD
9314  36DE
9315  36DF
9316  36E0
9317  36E1
9318  36E2
9319  36E3
9320  36E4
9321  36E5
9322  36E6
9323  36E7
9324  36E8
9325  36E9
9326  36EA
9327  36EB
9328  36EC
9329  36ED
9330  36EE
9331  36EF
9332  36F0
9333  36F1
9334  36F2
9335  36F3
9336  36F4
9337  36F5
9338  36F6
9339  36F7
9340  36F8
9341  36F9
9342  36FA
9343  36FB
9344  36FC
9345  36FD
9346  36FE
9347  36FF
9348  3700
9349  3701
9350  3702
9351  3703
9352  3704
9353  3705
9354  3706
9355  3707
9356  3708
9357  3709
9358  370A
9359  370B
9360  370C
9361  370D
9362  370E
9363  370F
9364  3710
9365  3711
9366  3712
9367  3713
9368  3714
9369  3715
9370  3716
9371  3717
9372  3718
9373  3719
9374  371A
9375  371B
9376  371C
9377  371D
9378  371E
9379  371F
9380  3720
9381  3721
9382  3722
9383  3723
9384  3724
9385  3725
9386  3726
9387  3727
9388  3728
9389  3729
9390  372A
9391  372B
9392  372C
9393  372D
9394  372E
9395  372F
9396  3730
9397  3731
9398  3732
9399  3733
9400  3734
9401  3735
9402  3736
9403  3737
9404  3738
9405  3739
9406  373A
9407  373B
9408  373C
9409  373D
9410  373E
9411  373F
9412  3740
9413  3741
9414  3742
9415  3743
9416  3744
9417  3745
9418  3746
9419  3747
9420  3748
9421  3749
9422  374A
9423  374B
9424  374C
9425  374D
9426  374E
9427  374F
9428  3750
9429  3751
9430  3752
9431  3753
9432  3754
9433  3755
9434  3756
9435  3757
9436  3758
9437  3759
9438  375A
9439  375B
9440  375C
9441  375D
9442  375E
9443  375F
9444  3760
9445  3761
9446  3762
9447  3763
9448  3764
9449  3765
9450  3766
9451  3767
9452  3768
9453  3769
9454  376A
9455  376B
9456  376C
9457  376D
9458  376E
9459  376F
9460  3770
9461  3771
9462  3772
9463  3773
9464  3774
9465  3775
9466  3776
9467  3777
9468  3778
9469  3779
9470  377A
9471  377B
9472  377C
9473  377D
9474  377E
9475  377F
9476  3780
9477  3781
9478  3782
9479  3783
9480  3784
9481  3785
9482  3786
9483  3787
9484  3788
9485  3789
9486  378A
9487  378B
9488  378C
9489  378D
9490  378E
9491  378F
9492  3790
9493  3791
9494  3792
9495  3793
9496  3794
9497  3795
9498  3796
9499  3797
9500  3798
9501  3799
9502  379A
9503  379B
9504  379C
9505  379D
9506  379E
9507  379F
9508  37A0
9509  37A1
9510  37A2
9511  37A3
9512  37A4
9513  37A5
9514  37A6
9515  37A7
9516  37A8
9517  37A9
9518  37AA
9519  37AB
9520  37AC
9521  37AD
9522  37AE
9523  37AF
9524  37B0
9525  37B1
9526  37B2
9527  37B3
9528  37B4
9529  37B5
9530  37B6
9531  37B7
9532  37B8
9533  37B9
9534  37BA
9535  37BB
9536  37BC
9537  37BD
9538  37BE
9539  37BF
9540  37C0
9541  37C1
9542  37C2
9543  37C3
9544  37C4
9545  37C5
9546  37C6
9547  37C7
9548  37C8
9549  37C9
9550  37CA
9551  37CB
9552  37CC
9553  37CD
9554  37CE
9555  37CF
9556  37D0
9557  37D1
9558  37D2
9559  37D3
9560  37D4
9561  37D5
9562  37D6
9563  37D7
9564  37D8
9565  37D9
9566  37DA
9567  37DB
9568  37DC
9569  37DD
9570  37DE
9571  37DF
9572  37E0
9573  37E1
9574  37E2
9575  37E3
9576  37E4
9577  37E5
9578  37E6
9579  37E7
9580  37E8
9581  37E9
9582  37EA
9583  37EB
9584  37EC
9585  37ED
9586  37EE
9587  37EF
9588  37F0
9589  37F1
9590  37F2
9591  37F3
9592  37F4
9593  37F5
9594  37F6
9595  37F7
9596  37F8
9597  37F9
9598  37FA
9599  37FB
9600  37FC
9601  37FD
9602  37FE
9603  37FF
9604  3800
9605  3801
9606  3802
9607  3803
9608  3804
9609  3805
9610  3806
9611  3807
9612  3808
9613  3809
9614  380A
9615  380B
9616  380C
9617  380D
9618  380E
9619  380F
9620  3810
9621  3811
9622  3812
9623  3813
9624  3814
9625  3815
9626  3816
9627  3817
9628  3818
9629  3819
9630  381A
9631  381B
9632  381C
9633  381D
9634  381E
9635  381F
9636  3820
9637  3821
9638  3822
9639  3823
9640  3824
9641  3825
9642  3826
9643  3827
9644  3828
9645  3829
9646  382A
9647  382B
9648  382C
9649  382D
9650  382E
9651  382F
9652  3830
9653  3831
9654  3832
9655  3833
9656  3834
9657  3835
9658  3836
9659  3837
9660  3838
9661  3839
9662  383A
9663  383B
9664  383C
9665  383D
9666  383E
9667  383F
9668  3840
9669  3841
9670  3842
9671  3843
9672  3844
9673  3845
9674  3846
9675  3847
9676  3848
9677  3849
9678  384A
9679  384B
9680  384C
9681  384D
9682  384E
9683  384F
9684  3850
9685  3851
9686  3852
9687  3853
9688  3854
9689  3855
9690  3856
9691  3857
9692  3858
9693  3859
9694  385A
9695  385B
9696  385C
9697  385D
9698  385E
9699  385F
9700  3860
9701  3861
9702  3862
9703  3863
9704  3864
9705  3865
9706  3866
9707  3867
9708  3868
9709  3869
9710  386A
9711  386B
9712  386C
9713  386D
9714  386E
9715  386F
9716  3870
9717  3871
9718  3872
9719  3873
9720  3874
9721  3875
9722  3876
9723  3877
9724  3878
9725  3879
9726  387A
9727  387B
9728  387C
9729  387D
9730  387E
9731  387F
9732  3880
9733  3881
9734  3882
9735  3883
9736  3884
9737  3885
9738  3886
9739  3887
9740  3888
9741  3889
9742  388A
9743  388B
9744  388C
9745  388D
9746  388E
9747  388F
9748  3890
9749  3891
9750  3892
9751  3893
9752  3894
9753  3895
9754  3896
9755  3897
9756  3898
9757  3899
9758  389A
9759  389B
9760  389C
9761  389D
9762  389E
9763  389F
9764  38A0
9765  38A1
9766  38A2
9767  38A3
9768  38A4
9769  38A5
9770  38A6
9771  38A7
9772  38A8
9773  38A9
9774  38AA
9775  38AB
9776  38AC
9777  38AD
9778  38AE
9779  38AF
9780  38B0
9781  38B1
9782  38B2
9783  38B3
9784  38B4
9785  38B5
9786  38B6
9787  38B7
9788  38B8
9789  38B9
9790  38BA
9791  38BB
9792  38BC
9793  38BD
9794  38BE
9795  38BF
9796  38C0
9797  38C1
9798  38C2
9799  38C3
9800  38C4
9801  38C5
9802  38C6
9803  38C7
9804  38C8
9805  38C9
9806  38CA
9807  38CB
9808  38CC
9809  38CD
9810  38CE
9811  38CF
9812  38D0
9813  38D1
9814  38D2
9815  38D3
9816  38D4
9817  38D5
9818  38D6
9819  38D7
9820  38D8
9821  38D9
9822  38DA
9823  38DB
9824  38DC
9825  38DD
9826  38DE
9827  38DF
9828  38E0
9829  38E1
9830  38E2
9831  38E3
9832  38E4
9833  38E5
9834  38E6
9835  38E7
9836  38E8
9837  38E9
9838  38EA
9839  38EB
9840  38EC
9841  38ED
9842  38EE
9843  38EF
9844  38F0
9845  38F1
9846  38F2
9847  38F3
9848  38F4
9849  38F5
9850  38F6
9851  38F7
9852  38F8
9853  38F9
9854  38FA
9855  38FB
9856  38FC
9857  38FD
9858  38FE
9859  38FF
9860  3900
9861  3901
9862  3902
9863  3903
9864  3904
9865  3905
9866  3906
9867  3907
9868  3908
9869  3909
9870  390A
9871  390B
9872  390C
9873  390D
9874  390E
9875  390F
9876  3910
9877  3911
9878  3912
9879  3913
9880  3914
9881  3915
9882  3916
9883  3917
9884  3918
9885  3919
9886  391A
9887  391B
9888  391C
9889  391D
9890  391E
9891  391F
9892  3920
9893  3921
9894  3922
9895  3923
9896  3924
9897  3925
9898  3926
9899  3927
9900  3928
9901  3929
9902  392A
9903  392B
9904  392C
9905  392D
9906  392E
9907  392F
9908  3930
9909  3931
9910  3932
9911  3933
9912  3934
9913  3935
9914  3936
9915  3937
9916  3938
9917  3939
9918  393A
9919  393B
9920  393C
9921  393D
9922  393E
9923  393F
9924  3940
9925  3941
9926  3942
9927  3943
9928  3944
9929  3945
9930  3946
9931  3947
9932  3948
9933  3949
9934  394A
9935  394B
9936  394C
9937  394D
9938  394E
9939  394F
9940  3950
9941  3951
9942  3952
9943  3953
9944  3954
9945  3955
9946  3956
9947  3957
9948  3958
9949  3959
9950  395A
9951  395B
9952  395C
9953  395D
9954  395E
9955  395F
9956  3960
9957  3961
9958  3962
9959  3963
9960  3964
9961  3965
9962  3966
9963  3967
9964  3968
9965  3969
9966  396A
9967  396B
9968  396C
9969  396D
9970  396E
9971  396F
9972  3970
9973  3971
9974  3972
9975  3973
9976  3974
9977  3975
9978  3976
9979  3977
9980  3978
9981  3979
9982  397A
9983  397B
9984  397C
9985  397D
9986  397E
9987  397F
9988  3980
9989  3981
9990  3982
9991  3983
9992  3984
9993  3985
9994  3986
9995  3987
9996  3988
9997  3989
9998  398A
9999  398B
10000  398C
10001  398D
10002  398E
10003  398F
10004  3990
10005  3991
10006  3992
10007  3993
10008  3994
10009  3995
10010  3996
10011  3997
10012  3998
10013  3999
10014  399A
10015  399B
10016  399C
10017  399D
10018  399E
10019  399F
10020  39A0
10021  39A1
10022  39A2
10023  39A3
10024  39A4
10025  39A5
10026  39A6
10027  39A7
10028  39A8
10029  39A9
10030  39AA
10031  39AB
10032  39AC
10033  39AD
10034  39AE
10035  39AF
10036  39B0
10037  39B1
10038  39B2
10039  39B3
10040  39B4
10041  39B5
10042  39B6
10043  39B7
10044  39B8
10045  39B9
10046  39BA
10047  39BB
10048  39BC
10049  39BD
10050  39BE
10051  39BF
10052  39C0
10053  39C1
10054  39C2
10055  39C3
10056  39C4
10057  39C5
10058  39C6
10059  39C7
10060  39C8
10061  39C9
10062  39CA
10063  39CB
10064  39CC
10065  39CD
10066  39CE
10067  39CF
10068  39D0
10069  39D1
10070  39D2
10071  39D3
10072  39D4
10073  39D5
10074  39D6
10075  39D7
10076  39D8
10077  39D9
10078  39DA
10079  39DB
10080  39DC
10081  39DD
10082  39DE
10083  39DF
10084  39E0
10085  39E1
10086  39E2
10087  39E3
10088  39E4
10089  39E5
10090  39E6
10091  39E7
10092  39E8
10093  39E9
10094  39EA
10095  39EB
10096  39EC
10097  39ED
10098  39EE
10099  39EF
10100  39F0
10101  39F1
10102  39F2
10103  39F3
10104  39F4
10105  39F5
10106  39F6
10107  39F7
10108  39F8
10109  39F9
10110  39FA
10111  39FB
10112  39FC
10113  39FD
10114  39FE
10115  39FF
10116  3A00
10117  3A01
10118  3A02
10119  3A03
10120  3A04
10121  3A05
10122  3A06
10123  3A07
10124  3A08
10125  3A09
10126  3A0A
10127  3A0B
10128  3A0C
10129  3A0D
10130  3A0E
10131  3A0F
10132  3A10
10133  3A11
10134  3A12
10135  3A13
10136  3A14
10137  3A15
10138  3A16
10139  3A17
10140  3A18
10141  3A19
10142  3A1A
10143  3A1B
10144  3A1C
10145  3A1D
10146  3A1E
10147  3A1F
10148  3A20
10149  3A21
10150  3A22
10151  3A23
10152  3A24
10153  3A25
10154  3A26
10155  3A27
10156  3A28
10157  3A29
10158  3A2A
10159  3A2B
10160  3A2C
10161  3A2D
10162  3A2E
10163  3A2F
10164  3A30
10165  3A31
10166  3A32
10167  3A33
10168  3A34
10169  3A35
10170  3A36
10171  3A37
10172  3A38
10173  3A39
10174  3A3A
10175  3A3B
10176  3A3C
10177  3A3D
10178  3A3E
10179  3A3F
10180  3A40
10181  3A41
10182  3A42
10183  3A43
10184  3A44
10185  3A45
10186  3A46
10187  3A47
10188  3A48
10189  3A49
10190  3A4A
10191  3A4B
10192  3A4C
10193  3A4D
10194  3A4E
10195  3A4F
10196  3A50
10197  3A51
10198  3A52
10199  3A53
10200  3A54
10201  3A55
10202  3A56
10203  3A57
10204  3A58
10205  3A59
10206  3A5A
10207  3A5B
10208  3A5C
10209  3A5D
10210  3A5E
10211  3A5F
10212  3A60
10213  3A61
10214  3A62
10215  3A63
10216  3A64
10217  3A65
10218  3A66
10219  3A67
10220  3A68
10221  3A69
10222  3A6A
10223  3A6B
10224  3A6C
10225  3A6D
10226  3A6E
10227  3A6F
10228  3A70
10229  3A71
10230  3A72
10231  3A73
10232  3A74
10233  3A75
10234  3A76
10235  3A77
10236  3A78
10237  3A79
10238  3A7A
10239  3A7B
10240  3A7C
10241  3A7D
10242  3A7E
10243  3A7F
10244  3A80
10245  3A81
10246  3A82
10247  3A83
10248  3A84
10249  3A85
10250  3A86
10251  3A87
10252  3A88
10253  3A89
10254  3A8A
10255  3A8B
10256  3A8C
10257  3A8D
10258  3A8E
10259  3A8F
10260  3A90
10261  3A91
10262  3A92
10263  3A93
10264  3A94
10265  3A95
10266  3A96
10267  3A97
10268  3A98
10269  3A99
10270  3A9A
10271  3A9B
10272  3A9C
10273  3A9D
10274  3A9E
10275  3A9F
10276  3AA0
10277  3AA1
10278  3AA2
10279  3AA3
10280  3AA4
10281  3AA5
10282  3AA6
10283  3AA7
10284  3AA8
10285  3AA9
10286  3AAA
10287  3AAB
10288  3AAC
10289  3AAD
10290  3AAE
10291  3AAF
10292  3AB0
10293  3AB1
10294  3AB2
10295  3AB3
10296  3AB4
10297  3AB5
10298  3AB6
10299  3AB7
10300  3AB8
10301  3AB9
10302  3ABA
10303  3ABB
10304  3ABC
10305  3ABD
10306  3ABE
10307  3ABF
10308  3AC0
10309  3AC1
10310  3AC2
10311  3AC3
10312  3AC4
10313  3AC5
10314  3AC6
10315  3AC7
10316  3AC8
10317  3AC9
10318  3ACA
10319  3ACB
10320  3ACC
10321  3ACD
10322  3ACE
10323  3ACF
10324  3AD0
10325  3AD1
10326  3AD2
10327  3AD3
10328  3AD4
10329  3AD5
10330  3AD6
10331  3AD7
10332  3AD8
10333  3AD9
10334  3ADA
10335  3ADB
10336  3ADC
10337  3ADD
10338  3ADE
10339  3ADF
10340  3AE0
10341  3AE1
10342  3AE2
10343  3AE3
10344  3AE4
10345  3AE5
10346  3AE6
10347  3AE7
10348  3AE8
10349  3AE9
10350  3AEA
10351  3AEB
10352  3AEC
10353  3AED
10354  3AEE
10355  3AEF
10356  3AF0
10357  3AF1
10358  3AF2
10359  3AF3
10360  3AF4
10361  3AF5
10362  3AF6
10363  3AF7
10364  3AF8
10365  3AF9
10366  3AFA
10367  3AFB
10368  3AFC
10369  3AFD
10370  3AFE
10371  3AFF
10372  3B00
10373  3B01
10374  3B02
10375  3B03
10376  3B04
10377  3B05
10378  3B06
10379  3B07
10380  3B08
10381  3B09
10382  3B0A
10383  3B0B
10384  3B0C
10385  3B0D
10386  3B0E
10387  3B0F
10388  3B10
10389  3B11
10390  3B12
10391  3B13
10392  3B14
10393  3B15
10394  3B16
10395  3B17
10396  3B18
10397  3B19
10398  3B1A
10399  3B1B
10400  3B1C
10401  3B1D
10402  3B1E
10403  3B1F
10404  3B20
10405  3B21
10406  3B22
10407  3B23
10408  3B24
10409  3B25
10410  3B26
10411  3B27
10412  3B28
10413  3B29
10414  3B2A
10415  3B2B
10416  3B2C
10417  3B2D
10418  3B2E
10419  3B2F
10420  3B30
10421  3B31
10422  3B32
10423  3B33
10424  3B34
10425  3B35
10426  3B36
10427  3B37
10428  3B38
10429  3B39
10430  3B3A
10431  3B3B
10432  3B3C
10433  3B3D
10434  3B3E
10435  3B3F
10436  3B40
10437  3B41
10438  3B42
10439  3B43
10440  3B44
10441  3B45
10442  3B46
10443  3B47
10444  3B48
10445  3B49
10446  3B4A
10447  3B4B
10448  3B4C
10449  3B4D
10450  3B4E
10451  3B4F
10452  3B50
10453  3B51
10454  3B52
10455  3B53
10456  3B54
10457  3B55
10458  3B56
10459  3B57
10460  3B58
10461  3B59
10462  3B5A
10463  3B5B
10464  3B5C
10465  3B5D
10466  3B5E
10467  3B5F
10468  3B60
10469  3B61
10470  3B62
10471  3B63
10472  3B64
10473  3B65
10474  3B66
10475  3B67
10476  3B68
10477  3B69
10478  3B6A
10479  3B6B
10480  3B6C
10481  3B6D
10482  3B6E
10483  3B6F
10484  3B70
10485  3B71
10486  3B72
10487  3B73
10488  3B74
10489  3B75
10490  3B76
10491  3B77
10492  3B78
10493  3B79
10494  3B7A
10495  3B7B
10496  3B7C
10497  3B7D
10498  3B7E
10499  3B7F
10500  3B80
10501  3B81
10502  3B82
10503  3B83
10504  3B84
10505  3B85
10506  3B86
10507  3B87
10508  3B88
10509  3B89
10510  3B8A
10511  3B8B
10512  3B8C
10513  3B8D
10514  3B8E
10515  3B8F
10516  3B90
10517  3B91
10518  3B92
10519  3B93
10520  3B94
10521  3B95
10522  3B96
10523  3B97
10524  3B98
10525  3B99
10526  3B9A
10527  3B9B
10528  3B9C
10529  3B9D
10530  3B9E
10531  3B9F
10532  3BA0
10533  3BA1
10534  3BA2
10535  3BA3
10536  3BA4
10537  3BA5
10538  3BA6
10539  3BA7
10540  3BA8
10541  3BA9
10542  3BAA
10543  3BAB
10544  3BAC
10545  3BAD
10546  3BAE
10547  3BAF
10548  3BB0
10549  3BB1
10550  3BB2
10551  3BB3
10552  3BB4
10553  3BB5
10554  3BB6
10555  3BB7
10556  3BB8
10557  3BB9
10558  3BBA
10559  3BBB
10560  3BBC
10561  3BBD
10562  3BBE
10563  3BBF
10564  3BC0
10565  3BC1
10566  3BC2
10567  3BC3
10568  3BC4
10569  3BC5
10570  3BC6
10571  3BC7
10572  3BC8
10573  3BC9
10574  3BCA
10575  3BCB
10576  3BCC
10577  3BCD
10578  3BCE
10579  3BCF
10580  3BD0
10581  3BD1
10582  3BD2
10583  3BD3
10584  3BD4
10585  3BD5
10586  3BD6
10587  3BD7
10588  3BD8
10589  3BD9
10590  3BDA
10591  3BDB
10592  3BDC
10593  3BDD
10594  3BDE
10595  3BDF
10596  3BE0
10597  3BE1
10598  3BE2
10599  3BE3
10600  3BE4
10601  3BE5
10602  3BE6
10603  3BE7
10604  3BE8
10605  3BE9
10606  3BEA
10607  3BEB
10608  3BEC
10609  3BED
10610  3BEE
10611  3BEF
10612  3BF0
10613  3BF1
10614  3BF2
10615  3BF3
10616  3BF4
10617  3BF5
10618  3BF6
10619  3BF7
10620  3BF8
10621  3BF9
10622  3BFA
10623  3BFB
10624  3BFC
10625  3BFD
10626  3BFE
10627  3BFF
10628  3C00
10629  3C01
10630  3C02
10631  3C03
10632  3C04
10633  3C05
10634  3C06
10635  3C07
10636  3C08
10637  3C09
10638  3C0A
10639  3C0B
10640  3C0C
10641  3C0D
10642  3C0E
10643  3C0F
10644  3C10
10645  3C11
10646  3C12
10647  3C13
10648  3C14
10649  3C15
10650  3C16
10651  3C17
10652  3C18
10653  3C19
10654  3C1A
10655  3C1B
10656  3C1C
10657  3C1D
10658  3C1E
10659  3C1F
10660  3C20
10661  3C21
10662  3C22
10663  3C23
10664  3C24
10665  3C25
10666  3C26
10667  3C27
10668  3C28
10669  3C29
10670  3C2A
10671  3C2B
10672  3C2C
10673  3C2D
10674  3C2E
10675  3C2F
10676  3C30
10677  3C31
10678  3C32
10679  3C33
10680  3C34
10681  3C35
10682  3C36
10683  3C37
10684  3C38
10685  3C39
10686  3C3A
10687  3C3B
10688  3C3C
10689  3C3D
10690  3C3E
10691  3C3F
10692  3C40
10693  3C41
10694  3C42
10695  3C43
10696  3C44
10697  3C45
10698  3C46
10699  3C47
10700  3C48
10701  3C49
10702  3C4A
10703  3C4B
10704  3C4C
10705  3C4D
10706  3C4E
10707  3C4F
10708  3C50
10709  3C51
10710  3C52
10711  3C53
10712  3C54
10713  3C55
10714  3C56
10715  3C57
10716  3C58
10717  3C59
10718  3C5A
10719  3C5B
10720  3C5C
10721  3C5D
10722  3C5E
10723  3C5F
10724  3C60
10725  3C61
10726  3C62
10727  3C63
10728  3C64
10729  3C65
10730  3C66
10731  3C67
10732  3C68
10733  3C69
10734  3C6A
10735  3C6B
10736  3C6C
10737  3C6D
10738  3C6E
10739  3C6F
10740  3C70
10741  3C71
10742  3C72
10743  3C73
10744  3C74
10745  3C75
10746  3C76
10747  3C77
10748  3C78
10749  3C79
10750  3C7A
10751  3C7B
10752  3C7C
10753  3C7D
10754  3C7E
10755  3C7F
10756  3C80
10757  3C81
10758  3C82
10759  3C83
10760  3C84
10761  3C85
10762  3C86
10763  3C87
10764  3C88
10765  3C89
10766  3C8A
10767  3C8B
10768  3C8C
10769  3C8D
10770  3C8E
10771  3C8F
10772  3C90
10773  3C91
10774  3C92
10775  3C93
10776  3C94
10777  3C95
10778  3C96
10779  3C97
10780  3C98
10781  3C99
10782  3C9A
10783  3C9B
10784  3C9C
10785  3C9D
10786  3C9E
10787  3C9F
10788  3CA0
10789  3CA1
10790  3CA2
10791  3CA3
10792  3CA4
10793  3CA5
10794  3CA6
10795  3CA7
10796  3CA8
10797  3CA9
10798  3CAA
10799  3CAB
10800  3CAC
10801  3CAD
10802  3CAE
10803  3CAF
10804  3CB0
10805  3CB1
10806  3CB2
10807  3CB3
10808  3CB4
10809  3CB5
10810  3CB6
10811  3CB7
10812  3CB8
10813  3CB9
10814  3CBA
10815  3CBB
10816  3CBC
10817  3CBD
10818  3CBE
10819  3CBF
10820  3CC0
10821  3CC1
10822  3CC2
10823  3CC3
10824  3CC4
10825  3CC5
10826  3CC6
10827  3CC7
10828  3CC8
10829  3CC9
10830  3CCA
10831  3CCB
10832  3CCC
10833  3CCD
10834  3CCE
10835  3CCF
10836  3CD0
10837  3CD1
10838  3CD2
10839  3CD3
10840  3CD4
10841  3CD5
10842  3CD6
10843  3CD7
10844  3CD8
10845  3CD9
10846  3CDA
10847  3CDB
10848  3CDC
10849  3CDD
10850  3CDE
10851  3CDF
10852  3CE0
10853  3CE1
10854  3CE2
10855  3CE3
10856  3CE4
10857  3CE5
10858  3CE6
10859  3CE7
10860  3CE8
10861  3CE9
10862  3CEA
10863  3CEB
10864  3CEC
10865  3CED
10866  3CEE
10867  3CEF
10868  3CF0
10869  3CF1
10870  3CF2
10871  3CF3
10872  3CF4
10873  3CF5
10874  3CF6
10875  3CF7
10876  3CF8
10877  3CF9
10878  3CFA
10879  3CFB
10880  3CFC
10881  3CFD
10882  3CFE
10883  3CFF
10884  3D00
10885  3D01
10886  3D02
10887  3D03
10888  3D04
10889  3D05
10890  3D06
10891  3D07
10892  3D08
10893  3D09
10894  3D0A
10895  3D0B
10896  3D0C
10897  3D0D
10898  3D0E
10899  3D0F
10900  3D10
10901  3D11
10902  3D12
10903  3D13
10904  3D14
10905  3D15
10906  3D16
10907  3D17
10908  3D18
10909  3D19
10910  3D1A
10911  3D1B
10912  3D1C
10913  3D1D
10914  3D1E
10915  3D1F
10916  3D20
10917  3D21
10918  3D22
10919  3D23
10920  3D24
10921  3D25
10922  3D26
10923  3D27
10924  3D28
10925  3D29
10926  3D2A
10927  3D2B
10928  3D2C
10929  3D2D
10930  3D2E
10931  3D2F
10932  3D30
10933  3D31
10934  3D32
10935  3D33
10936  3D34
10937  3D35
10938  3D36
10939  3D37
10940  3D38
10941  3D39
10942  3D3A
10943  3D3B
10944  3D3C
10945  3D3D
10946  3D3E
10947  3D3F
10948  3D40
10949  3D41
10950  3D42
10951  3D43
10952  3D44
10953  3D45
10954  3D46
10955  3D47
10956  3D48
10957  3D49
10958  3D4A
10959  3D4B
10960  3D4C
10961  3D4D
10962  3D4E
10963  3D4F
10964  3D50
10965  3D51
10966  3D52
10967  3D53
10968  3D54
10969  3D55
10970  3D56
10971  3D57
10972  3D58
10973  3D59
10974  3D5A
10975  3D5B
10976  3D5C
10977  3D5D
10978  3D5E
10979  3D5F
10980  3D60
10981  3D61
10982  3D62
10983  3D63
10984  3D64
10985  3D65
10986  3D66
10987  3D67
10988  3D68
10989  3D69
10990  3D6A
10991  3D6B
10992  3D6C
10993  3D6D
10994  3D6E
10995  3D6F
10996  3D70
10997  3D71
10998  3D72
10999  3D73
11000  3D74
11001  3D75
11002  3D76
11003  3D77
11004  3D78
11005  3D79
11006  3D7A
11007  3D7B
11008  3D7C
11009  3D7D
11010  3D7E
11011  3D7F
11012  3D80
11013  3D81
11014  3D82
11015  3D83
11016  3D84
11017  3D85
11018  3D86
11019  3D87
11020  3D88
11021  3D89
11022  3D8A
11023  3D8B
11024  3D8C
11025  3D8D
11026  3D8E
11027  3D8F
11028  3D90
11029  3D91
11030  3D92
11031  3D93
11032  3D94
11033  3D95
11034  3D96
11035  3D97
11036  3D98
11037  3D99
11038  3D9A
11039  3D9B
11040  3D9C
11041  3D9D
11042  3D9E
11043  3D9F
11044  3DA0
11045  3DA1
11046  3DA2
11047  3DA3
11048  3DA4
11049  3DA5
11050  3DA6
11051  3DA7
11052  3DA8
11053  3DA9
11054  3DAA
11055  3DAB
11056  3DAC
11057  3DAD
11058  3DAE
11059  3DAF
11060  3DB0
11061  3DB1
11062  3DB2
11063  3DB3
11064  3DB4
11065  3DB5
11066  3DB6
11067  3DB7
11068  3DB8
11069  3DB9
11070  3DBA
11071  3DBB
11072  3DBC
11073  3DBD
11074  3DBE
11075  3DBF
11076  3DC0
11077  3DC1
11078  3DC2
11079  3DC3
11080  3DC4
11081  3DC5
11082  3DC6
11083  3DC7
11084  3DC8
11085  3DC9
11086  3DCA
11087  3DCB
11088  3DCC
11089  3DCD
11090  3DCE
11091  3DCF
11092  3DD0
11093  3DD1
11094  3DD2
11095  3DD3
11096  3DD4
11097  3DD5
11098  3DD6
11099  3DD7
11100  3DD8
11101  3DD9
11102  3DDA
11103  3DDB
11104  3DDC
11105  3DDD
11106  3DDE
11107  3DDF
11108  3DE0
11109  3DE1
11110  3DE2
11111  3DE3
11112  3DE4
11113  3DE5
11114  3DE6
11115  3DE7
11116  3DE8
11117  3DE9
11118  3DEA
11119  3DEB
11120  3DEC
11121  3DED
11122  3DEE
11123  3DEF
11124  3DF0
11125  3DF1
11126  3DF2
11127  3DF3
11128  3DF4
11129  3DF5
11130  3DF6
11131  3DF7
11132  3DF8
11133  3DF9
11134  3DFA
11135  3DFB
11136  3DFC
11137  3DFD
11138  3DFE
11139  3DFF
11140  3E00
11141  3E01
11142  3E02
11143  3E03
11144  3E04
11145  3E05
11146  3E06
11147  3E07
11148  3E08
11149  3E09
11150  3E0A
11151  3E0B
11152  3E0C
11153  3E0D
11154  3E0E
11155  3E0F
11156  3E10
11157  3E11
11158  3E12
11159  3E13
11160  3E14
11161  3E15
11162  3E16
11163  3E17
11164  3E18
11165  3E19
11166  3E1A
11167  3E1B
11168  3E1C
11169  3E1D
11170  3E1E
11171  3E1F
11172  3E20
11173  3E21
11174  3E22
11175  3E23
11176  3E24
11177  3E25
11178  3E26
11179  3E27
11180  3E28
11181  3E29
11182  3E2A
11183  3E2B
11184  3E2C
11185  3E2D
11186  3E2E
11187  3E2F
11188  3E30
11189  3E31
11190  3E32
11191  3E33
11192  3E34
11193  3E35
11194  3E36
11195  3E37
11196  3E38
11197  3E39
11198  3E3A
11199  3E3B
11200  3E3C
11201  3E3D
11202  3E3E
11203  3E3F
11204  3E40
11205  3E41
11206  3E42
11207  3E43
11208  3E44
11209  3E45
11210  3E46
11211  3E47
11212  3E48
11213  3E49
11214  3E4A
11215  3E4B
11216  3E4C
11217  3E4D
11218  3E4E
11219  3E4F
11220  3E50
11221  3E51
11222  3E52
11223  3E53
11224  3E54
11225  3E55
11226  3E56
11227  3E57
11228  3E58
11229  3E59
11230  3E5A
11231  3E5B
11232  3E5C
11233  3E5D
11234  3E5E
11235  3E5F
11236  3E60
11237  3E61
11238  3E62
11239  3E63
11240  3E64
11241  3E65
11242  3E66
11243  3E67
11244  3E68
11245  3E69
11246  3E6A
11247  3E6B
11248  3E6C
11249  3E6D
11250  3E6E
11251  3E6F
11252  3E70
11253  3E71
11254  3E72
11255  3E73
11256  3E74
11257  3E75
11258  3E76
11259  3E77
11260  3E78
11261  3E79
11262  3E7A
11263  3E7B
11264  3E7C
11265  3E7D
11266  3E7E
11267  3E7F
11268  3E80
11269  3E81
11270  3E82
11271  3E83
11272  3E84
11273  3E85
11274  3E86
11275  3E87
11276  3E88
11277  3E89
11278  3E8A
11279  3E8B
11280  3E8C
11281  3E8D
11282  3E8E
11283  3E8F
11284  3E90
11285  3E91
11286  3E92
11287  3E93
11288  3E94
11289  3E95
11290  3E96
11291  3E97
11292  3E98
11293  3E99
11294  3E9A
11295  3E9B
11296  3E9C
11297  3E9D
11298  3E9E
11299  3E9F
11300  3EA0
11301  3EA1
11302  3EA2
11303  3EA3
11304  3EA4
11305  3EA5
11306  3EA6
11307  3EA7
11308  3EA8
11309  3EA9
11310  3EAA
11311  3EAB
11312  3EAC
11313  3EAD
11314  3EAE
11315  3EAF
11316  3EB0
11317  3EB1
11318  3EB2
11319  3EB3
11320  3EB4
11321  3EB5
11322  3EB6
11323  3EB7
11324  3EB8
11325  3EB9
11326  3EBA
11327  3EBB
11328  3EBC
11329  3EBD
11330  3EBE
11331  3EBF
11332  3EC0
11333  3EC1
11334  3EC2
11335  3EC3
11336  3EC4
11337  3EC5
11338  3EC6
11339  3EC7
11340  3EC8
11341  3EC9
11342  3ECA
11343  3ECB
11344  3ECC
11345  3ECD
11346  3ECE
11347  3ECF
11348  3ED0
11349  3ED1
11350  3ED2
11351  3ED3
11352  3ED4
11353  3ED5
11354  3ED6
11355  3ED7
11356  3ED8
11357  3ED9
11358  3EDA
11359  3EDB
11360  3EDC
11361  3EDD
11362  3EDE
11363  3EDF
11364  3EE0
11365  3EE1
11366  3EE2
11367  3EE3
11368  3EE4
11369  3EE5
11370  3EE6
11371  3EE7
11372  3EE8
11373  3EE9
11374  3EEA
11375  3EEB
11376  3EEC
11377  3EED
11378  3EEE
11379  3EEF
11380  3EF0
11381  3EF1
11382  3EF2
11383  3EF3
11384  3EF4
11385  3EF5
11386  3EF6
11387  3EF7
11388  3EF8
11389  3EF9
11390  3EFA
11391  3EFB
11392  3EFC
11393  3EFD
11394  3EFE
11395  3EFF
11396  3F00
11397  3F01
11398  3F02
11399  3F03
11400  3F04
11401  3F05
11402  3F06
11403  3F07
11404  3F08
11405  3F09
11406  3F0A
11407  3F0B
11408  3F0C
11409  3F0D
11410  3F0E
11411  3F0F
11412  3F10
11413  3F11
11414  3F12
11415  3F13
11416  3F14
11417  3F15
11418  3F16
11419  3F17
11420  3F18
11421  3F19
11422  3F1A
11423  3F1B
11424  3F1C
11425  3F1D
11426  3F1E
11427  3F1F
11428  3F20
11429  3F21
11430  3F22
11431  3F23
11432  3F24
11433  3F25
11434  3F26
11435  3F27
11436  3F28
11437  3F29
11438  3F2A
11439  3F2B
11440  3F2C
11441  3F2D
11442  3F2E
11443  3F2F
11444  3F30
11445  3F31
11446  3F32
11447  3F33
11448  3F34
11449  3F35
11450  3F36
11451  3F37
11452  3F38
11453  3F39
11454  3F3A
11455  3F3B
11456  3F3C
11457  3F3D
11458  3F3E
11459  3F3F
11460  3F40
11461  3F41
11462  3F42
11463  3F43
11464  3F44
11465  3F45
11466  3F46
11467  3F47
11468  3F48
11469  3F49
11470  3F4A
11471  3F4B
11472  3F4C
11473  3F4D
11474  3F4E
11475  3F4F
11476  3F50
11477  3F51
11478  3F52
11479  3F53
11480  3F54
11481  3F55
11482  3F56
11483  3F57
11484  3F58
11485  3F59
11486  3F5A
11487  3F5B
11488  3F5C
11489  3F5D
11490  3F5E
11491  3F5F
11492  3F60
11493  3F61
11494  3F62
11495  3F63
11496  3F64
11497  3F65
11498  3F66
11499  3F67
11500  3F68
11501  3F69
11502  3F6A
11503  3F6B
11504  3F6C
11505  3F6D
11506  3F6E
11507  3F6F
11508  3F70
11509  3F71
11510  3F72
11511  3F73
11512  3F74
11513  3F75
11514  3F76
11515  3F77
11516  3F78
11517  3F79
11518  3F7A
11519  3F7B
11520  3F7C
11521  3F7D
11522  3F7E
11523  3F7F
11524  3F80
11525  3F81
11526  3F82
11527  3F83
11528  3F84
11529  3F85
11530  3F86
11531  3F87
11532  3F88
11533  3F89
11534  3F8A
11535  3F8B
11536  3F8C
11537  3F8D
11538  3F8E
11539  3F8F
11540  3F90
11541  3F91
11542  3F92
11543  3F93
11544  3F94
11545  3F95
11546  3F96
11547  3F97
11548  3F98
11549  3F99
11550  3F9A
11551  3F9B
11552  3F9C
11553  3F9D
11554  3F9E
11555  3F9F
11556  3FA0
11557  3FA1
11558  3FA2
11559  3FA3
11560  3FA4
11561  3FA5
11562  3FA6
11563  3FA7
11564  3FA8
11565  3FA9
11566  3FAA
11567  3FAB
11568  3FAC
11569  3FAD
11570  3FAE
11571  3FAF
11572  3FB0
11573  3FB1
11574  3FB2
11575  3FB3
11576  3FB4
11577  3FB5
11578  3FB6
11579  3FB7
11580  3FB8
11581  3FB9
11582  3FBA
11583  3FBB
11584  3FBC
11585  3FBD
11586  3FBE
11587  3FBF
11588  3FC0
11589  3FC1
11590  3FC2
11591  3FC3
11592  3FC4
11593  3FC5
11594  3FC6
11595  3FC7
11596  3FC8
11597  3FC9
11598  3FCA
11599  3FCB
11600  3FCC
11601  3FCD
11602  3FCE
11603  3FCF
11604  3FD0
11605  3FD1
11606  3FD2
11607  3FD3
11608  3FD4
11609  3FD5
11610  3FD6
11611  3FD7
11612  3FD8
11613  3FD9
11614  3FDA
11615  3FDB
11616  3FDC
11617  3FDD
11618  3FDE
11619  3FDF
11620  3FE0
11621  3FE1
11622  3FE2
11623  3FE3
11624  3FE4
11625  3FE5
11626  3FE6
11627  3FE7
11628  3FE8
11629  3FE9
11630  3FEA
11631  3FEB
11632  3FEC
11633  3FED
11634  3FEE
11635  3FEF
11636  3FF0
11637  3FF1
11638  3FF2
11639  3FF3
11640  3FF4
11641  3FF5
11642  3FF6
11643  3FF7
11644  3FF8
11645  3FF9
11646  3FFA
11647  3FFB
11648  3FFC
11649  3FFD
11650  3FFE
11651  3FFF
11652  4000
11653  4001
11654  4002
11655  4003
11656  4004
11657  4005
11658  4006
11659  4007
11660  4008
11661  4009
11662  400A
11663  400B
11664  400C
11665  400D
11666  400E
11667  400F
11668  4010
11669  4011
11670  4012
11671  4013
11672  4014
11673  4015
11674  4016
11675  4017
11676  4018
11677  4019
11678  401A
11679  401B
11680  401C
11681  401D
11682  401E
11683  401F
11684  4020
11685  4021
11686  4022
11687  4023
11688  4024
11689  4025
11690  4026
11691  4027
11692  4028
11693  4029
11694  402A
11695  402B
11696  402C
11697  402D
11698  402E
11699  402F
11700  4030
11701  4031
11702  4032
11703  4033
11704  4034
11705  4035
11706  4036
11707  4037
11708  4038
11709  4039
11710  403A
11711  403B
11712  403C
11713  403D
11714  403E
11715  403F
11716  4040
11717  4041
11718  4042
11719  4043
11720  4044
11721  4045
11722  4046
11723  4047
11724  4048
11725  4049
11726  404A
11727  404B
11728  404C
11729  404D
11730  404E
11731  404F
11732  4050
11733  4051
11734  4052
11735  4053
11736  4054
11737  4055
11738  4056
11739  4057
11740  4058
11741  4059
11742  405A
11743  405B
11744  405C
11745  405D
11746  405E
11747  405F
11748  4060
11749  4061
11750  4062
11751  4063
11752  4064
11753  4065
11754  4066
11755  4067
11756  4068
11757  4069
11758  406A
11759  406B
11760  406C
11761  406D
11762  406E
11763  406F
11764  4070
11765  4071
11766  4072
11767  4073
11768  4074
11769  4075
11770  4076
11771  4077
11772  4078
11773  4079
11774  407A
11775  407B
11776  407C
11777  407D
11778  407E
11779  407F
11780  4080
11781  4081
11782  4082
11783  4083
11784  4084
11785  4085
11786  4086
11787  4087
11788  4088
11789  4089
11790  408A
11791  408B
11792  408C
11793  408D
11794  408E
11795  408F
11796  4090
11797  4091
11798  4092
11799  4093
11800  4094
11801  4095
11802  4096
11803  4097
11804  4098
11805  4099
11806  409A
11807  409B
11808  409C
11809  409D
11810  409E
11811  409F
11812  40A0
11813  40A1
11814  40A2
11815  40A3
11816  40A4
11817  40A5
11818  40A6
11819  40A7
11820  40A8
11821  40A9
11822  40AA
11823  40AB
11824  40AC
11825  40AD
11826  40AE
11827  40AF
11828  40B0
11829  40B1
11830  40B2
11831  40B3
11832  40B4
11833  40B5
11834  40B6
11835  40B7
11836  40B8
11837  40B9
11838  40BA
11839  40BB
11840  40BC
11841  40BD
11842  40BE
11843  40BF
11844  40C0
11845  40C1
11846  40C2
11847  40C3
11848  40C4
11849  40C5
11850  40C6
11851  40C7
11852  40C8
11853  40C9
11854  40CA
11855  40CB
11856  40CC
11857  40CD
11858  40CE
11859  40CF
11860  40D0
11861  40D1
11862  40D2
11863  40D3
11864  40D4
11865  40D5
11866  40D6
11867  40D7
11868  40D8
11869  40D9
11870  40DA
11871  40DB
11872  40DC
11873  40DD
11874  40DE
11875  40DF
11876  40E0
11877  40E1
11878  40E2
11879  40E3
11880  40E4
11881  40E5
11882  40E6
11883  40E7
11884  40E8
11885  40E9
11886  40EA
11887  40EB
11888  40EC
11889  40ED
11890  40EE
11891  40EF
11892  40F0
11893  40F1
11894  40F2
11895  40F3
11896  40F4
11897  40F5
11898  40F6
11899  40F7
11900  40F8
11901  40F9
11902  40FA
11903  40FB
11904  40FC
11905  40FD
11906  40FE
11907  40FF
11908  4100
11909  4101
11910  4102
11911  4103
11912  4104
11913  4105
11914  4106
11915  4107
11916  4108
11917  4109
11918  410A
11919  410B
11920  410C
11921  410D
11922  410E
11923  410F
11924  4110
11925  4111
11926  4112
11927  4113
11928  4114
11929  4115
11930  4116
11931  4117
11932  4118
11933  4119
11934  411A
11935  411B
11936  411C
11937  411D
11938  411E
11939  411F
11940  4120
11941  4121
11942  4122
11943  4123
11944  4124
11945  4125
11946  4126
11947  4127
11948  4128
11949  4129
11950  412A
11951  412B
11952  412C
11953  412D
11954  412E
11955  412F
11956  4130
11957  4131
11958  4132
11959  4133
11960  4134
11961  4135
11962  4136
11963  4137
11964  4138
11965  4139
11966  413A
11967  413B
11968  413C
11969  413D
11970  413E
11971  413F
11972  4140
11973  4141
11974  4142
11975  4143
11976  4144
11977  4145
11978  4146
11979  4147
11980  4148
11981  4149
11982  414A
11983  414B
11984  414C
11985  414D
11986  414E
11987  414F
11988  4150
11989  4151
11990  4152
11991  4153
11992  4154
11993  4155
11994  4156
11995  4157
11996  4158
11997  4159
11998  415A
11999  415B
12000  415C
12001  415D
12002  415E
12003  415F
12004  4160
12005  4161
12006  4162
12007  4163
12008  4164
12009  4165
12010  4166
12011  4167
12012  4168
12013  4169
12014  416A
12015  416B
12016  416C
12017  416D
12018  416E
12019  416F
12020  4170
12021  4171
12022  4172
12023  4173
12024  4174
12025  4175
12026  4176
12027  4177
12028  4178
12029  4179
12030  417A
12031  417B
12032  417C
12033  417D
12034  417E
12035  417F
12036  4180
12037  4181
12038  4182
12039  4183
12040  4184
12041  4185
12042  4186
12043  4187
12044  4188
12045  4189
12046  418A
12047  418B
12048  418C
12049  418D
12050  418E
12051  418F
12052  4190
12053  4191
12054  4192
12055  4193
12056  4194
12057  4195
12058  4196
12059  4197
12060  4198
12061  4199
12062  419A
12063  419B
12064  419C
12065  419D
12066  419E
12067  419F
12068  41A0
12069  41A1
12070  41A2
12071  41A3
12072  41A4
12073  41A5
12074  41A6
12075  41A7
12076  41A8
12077  41A9
12078  41AA
12079  41AB
12080  41AC
12081  41AD
12082  41AE
12083  41AF
12084  41B0
12085  41B1
12086  41B2
12087  41B3
12088  41B4
12089  41B5
12090  41B6
12091  41B7
12092  41B8
12093  41B9
12094  41BA
12095  41BB
12096  41BC
12097  41BD
12098  41BE
12099  41BF
12100  41C0
12101  41C1
12102  41C2
12103  41C3
12104  41C4
12105  41C5
12106  41C6
12107  41C7
12108  41C8
12109  41C9
12110  41CA
12111  41CB
12112  41CC
12113  41CD
12114  41CE
12115  41CF
12116  41D0
12117  41D1
12118  41D2
12119  41D3
12120  41D4
12121  41D5
12122  41D6
12123  41D7
12124  41D8
12125  41D9
12126  41DA
12127  41DB
12128  41DC
12129  41DD
12130  41DE
12131  41DF
12132  41E0
12133  41E1
12134  41E2
12135  41E3
12136  41E4
12137  41E5
12138  41E6
12139  41E7
12140  41E8
12141  41E9
12142  41EA
12143  41EB
12144  41EC
12145  41ED
12146  41EE
12147  41EF
12148  41F0
12149  41F1
12150  41F2
12151  41F3
12152  41F4
12153  41F5
12154  41F6
12155  41F7
12156  41F8
12157  41F9
12158  41FA
12159  41FB
12160  41FC
12161  41FD
12162  41FE
12163  41FF
12164  4200
12165  4201
12166  4202
12167  4203
12168  4204
12169  4205
12170  4206
12171  4207
12172  4208
12173  4209
12174  420A
12175  420B
12176  420C
12177  420D
12178  420E
12179  420F
12180  4210
12181  4211
12182  4212
12183  4213
12184  4214
12185  4215
12186  4216
12187  4217
12188  4218
12189  4219
12190  421A
12191  421B
12192  421C
12193  421D
12194  421E
12195  421F
12196  4220
12197  4221
12198  4222
12199  4223
12200  4224
12201  4225
12202  4226
12203  4227
12204  4228
12205  4229
12206  422A
12207  422B
12208  422C
12209  422D
12210  422E
12211  422F
12212  4230
12213  4231
12214  4232
12215  4233
12216  4234
12217  4235
12218  4236
12219  4237
12220  4238
12221  4239
12222  423A
12223  423B
12224  423C
12225  423D
12226  423E
12227  423F
12228  4240
12229  4241
12230  4242
12231  4243
12232  4244
12233  4245
12234  4246
12235  4247
12236  4248
12237  4249
12238  424A
12239  424B
12240  424C
12241  424D
12242  424E
12243  424F
12244  4250
12245  4251
12246  4252
12247  4253
12248  4254
12249  4255
12250  4256
12251  4257
12252  4258
12253  4259
12254  425A
12255  425B
12256  425C
12257  425D
12258  425E
12259  425F
12260  4260
12261  4261
12262  4262
12263  4263
12264  4264
12265  4265
12266  4266
12267  4267
12268  4268
12269  4269
12270  426A
12271  426B
12272  426C
12273  426D
12274  426E
12275  426F
12276  4270
12277  4271
12278  4272
12279  4273
12280  4274
12281  4275
12282  4276
12283  4277
12284  4278
12285  4279
12286  427A
12287  427B
12288  427C
12289  427D
12290  427E
12291  427F
12292  4280
12293  4281
12294  4282
12295  4283
12296  4284
12297  4285
12298  4286
12299  4287
12300  4288
12301  4289
12302  428A
12303  428B
12304  428C
12305  428D
12306  428E
12307  428F
12308  4290
12309  4291
12310  4292
12311  4293
12312  4294
12313  4295
12314  4296
12315  4297
12316  4298
12317  4299
12318  429A
12319  429B
12320  429C
12321  429D
12322  429E
12323  429F
12324  42A0
12325  42A1
12326  42A2
12327  42A3
12328  42A4
12329  42A5
12330  42A6
12331  42A7
12332  42A8
12333  42A9
12334  42AA
12335  42AB
12336  42AC
12337  42AD
12338  42AE
12339  42AF
12340  42B0
12341  42B1
12342  42B2
12343  42B3
12344  42B4
12345  42B5
12346  42B6
12347  42B7
12348  42B8
12349  42B9
12350  42BA
12351  42BB
12352  42BC
12353  42BD
12354  42BE
12355  42BF
12356  42C0
12357  42C1
12358  42C2
12359  42C3
12360  42C4
12361  42C5
12362  42C6
12363  42C7
12364  42C8
12365  42C9
12366  42CA
12367  42CB
12368  42CC
12369  42CD
12370  42CE
12371  42CF
12372  42D0
12373  42D1
12374  42D2
12375  42D3
12376  42D4
12377  42D5
12378  42D6
12379  42D7
12380  42D8
12381  42D9
12382  42DA
12383  42DB
12384  42DC
12385  42DD
12386  42DE
12387  42DF
12388  42E0
12389  42E1
12390  42E2
12391  42E3
12392  42E4
12393  42E5
12394  42E6
12395  42E7
12396  42E8
12397  42E9
12398  42EA
12399  42EB
12400  42EC
12401  42ED
12402  42EE
12403  42EF
12404  42F0
12405  42F1
12406  42F2
12407  42F3
12408  42F4
12409  42F5
12410  42F6
12411  42F7
12412  42F8
12413  42F9
12414  42FA
12415  42FB
12416  42FC
12417  42FD
12418  42FE
12419  42FF
12420  4300
12421  4301
12422  4302
12423  4303
12424  4304
12425  4305
12426  4306
12427  4307
12428  4308
12429  4309
12430  430A
12431  430B
12432  430C
12433  430D
12434  430E
12435  430F
12436  4310
12437  4311
12438  4312
12439  4313
12440  4314
12441  4315
12442  4316
12443  4317
12444  4318
12445  4319
12446  431A
12447  431B
12448  431C
12449  431D
12450  431E
12451  431F
12452  4320
12453  4321
12454  4322
12455  4323
12456  4324
12457  4325
12458  4326
12459  4327
12460  4328
12461  4329
12462  432A
12463  432B
12464  432C
12465  432D
12466  432E
12467  432F
12468  4330
12469  4331
12470  4332
12471  4333
12472  4334
12473  4335
12474  4336
12475  4337
12476  4338
12477  4339
12478  433A
12479  433B
12480  433C
12481  433D
12482  433E
12483  433F
12484  4340
12485  4341
12486  4342
12487  4343
12488  4344
12489  4345
12490  4346
12491  4347
12492  4348
12493  4349
12494  434A
12495  434B
12496  434C
12497  434D
12498  434E
12499  434F
12500  4350
12501  4351
12502  4352
12503  4353
12504  4354
12505  4355
12506  4356
12507  4357
12508  4358
12509  4359
12510  435A
12511  435B
12512  435C
12513  435D
12514  435E
12515  435F
12516  4360
12517  4361
12518  4362
12519  4363
12520  4364
12521  4365
12522  4366
12523  4367
12524  4368
12525  4369
12526  436A
12527  436B
12528  436C
12529  436D
12530  436E
12531  436F
12532  4370
12533  4371
12534  4372
12535  4373
12536  4374
12537  4375
12538  4376
12539  4377
12540  4378
12541  4379
12542  437A
12543  437B
12544  437C
12545  437D
12546  437E
12547  437F
12548  4380
12549  4381
12550  4382
12551  4383
12552  4384
12553  4385
12554  4386
12555  4387
12556  4388
12557  4389
12558  438A
12559  438B
12560  438C
12561  438D
12562  438E
12563  438F
12564  4390
12565  4391
12566  4392
12567  4393
12568  4394
12569  4395
12570  4396
12571  4397
12572  4398
12573  4399
12574  439A
12575  439B
12576  439C
12577  439D
12578  439E
12579  439F
12580  43A0
12581  43A1
12582  43A2
12583  43A3
12584  43A4
12585  43A5
12586  43A6
12587  43A7
12588  43A8
12589  43A9
12590  43AA
12591  43AB
12592  43AC
12593  43AD
12594  43AE
12595  43AF
12596  43B0
12597  43B1
12598  43B2
12599  43B3
12600  43B4
12601  43B5
12602  43B6
12603  43B7
12604  43B8
12605  43B9
12606  43BA
12607  43BB
12608  43BC
12609  43BD
12610  43BE
12611  43BF
12612  43C0
12613  43C1
12614  43C2
12615  43C3
12616  43C4
12617  43C5
12618  43C6
12619  43C7
12620  43C8
12621  43C9
12622  43CA
12623  43CB
12624  43CC
12625  43CD
12626  43CE
12627  43CF
12628  43D0
12629  43D1
12630  43D2
12631  43D3
12632  43D4
12633  43D5
12634  43D6
12635  43D7
12636  43D8
12637  43D9
12638  43DA
12639  43DB
12640  43DC
12641  43DD
12642  43DE
12643  43DF
12644  43E0
12645  43E1
12646  43E2
12647  43E3
12648  43E4
12649  43E5
12650  43E6
12651  43E7
12652  43E8
12653  43E9
12654  43EA
12655  43EB
12656  43EC
12657  43ED
12658  43EE
12659  43EF
12660  43F0
12661  43F1
12662  43F2
12663  43F3
12664  43F4
12665  43F5
12666  43F6
12667  43F7
12668  43F8
12669  43F9
12670  43FA
12671  43FB
12672  43FC
12673  43FD
12674  43FE
12675  43FF
12676  4400
12677  4401
12678  4402
12679  4403
12680  4404
12681  4405
12682  4406
12683  4407
12684  4408
12685  4409
12686  440A
12687  440B
12688  440C
12689  440D
12690  440E
12691  440F
12692  4410
12693  4411
12694  4412
12695  4413
12696  4414
12697  4415
12698  4416
12699  4417
12700  4418
12701  4419
12702  441A
12703  441B
12704  441C
12705  441D
12706  441E
12707  441F
12708  4420
12709  4421
12710  4422
12711  4423
12712  4424
12713  4425
12714  4426
12715  4427
12716  4428
12717  4429
12718  442A
12719  442B
12720  442C
12721  442D
12722  442E
12723  442F
12724  4430
12725  4431
12726  4432
12727  4433
12728  4434
12729  4435
12730  4436
12731  4437
12732  4438
12733  4439
12734  443A
12735  443B
12736  443C
12737  443D
12738  443E
12739  443F
12740  4440
12741  4441
12742  4442
12743  4443
12744  4444
12745  4445
12746  4446
12747  4447
12748  4448
12749  4449
12750  444A
12751  444B
12752  444C
12753  444D
12754  444E
12755  444F
12756  4450
12757  4451
12758  4452
12759  4453
12760  4454
12761  4455
12762  4456
12763  4457
12764  4458
12765  4459
12766  445A
12767  445B
12768  445C
12769  445D
12770  445E
12771  445F
12772  4460
12773  4461
12774  4462
12775  4463
12776  4464
12777  4465
12778  4466
12779  4467
12780  4468
12781  4469
12782  446A
12783  446B
12784  446C
12785  446D
12786  446E
12787  446F
12788  4470
12789  4471
12790  4472
12791  4473
12792  4474
12793  4475
12794  4476
12795  4477
12796  4478
12797  4479
12798  447A
12799  447B
12800  447C
12801  447D
12802  447E
12803  447F
12804  4480
12805  4481
12806  4482
12807  4483
12808  4484
12809  4485
12810  4486
12811  4487
12812  4488
12813  4489
12814  448A
12815  448B
12816  448C
12817  448D
12818  448E
12819  448F
12820  4490
12821  4491
12822  4492
12823  4493
12824  4494
12825  4495
12826  4496
12827  4497
12828  4498
12829  4499
12830  449A
12831  449B
12832  449C
12833  449D
12834  449E
12835  449F
12836  44A0
12837  44A1
12838  44A2
12839  44A3
12840  44A4
12841  44A5
12842  44A6
12843  44A7
12844  44A8
12845  44A9
12846  44AA
12847  44AB
12848  44AC
12849  44AD
12850  44AE
12851  44AF
12852  44B0
12853  44B1
12854  44B2
12855  44B3
12856  44B4
12857  44B5
12858  44B6
12859  44B7
12860  44B8
12861  44B9
12862  44BA
12863  44BB
12864  44BC
12865  44BD
12866  44BE
12867  44BF
12868  44C0
12869  44C1
12870  44C2
12871  44C3
12872  44C4
12873  44C5
12874  44C6
12875  44C7
12876  44C8
12877  44C9
12878  44CA
12879  44CB
12880  44CC
12881  44CD
12882  44CE
12883  44CF
12884  44D0
12885  44D1
12886  44D2
12887  44D3
12888  44D4
12889  44D5
12890  44D6
12891  44D7
12892  44D8
12893  44D9
12894  44DA
12895  44DB
12896  44DC
12897  44DD
12898  44DE
12899  44DF
12900  44E0
12901  44E1
12902  44E2
12903  44E3
12904  44E4
12905  44E5
12906  44E6
12907  44E7
12908  44E8
12909  44E9
12910  44EA
12911  44EB
12912  44EC
12913  44ED
12914  44EE
12915  44EF
12916  44F0
12917  44F1
12918  44F2
12919  44F3
12920  44F4
12921  44F5
12922  44F6
12923  44F7
12924  44F8
12925  44F9
12926  44FA
12927  44FB
12928  44FC
12929  44FD
12930  44FE
12931  44FF
12932  4500
12933  4501
12934  4502
12935  4503
12936  4504
12937  4505
12938  4506
12939  4507
12940  4508
12941  4509
12942  450A
12943  450B
12944  450C
12945  450D
12946  450E
12947  450F
12948  4510
12949  4511
12950  4512
12951  4513
12952  4514
12953  4515
12954  4516
12955  4517
12956  4518
12957  4519
12958  451A
12959  451B
12960  451C
12961  451D
12962  451E
12963  451F
12964  4520
12965  4521
12966  4522
12967  4523
12968  4524
12969  4525
12970  4526
12971  4527
12972  4528
12973  4529
12974  452A
12975  452B
12976  452C
12977  452D
12978  452E
12979  452F
12980  4530
12981  4531
12982  4532
12983  4533
12984  4534
12985  4535
12986  4536
12987  4537
12988  4538
12989  4539
12990  453A
12991  453B
12992  453C
12993  453D
12994  453E
12995  453F
12996  4540
12997  4541
12998  4542
12999  4543
13000  4544
13001  4545
13002  4546
13003  4547
13004  4548
13005  4549
13006  454A
13007  454B
13008  454C
13009  454D
13010  454E
13011  454F
13012  4550
13013  4551
13014  4552
13015  4553
13016  4554
13017  4555
13018  4556
13019  4557
13020  4558
13021  4559
13022  455A
13023  455B
13024  455C
13025  455D
13026  455E
13027  455F
13028  4560
13029  4561
13030  4562
13031  4563
13032  4564
13033  4565
13034  4566
13035  4567
13036  4568
13037  4569
13038  456A
13039  456B
13040  456C
13041  456D
13042  456E
13043  456F
13044  4570
13045  4571
13046  4572
13047  4573
13048  4574
13049  4575
13050  4576
13051  4577
13052  4578
13053  4579
13054  457A
13055  457B
13056  457C
13057  457D
13058  457E
13059  457F
13060  4580
13061  4581
13062  4582
13063  4583
13064  4584
13065  4585
13066  4586
13067  4587
13068  4588
13069  4589
13070  458A
13071  458B
13072  458C
13073  458D
13074  458E
13075  458F
13076  4590
13077  4591
13078  4592
13079  4593
13080  4594
13081  4595
13082  4596
13083  4597
13084  4598
13085  4599
13086  459A
13087  459B
13088  459C
13089  459D
13090  459E
13091  459F
13092  45A0
13093  45A1
13094  45A2
13095  45A3
13096  45A4
13097  45A5
13098  45A6
13099  45A7
13100  45A8
13101  45A9
13102  45AA
13103  45AB
13104  45AC
13105  45AD
13106  45AE
13107  45AF
13108  45B0
13109  45B1
13110  45B2
13111  45B3
13112  45B4
13113  45B5
13114  45B6
13115  45B7
13116  45B8
13117  45B9
13118  45BA
13119  45BB
13120  45BC
13121  45BD
13122  45BE
13123  45BF
13124  45C0
13125  45C1
13126  45C2
13127  45C3
13128  45C4
13129  45C5
13130  45C6
13131  45C7
13132  45C8
13133  45C9
13134  45CA
13135  45CB
13136  45CC
13137  45CD
13138  45CE
13139  45CF
13140  45D0
13141  45D1
13142  45D2
13143  45D3
13144  45D4
13145  45D5
13146  45D6
13147  45D7
13148  45D8
13149  45D9
13150  45DA
13151  45DB
13152  45DC
13153  45DD
13154  45DE
13155  45DF
13156  45E0
13157  45E1
13158  45E2
13159  45E3
13160  45E4
13161  45E5
13162  45E6
13163  45E7
13164  45E8
13165  45E9
13166  45EA
13167  45EB
13168  45EC
13169  45ED
13170  45EE
13171  45EF
13172  45F0
13173  45F1
13174  45F2
13175  45F3
13176  45F4
13177  45F5
13178  45F6
13179  45F7
13180  45F8
13181  45F9
13182  45FA
13183  45FB
13184  45FC
13185  45FD
13186  45FE
13187  45FF
13188  4600
13189  4601
13190  4602
13191  4603
13192  4604
13193  4605
13194  4606
13195  4607
13196  4608
13197  4609
13198  460A
13199  460B
13200  460C
13201  460D
13202  460E
13203  460F
13204  4610
13205  4611
13206  4612
13207  4613
13208  4614
13209  4615
13210  4616
13211  4617
13212  4618
13213  4619
13214  461A
13215  461B
13216  461C
13217  461D
13218  461E
13219  461F
13220  4620
13221  4621
13222  4622
13223  4623
13224  4624
13225  4625
13226  4626
13227  4627
13228  4628
13229  4629
13230  462A
13231  462B
13232  462C
13233  462D
13234  462E
13235  462F
13236  4630
13237  4631
13238  4632
13239  4633
13240  4634
13241  4635
13242  4636
13243  4637
13244  4638
13245  4639
13246  463A
13247  463B
13248  463C
13249  463D
13250  463E
13251  463F
13252  4640
13253  4641
13254  4642
13255  4643
13256  4644
13257  4645
13258  4646
13259  4647
13260  4648
13261  4649
13262  464A
13263  464B
13264  464C
13265  464D
13266  464E
13267  464F
13268  4650
13269  4651
13270  4652
13271  4653
13272  4654
13273  4655
13274  4656
13275  4657
13276  4658
13277  4659
13278  465A
13279  465B
13280  465C
13281  465D
13282  465E
13283  465F
13284  4660
13285  4661
13286  4662
13287  4663
13288  4664
13289  4665
13290  4666
13291  4667
13292  4668
13293  4669
13294  466A
13295  466B
13296  466C
13297  466D
13298  466E
13299  466F
13300  4670
13301  4671
13302  4672
13303  4673
13304  4674
13305  4675
13306  4676
13307  4677
13308  4678
13309  4679
13310  467A
13311  467B
13312  467C
13313  467D
13314  467E
13315  467F
13316  4680
13317  4681
13318  4682
13319  4683
13320  4684
13321  4685
13322  4686
13323  4687
13324  4688
13325  4689
13326  468A
13327  468B
13328  468C
13329  468D
13330  468E
13331  468F
13332  4690
13333  4691
13334  4692
13335  4693
13336  4694
13337  4695
13338  4696
13339  4697
13340  4698
13341  4699
13342  469A
13343  469B
13344  469C
13345  469D
13346  469E
13347  469F
13348  46A0
13349  46A1
13350  46A2
13351  46A3
13352  46A4
13353  46A5
13354  46A6
13355  46A7
13356  46A8
13357  46A9
13358  46AA
13359  46AB
13360  46AC
13361  46AD
13362  46AE
13363  46AF
13364  46B0
13365  46B1
13366  46B2
13367  46B3
13368  46B4
13369  46B5
13370  46B6
13371  46B7
13372  46B8
13373  46B9
13374  46BA
13375  46BB
13376  46BC
13377  46BD
13378  46BE
13379  46BF
13380  46C0
13381  46C1
13382  46C2
13383  46C3
13384  46C4
13385  46C5
13386  46C6
13387  46C7
13388  46C8
13389  46C9
13390  46CA
13391  46CB
13392  46CC
13393  46CD
13394  46CE
13395  46CF
13396  46D0
13397  46D1
13398  46D2
13399  46D3
13400  46D4
13401  46D5
13402  46D6
13403  46D7
13404  46D8
13405  46D9
13406  46DA
13407  46DB
13408  46DC
13409  46DD
13410  46DE
13411  46DF
13412  46E0
13413  46E1
13414  46E2
13415  46E3
13416  46E4
13417  46E5
13418  46E6
13419  46E7
13420  46E8
13421  46E9
13422  46EA
13423  46EB
13424  46EC
13425  46ED
13426  46EE
13427  46EF
13428  46F0
13429  46F1
13430  46F2
13431  46F3
13432  46F4
13433  46F5
13434  46F6
13435  46F7
13436  46F8
13437  46F9
13438  46FA
13439  46FB
13440  46FC
13441  46FD
13442  46FE
13443  46FF
13444  4700
13445  4701
13446  4702
13447  4703
13448  4704
13449  4705
13450  4706
13451  4707
13452  4708
13453  4709
13454  470A
13455  470B
13456  470C
13457  470D
13458  470E
13459  470F
13460  4710
13461  4711
13462  4712
13463  4713
13464  4714
13465  4715
13466  4716
13467  4717
13468  4718
13469  4719
13470  471A
13471  471B
13472  471C
13473  471D
13474  471E
13475  471F
13476  4720
13477  4721
13478  4722
13479  4723
13480  4724
13481  4725
13482  4726
13483  4727
13484  4728
13485  4729
13486  472A
13487  472B
13488  472C
13489  472D
13490  472E
13491  472F
13492  4730
13493  4731
13494  4732
13495  4733
13496  4734
13497  4735
13498  4736
13499  4737
13500  4738
13501  4739
13502  473A
13503  473B
13504  473C
13505  473D
13506  473E
13507  473F
13508  4740
13509  4741
13510  4742
13511  4743
13512  4744
13513  4745
13514  4746
13515  4747
13516  4748
13517  4749
13518  474A
13519  474B
13520  474C
13521  474D
13522  474E
13523  474F
13524  4750
13525  4751
13526  4752
13527  4753
13528  4754
13529  4755
13530  4756
13531  4757
13532  4758
13533  4759
13534  475A
13535  475B
13536  475C
13537  475D
13538  475E
13539  475F
13540  4760
13541  4761
13542  4762
13543  4763
13544  4764
13545  4765
13546  4766
13547  4767
13548  4768
13549  4769
13550  476A
13551  476B
13552  476C
13553  476D
13554  476E
13555  476F
13556  4770
13557  4771
13558  4772
13559  4773
13560  4774
13561  4775
13562  4776
13563  4777
13564  4778
13565  4779
13566  477A
13567  477B
13568  477C
13569  477D
13570  477E
13571  477F
13572  4780
13573  4781
13574  4782
13575  4783
13576  4784
13577  4785
13578  4786
13579  4787
13580  4788
13581  4789
13582  478A
13583  478B
13584  478C
13585  478D
13586  478E
13587  478F
13588  4790
13589  4791
13590  4792
13591  4793
13592  4794
13593  4795
13594  4796
13595  4797
13596  4798
13597  4799
13598  479A
13599  479B
13600  479C
13601  479D
13602  479E
13603  479F
13604  47A0
13605  47A1
13606  47A2
13607  47A3
13608  47A4
13609  47A5
13610  47A6
13611  47A7
13612  47A8
13613  47A9
13614  47AA
13615  47AB
13616  47AC
13617  47AD
13618  47AE
13619  47AF
13620  47B0
13621  47B1
13622  47B2
13623  47B3
13624  47B4
13625  47B5
13626  47B6
13627  47B7
13628  47B8
13629  47B9
13630  47BA
13631  47BB
13632  47BC
13633  47BD
13634  47BE
13635  47BF
13636  47C0
13637  47C1
13638  47C2
13639  47C3
13640  47C4
13641  47C5
13642  47C6
13643  47C7
13644  47C8
13645  47C9
13646  47CA
13647  47CB
13648  47CC
13649  47CD
13650  47CE
13651  47CF
13652  47D0
13653  47D1
13654  47D2
13655  47D3
13656  47D4
13657  47D5
13658  47D6
13659  47D7
13660  47D8
13661  47D9
13662  47DA
13663  47DB
13664  47DC
13665  47DD
13666  47DE
13667  47DF
13668  47E0
13669  47E1
13670  47E2
13671  47E3
13672  47E4
13673  47E5
13674  47E6
13675  47E7
13676  47E8
13677  47E9
13678  47EA
13679  47EB
13680  47EC
13681  47ED
13682  47EE
13683  47EF
13684  47F0
13685  47F1
13686  47F2
13687  47F3
13688  47F4
13689  47F5
13690  47F6
13691  47F7
13692  47F8
13693  47F9
13694  47FA
13695  47FB
13696  47FC
13697  47FD
13698  47FE
13699  47FF
13700  4800
13701  4801
13702  4802
13703  4803
13704  4804
13705  4805
13706  4806
13707  4807
13708  4808
13709  4809
13710  480A
13711  480B
13712  480C
13713  480D
13714  480E
13715  480F
13716  4810
13717  4811
13718  4812
13719  4813
13720  4814
13721  4815
13722  4816
13723  4817
13724  4818
13725  4819
13726  481A
13727  481B
13728  481C
13729  481D
13730  481E
13731  481F
13732  4820
13733  4821
13734  4822
13735  4823
13736  4824
13737  4825
13738  4826
13739  4827
13740  4828
13741  4829
13742  482A
13743  482B
13744  482C
13745  482D
13746  482E
13747  482F
13748  4830
13749  4831
13750  4832
13751  4833
13752  4834
13753  4835
13754  4836
13755  4837
13756  4838
13757  4839
13758  483A
13759  483B
13760  483C
13761  483D
13762  483E
13763  483F
13764  4840
13765  4841
13766  4842
13767  4843
13768  4844
13769  4845
13770  4846
13771  4847
13772  4848
13773  4849
13774  484A
13775  484B
13776  484C
13777  484D
13778  484E
13779  484F
13780  4850
13781  4851
13782  4852
13783  4853
13784  4854
13785  4855
13786  4856
13787  4857
13788  4858
13789  4859
13790  485A
13791  485B
13792  485C
13793  485D
13794  485E
13795  485F
13796  4860
13797  4861
13798  4862
13799  4863
13800  4864
13801  4865
13802  4866
13803  4867
13804  4868
13805  4869
13806  486A
13807  486B
13808  486C
13809  486D
13810  486E
13811  486F
13812  4870
13813  4871
13814  4872
13815  4873
13816  4874
13817  4875
13818  4876
13819  4877
13820  4878
13821  4879
13822  487A
13823  487B
13824  487C
13825  487D
13826  487E
13827  487F
13828  4880
13829  4881
13830  4882
13831  4883
13832  4884
13833  4885
13834  4886
13835  4887
13836  4888
13837  4889
13838  488A
13839  488B
13840  488C
13841  488D
13842  488E
13843  488F
13844  4890
13845  4891
13846  4892
13847  4893
13848  4894
13849  4895
13850  4896
13851  4897
13852  4898
13853  4899
13854  489A
13855  489B
13856  489C
13857  489D
13858  489E
13859  489F
13860  48A0
13861  48A1
13862  48A2
13863  48A3
13864  48A4
13865  48A5
13866  48A6
13867  48A7
13868  48A8
13869  48A9
13870  48AA
13871  48AB
13872  48AC
13873  48AD
13874  48AE
13875  48AF
13876  48B0
13877  48B1
13878  48B2
13879  48B3
13880  48B4
13881  48B5
13882  48B6
13883  48B7
13884  48B8
13885  48B9
13886  48BA
13887  48BB
13888  48BC
13889  48BD
13890  48BE
13891  48BF
13892  48C0
13893  48C1
13894  48C2
13895  48C3
13896  48C4
13897  48C5
13898  48C6
13899  48C7
13900  48C8
13901  48C9
13902  48CA
13903  48CB
13904  48CC
13905  48CD
13906  48CE
13907  48CF
13908  48D0
13909  48D1
13910  48D2
13911  48D3
13912  48D4
13913  48D5
13914  48D6
13915  48D7
13916  48D8
13917  48D9
13918  48DA
13919  48DB
13920  48DC
13921  48DD
13922  48DE
13923  48DF
13924  48E0
13925  48E1
13926  48E2
13927  48E3
13928  48E4
13929  48E5
13930  48E6
13931  48E7
13932  48E8
13933  48E9
13934  48EA
13935  48EB
13936  48EC
13937  48ED
13938  48EE
13939  48EF
13940  48F0
13941  48F1
13942  48F2
13943  48F3
13944  48F4
13945  48F5
13946  48F6
13947  48F7
13948  48F8
13949  48F9
13950  48FA
13951  48FB
13952  48FC
13953  48FD
13954  48FE
13955  48FF
13956  4900
13957  4901
13958  4902
13959  4903
13960  4904
13961  4905
13962  4906
13963  4907
13964  4908
13965  4909
13966  490A
13967  490B
13968  490C
13969  490D
13970  490E
13971  490F
13972  4910
13973  4911
13974  4912
13975  4913
13976  4914
13977  4915
13978  4916
13979  4917
13980  4918
13981  4919
13982  491A
13983  491B
13984  491C
13985  491D
13986  491E
13987  491F
13988  4920
13989  4921
13990  4922
13991  4923
13992  4924
13993  4925
13994  4926
13995  4927
13996  4928
13997  4929
13998  492A
13999  492B
14000  492C
14001  492D
14002  492E
14003  492F
14004  4930
14005  4931
14006  4932
14007  4933
14008  4934
14009  4935
14010  4936
14011  4937
14012  4938
14013  4939
14014  493A
14015  493B
14016  493C
14017  493D
14018  493E
14019  493F
14020  4940
14021  4941
14022  4942
14023  4943
14024  4944
14025  4945
14026  4946
14027  4947
14028  4948
14029  4949
14030  494A
14031  494B
14032  494C
14033  494D
14034  494E
14035  494F
14036  4950
14037  4951
14038  4952
14039  4953
14040  4954
14041  4955
14042  4956
14043  4957
14044  4958
14045  4959
14046  495A
14047  495B
14048  495C
14049  495D
14050  495E
14051  495F
14052  4960
14053  4961
14054  4962
14055  4963
14056  4964
14057  4965
14058  4966
14059  4967
14060  4968
14061  4969
14062  496A
14063  496B
14064  496C
14065  496D
14066  496E
14067  496F
14068  4970
14069  4971
14070  4972
14071  4973
14072  4974
14073  4975
14074  4976
14075  4977
14076  4978
14077  4979
14078  497A
14079  497B
14080  497C
14081  497D
14082  497E
14083  497F
14084  4980
14085  4981
14086  4982
14087  4983
14088  4984
14089  4985
14090  4986
14091  4987
14092  4988
14093  4989
14094  498A
14095  498B
14096  498C
14097  498D
14098  498E
14099  498F
14100  4990
14101  4991
14102  4992
14103  4993
14104  4994
14105  4995
14106  4996
14107  4997
14108  4998
14109  4999
14110  499A
14111  499B
14112  499C
14113  499D
14114  499E
14115  499F
14116  49A0
14117  49A1
14118  49A2
14119  49A3
14120  49A4
14121  49A5
14122  49A6
14123  49A7
14124  49A8
14125  49A9
14126  49AA
14127  49AB
14128  49AC
14129  49AD
14130  49AE
14131  49AF
14132  49B0
14133  49B1
14134  49B2
14135  49B3
14136  49B4
14137  49B5
14138  49B6
14139  49B7
14140  49B8
14141  49B9
14142  49BA
14143  49BB
14144  49BC
14145  49BD
14146  49BE
14147  49BF
14148  49C0
14149  49C1
14150  49C2
14151  49C3
14152  49C4
14153  49C5
14154  49C6
14155  49C7
14156  49C8
14157  49C9
14158  49CA
14159  49CB
14160  49CC
14161  49CD
14162  49CE
14163  49CF
14164  49D0
14165  49D1
14166  49D2
14167  49D3
14168  49D4
14169  49D5
14170  49D6
14171  49D7
14172  49D8
14173  49D9
14174  49DA
14175  49DB
14176  49DC
14177  49DD
14178  49DE
14179  49DF
14180  49E0
14181  49E1
14182  49E2
14183  49E3
14184  49E4
14185  49E5
14186  49E6
14187  49E7
14188  49E8
14189  49E9
14190  49EA
14191  49EB
14192  49EC
14193  49ED
14194  49EE
14195  49EF
14196  49F0
14197  49F1
14198  49F2
14199  49F3
14200  49F4
14201  49F5
14202  49F6
14203  49F7
14204  49F8
14205  49F9
14206  49FA
14207  49FB
14208  49FC
14209  49FD
14210  49FE
14211  49FF
14212  4A00
14213  4A01
14214  4A02
14215  4A03
14216  4A04
14217  4A05
14218  4A06
14219  4A07
14220  4A08
14221  4A09
14222  4A0A
14223  4A0B
14224  4A0C
14225  4A0D
14226  4A0E
14227  4A0F
14228  4A10
14229  4A11
14230  4A12
14231  4A13
14232  4A14
14233  4A15
14234  4A16
14235  4A17
14236  4A18
14237  4A19
14238  4A1A
14239  4A1B
14240  4A1C
14241  4A1D
14242  4A1E
14243  4A1F
14244  4A20
14245  4A21
14246  4A22
14247  4A23
14248  4A24
14249  4A25
14250  4A26
14251  4A27
14252  4A28
14253  4A29
14254  4A2A
14255  4A2B
14256  4A2C
14257  4A2D
14258  4A2E
14259  4A2F
14260  4A30
14261  4A31
14262  4A32
14263  4A33
14264  4A34
14265  4A35
14266  4A36
14267  4A37
14268  4A38
14269  4A39
14270  4A3A
14271  4A3B
14272  4A3C
14273  4A3D
14274  4A3E
14275  4A3F
14276  4A40
14277  4A41
14278  4A42
14279  4A43
14280  4A44
14281  4A45
14282  4A46
14283  4A47
14284  4A48
14285  4A49
14286  4A4A
14287  4A4B
14288  4A4C
14289  4A4D
14290  4A4E
14291  4A4F
14292  4A50
14293  4A51
14294  4A52
14295  4A53
14296  4A54
14297  4A55
14298  4A56
14299  4A57
14300  4A58
14301  4A59
14302  4A5A
14303  4A5B
14304  4A5C
14305  4A5D
14306  4A5E
14307  4A5F
14308  4A60
14309  4A61
14310  4A62
14311  4A63
14312  4A64
14313  4A65
14314  4A66
14315  4A67
14316  4A68
14317  4A69
14318  4A6A
14319  4A6B
14320  4A6C
14321  4A6D
14322  4A6E
14323  4A6F
14324  4A70
14325  4A71
14326  4A72
14327  4A73
14328  4A74
14329  4A75
14330  4A76
14331  4A77
14332  4A78
14333  4A79
14334  4A7A
14335  4A7B
14336  4A7C
14337  4A7D
14338  4A7E
14339  4A7F
14340  4A80
14341  4A81
14342  4A82
14343  4A83
14344  4A84
14345  4A85
14346  4A86
14347  4A87
14348  4A88
14349  4A89
14350  4A8A
14351  4A8B
14352  4A8C
14353  4A8D
14354  4A8E
14355  4A8F
14356  4A90
14357  4A91
14358  4A92
14359  4A93
14360  4A94
14361  4A95
14362  4A96
14363  4A97
14364  4A98
14365  4A99
14366  4A9A
14367  4A9B
14368  4A9C
14369  4A9D
14370  4A9E
14371  4A9F
14372  4AA0
14373  4AA1
14374  4AA2
14375  4AA3
14376  4AA4
14377  4AA5
14378  4AA6
14379  4AA7
14380  4AA8
14381  4AA9
14382  4AAA
14383  4AAB
14384  4AAC
14385  4AAD
14386  4AAE
14387  4AAF
14388  4AB0
14389  4AB1
14390  4AB2
14391  4AB3
14392  4AB4
14393  4AB5
14394  4AB6
14395  4AB7
14396  4AB8
14397  4AB9
14398  4ABA
14399  4ABB
14400  4ABC
14401  4ABD
14402  4ABE
14403  4ABF
14404  4AC0
14405  4AC1
14406  4AC2
14407  4AC3
14408  4AC4
14409  4AC5
14410  4AC6
14411  4AC7
14412  4AC8
14413  4AC9
14414  4ACA
14415  4ACB
14416  4ACC
14417  4ACD
14418  4ACE
14419  4ACF
14420  4AD0
14421  4AD1
14422  4AD2
14423  4AD3
14424  4AD4
14425  4AD5
14426  4AD6
14427  4AD7
14428  4AD8
14429  4AD9
14430  4ADA
14431  4ADB
14432  4ADC
14433  4ADD
14434  4ADE
14435  4ADF
14436  4AE0
14437  4AE1
14438  4AE2
14439  4AE3
14440  4AE4
14441  4AE5
14442  4AE6
14443  4AE7
14444  4AE8
14445  4AE9
14446  4AEA
14447  4AEB
14448  4AEC
14449  4AED
14450  4AEE
14451  4AEF
14452  4AF0
14453  4AF1
14454  4AF2
14455  4AF3
14456  4AF4
14457  4AF5
14458  4AF6
14459  4AF7
14460  4AF8
14461  4AF9
14462  4AFA
14463  4AFB
14464  4AFC
14465  4AFD
14466  4AFE
14467  4AFF
14468  4B00
14469  4B01
14470  4B02
14471  4B03
14472  4B04
14473  4B05
14474  4B06
14475  4B07
14476  4B08
14477  4B09
14478  4B0A
14479  4B0B
14480  4B0C
14481  4B0D
14482  4B0E
14483  4B0F
14484  4B10
14485  4B11
14486  4B12
14487  4B13
14488  4B14
14489  4B15
14490  4B16
14491  4B17
14492  4B18
14493  4B19
14494  4B1A
14495  4B1B
14496  4B1C
14497  4B1D
14498  4B1E
14499  4B1F
14500  4B20
14501  4B21
14502  4B22
14503  4B23
14504  4B24
14505  4B25
14506  4B26
14507  4B27
14508  4B28
14509  4B29
14510  4B2A
14511  4B2B
14512  4B2C
14513  4B2D
14514  4B2E
14515  4B2F
14516  4B30
14517  4B31
14518  4B32
14519  4B33
14520  4B34
14521  4B35
14522  4B36
14523  4B37
14524  4B38
14525  4B39
14526  4B3A
14527  4B3B
14528  4B3C
14529  4B3D
14530  4B3E
14531  4B3F
14532  4B40
14533  4B41
14534  4B42
14535  4B43
14536  4B44
14537  4B45
14538  4B46
14539  4B47
14540  4B48
14541  4B49
14542  4B4A
14543  4B4B
14544  4B4C
14545  4B4D
14546  4B4E
14547  4B4F
14548  4B50
14549  4B51
14550  4B52
14551  4B53
14552  4B54
14553  4B55
14554  4B56
14555  4B57
14556  4B58
14557  4B59
14558  4B5A
14559  4B5B
14560  4B5C
14561  4B5D
14562  4B5E
14563  4B5F
14564  4B60
14565  4B61
14566  4B62
14567  4B63
14568  4B64
14569  4B65
14570  4B66
14571  4B67
14572  4B68
14573  4B69
14574  4B6A
14575  4B6B
14576  4B6C
14577  4B6D
14578  4B6E
14579  4B6F
14580  4B70
14581  4B71
14582  4B72
14583  4B73
14584  4B74
14585  4B75
14586  4B76
14587  4B77
14588  4B78
14589  4B79
14590  4B7A
14591  4B7B
14592  4B7C
14593  4B7D
14594  4B7E
14595  4B7F
14596  4B80
14597  4B81
14598  4B82
14599  4B83
14600  4B84
14601  4B85
14602  4B86
14603  4B87
14604  4B88
14605  4B89
14606  4B8A
14607  4B8B
14608  4B8C
14609  4B8D
14610  4B8E
14611  4B8F
14612  4B90
14613  4B91
14614  4B92
14615  4B93
14616  4B94
14617  4B95
14618  4B96
14619  4B97
14620  4B98
14621  4B99
14622  4B9A
14623  4B9B
14624  4B9C
14625  4B9D
14626  4B9E
14627  4B9F
14628  4BA0
14629  4BA1
14630  4BA2
14631  4BA3
14632  4BA4
14633  4BA5
14634  4BA6
14635  4BA7
14636  4BA8
14637  4BA9
14638  4BAA
14639  4BAB
14640  4BAC
14641  4BAD
14642  4BAE
14643  4BAF
14644  4BB0
14645  4BB1
14646  4BB2
14647  4BB3
14648  4BB4
14649  4BB5
14650  4BB6
14651  4BB7
14652  4BB8
14653  4BB9
14654  4BBA
14655  4BBB
14656  4BBC
14657  4BBD
14658  4BBE
14659  4BBF
14660  4BC0
14661  4BC1
14662  4BC2
14663  4BC3
14664  4BC4
14665  4BC5
14666  4BC6
14667  4BC7
14668  4BC8
14669  4BC9
14670  4BCA
14671  4BCB
14672  4BCC
14673  4BCD
14674  4BCE
14675  4BCF
14676  4BD0
14677  4BD1
14678  4BD2
14679  4BD3
14680  4BD4
14681  4BD5
14682  4BD6
14683  4BD7
14684  4BD8
14685  4BD9
14686  4BDA
14687  4BDB
14688  4BDC
14689  4BDD
14690  4BDE
14691  4BDF
14692  4BE0
14693  4BE1
14694  4BE2
14695  4BE3
14696  4BE4
14697  4BE5
14698  4BE6
14699  4BE7
14700  4BE8
14701  4BE9
14702  4BEA
14703  4BEB
14704  4BEC
14705  4BED
14706  4BEE
14707  4BEF
14708  4BF0
14709  4BF1
14710  4BF2
14711  4BF3
14712  4BF4
14713  4BF5
14714  4BF6
14715  4BF7
14716  4BF8
14717  4BF9
14718  4BFA
14719  4BFB
14720  4BFC
14721  4BFD
14722  4BFE
14723  4BFF
14724  4C00
14725  4C01
14726  4C02
14727  4C03
14728  4C04
14729  4C05
14730  4C06
14731  4C07
14732  4C08
14733  4C09
14734  4C0A
14735  4C0B
14736  4C0C
14737  4C0D
14738  4C0E
14739  4C0F
14740  4C10
14741  4C11
14742  4C12
14743  4C13
14744  4C14
14745  4C15
14746  4C16
14747  4C17
14748  4C18
14749  4C19
14750  4C1A
14751  4C1B
14752  4C1C
14753  4C1D
14754  4C1E
14755  4C1F
14756  4C20
14757  4C21
14758  4C22
14759  4C23
14760  4C24
14761  4C25
14762  4C26
14763  4C27
14764  4C28
14765  4C29
14766  4C2A
14767  4C2B
14768  4C2C
14769  4C2D
14770  4C2E
14771  4C2F
14772  4C30
14773  4C31
14774  4C32
14775  4C33
14776  4C34
14777  4C35
14778  4C36
14779  4C37
14780  4C38
14781  4C39
14782  4C3A
14783  4C3B
14784  4C3C
14785  4C3D
14786  4C3E
14787  4C3F
14788  4C40
14789  4C41
14790  4C42
14791  4C43
14792  4C44
14793  4C45
14794  4C46
14795  4C47
14796  4C48
14797  4C49
14798  4C4A
14799  4C4B
14800  4C4C
14801  4C4D
14802  4C4E
14803  4C4F
14804  4C50
14805  4C51
14806  4C52
14807  4C53
14808  4C54
14809  4C55
14810  4C56
14811  4C57
14812  4C58
14813  4C59
14814  4C5A
14815  4C5B
14816  4C5C
14817  4C5D
14818  4C5E
14819  4C5F
14820  4C60
14821  4C61
14822  4C62
14823  4C63
14824  4C64
14825  4C65
14826  4C66
14827  4C67
14828  4C68
14829  4C69
14830  4C6A
14831  4C6B
14832  4C6C
14833  4C6D
14834  4C6E
14835  4C6F
14836  4C70
14837  4C71
14838  4C72
14839  4C73
14840  4C74
14841  4C75
14842  4C76
14843  4C77
14844  4C78
14845  4C79
14846  4C7A
14847  4C7B
14848  4C7C
14849  4C7D
14850  4C7E
14851  4C7F
14852  4C80
14853  4C81
14854  4C82
14855  4C83
14856  4C84
14857  4C85
14858  4C86
14859  4C87
14860  4C88
14861  4C89
14862  4C8A
14863  4C8B
14864  4C8C
14865  4C8D
14866  4C8E
14867  4C8F
14868  4C90
14869  4C91
14870  4C92
14871  4C93
14872  4C94
14873  4C95
14874  4C96
14875  4C97
14876  4C98
14877  4C99
14878  4C9A
14879  4C9B
14880  4C9C
14881  4C9D
14882  4C9E
14883  4C9F
14884  4CA0
14885  4CA1
14886  4CA2
14887  4CA3
14888  4CA4
14889  4CA5
14890  4CA6
14891  4CA7
14892  4CA8
14893  4CA9
14894  4CAA
14895  4CAB
14896  4CAC
14897  4CAD
14898  4CAE
14899  4CAF
14900  4CB0
14901  4CB1
14902  4CB2
14903  4CB3
14904  4CB4
14905  4CB5
14906  4CB6
14907  4CB7
14908  4CB8
14909  4CB9
14910  4CBA
14911  4CBB
14912  4CBC
14913  4CBD
14914  4CBE
14915  4CBF
14916  4CC0
14917  4CC1
14918  4CC2
14919  4CC3
14920  4CC4
14921  4CC5
14922  4CC6
14923  4CC7
14924  4CC8
14925  4CC9
14926  4CCA
14927  4CCB
14928  4CCC
14929  4CCD
14930  4CCE
14931  4CCF
14932  4CD0
14933  4CD1
14934  4CD2
14935  4CD3
14936  4CD4
14937  4CD5
14938  4CD6
14939  4CD7
14940  4CD8
14941  4CD9
14942  4CDA
14943  4CDB
14944  4CDC
14945  4CDD
14946  4CDE
14947  4CDF
14948  4CE0
14949  4CE1
14950  4CE2
14951  4CE3
14952  4CE4
14953  4CE5
14954  4CE6
14955  4CE7
14956  4CE8
14957  4CE9
14958  4CEA
14959  4CEB
14960  4CEC
14961  4CED
14962  4CEE
14963  4CEF
14964  4CF0
14965  4CF1
14966  4CF2
14967  4CF3
14968  4CF4
14969  4CF5
14970  4CF6
14971  4CF7
14972  4CF8
14973  4CF9
14974  4CFA
14975  4CFB
14976  4CFC
14977  4CFD
14978  4CFE
14979  4CFF
14980  4D00
14981  4D01
14982  4D02
14983  4D03
14984  4D04
14985  4D05
14986  4D06
14987  4D07
14988  4D08
14989  4D09
14990  4D0A
14991  4D0B
14992  4D0C
14993  4D0D
14994  4D0E
14995  4D0F
14996  4D10
14997  4D11
14998  4D12
14999  4D13
15000  4D14
15001  4D15
15002  4D16
15003  4D17
15004  4D18
15005  4D19
15006  4D1A
15007  4D1B
15008  4D1C
15009  4D1D
15010  4D1E
15011  4D1F
15012  4D20
15013  4D21
15014  4D22
15015  4D23
15016  4D24
15017  4D25
15018  4D26
15019  4D27
15020  4D28
15021  4D29
15022  4D2A
15023  4D2B
15024  4D2C
15025  4D2D
15026  4D2E
15027  4D2F
15028  4D30
15029  4D31
15030  4D32
15031  4D33
15032  4D34
15033  4D35
15034  4D36
15035  4D37
15036  4D38
15037  4D39
15038  4D3A
15039  4D3B
15040  4D3C
15041  4D3D
15042  4D3E
15043  4D3F
15044  4D40
15045  4D41
15046  4D42
15047  4D43
15048  4D44
15049  4D45
15050  4D46
15051  4D47
15052  4D48
15053  4D49
15054  4D4A
15055  4D4B
15056  4D4C
15057  4D4D
15058  4D4E
15059  4D4F
15060  4D50
15061  4D51
15062  4D52
15063  4D53
15064  4D54
15065  4D55
15066  4D56
15067  4D57
15068  4D58
15069  4D59
15070  4D5A
15071  4D5B
15072  4D5C
15073  4D5D
15074  4D5E
15075  4D5F
15076  4D60
15077  4D61
15078  4D62
15079  4D63
15080  4D64
15081  4D65
15082  4D66
15083  4D67
15084  4D68
15085  4D69
15086  4D6A
15087  4D6B
15088  4D6C
15089  4D6D
15090  4D6E
15091  4D6F
15092  4D70
15093  4D71
15094  4D72
15095  4D73
15096  4D74
15097  4D75
15098  4D76
15099  4D77
15100  4D78
15101  4D79
15102  4D7A
15103  4D7B
15104  4D7C
15105  4D7D
15106  4D7E
15107  4D7F
15108  4D80
15109  4D81
15110  4D82
15111  4D83
15112  4D84
15113  4D85
15114  4D86
15115  4D87
15116  4D88
15117  4D89
15118  4D8A
15119  4D8B
15120  4D8C
15121  4D8D
15122  4D8E
15123  4D8F
15124  4D90
15125  4D91
15126  4D92
15127  4D93
15128  4D94
15129  4D95
15130  4D96
15131  4D97
15132  4D98
15133  4D99
15134  4D9A
15135  4D9B
15136  4D9C
15137  4D9D
15138  4D9E
15139  4D9F
15140  4DA0
15141  4DA1
15142  4DA2
15143  4DA3
15144  4DA4
15145  4DA5
15146  4DA6
15147  4DA7
15148  4DA8
15149  4DA9
15150  4DAA
15151  4DAB
15152  4DAC
15153  4DAD
15154  4DAE
15155  4DAF
15156  4DB0
15157  4DB1
15158  4DB2
15159  4DB3
15160  4DB4
15161  4DB5
15162  4DB6
15163  4DB7
15164  4DB8
15165  4DB9
15166  4DBA
15167  4DBB
15168  4DBC
15169  4DBD
15170  4DBE
15171  4DBF
15172  4DC0
15173  4DC1
15174  4DC2
15175  4DC3
15176  4DC4
15177  4DC5
15178  4DC6
15179  4DC7
15180  4DC8
15181  4DC9
15182  4DCA
15183  4DCB
15184  4DCC
15185  4DCD
15186  4DCE
15187  4DCF
15188  4DD0
15189  4DD1
15190  4DD2
15191  4DD3
15192  4DD4
15193  4DD5
15194  4DD6
15195  4DD7
15196  4DD8
15197  4DD9
15198  4DDA
15199  4DDB
15200  4DDC
15201  4DDD
15202  4DDE
15203  4DDF
15204  4DE0
15205  4DE1
15206  4DE2
15207  4DE3
15208  4DE4
15209  4DE5
15210  4DE6
15211  4DE7
15212  4DE8
15213  4DE9
15214  4DEA
15215  4DEB
15216  4DEC
15217  4DED
15218  4DEE
15219  4DEF
15220  4DF0
15221  4DF1
15222  4DF2
15223  4DF3
15224  4DF4
15225  4DF5
15226  4DF6
15227  4DF7
15228  4DF8
15229  4DF9
15230  4DFA
15231  4DFB
15232  4DFC
15233  4DFD
15234  4DFE
15235  4DFF
15236  4E00
15237  4E01
15238  4E02
15239  4E03
15240  4E04
15241  4E05
15242  4E06
15243  4E07
15244  4E08
15245  4E09
15246  4E0A
15247  4E0B
15248  4E0C
15249  4E0D
15250  4E0E
15251  4E0F
15252  4E10
15253  4E11
15254  4E12
15255  4E13
15256  4E14
15257  4E15
15258  4E16
15259  4E17
15260  4E18
15261  4E19
15262  4E1A
15263  4E1B
15264  4E1C
15265  4E1D
15266  4E1E
15267  4E1F
15268  4E20
15269  4E21
15270  4E22
15271  4E23
15272  4E24
15273  4E25
15274  4E26
15275  4E27
15276  4E28
15277  4E29
15278  4E2A
15279  4E2B
15280  4E2C
15281  4E2D
15282  4E2E
15283  4E2F
15284  4E30
15285  4E31
15286  4E32
15287  4E33
15288  4E34
15289  4E35
15290  4E36
15291  4E37
15292  4E38
15293  4E39
15294  4E3A
15295  4E3B
15296  4E3C
15297  4E3D
15298  4E3E
15299  4E3F
15300  4E40
15301  4E41
15302  4E42
15303  4E43
15304  4E44
15305  4E45
15306  4E46
15307  4E47
15308  4E48
15309  4E49
15310  4E4A
15311  4E4B
15312  4E4C
15313  4E4D
15314  4E4E
15315  4E4F
15316  4E50
15317  4E51
15318  4E52
15319  4E53
15320  4E54
15321  4E55
15322  4E56
15323  4E57
15324  4E58
15325  4E59
15326  4E5A
15327  4E5B
15328  4E5C
15329  4E5D
15330  4E5E
15331  4E5F
15332  4E60
15333  4E61
15334  4E62
15335  4E63
15336  4E64
15337  4E65
15338  4E66
15339  4E67
15340  4E68
15341  4E69
15342  4E6A
15343  4E6B
15344  4E6C
15345  4E6D
15346  4E6E
15347  4E6F
15348  4E70
15349  4E71
15350  4E72
15351  4E73
15352  4E74
15353  4E75
15354  4E76
15355  4E77
15356  4E78
15357  4E79
15358  4E7A
15359  4E7B
15360  4E7C
15361  4E7D
15362  4E7E
15363  4E7F
15364  4E80
15365  4E81
15366  4E82
15367  4E83
15368  4E84
15369  4E85
15370  4E86
15371  4E87
15372  4E88
15373  4E89
15374  4E8A
15375  4E8B
15376  4E8C
15377  4E8D
15378  4E8E
15379  4E8F
15380  4E90
15381  4E91
15382  4E92
15383  4E93
15384  4E94
15385  4E95
15386  4E96
15387  4E97
15388  4E98
15389  4E99
15390  4E9A
15391  4E9B
15392  4E9C
15393  4E9D
15394  4E9E
15395  4E9F
15396  4EA0
15397  4EA1
15398  4EA2
15399  4EA3
15400  4EA4
15401  4EA5
15402  4EA6
15403  4EA7
15404  4EA8
15405  4EA9
15406  4EAA
15407  4EAB
15408  4EAC
15409  4EAD
15410  4EAE
15411  4EAF
15412  4EB0
15413  4EB1
15414  4EB2
15415  4EB3
15416  4EB4
15417  4EB5
15418  4EB6
15419  4EB7
15420  4EB8
15421  4EB9
15422  4EBA
15423  4EBB
15424  4EBC
15425  4EBD
15426  4EBE
15427  4EBF
15428  4EC0
15429  4EC1
15430  4EC2
15431  4EC3
15432  4EC4
15433  4EC5
15434  4EC6
15435  4EC7
15436  4EC8
15437  4EC9
15438  4ECA
15439  4ECB
15440  4ECC
15441  4ECD
15442  4ECE
15443  4ECF
15444  4ED0
15445  4ED1
15446  4ED2
15447  4ED3
15448  4ED4
15449  4ED5
15450  4ED6
15451  4ED7
15452  4ED8
15453  4ED9
15454  4EDA
15455  4EDB
15456  4EDC
15457  4EDD
15458  4EDE
15459  4EDF
15460  4EE0
15461  4EE1
15462  4EE2
15463  4EE3
15464  4EE4
15465  4EE5
15466  4EE6
15467  4EE7
15468  4EE8
15469  4EE9
15470  4EEA
15471  4EEB
15472  4EEC
15473  4EED
15474  4EEE
15475  4EEF
15476  4EF0
15477  4EF1
15478  4EF2
15479  4EF3
15480  4EF4
15481  4EF5
15482  4EF6
15483  4EF7
15484  4EF8
15485  4EF9
15486  4EFA
15487  4EFB
15488  4EFC
15489  4EFD
15490  4EFE
15491  4EFF
15492  4F00
15493  4F01
15494  4F02
15495  4F03
15496  4F04
15497  4F05
15498  4F06
15499  4F07
15500  4F08
15501  4F09
15502  4F0A
15503  4F0B
15504  4F0C
15505  4F0D
15506  4F0E
15507  4F0F
15508  4F10
15509  4F11
15510  4F12
15511  4F13
15512  4F14
15513  4F15
15514  4F16
15515  4F17
15516  4F18
15517  4F19
15518  4F1A
15519  4F1B
15520  4F1C
15521  4F1D
15522  4F1E
15523  4F1F
15524  4F20
15525  4F21
15526  4F22
15527  4F23
15528  4F24
15529  4F25
15530  4F26
15531  4F27
15532  4F28
15533  4F29
15534  4F2A
15535  4F2B
15536  4F2C
15537  4F2D
15538  4F2E
15539  4F2F
15540  4F30
15541  4F31
15542  4F32
15543  4F33
15544  4F34
15545  4F35
15546  4F36
15547  4F37
15548  4F38
15549  4F39
15550  4F3A
15551  4F3B
15552  4F3C
15553  4F3D
15554  4F3E
15555  4F3F
15556  4F40
15557  4F41
15558  4F42
15559  4F43
15560  4F44
15561  4F45
15562  4F46
15563  4F47
15564  4F48
15565  4F49
15566  4F4A
15567  4F4B
15568  4F4C
15569  4F4D
15570  4F4E
15571  4F4F
15572  4F50
15573  4F51
15574  4F52
15575  4F53
15576  4F54
15577  4F55
15578  4F56
15579  4F57
15580  4F58
15581  4F59
15582  4F5A
15583  4F5B
15584  4F5C
15585  4F5D
15586  4F5E
15587  4F5F
15588  4F60
15589  4F61
15590  4F62
15591  4F63
15592  4F64
15593  4F65
15594  4F66
15595  4F67
15596  4F68
15597  4F69
15598  4F6A
15599  4F6B
15600  4F6C
15601  4F6D
15602  4F6E
15603  4F6F
15604  4F70
15605  4F71
15606  4F72
15607  4F73
15608  4F74
15609  4F75
15610  4F76
15611  4F77
15612  4F78
15613  4F79
15614  4F7A
15615  4F7B
15616  4F7C
15617  4F7D
15618  4F7E
15619  4F7F
15620  4F80
15621  4F81
15622  4F82
15623  4F83
15624  4F84
15625  4F85
15626  4F86
15627  4F87
15628  4F88
15629  4F89
15630  4F8A
15631  4F8B
15632  4F8C
15633  4F8D
15634  4F8E
15635  4F8F
15636  4F90
15637  4F91
15638  4F92
15639  4F93
15640  4F94
15641  4F95
15642  4F96
15643  4F97
15644  4F98
15645  4F99
15646  4F9A
15647  4F9B
15648  4F9C
15649  4F9D
15650  4F9E
15651  4F9F
15652  4FA0
15653  4FA1
15654  4FA2
15655  4FA3
15656  4FA4
15657  4FA5
15658  4FA6
15659  4FA7
15660  4FA8
15661  4FA9
15662  4FAA
15663  4FAB
15664  4FAC
15665  4FAD
15666  4FAE
15667  4FAF
15668  4FB0
15669  4FB1
15670  4FB2
15671  4FB3
15672  4FB4
15673  4FB5
15674  4FB6
15675  4FB7
15676  4FB8
15677  4FB9
15678  4FBA
15679  4FBB
15680  4FBC
15681  4FBD
15682  4FBE
15683  4FBF
15684  4FC0
15685  4FC1
15686  4FC2
15687  4FC3
15688  4FC4
15689  4FC5
15690  4FC6
15691  4FC7
15692  4FC8
15693  4FC9
15694  4FCA
15695  4FCB
15696  4FCC
15697  4FCD
15698  4FCE
15699  4FCF
15700  4FD0
15701  4FD1
15702  4FD2
15703  4FD3
15704  4FD4
15705  4FD5
15706  4FD6
15707  4FD7
15708  4FD8
15709  4FD9
15710  4FDA
15711  4FDB
15712  4FDC
15713  4FDD
15714  4FDE
15715  4FDF
15716  4FE0
15717  4FE1
15718  4FE2
15719  4FE3
15720  4FE4
15721  4FE5
15722  4FE6
15723  4FE7
15724  4FE8
15725  4FE9
15726  4FEA
15727  4FEB
15728  4FEC
15729  4FED
15730  4FEE
15731  4FEF
15732  4FF0
15733  4FF1
15734  4FF2
15735  4FF3
15736  4FF4
15737  4FF5
15738  4FF6
15739  4FF7
15740  4FF8
15741  4FF9
15742  4FFA
15743  4FFB
15744  4FFC
15745  4FFD
15746  4FFE
15747  4FFF
15748  5000
15749  5001
15750  5002
15751  5003
15752  5004
15753  5005
15754  5006
15755  5007
15756  5008
15757  5009
15758  500A
15759  500B
15760  500C
15761  500D
15762  500E
15763  500F
15764  5010
15765  5011
15766  5012
15767  5013
15768  5014
15769  5015
15770  5016
15771  5017
15772  5018
15773  5019
15774  501A
15775  501B
15776  501C
15777  501D
15778  501E
15779  501F
15780  5020
15781  5021
15782  5022
15783  5023
15784  5024
15785  5025
15786  5026
15787  5027
15788  5028
15789  5029
15790  502A
15791  502B
15792  502C
15793  502D
15794  502E
15795  502F
15796  5030
15797  5031
15798  5032
15799  5033
15800  5034
15801  5035
15802  5036
15803  5037
15804  5038
15805  5039
15806  503A
15807  503B
15808  503C
15809  503D
15810  503E
15811  503F
15812  5040
15813  5041
15814  5042
15815  5043
15816  5044
15817  5045
15818  5046
15819  5047
15820  5048
15821  5049
15822  504A
15823  504B
15824  504C
15825  504D
15826  504E
15827  504F
15828  5050
15829  5051
15830  5052
15831  5053
15832  5054
15833  5055
15834  5056
15835  5057
15836  5058
15837  5059
15838  505A
15839  505B
15840  505C
15841  505D
15842  505E
15843  505F
15844  5060
15845  5061
15846  5062
15847  5063
15848  5064
15849  5065
15850  5066
15851  5067
15852  5068
15853  5069
15854  506A
15855  506B
15856  506C
15857  506D
15858  506E
15859  506F
15860  5070
15861  5071
15862  5072
15863  5073
15864  5074
15865  5075
15866  5076
15867  5077
15868  5078
15869  5079
15870  507A
15871  507B
15872  507C
15873  507D
15874  507E
15875  507F
15876  5080
15877  5081
15878  5082
15879  5083
15880  5084
15881  5085
15882  5086
15883  5087
15884  5088
15885  5089
15886  508A
15887  508B
15888  508C
15889  508D
15890  508E
15891  508F
15892  5090
15893  5091
15894  5092
15895  5093
15896  5094
15897  5095
15898  5096
15899  5097
15900  5098
15901  5099
15902  509A
15903  509B
15904  509C
15905  509D
015906  000578        
015907  000579  var hFonts[54] ;
015908  000580  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15909  28BE
15910  28BF
15911  28C0
15912  28C1
15913  28C2
15914  28C3
15915  28C4
15916  28C5
15917  28C6
15918  28C7
15919  28C8
15920  28C9
15921  28CA
15922  28CB
15923  28CC
15924  28CD
15925  28CE
15926  28CF
15927  28D0
15928  28D1
15929  28D2
15930  28D3
15931  28D4
15932  28D5
15933  28D6
15934  28D7
15935  28D8
15936  28D9
15937  28DA
15938  28DB
15939  28DC
15940  28DD
15941  28DE
15942  28DF
15943  28E0
15944  28E1
15945  28E2
15946  28E3
15947  28E4
15948  28E5
15949  28E6
15950  28E7
15951  28E8
15952  28E9
15953  28EA
15954  28EB
15955  28EC
15956  28ED
15957  28EE
15958  28EF
15959  28F0
15960  28F1
15961  28F2
15962  28F3
15963  28F4
15964  28F5
15965  28F6
15966  28F7
15967  28F8
15968  28F9
15969  28FA
15970  28FB
15971  28FC
15972  28FD
15973  28FE
15974  28FF
15975  2900
15976  2901
15977  2902
15978  2903
15979  2904
15980  2905
15981  2906
15982  2907
15983  2908
15984  2909
15985  290A
15986  290B
15987  290C
15988  290D
15989  290E
15990  290F
15991  2910
15992  2911
15993  2912
15994  2913
15995  2914
15996  2915
15997  2916
15998  2917
15999  2918
16000  2919
16001  291A
16002  291B
16003  291C
16004  291D
16005  291E
16006  291F
16007  2920
16008  2921
16009  2922
16010  2923
16011  2924
16012  2925
16013  2926
16014  2927
16015  2928
16016  2929
016017  000581  // Start P2.inc
016018  000582  var oObjects[MaxTotObjects+1] ;                 // address of objects
016019  000583  var CurrentForm ;
016020  000584  var TouchXpos, TouchYpos ;
016021  000585  var InputType, TouchState, CurInputData, pInputIndex ;
016022  000586  var comRX[40], cmd[CMDLenMAX] ;
016023  000587        
016024  000588  var InputCS, OutputCS ;
016025  000589        
016026  000590        
016027  000591        
016028  000592  func seroutCS(var op)
016029  000593      serout(op) ;
016030  000594      OutputCS ^= op ;
016031  000595  endfunc
016032  000596        
016033  000597  func nak0()
016034  000598      serout(NAK) ;
016035  000599      InputCS := 0 ;
016036  000600  endfunc
016037  000601        
016038  000602  func seroutOcs()
016039  000603      serout(OutputCS) ;
016040  000604      OutputCS := 0 ;
016041  000605  endfunc
016042  000606        
016043  000607  func SendReport(var id, var objt, var objn, var val)
016044  000608      seroutCS(id) ;
016045  000609      seroutCS(objt) ;
016046  000610      seroutCS(objn) ;
016047  000611      seroutCS(val >> 8) ; // first 8 bits
016048  000612      seroutCS(val) ;
016049  000613      seroutOcs() ;
016050  000614  endfunc
016051  000615        
016052  000616        
016053  000617  func ReadObject(var ObjectType, var ObjectIdx)
016054  000618      var j, k, Objects ;
016055  000619      Objects := *(oObjects+ObjectType) ;
016056  000620        
016057  000621      j := 2 + ObjectIdx * 2 + Objects ;
016058  000622       if (ObjectType == tForm)
016059  000623          k := CurrentForm ;
016060  000624      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
016061  000625          k := img_GetWord(hndl, *j, IMAGE_TAG2);
016062  000626      else if (ObjectType == tStrings)
016063  000627          k := stringsCV[ObjectIdx];
016064  000628          else
016065  000629          k := img_GetWord(hndl, *j, IMAGE_INDEX);
016066  000630          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
016067  000631                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
016068  000632      endif
016069  000633      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
016070  000634  endfunc
016071  000635        
016072  000636        
016073  000637  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
016074  000638      var i, j, k, Objects ;
016075  000639      ObjectType &= 0x3f ;
016076  000640      if (ObjectType == tForm)
016077  000641          ActivateForm(ObjectIdx) ;
016078  000642      else
016079  000643          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
016080  000644          i := *(Objects) ;
016081  000645          switch (ObjectType)
016082  000646              case tWinButton :
016083  000647                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
016084  000648                  break ;
016085  000649              case tUserButton :
016086  000650                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
016087  000651                  break ;
016088  000652              default : j := -1 ;
016089  000653          endswitch
016090  000654          if (j != -1)
016091  000655              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
016092  000656              NewVal := NewVal << 1 ;
016093  000657              if (OVF())      // button group index change
016094  000658                  if (*(j+InputData+Ofs_IPD_P1))
016095  000659                      k &= 1 ;    // mask off old group index for momentary
016096  000660                  else
016097  000661                      k &= 3 ;    // mask off old group index for toggle
016098  000662                  endif
016099  000663              else            // normal set
016100  000664                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
016101  000665                  k &= 0xfffc ;    // retain only group index for state set
016102  000666              endif
016103  000667              NewVal |= k ;
016104  000668          endif
016105  000669           if (ObjectType == tLeddigits)
016106  000670              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
016107  000671              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
016108  000672          else if (ObjectType == tStrings)
016109  000673              PrintStrings(ObjectIdx, NewVal, 0);
016110  000674          else
016111  000675              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
016112  000676              img_Show(hndl, i) ; // will only display if form is current
016113  000677          endif
016114  000678      endif
016115  000679  endfunc
016116  000680        
016117  000681  func TurnOffButtons(var group)
016118  000682      var j, k, l;
016119  000683      for (j := 0; j < nInputs; j++)
016120  000684          k := j*IPDatasize ;
016121  000685          if (*(InputData+k+Ofs_IPD_P2) == group)
016122  000686              l := -1 ;
016123  000687               if (*(InputData+k) == tWinButton)
016124  000688                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
016125  000689                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
016126  000690                  img_Show(hndl, l);      // only shows on current form
016127  000691              else if (*(InputData+k) == tUserButton)
016128  000692                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
016129  000693                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
016130  000694                  img_Show(hndl, l);      // only shows on current form
016131  000695              endif
016132  000696          endif
016133  000697      next
016134  000698  endfunc
016135  000699        
016136  000700        
016137  000701  // WARNING, this code will crash if newval exceeds maximum displayable number
016138  000702  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
016139  000703      var i, j, k, l, lb, newval ;
016140  000704      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
016141  000705      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
016142  000706      i := -1 ;
016143  000707      j := *(typeptr) ;
016144  000708      repeat
016145  000709          typeptr += 2 ;
016146  000710          i++ ;
016147  000711          until (*(typeptr) == imgidx);
016148  000712      j := setptr + i*10 ;
016149  000713        
016150  000714      imgidx++ ;
016151  000715      l := 1 ;
016152  000716      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
016153  000717          l *= 10 ;
016154  000718      next
016155  000719      lb := *(j+Ofs_Digits_LeadingBlanks) ;
016156  000720      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
016157  000721          k := newval / l ;
016158  000722          newval -= k * l ;
016159  000723          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
016160  000724              if (k == 0)
016161  000725                  k := 10 ;
016162  000726              else
016163  000727                  lb := 0 ;
016164  000728              endif
016165  000729          endif
016166  000730          l /= 10 ;
016167  000731          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
016168  000732          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
016169  000733          img_Show(hndl, imgidx);
016170  000734      next
016171  000735  endfunc
016172  000736        
016173  000737        
016174  000738  func ActivateForm(var newform)
016175  000739      var i, j, *p ;
016176  000740        
016177  000741      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
016178  000742          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
016179  000743              if (img_GetWord(hndl, i, IMAGE_TAG))
016180  000744                  img_Disable(hndl,i) ;
016181  000745              endif
016182  000746          next
016183  000747      endif
016184  000748      CurrentForm := newform ;
016185  000749      // display newform image or clear to image color
016186  000750      if (FormBGcolors[CurrentForm] != ColorBGimage)
016187  000751          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
016188  000752          gfx_Cls() ;
016189  000753          DoGFXObjects() ;                                    // display GFX 'widgets'
016190  000754      endif
016191  000755        
016192  000756      // enable inputs
016193  000757      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
016194  000758          j := img_GetWord(hndl, i, IMAGE_TAG) ;
016195  000759          if (j)
016196  000760              j-- ;
016197  000761              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
016198  000762              //if (j != tKeyboard)
016199  000763              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
016200  000764                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
016201  000765              endif
016202  000766              img_Show(hndl,i) ; // show initialy, if required
016203  000767              if (j == tForm)
016204  000768                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
016205  000769              else if (j == tLeddigits)
016206  000770                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
016207  000771              endif
016208  000772          endif
016209  000773      next
016210  000774      for (i := 0; i < nStrings; i++)
016211  000775          if (stringsCV[i] != -1)
016212  000776              WriteObject(tStrings, i, stringsCV[i]) ;
016213  000777          endif
016214  000778      next
016215  000779        
016216  000780  endfunc
016217  000781        
016218  000782  func UpdateObjects(var newval)
016219  000783      var IPidx, otherOBJ ;
016220  000784      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
016221  000785        
016222  000786          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
016223  000787              img_Show(hndl, *(pInputIndex));      // only shows on current form
016224  000788          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
016225  000789              if (*(CurInputData+Ofs_IPD_P1))
016226  000790                  newval &= 1;
016227  000791              else
016228  000792                  newval &= 3;
016229  000793              endif
016230  000794              if (newval > 1) newval := 1;
016231  000795          endif
016232  000796          IPidx := *(CurInputData+TouchState) ;
016233  000797          while(IPidx != 0)
016234  000798              otherOBJ := IPidx + InputData;
016235  000799              if (*(otherOBJ) == OT_REPORT)
016236  000800          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
016237  000801              else if (*(otherOBJ) == OT_MAGIC)
016238  000802                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
016239  000803                  IPidx(newval) ;
016240  000804              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
016241  000805                  if (*(otherOBJ) == OT_ACTIVATE)
016242  000806                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
016243  000807                      InputType := tForm ;
016244  000808                  else if (*(otherOBJ) == OT_SETCONST)
016245  000809                      newval := *(otherOBJ+Ofs_IPD_P3) ;
016246  000810                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
016247  000811                  else if (*(otherOBJ) == OT_SETANOTHER)
016248  000812                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
016249  000813                  else if (*(otherOBJ) == OT_PREVFRAME)
016250  000814                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
016251  000815                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
016252  000816                      endif
016253  000817                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
016254  000818                  else if (*(otherOBJ) == OT_NEXTFRAME)
016255  000819                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
016256  000820                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
016257  000821                      endif
016258  000822                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
016259  000823                  else if (*(otherOBJ) == OT_PREVSTRING)
016260  000824                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
016261  000825                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
016262  000826                      endif
016263  000827                  else if (*(otherOBJ) == OT_NEXTSTRING)
016264  000828                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
016265  000829                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
016266  000830                      endif
016267  000831                  endif
016268  000832              endif
016269  000833              IPidx := *(otherOBJ+TouchState) ;
016270  000834          wend
016271  000835      endif
016272  000836  endfunc
016273  000837        
016274  000838  // End P2.inc
016275  000839  func DoGFXObjects()
016276  000840  endfunc
016277  000841        
016278  000842  // Start P3.inc
016279  000843  func main()
016280  000844      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
016281  000845        
016282  000846      putstr("Mounting...\n");
016283  000847      if (!(file_Mount()))
016284  000848          while(!(file_Mount()))
016285  000849              putstr("Drive not mounted...");
016286  000850              pause(200);
016287  000851              gfx_Cls();
016288  000852              pause(200);
016289  000853          wend
016290  000854      endif
016291  000855  //    gfx_MoveTo(0, 0);
016292  000856  //    print(mem_Heap()," ") ;
016293  000857  //    gfx_TransparentColour(0x0020);
016294  000858  //    gfx_Transparency(ON);
016295  000859        
016296  000860      gfx_ScreenMode(LANDSCAPE) ;
016297  000861        
016298  000862      // open image control
016299  000863      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
016300  000864        
016301  000865      // init 'constants'
016302  000866  // End P3.inc
016303  000867        
016304  000868      oObjects[tDipSwitch] := oDipSwitchs ;
016305  000869      oObjects[tKnob] := oKnobs ;
016306  000870      oObjects[tRockerSwitch] := oRockerSwitchs ;
016307  000871      oObjects[tRotarySwitch] := oRotarySwitchs ;
016308  000872      oObjects[tGSlider] := oGSliders ;
016309  000873      oObjects[tTrackbar] := oTrackbars ;
016310  000874      oObjects[tWinButton] := oWinButtons ;
016311  000875      oObjects[tAngularmeter] := oAngularmeters ;
016312  000876      oObjects[tCoolgauge] := oCoolgauges ;
016313  000877      oObjects[tCustomdigits] := oCustomdigitss ;
016314  000878      oObjects[tForm] := oForms ;
016315  000879      oObjects[tGauge] := oGauges ;
016316  000880      oObjects[tImage] := oImages ;
016317  000881      oObjects[tKeyboard] := oKeyboards ;
016318  000882      oObjects[tLed] := oLeds ;
016319  000883      oObjects[tLeddigits] := oLeddigitss ;
016320  000884      oObjects[tMeter] := oMeters ;
016321  000885      oObjects[tStrings] := oStringss ;
016322  000886      oObjects[tThermometer] := oThermometers ;
016323  000887      oObjects[tUserled] := oUserleds ;
016324  000888      oObjects[tVideo] := oVideos ;
016325  000889      oObjects[tStaticText] := oStaticTexts ;
016326  000890      oObjects[tSounds] := oSoundss ;
016327  000891      oObjects[tTimer] := oTimers ;
016328  000892      oObjects[tSpectrum] := oSpectrums ;
016329  000893      oObjects[tTank] := oTanks ;
016330  000894      oObjects[tUserImages] := oUserImagess ;
016331  000895      oObjects[tPinOutput] := oPinOutputs ;
016332  000896      oObjects[tPinInput] := oPinInputs ;
016333  000897      oObjects[t4Dbutton] := o4Dbuttons ;
016334  000898      oObjects[tAniButton] := oAniButtons ;
016335  000899      oObjects[tColorPicker] := oColorPickers ;
016336  000900      oObjects[tUserButton] := oUserButtons ;
016337  000901      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
016338  000902      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
016339  000903      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
016340  000904      hFonts[3] := FONT3 ;
016341  000905      hFonts[4] := FONT3 ;
016342  000906      hFonts[5] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
016343  000907      hFonts[6] := FONT3 ;
016344  000908      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
016345  000909      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
016346  000910      hFonts[13] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
016347  000911      hFonts[14] := FONT3 ;
016348  000912      hFonts[15] := FONT3 ;
016349  000913      hFonts[16] := FONT3 ;
016350  000914      hFonts[24] := FONT3 ;
016351  000915      hFonts[25] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
016352  000916      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
016353  000917      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
016354  000918      hFonts[49] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
016355  000919      hFonts[50] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
016356  000920      hFonts[51] := FONT3 ;
016357  000921      hFonts[52] := FONT3 ;
016358  000922      hFonts[7] := hFonts[37] ;
016359  000923      hFonts[8] := hFonts[37] ;
016360  000924      hFonts[9] := hFonts[0] ;
016361  000925      hFonts[10] := hFonts[5] ;
016362  000926      hFonts[17] := hFonts[5] ;
016363  000927      hFonts[19] := hFonts[11] ;
016364  000928      hFonts[26] := hFonts[25] ;
016365  000929      hFonts[27] := hFonts[25] ;
016366  000930      hFonts[29] := hFonts[11] ;
016367  000931      hFonts[30] := hFonts[11] ;
016368  000932      hFonts[32] := hFonts[31] ;
016369  000933      hFonts[34] := hFonts[0] ;
016370  000934      hFonts[36] := hFonts[0] ;
016371  000935      hFonts[38] := hFonts[37] ;
016372  000936      hFonts[39] := hFonts[37] ;
016373  000937      hFonts[40] := hFonts[0] ;
016374  000938      hFonts[41] := hFonts[0] ;
016375  000939      hFonts[42] := hFonts[0] ;
016376  000940      hFonts[43] := hFonts[37] ;
016377  000941      hFonts[44] := hFonts[37] ;
016378  000942      hFonts[45] := hFonts[37] ;
016379  000943      hFonts[46] := hFonts[13] ;
016380  000944      hFonts[47] := hFonts[13] ;
016381  000945      hFonts[48] := hFonts[13] ;
016382  000946      hFonts[53] := hFonts[50] ;
016383  000947      WriteObject(tUserButton, 155, 1) ;
016384  000948  // Start P4.inc
016385  000949      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
016386  000950      // init comms
016387  000951      com_Init(comRX,CMDLenMAX,0);
016388  000952      com_SetBaud(COM0,19886);
016389  000953      com_TXbuffer(comTX, 100, 0);
016390  000954      snd_BufSize(2) ;
016391  000955      // tag 'real' objects
016392  000956      for (i := 0; i <= MaxTotObjects; i++)
016393  000957          if (   (i != tSounds)
016394  000958              && (i != tTimer)
016395  000959              && (i != tPinOutput)
016396  000960              && (i != tPinInput) )
016397  000961              TouchXpos := oObjects[i] ;
016398  000962              TouchYpos := *(TouchXpos) ;
016399  000963              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
016400  000964                  oldn := *(TouchXpos+ImageTouched*2) ;
016401  000965                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
016402  000966                  if (oldn != -1)
016403  000967                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
016404  000968                      img_Disable(hndl, oldn) ;
016405  000969                  endif
016406  000970              next
016407  000971          endif
016408  000972      next
016409  000973        
016410  000974      // display initial form
016411  000975      CurrentForm := -1 ;
016412  000976      ActivateForm(0) ; // need to change this according to first actual form
016413  000977        
016414  000978  // End P4.inc
016415  000979  // Start P5.inc
016416  000980      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016417  000981      oldn := -1 ;
016418  000982      repeat
016419  000983        
016420  000984          // check comms for command, how to NAK invalid command
016421  000985          if (com_Count() != 0)
016422  000986              i := serin() ;
016423  000987              InputCS ^= i ;               // update checksum
016424  000988              if (   (cmdi > 2)
016425  000989                  && (cmd[0] == WRITE_STRU) )
016426  000990                  j := (cmdi-1) >> 1 + 2 ;
016427  000991                  if (j == CMDLenMAX)    // max length exceeded
016428  000992                      nak0() ;
016429  000993                      cmdi := -1 ;
016430  000994                  else if (cmdi & 1)
016431  000995                      cmd[j] := i ;
016432  000996                      if (cmd[2] == 0)    // if string complete
016433  000997                          if (InputCS)
016434  000998                              nak0() ;
016435  000999                          else
016436  001000                              if (cmd[0] == WRITE_STRU)
016437  001001                              cmd[j] := 0 ;                     // terminate it
016438  001002                              PrintStrings(cmd[1], &cmd[3], 1) ;
016439  001003                              serout(ACK) ;
016440  001004                              else
016441  001005                              endif
016442  001006                          endif
016443  001007                          cmdi := -1 ;
016444  001008                      endif
016445  001009                  else
016446  001010                      cmd[j] := cmd[j] << 8 + i ;
016447  001011                      cmd[2]-- ;          // dec length
016448  001012                  endif
016449  001013                  cmdi++ ;
016450  001014              else // not unicode string
016451  001015                  cmd[cmdi++] := i ;
016452  001016                   if (cmd[0] == WRITE_STR)                  // Ansi String
016453  001017                      if (cmdi == CMDLenMAX)      // max length exceeded
016454  001018                          nak0() ;
016455  001019                          cmdi := 0 ;
016456  001020                      else if (cmdi > 2)
016457  001021                          if (cmd[2] == -1)
016458  001022                              if (InputCS)
016459  001023                                  nak0() ;
016460  001024                              else
016461  001025                                  if (cmd[0] == WRITE_STR)
016462  001026                                  cmd[cmdi-1] := 0 ;                     // terminate it
016463  001027                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016464  001028                                  serout(ACK) ;
016465  001029                                  else
016466  001030                                  endif
016467  001031                              endif
016468  001032                              cmdi := 0 ;
016469  001033                          else
016470  001034                              cmd[2]-- ;          // dec length
016471  001035                          endif
016472  001036                      endif
016473  001037                  else if (   (cmd[0] == READ_OBJ)
016474  001038                           && (cmdi == 4)         )
016475  001039                      if (InputCS)
016476  001040                          nak0() ;
016477  001041                      else
016478  001042                          ReadObject(cmd[1], cmd[2]) ;
016479  001043                      endif
016480  001044                      cmdi := 0 ;
016481  001045                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016482  001046                           && (cmdi == 6)          )
016483  001047                      if (InputCS)
016484  001048                          nak0() ;
016485  001049                      else
016486  001050                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016487  001051                          serout(ACK) ;
016488  001052                      endif
016489  001053                      cmdi := 0 ;
016490  001054                  else if (   (cmd[0] == WRITE_CONTRAST)
016491  001055                           && (cmdi == 3)         )
016492  001056                      if (InputCS)
016493  001057                          nak0() ;
016494  001058                      else
016495  001059                          gfx_Contrast(cmd[1]) ;
016496  001060                          serout(ACK) ;
016497  001061                      endif
016498  001062                      cmdi := 0 ;
016499  001063                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016500  001064                      nak0() ;
016501  001065                      cmdi := 0 ;
016502  001066                  endif
016503  001067              endif   // not unicode string
016504  001068          endif   // a character is available
016505  001069        
016506  001070        
016507  001071      // touch code processing
016508  001072        
016509  001073          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016510  001074          ImageTouched := img_Touched(hndl,-1) ;
016511  001075          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016512  001076              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016513  001077                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016514  001078              endif
016515  001079              if (TouchStatus != TOUCH_RELEASED)        // if not released
016516  001080                  if (oldn != -1)
016517  001081                      ImageTouched := oldn ;
016518  001082                  else
016519  001083                      if (oldn != ImageTouched)
016520  001084                  oldn := ImageTouched ;
016521  001085                          TouchStatus := TOUCH_PRESSED ;
016522  001086                      endif
016523  001087                  endif
016524  001088                  TouchXpos  := touch_Get(TOUCH_GETX);
016525  001089                  TouchYpos  := touch_Get(TOUCH_GETY);
016526  001090                  TouchState := Ofs_IPD_DOWN ;
016527  001091              else
016528  001092                  ImageTouched := oldn ;                     // simulate release of what we touched
016529  001093                  oldn := -1 ;                    // prevent double release
016530  001094                  TouchState := Ofs_IPD_RELEASE ;
016531  001095              endif
016532  001096              if (ImageTouched != -1)
016533  001097                          CurInputData := InputControls[ImageTouched] + InputData;
016534  001098                          InputType := *(CurInputData) ;
016535  001099                          i := InputType ;
016536  001100                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016537  001101                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016538  001102              endif
016539  001103          endif
016540  001104   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016541  001105        
016542  001106          sys_EventsResume() ;
016543  001107      forever
016544  001108        
016545  001109  cDipswitch:
016546  001110        
016547  001111  cKnob:
016548  001112        
016549  001113  cRockerswitch:
016550  001114        
016551  001115  cRotaryswitch:
016552  001116        
016553  001117  cSlider:
016554  001118  cTrackbar:
016555  001119        
016556  001120  c4DButton:
016557  001121  cUserButton:
016558  001122      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016559  001123      goto gbutton ;
016560  001124  cWinbutton:
016561  001125      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016562  001126  gbutton:
016563  001127      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016564  001128      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016565  001129          if (TouchStatus == TOUCH_RELEASED)
016566  001130              i &= 0xfffe ;
016567  001131              TouchState == Ofs_IPD_DOWN ;
016568  001132          else
016569  001133              i |= 1 ;
016570  001134              TouchState == Ofs_IPD_RELEASE ;
016571  001135          endif
016572  001136      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016573  001137          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016574  001138              if ((i & 3) == 3)
016575  001139                  i &= 0xfffc ;
016576  001140              else
016577  001141                  i++ ;
016578  001142              endif
016579  001143          else
016580  001144              i |= 1 ;                                      // make down regardless of current state
016581  001145          endif
016582  001146      else                        // group action, up all other buttons on touch press, reports 0 for button down
016583  001147          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016584  001148              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016585  001149          endif
016586  001150          i := (i & 0xfffc) | 2 ;
016587  001151      endif
016588  001152        
016589  001153      UpdateObjects(i) ;
016590  001154  endsub ;
016591  001155        
016592  001156  cAniButton:
016593  001157        
016594  001158  cColorPicker:
016595  001159        
016596  001160  endfunc
016597  001161  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 803 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 739 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13512  0x000034c8 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 120)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 12)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12880  0x00003250 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 39)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 27)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       10199  0x000027d7FormBGcolors                       10199  0x000027d7 (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          97  0x00000061FormEndIndex                          97  0x00000061 (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[45] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 216)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              111  0x0000006f (const ??? 0)  (usage 3)
iForm11                               98  0x00000062 (const ??? 0)  (usage 3)
iForm12                               47  0x0000002f (const ??? 0)  (usage 3)
iForm14                               54  0x00000036 (const ??? 0)  (usage 3)
iForm16                              173  0x000000ad (const ??? 0)  (usage 3)
iForm17                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm18                              181  0x000000b5 (const ??? 0)  (usage 3)
iForm19                               67  0x00000043 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               71  0x00000047 (const ??? 0)  (usage 3)
iForm21                               75  0x0000004b (const ??? 0)  (usage 3)
iForm23                               85  0x00000055 (const ??? 0)  (usage 3)
iForm24                               89  0x00000059 (const ??? 0)  (usage 3)
iForm25                              184  0x000000b8 (const ??? 0)  (usage 3)
iForm26                               93  0x0000005d (const ??? 0)  (usage 3)
iForm27                              100  0x00000064 (const ??? 0)  (usage 3)
iForm28                              121  0x00000079 (const ??? 0)  (usage 3)
iForm29                              128  0x00000080 (const ??? 0)  (usage 3)
iForm30                              137  0x00000089 (const ??? 0)  (usage 3)
iForm31                              141  0x0000008d (const ??? 0)  (usage 3)
iForm32                              145  0x00000091 (const ??? 0)  (usage 3)
iForm33                              149  0x00000095 (const ??? 0)  (usage 3)
iForm34                              160  0x000000a0 (const ??? 0)  (usage 3)
iForm35                              164  0x000000a4 (const ??? 0)  (usage 3)
iForm38                              188  0x000000bc (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              199  0x000000c7 (const ??? 0)  (usage 3)
iForm41                              225  0x000000e1 (const ??? 0)  (usage 3)
iForm5                                15  0x0000000f (const ??? 0)  (usage 3)
iForm6                                18  0x00000012 (const ??? 0)  (usage 3)
iForm7                               168  0x000000a8 (const ??? 0)  (usage 3)
iForm9                                43  0x0000002b (const ??? 0)  (usage 3)
iiLeddigits0                          32  0x00000020 (const ??? 0)  (not used)
iiLeddigits1                          34  0x00000022 (const ??? 0)  (not used)
iiLeddigits2                          36  0x00000024 (const ??? 0)  (not used)
iLeddigits0                           31  0x0000001f (const ??? 0)  (usage 3)
iLeddigits1                           33  0x00000021 (const ??? 0)  (usage 3)
iLeddigits2                           35  0x00000023 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        187  0x000000bbInputControls                        187  0x000000bb (mem) word[245] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            677  0x000002a5InputData                            677  0x000002a5 (mem) word[3817] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          90  0x0000005a (const ??? 0)  (usage 3)
iStatictext1                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext10                         58  0x0000003a (const ??? 0)  (usage 3)
iStatictext11                        229  0x000000e5 (const ??? 0)  (usage 3)
iStatictext12                        241  0x000000f1 (const ??? 0)  (usage 3)
iStatictext13                        243  0x000000f3 (const ??? 0)  (usage 3)
iStatictext19                         60  0x0000003c (const ??? 0)  (usage 3)
iStatictext2                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext3                          97  0x00000061 (const ??? 0)  (usage 3)
iStatictext4                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext5                         177  0x000000b1 (const ??? 0)  (usage 3)
iStatictext6                         200  0x000000c8 (const ??? 0)  (usage 3)
iStatictext7                         171  0x000000ab (const ??? 0)  (usage 3)
iStatictext8                          77  0x0000004d (const ??? 0)  (usage 3)
iStatictext9                          59  0x0000003b (const ??? 0)  (usage 3)
iStrings0                           8311  0x00002077iStrings0                           8311  0x00002077 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           8337  0x00002091iStrings1                           8337  0x00002091 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8571  0x0000217biStrings10                          8571  0x0000217b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8597  0x00002195iStrings11                          8597  0x00002195 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8623  0x000021afiStrings12                          8623  0x000021af (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8649  0x000021c9iStrings13                          8649  0x000021c9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8675  0x000021e3iStrings14                          8675  0x000021e3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8701  0x000021fdiStrings15                          8701  0x000021fd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8727  0x00002217iStrings16                          8727  0x00002217 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8753  0x00002231iStrings17                          8753  0x00002231 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8779  0x0000224biStrings19                          8779  0x0000224b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           8363  0x000020abiStrings2                           8363  0x000020ab (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8805  0x00002265iStrings24                          8805  0x00002265 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8831  0x0000227fiStrings25                          8831  0x0000227f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8857  0x00002299iStrings26                          8857  0x00002299 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8883  0x000022b3iStrings27                          8883  0x000022b3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8909  0x000022cdiStrings29                          8909  0x000022cd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           8389  0x000020c5iStrings3                           8389  0x000020c5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8935  0x000022e7iStrings30                          8935  0x000022e7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8961  0x00002301iStrings31                          8961  0x00002301 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8987  0x0000231biStrings32                          8987  0x0000231b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          9013  0x00002335iStrings34                          9013  0x00002335 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          9039  0x0000234fiStrings36                          9039  0x0000234f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          9065  0x00002369iStrings37                          9065  0x00002369 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          9091  0x00002383iStrings38                          9091  0x00002383 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          9117  0x0000239diStrings39                          9117  0x0000239d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           8415  0x000020dfiStrings4                           8415  0x000020df (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          9143  0x000023b7iStrings40                          9143  0x000023b7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          9169  0x000023d1iStrings41                          9169  0x000023d1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          9195  0x000023ebiStrings42                          9195  0x000023eb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          9221  0x00002405iStrings43                          9221  0x00002405 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          9247  0x0000241fiStrings44                          9247  0x0000241f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          9273  0x00002439iStrings45                          9273  0x00002439 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          9299  0x00002453iStrings46                          9299  0x00002453 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          9325  0x0000246diStrings47                          9325  0x0000246d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          9351  0x00002487iStrings48                          9351  0x00002487 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          9377  0x000024a1iStrings49                          9377  0x000024a1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           8441  0x000020f9iStrings5                           8441  0x000020f9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9403  0x000024bbiStrings50                          9403  0x000024bb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9429  0x000024d5iStrings51                          9429  0x000024d5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9455  0x000024efiStrings52                          9455  0x000024ef (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9481  0x00002509iStrings53                          9481  0x00002509 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           8467  0x00002113iStrings6                           8467  0x00002113 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           8493  0x0000212diStrings7                           8493  0x0000212d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           8519  0x00002147iStrings8                           8519  0x00002147 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8545  0x00002161iStrings9                           8545  0x00002161 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton100                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton101                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton102                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton103                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton104                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton105                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton106                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton107                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton108                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton109                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton11                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton110                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton111                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton112                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton113                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton114                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton115                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton116                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton117                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton118                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton119                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton12                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton120                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton121                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton122                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton123                       195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton124                       196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton125                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton126                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton127                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton128                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton129                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton13                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton130                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton131                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton132                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton133                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton134                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton135                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton136                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton137                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton138                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton139                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton141                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton142                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton143                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton144                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton145                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton146                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton147                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton148                       228  0x000000e4 (const ??? 0)  (usage 3)
iUserbutton149                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton151                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton152                       235  0x000000eb (const ??? 0)  (usage 3)
iUserbutton153                       236  0x000000ec (const ??? 0)  (usage 3)
iUserbutton154                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton155                       238  0x000000ee (const ??? 0)  (usage 3)
iUserbutton156                       239  0x000000ef (const ??? 0)  (usage 3)
iUserbutton157                       240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton158                       242  0x000000f2 (const ??? 0)  (usage 3)
iUserbutton159                        22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton16                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton160                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton17                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton18                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton19                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton21                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton22                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton23                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton24                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton25                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton26                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton27                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton28                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton29                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton3                          30  0x0000001e (const ??? 0)  (usage 3)
iUserbutton30                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton31                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton32                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton33                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton34                        230  0x000000e6 (const ??? 0)  (usage 3)
iUserbutton35                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton36                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton37                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton38                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton39                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton41                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton42                        175  0x000000af (const ??? 0)  (usage 3)
iUserbutton43                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton44                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton45                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton46                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton47                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton48                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton49                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton52                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton53                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton54                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton55                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton56                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton57                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton58                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton59                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton63                         40  0x00000028 (const ??? 0)  (usage 3)
iUserbutton64                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton65                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton66                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton67                        226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton68                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton69                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton71                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton72                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton73                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton74                        231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton75                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton76                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton77                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton78                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton79                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton81                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton82                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton83                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton84                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton85                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton86                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton87                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton88                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton89                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton91                        136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton92                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton93                        139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton94                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton95                        146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton96                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton97                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton98                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton99                        108  0x0000006c (const ??? 0)  (usage 3)
iUserimages0                         125  0x0000007d (const ??? 0)  (usage 3)
iUserimages1                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages10                         96  0x00000060 (const ??? 0)  (usage 3)
iUserimages11                        227  0x000000e3 (const ??? 0)  (usage 3)
iUserimages12                        176  0x000000b0 (const ??? 0)  (usage 3)
iUserimages13                         78  0x0000004e (const ??? 0)  (usage 3)
iUserimages14                        126  0x0000007e (const ??? 0)  (usage 3)
iUserimages15                        127  0x0000007f (const ??? 0)  (usage 3)
iUserimages16                         92  0x0000005c (const ??? 0)  (usage 3)
iUserimages17                        232  0x000000e8 (const ??? 0)  (usage 3)
iUserimages18                        233  0x000000e9 (const ??? 0)  (usage 3)
iUserimages2                          99  0x00000063 (const ??? 0)  (usage 3)
iUserimages3                         138  0x0000008a (const ??? 0)  (usage 3)
iUserimages4                         143  0x0000008f (const ??? 0)  (usage 3)
iUserimages5                         147  0x00000093 (const ??? 0)  (usage 3)
iUserimages6                         169  0x000000a9 (const ??? 0)  (usage 3)
iUserimages7                         140  0x0000008c (const ??? 0)  (usage 3)
iUserimages8                         144  0x00000090 (const ??? 0)  (usage 3)
iUserimages9                         148  0x00000094 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton1                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton2                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton3                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton4                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton5                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton6                           42  0x0000002a (const ??? 0)  (usage 3)
iWinbutton7                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton8                           29  0x0000001d (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                10289  0x00002831kKeyboardKeystrokes                10289  0x00002831 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13858  0x00003622 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10855  0x00002a67 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14980  0x00003a84 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              347  0x0000015b (const dword)  (usage 3)
nObjects                             245  0x000000f5 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9863  0x00002687o4Dbuttons                          9863  0x00002687 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9539  0x00002543oAngularmeters                      9539  0x00002543 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9865  0x00002689oAniButtons                         9865  0x00002689 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9867  0x0000268boColorPickers                       9867  0x0000268b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9541  0x00002545oCoolgauges                         9541  0x00002545 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9543  0x00002547oCustomdigitss                      9543  0x00002547 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9507  0x00002523oDipSwitchs                         9507  0x00002523 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9545  0x00002549oForms                              9545  0x00002549 (mem) word[46] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9637  0x000025a5oGauges                             9637  0x000025a5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9515  0x0000252boGSliders                           9515  0x0000252b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9639  0x000025a7oImages                             9639  0x000025a7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9641  0x000025a9oKeyboards                          9641  0x000025a9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9509  0x00002525oKnobs                              9509  0x00002525 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                        10293  0x00002835oLedDigitsn                        10293  0x00002835 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9645  0x000025adoLeddigitss                         9645  0x000025ad (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9643  0x000025aboLeds                               9643  0x000025ab (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9653  0x000025b5oMeters                             9653  0x000025b5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9861  0x00002685oPinInputs                          9861  0x00002685 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                        10197  0x000027d5oPinOutputs                        10197  0x000027d5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9511  0x00002527oRockerSwitchs                      9511  0x00002527 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9513  0x00002529oRotarySwitchs                      9513  0x00002529 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9817  0x00002659oScopes                             9817  0x00002659 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                           10195  0x000027d3oSoundss                           10195  0x000027d3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9815  0x00002657oSpectrums                          9815  0x00002657 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9773  0x0000262doStaticTexts                        9773  0x0000262d (mem) word[21] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9655  0x000025b7oStringss                           9655  0x000025b7 (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 87)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 450)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9819  0x0000265boTanks                              9819  0x0000265b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9765  0x00002625oThermometers                       9765  0x00002625 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                            10193  0x000027d1oTimers                            10193  0x000027d1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9517  0x0000252doTrackbars                          9517  0x0000252d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9869  0x0000268doUserButtons                        9869  0x0000268d (mem) word[162] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9821  0x0000265doUserImagess                        9821  0x0000265d (mem) word[20] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9767  0x00002627oUserleds                           9767  0x00002627 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9769  0x00002629oVideos                             9769  0x00002629 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9519  0x0000252foWinButtons                         9519  0x0000252f (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       15015  0x00003aa7 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14727  0x00003987 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  10291  0x00002833rKeyboardRoutines                  10291  0x00002833 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14913  0x00003a41 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14996  0x00003a94 (User func) args[1] r=0  (usage 15)
seroutOcs                          14963  0x00003a73 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         0  0x00000000 (const dword)  (not used)
Strings10Size                          1  0x00000001 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Count                         0  0x00000000 (const dword)  (not used)
Strings17Size                          1  0x00000001 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         94  0x0000005e (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         27  0x0000001b (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         68  0x00000044 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     22016  0x00005600 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      9728  0x00002600 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     10240  0x00002800 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     14172  0x0000375c (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 501)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12881  0x00003251 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 135)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        14372  0x00003824 (User func) args[3] r=0  (usage 27)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
