file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 28/09/2015 11:52:13
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 28/09/2015 11:51:50
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings3Count    0
005098  000005  #constant  Strings3Count    0
005099  000006  #constant  Strings3Size     1
005100  000006  #constant  Strings3Size     1
005101  000007  #constant  Strings1Count    1
005102  000007  #constant  Strings1Count    1
005103  000008  #constant  Strings1Size     30
005104  000008  #constant  Strings1Size     30
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings16Count    0
005142  000027  #constant  Strings16Count    0
005143  000028  #constant  Strings16Size     1
005144  000028  #constant  Strings16Size     1
005145  000029  #constant  Strings11Count    1
005146  000029  #constant  Strings11Count    1
005147  000030  #constant  Strings11Size     73
005148  000030  #constant  Strings11Size     73
005149  000031  #constant  Strings7Count    0
005150  000031  #constant  Strings7Count    0
005151  000032  #constant  Strings7Size     1
005152  000032  #constant  Strings7Size     1
005153  000033  #constant  Strings8Count    0
005154  000033  #constant  Strings8Count    0
005155  000034  #constant  Strings8Size     1
005156  000034  #constant  Strings8Size     1
005157  000035  #constant  Strings38Count    0
005158  000035  #constant  Strings38Count    0
005159  000036  #constant  Strings38Size     1
005160  000036  #constant  Strings38Size     1
005161  000037  #constant  Strings39Count    0
005162  000037  #constant  Strings39Count    0
005163  000038  #constant  Strings39Size     1
005164  000038  #constant  Strings39Size     1
005165  000039  #constant  Strings40Count    1
005166  000039  #constant  Strings40Count    1
005167  000040  #constant  Strings40Size     7
005168  000040  #constant  Strings40Size     7
005169  000041  #constant  Strings41Count    1
005170  000041  #constant  Strings41Count    1
005171  000042  #constant  Strings41Size     7
005172  000042  #constant  Strings41Size     7
005173  000043  #constant  Strings42Count    1
005174  000043  #constant  Strings42Count    1
005175  000044  #constant  Strings42Size     7
005176  000044  #constant  Strings42Size     7
005177  000045  #constant  Strings43Count    0
005178  000045  #constant  Strings43Count    0
005179  000046  #constant  Strings43Size     1
005180  000046  #constant  Strings43Size     1
005181  000047  #constant  Strings44Count    0
005182  000047  #constant  Strings44Count    0
005183  000048  #constant  Strings44Size     1
005184  000048  #constant  Strings44Size     1
005185  000049  #constant  Strings45Count    0
005186  000049  #constant  Strings45Count    0
005187  000050  #constant  Strings45Size     1
005188  000050  #constant  Strings45Size     1
005189  000051  #constant  Strings51Count    0
005190  000051  #constant  Strings51Count    0
005191  000052  #constant  Strings51Size     1
005192  000052  #constant  Strings51Size     1
005193  000053  #constant  Strings52Count    0
005194  000053  #constant  Strings52Count    0
005195  000054  #constant  Strings52Size     1
005196  000054  #constant  Strings52Size     1
005197  000055  #constant  Strings29Count    1
005198  000055  #constant  Strings29Count    1
005199  000056  #constant  Strings29Size     53
005200  000056  #constant  Strings29Size     53
005201  000057  #constant  Strings31Count    1
005202  000057  #constant  Strings31Count    1
005203  000058  #constant  Strings31Size     7
005204  000058  #constant  Strings31Size     7
005205  000059  #constant  Strings32Count    1
005206  000059  #constant  Strings32Count    1
005207  000060  #constant  Strings32Size     19
005208  000060  #constant  Strings32Size     19
005209  000061  #constant  Strings50Count    0
005210  000061  #constant  Strings50Count    0
005211  000062  #constant  Strings50Size     1
005212  000062  #constant  Strings50Size     1
005213  000063  #constant  Strings53Count    1
005214  000063  #constant  Strings53Count    1
005215  000064  #constant  Strings53Size     67
005216  000064  #constant  Strings53Size     67
005217  000065  #constant  Strings5Count    0
005218  000065  #constant  Strings5Count    0
005219  000066  #constant  Strings5Size     1
005220  000066  #constant  Strings5Size     1
005221  000067  #constant  Strings10Count    1
005222  000067  #constant  Strings10Count    1
005223  000068  #constant  Strings10Size     5
005224  000068  #constant  Strings10Size     5
005225  000069  #constant  Strings17Count    0
005226  000069  #constant  Strings17Count    0
005227  000070  #constant  Strings17Size     1
005228  000070  #constant  Strings17Size     1
005229  000071  // object indexes into ImageControl
005230  000072  #CONST
005231  000315  #END
005232  000316        
005233  000317  #constant  Strings13Size     0
005234  000317  #constant  Strings13Size     0
005235  000318  #constant  Strings13StartH   0
005236  000318  #constant  Strings13StartH   0
005237  000319  #constant  Strings13StartL   0
005238  000319  #constant  Strings13StartL   0
005239  000320  #constant  Strings14Size     0
005240  000320  #constant  Strings14Size     0
005241  000321  #constant  Strings14StartH   0
005242  000321  #constant  Strings14StartH   0
005243  000322  #constant  Strings14StartL   0
005244  000322  #constant  Strings14StartL   0
005245  000323  #constant  Strings15Size     0
005246  000323  #constant  Strings15Size     0
005247  000324  #constant  Strings15StartH   0
005248  000324  #constant  Strings15StartH   0
005249  000325  #constant  Strings15StartL   0
005250  000325  #constant  Strings15StartL   0
005251  000326  #constant  Strings18Size     0
005252  000326  #constant  Strings18Size     0
005253  000327  #constant  Strings18StartH   0
005254  000327  #constant  Strings18StartH   0
005255  000328  #constant  Strings18StartL   0
005256  000328  #constant  Strings18StartL   0
005257  000329  #constant  Strings19Size     0
005258  000329  #constant  Strings19Size     0
005259  000330  #constant  Strings19StartH   0
005260  000330  #constant  Strings19StartH   0
005261  000331  #constant  Strings19StartL   0
005262  000331  #constant  Strings19StartL   0
005263  000332  #constant  Strings20Size     0
005264  000332  #constant  Strings20Size     0
005265  000333  #constant  Strings20StartH   0
005266  000333  #constant  Strings20StartH   0
005267  000334  #constant  Strings20StartL   0
005268  000334  #constant  Strings20StartL   0
005269  000335  #constant  Strings21Size     0
005270  000335  #constant  Strings21Size     0
005271  000336  #constant  Strings21StartH   0
005272  000336  #constant  Strings21StartH   0
005273  000337  #constant  Strings21StartL   0
005274  000337  #constant  Strings21StartL   0
005275  000338  #constant  Strings22Size     0
005276  000338  #constant  Strings22Size     0
005277  000339  #constant  Strings22StartH   0
005278  000339  #constant  Strings22StartH   0
005279  000340  #constant  Strings22StartL   0
005280  000340  #constant  Strings22StartL   0
005281  000341  #constant  Strings23Size     0
005282  000341  #constant  Strings23Size     0
005283  000342  #constant  Strings23StartH   0
005284  000342  #constant  Strings23StartH   0
005285  000343  #constant  Strings23StartL   0
005286  000343  #constant  Strings23StartL   0
005287  000344  #constant  Strings24Size     0
005288  000344  #constant  Strings24Size     0
005289  000345  #constant  Strings24StartH   0
005290  000345  #constant  Strings24StartH   0
005291  000346  #constant  Strings24StartL   0
005292  000346  #constant  Strings24StartL   0
005293  000347  #constant  Strings25Size     0
005294  000347  #constant  Strings25Size     0
005295  000348  #constant  Strings25StartH   0
005296  000348  #constant  Strings25StartH   0
005297  000349  #constant  Strings25StartL   0
005298  000349  #constant  Strings25StartL   0
005299  000350  #constant  Strings26Size     0
005300  000350  #constant  Strings26Size     0
005301  000351  #constant  Strings26StartH   0
005302  000351  #constant  Strings26StartH   0
005303  000352  #constant  Strings26StartL   0
005304  000352  #constant  Strings26StartL   0
005305  000353  #constant  Strings27Size     0
005306  000353  #constant  Strings27Size     0
005307  000354  #constant  Strings27StartH   0
005308  000354  #constant  Strings27StartH   0
005309  000355  #constant  Strings27StartL   0
005310  000355  #constant  Strings27StartL   0
005311  000356  #constant  Strings28Size     0
005312  000356  #constant  Strings28Size     0
005313  000357  #constant  Strings28StartH   0
005314  000357  #constant  Strings28StartH   0
005315  000358  #constant  Strings28StartL   0
005316  000358  #constant  Strings28StartL   0
005317  000359  #constant  Strings30Size     0
005318  000359  #constant  Strings30Size     0
005319  000360  #constant  Strings30StartH   0
005320  000360  #constant  Strings30StartH   0
005321  000361  #constant  Strings30StartL   0
005322  000361  #constant  Strings30StartL   0
005323  000362  #constant  Strings33Size     0
005324  000362  #constant  Strings33Size     0
005325  000363  #constant  Strings33StartH   0
005326  000363  #constant  Strings33StartH   0
005327  000364  #constant  Strings33StartL   0
005328  000364  #constant  Strings33StartL   0
005329  000365  #constant  Strings35Size     0
005330  000365  #constant  Strings35Size     0
005331  000366  #constant  Strings35StartH   0
005332  000366  #constant  Strings35StartH   0
005333  000367  #constant  Strings35StartL   0
005334  000367  #constant  Strings35StartL   0
005335  000368  #constant  Strings46Size     0
005336  000368  #constant  Strings46Size     0
005337  000369  #constant  Strings46StartH   0
005338  000369  #constant  Strings46StartH   0
005339  000370  #constant  Strings46StartL   0
005340  000370  #constant  Strings46StartL   0
005341  000371  #constant  Strings47Size     0
005342  000371  #constant  Strings47Size     0
005343  000372  #constant  Strings47StartH   0
005344  000372  #constant  Strings47StartH   0
005345  000373  #constant  Strings47StartL   0
005346  000373  #constant  Strings47StartL   0
005347  000374  #constant  Strings48Size     0
005348  000374  #constant  Strings48Size     0
005349  000375  #constant  Strings48StartH   0
005350  000375  #constant  Strings48StartH   0
005351  000376  #constant  Strings48StartL   0
005352  000376  #constant  Strings48StartL   0
005353  000377  #constant  Strings49Size     0
005354  000377  #constant  Strings49Size     0
005355  000378  #constant  Strings49StartH   0
005356  000378  #constant  Strings49StartH   0
005357  000379  #constant  Strings49StartL   0
005358  000379  #constant  Strings49StartL   0
005359  000380  #constant  Strings3StartH   0x0
005360  000380  #constant  Strings3StartH   0x0
005361  000381  #constant  Strings3StartL   0x0
005362  000381  #constant  Strings3StartL   0x0
005363  000382  #constant  Strings1StartH   0x0
005364  000382  #constant  Strings1StartH   0x0
005365  000383  #constant  Strings1StartL   0x200
005366  000383  #constant  Strings1StartL   0x200
005367  000384  #constant  Strings4StartH   0x0
005368  000384  #constant  Strings4StartH   0x0
005369  000385  #constant  Strings4StartL   0x400
005370  000385  #constant  Strings4StartL   0x400
005371  000386  #constant  Strings6StartH   0x0
005372  000386  #constant  Strings6StartH   0x0
005373  000387  #constant  Strings6StartL   0x600
005374  000387  #constant  Strings6StartL   0x600
005375  000388  #constant  Strings2StartH   0x0
005376  000388  #constant  Strings2StartH   0x0
005377  000389  #constant  Strings2StartL   0x800
005378  000389  #constant  Strings2StartL   0x800
005379  000390  #constant  Strings0StartH   0x0
005380  000390  #constant  Strings0StartH   0x0
005381  000391  #constant  Strings0StartL   0xA00
005382  000391  #constant  Strings0StartL   0xA00
005383  000392  #constant  Strings9StartH   0x0
005384  000392  #constant  Strings9StartH   0x0
005385  000393  #constant  Strings9StartL   0xC00
005386  000393  #constant  Strings9StartL   0xC00
005387  000394  #constant  Strings34StartH   0x0
005388  000394  #constant  Strings34StartH   0x0
005389  000395  #constant  Strings34StartL   0xE00
005390  000395  #constant  Strings34StartL   0xE00
005391  000396  #constant  Strings36StartH   0x0
005392  000396  #constant  Strings36StartH   0x0
005393  000397  #constant  Strings36StartL   0x1000
005394  000397  #constant  Strings36StartL   0x1000
005395  000398  #constant  Strings37StartH   0x0
005396  000398  #constant  Strings37StartH   0x0
005397  000399  #constant  Strings37StartL   0x1200
005398  000399  #constant  Strings37StartL   0x1200
005399  000400  #constant  Strings12StartH   0x0
005400  000400  #constant  Strings12StartH   0x0
005401  000401  #constant  Strings12StartL   0x1400
005402  000401  #constant  Strings12StartL   0x1400
005403  000402  #constant  Strings16StartH   0x0
005404  000402  #constant  Strings16StartH   0x0
005405  000403  #constant  Strings16StartL   0x1600
005406  000403  #constant  Strings16StartL   0x1600
005407  000404  #constant  Strings11StartH   0x0
005408  000404  #constant  Strings11StartH   0x0
005409  000405  #constant  Strings11StartL   0x1800
005410  000405  #constant  Strings11StartL   0x1800
005411  000406  #constant  Strings7StartH   0x0
005412  000406  #constant  Strings7StartH   0x0
005413  000407  #constant  Strings7StartL   0x1A00
005414  000407  #constant  Strings7StartL   0x1A00
005415  000408  #constant  Strings8StartH   0x0
005416  000408  #constant  Strings8StartH   0x0
005417  000409  #constant  Strings8StartL   0x1C00
005418  000409  #constant  Strings8StartL   0x1C00
005419  000410  #constant  Strings38StartH   0x0
005420  000410  #constant  Strings38StartH   0x0
005421  000411  #constant  Strings38StartL   0x1E00
005422  000411  #constant  Strings38StartL   0x1E00
005423  000412  #constant  Strings39StartH   0x0
005424  000412  #constant  Strings39StartH   0x0
005425  000413  #constant  Strings39StartL   0x2000
005426  000413  #constant  Strings39StartL   0x2000
005427  000414  #constant  Strings40StartH   0x0
005428  000414  #constant  Strings40StartH   0x0
005429  000415  #constant  Strings40StartL   0x2200
005430  000415  #constant  Strings40StartL   0x2200
005431  000416  #constant  Strings41StartH   0x0
005432  000416  #constant  Strings41StartH   0x0
005433  000417  #constant  Strings41StartL   0x2400
005434  000417  #constant  Strings41StartL   0x2400
005435  000418  #constant  Strings42StartH   0x0
005436  000418  #constant  Strings42StartH   0x0
005437  000419  #constant  Strings42StartL   0x2600
005438  000419  #constant  Strings42StartL   0x2600
005439  000420  #constant  Strings43StartH   0x0
005440  000420  #constant  Strings43StartH   0x0
005441  000421  #constant  Strings43StartL   0x2800
005442  000421  #constant  Strings43StartL   0x2800
005443  000422  #constant  Strings44StartH   0x0
005444  000422  #constant  Strings44StartH   0x0
005445  000423  #constant  Strings44StartL   0x2A00
005446  000423  #constant  Strings44StartL   0x2A00
005447  000424  #constant  Strings45StartH   0x0
005448  000424  #constant  Strings45StartH   0x0
005449  000425  #constant  Strings45StartL   0x2C00
005450  000425  #constant  Strings45StartL   0x2C00
005451  000426  #constant  Strings51StartH   0x0
005452  000426  #constant  Strings51StartH   0x0
005453  000427  #constant  Strings51StartL   0x2E00
005454  000427  #constant  Strings51StartL   0x2E00
005455  000428  #constant  Strings52StartH   0x0
005456  000428  #constant  Strings52StartH   0x0
005457  000429  #constant  Strings52StartL   0x3000
005458  000429  #constant  Strings52StartL   0x3000
005459  000430  #constant  Strings29StartH   0x0
005460  000430  #constant  Strings29StartH   0x0
005461  000431  #constant  Strings29StartL   0x3200
005462  000431  #constant  Strings29StartL   0x3200
005463  000432  #constant  Strings31StartH   0x0
005464  000432  #constant  Strings31StartH   0x0
005465  000433  #constant  Strings31StartL   0x3400
005466  000433  #constant  Strings31StartL   0x3400
005467  000434  #constant  Strings32StartH   0x0
005468  000434  #constant  Strings32StartH   0x0
005469  000435  #constant  Strings32StartL   0x3600
005470  000435  #constant  Strings32StartL   0x3600
005471  000436  #constant  Strings50StartH   0x0
005472  000436  #constant  Strings50StartH   0x0
005473  000437  #constant  Strings50StartL   0x3800
005474  000437  #constant  Strings50StartL   0x3800
005475  000438  #constant  Strings53StartH   0x0
005476  000438  #constant  Strings53StartH   0x0
005477  000439  #constant  Strings53StartL   0x3A00
005478  000439  #constant  Strings53StartL   0x3A00
005479  000440  #constant  Strings5StartH   0x0
005480  000440  #constant  Strings5StartH   0x0
005481  000441  #constant  Strings5StartL   0x3C00
005482  000441  #constant  Strings5StartL   0x3C00
005483  000442  #constant  Strings10StartH   0x0
005484  000442  #constant  Strings10StartH   0x0
005485  000443  #constant  Strings10StartL   0x3E00
005486  000443  #constant  Strings10StartL   0x3E00
005487  000444  #constant  Strings17StartH   0x0
005488  000444  #constant  Strings17StartH   0x0
005489  000445  #constant  Strings17StartL   0x4000
005490  000445  #constant  Strings17StartL   0x4000
005491  000446  #IFNOT EXISTS NOGLOBALS
005492  000447  var hndl ;
005493  000448  #ENDIF
005494  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005495  000013  #inherit "CLPrintStrings.inc"
005496  000013  #inherit "CLPrintStrings.inc"
005497  000001  func PrintStrings(var ID, var *msgid, var String)
005498  000002      var StringID, i, ch, offs32[2], res32[2];
005499  000003      StringID := oStringss[1+ID] ;
005500  000004      if (String)
005501  000005          stringsCV[ID] := -1 ;
005502  000006      else
005503  000007          stringsCV[ID] := msgid ;
005504  000008      endif
005505  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005506  000010      txt_FontID(hFonts[ID]) ;
005507  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005508  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005509  000013        
005510  000014      if (*(StringID + Ofs_String_Transparent))
005511  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005512  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005513  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005514  000018      else
005515  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005516  000020          gfx_Clipping(ON) ;
005517  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005518  000022          gfx_Clipping(OFF) ;
005519  000023        
005520  000024      endif
005521  000025        
005522  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005523  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005524  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005525  000029        
005526  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005527  000031        
005528  000032      if (String)
005529  000033          i := 0 ;
005530  000034          ch := msgid[i++] ;
005531  000035          while (ch != 0)
005532  000036              putch(ch) ;
005533  000037              ch := msgid[i++] ;
005534  000038          wend
005535  000039      else
005536  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005537  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005538  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005539  000043          uadd_3232(res32,res32,offs32) ;
005540  000044          file_Seek(hstrings, res32[1], res32[0]);
005541  000045          repeat
005542  000046              if (*(StringID + Ofs_String_Ansi))
005543  000047                  ch := file_GetC(hstrings) ;
005544  000048              else
005545  000049                  ch := file_GetW(hstrings) ;
005546  000050              endif
005547  000051              putch(ch) ;
005548  000052          until (ch == 0) ;
005549  000053      endif
005550  000054        
005551  000055  endfunc
005552  000056        
005553  000014        
005554  000015  #constant IPDatasize 22
005555  000015  #constant IPDatasize 22
005556  000016        
005557  000017  #CONST
005558  000021  #END
005559  000022        
005560  000023  #CONST
005561  000130  #END
005562  000131        
005563  000530  #END
5564  2326
5565  2327
5566  2328
5567  2329
5568  232A
5569  232B
5570  232C
5571  232D
5572  232E
5573  232F
5574  2330
5575  2331
5576  2332
5577  2333
5578  2334
5579  2335
5580  2336
5581  2337
5582  2338
5583  2339
5584  233A
5585  233B
5586  233C
5587  233D
5588  233E
5589  233F
5590  2340
5591  2341
5592  2342
5593  2343
5594  2344
5595  2345
5596  2346
5597  2347
5598  2348
5599  2349
5600  234A
5601  234B
5602  234C
5603  234D
5604  234E
5605  234F
5606  2350
5607  2351
5608  2352
5609  2353
5610  2354
5611  2355
5612  2356
5613  2357
5614  2358
5615  2359
5616  235A
5617  235B
5618  235C
5619  235D
5620  235E
5621  235F
5622  2360
5623  2361
5624  2362
5625  2363
5626  2364
5627  2365
5628  2366
5629  2367
5630  2368
5631  2369
5632  236A
5633  236B
5634  236C
5635  236D
5636  236E
5637  236F
5638  2370
5639  2371
5640  2372
5641  2373
5642  2374
5643  2375
5644  2376
5645  2377
5646  2378
5647  2379
5648  237A
5649  237B
5650  237C
5651  237D
5652  237E
5653  237F
5654  2380
5655  2381
5656  2382
5657  2383
5658  2384
5659  2385
5660  2386
5661  2387
5662  2388
5663  2389
5664  238A
5665  238B
5666  238C
5667  238D
5668  238E
5669  238F
5670  2390
5671  2391
5672  2392
5673  2393
5674  2394
5675  2395
5676  2396
5677  2397
5678  2398
5679  2399
5680  239A
5681  239B
5682  239C
5683  239D
5684  239E
5685  239F
5686  23A0
5687  23A1
5688  23A2
5689  23A3
5690  23A4
5691  23A5
5692  23A6
5693  23A7
5694  23A8
5695  23A9
5696  23AA
5697  23AB
5698  23AC
5699  23AD
5700  23AE
5701  23AF
5702  23B0
5703  23B1
5704  23B2
5705  23B3
5706  23B4
5707  23B5
5708  23B6
5709  23B7
5710  23B8
5711  23B9
5712  23BA
5713  23BB
5714  23BC
5715  23BD
5716  23BE
5717  23BF
5718  23C0
5719  23C1
5720  23C2
5721  23C3
5722  23C4
5723  23C5
5724  23C6
5725  23C7
5726  23C8
5727  23C9
5728  23CA
5729  23CB
5730  23CC
5731  23CD
5732  23CE
5733  23CF
5734  23D0
5735  23D1
5736  23D2
5737  23D3
5738  23D4
5739  23D5
5740  23D6
5741  23D7
5742  23D8
5743  23D9
5744  23DA
5745  23DB
5746  23DC
5747  23DD
5748  23DE
5749  23DF
5750  23E0
5751  23E1
5752  23E2
5753  23E3
5754  23E4
5755  23E5
5756  23E6
5757  23E7
5758  23E8
5759  23E9
5760  23EA
5761  23EB
5762  23EC
5763  23ED
5764  23EE
5765  23EF
5766  23F0
5767  23F1
5768  23F2
5769  23F3
5770  23F4
5771  23F5
5772  23F6
5773  23F7
5774  23F8
5775  23F9
5776  23FA
5777  23FB
5778  23FC
5779  23FD
5780  23FE
5781  23FF
5782  2400
5783  2401
5784  2402
5785  2403
5786  2404
5787  2405
5788  2406
5789  2407
5790  2408
5791  2409
5792  240A
5793  240B
5794  240C
5795  240D
5796  240E
5797  240F
5798  2410
5799  2411
5800  2412
5801  2413
5802  2414
5803  2415
5804  2416
5805  2417
5806  2418
5807  2419
5808  241A
5809  241B
5810  241C
5811  241D
5812  241E
5813  241F
5814  2420
5815  2421
5816  2422
5817  2423
5818  2424
5819  2425
5820  2426
5821  2427
5822  2428
5823  2429
5824  242A
5825  242B
5826  242C
5827  242D
5828  242E
5829  242F
5830  2430
5831  2431
5832  2432
5833  2433
5834  2434
5835  2435
5836  2436
5837  2437
5838  2438
5839  2439
5840  243A
5841  243B
5842  243C
5843  243D
5844  243E
5845  243F
5846  2440
5847  2441
5848  2442
5849  2443
5850  2444
5851  2445
5852  2446
5853  2447
5854  2448
5855  2449
5856  244A
5857  244B
5858  244C
5859  244D
5860  244E
5861  244F
5862  2450
5863  2451
5864  2452
5865  2453
5866  2454
5867  2455
5868  2456
5869  2457
5870  2458
5871  2459
5872  245A
5873  245B
5874  245C
5875  245D
5876  245E
5877  245F
5878  2460
5879  2461
5880  2462
5881  2463
5882  2464
5883  2465
5884  2466
5885  2467
5886  2468
5887  2469
5888  246A
5889  246B
5890  246C
5891  246D
5892  246E
5893  246F
5894  2470
5895  2471
5896  2472
5897  2473
5898  2474
5899  2475
5900  2476
5901  2477
5902  2478
5903  2479
5904  247A
5905  247B
5906  247C
5907  247D
5908  247E
5909  247F
5910  2480
5911  2481
5912  2482
5913  2483
5914  2484
5915  2485
5916  2486
5917  2487
5918  2488
5919  2489
5920  248A
5921  248B
5922  248C
5923  248D
5924  248E
5925  248F
5926  2490
5927  2491
5928  2492
5929  2493
5930  2494
5931  2495
5932  2496
5933  2497
5934  2498
5935  2499
5936  249A
5937  249B
5938  249C
5939  249D
5940  249E
5941  249F
5942  24A0
5943  24A1
5944  24A2
5945  24A3
5946  24A4
5947  24A5
5948  24A6
5949  24A7
5950  24A8
5951  24A9
5952  24AA
5953  24AB
5954  24AC
5955  24AD
5956  24AE
5957  24AF
5958  24B0
5959  24B1
5960  24B2
5961  24B3
5962  24B4
5963  24B5
5964  24B6
5965  24B7
5966  24B8
5967  24B9
5968  24BA
5969  24BB
5970  24BC
5971  24BD
5972  24BE
5973  24BF
5974  24C0
5975  24C1
5976  24C2
5977  24C3
5978  24C4
5979  24C5
5980  24C6
5981  24C7
5982  24C8
5983  24C9
5984  24CA
5985  24CB
5986  24CC
5987  24CD
5988  24CE
5989  24CF
5990  24D0
5991  24D1
5992  24D2
5993  24D3
5994  24D4
5995  24D5
5996  24D6
5997  24D7
5998  24D8
5999  24D9
6000  24DA
6001  24DB
6002  24DC
6003  24DD
6004  24DE
6005  24DF
6006  24E0
6007  24E1
6008  24E2
6009  24E3
6010  24E4
6011  24E5
6012  24E6
6013  24E7
6014  24E8
6015  24E9
6016  24EA
6017  24EB
6018  24EC
6019  24ED
6020  24EE
6021  24EF
6022  24F0
6023  24F1
6024  24F2
6025  24F3
6026  24F4
6027  24F5
6028  24F6
6029  24F7
6030  24F8
6031  24F9
6032  24FA
6033  24FB
6034  24FC
6035  24FD
6036  24FE
6037  24FF
6038  2500
6039  2501
6040  2502
6041  2503
6042  2504
6043  2505
6044  2506
6045  2507
6046  2508
6047  2509
6048  250A
6049  250B
6050  250C
6051  250D
6052  250E
6053  250F
6054  2510
6055  2511
6056  2512
6057  2513
6058  2514
6059  2515
6060  2516
6061  2517
6062  2518
6063  2519
6064  251A
6065  251B
6066  251C
6067  251D
6068  251E
6069  251F
6070  2520
6071  2521
6072  2522
6073  2523
6074  2524
6075  2525
6076  2526
6077  2527
6078  2528
6079  2529
6080  252A
6081  252B
6082  252C
6083  252D
6084  252E
6085  252F
6086  2530
6087  2531
6088  2532
6089  2533
6090  2534
6091  2535
6092  2536
6093  2537
6094  2538
6095  2539
6096  253A
6097  253B
6098  253C
6099  253D
6100  253E
6101  253F
6102  2540
6103  2541
6104  2542
6105  2543
6106  2544
6107  2545
6108  2546
6109  2547
6110  2548
6111  2549
6112  254A
6113  254B
6114  254C
6115  254D
6116  254E
6117  254F
6118  2550
6119  2551
6120  2552
6121  2553
6122  2554
6123  2555
6124  2556
6125  2557
6126  2558
6127  2559
6128  255A
6129  255B
6130  255C
6131  255D
6132  255E
6133  255F
6134  2560
6135  2561
6136  2562
6137  2563
6138  2564
6139  2565
6140  2566
6141  2567
6142  2568
6143  2569
6144  256A
6145  256B
6146  256C
6147  256D
6148  256E
6149  256F
6150  2570
6151  2571
6152  2572
6153  2573
6154  2574
6155  2575
6156  2576
6157  2577
6158  2578
6159  2579
6160  257A
6161  257B
6162  257C
6163  257D
6164  257E
6165  257F
6166  2580
6167  2581
6168  2582
6169  2583
6170  2584
6171  2585
6172  2586
6173  2587
6174  2588
6175  2589
6176  258A
6177  258B
6178  258C
6179  258D
6180  258E
6181  258F
6182  2590
6183  2591
6184  2592
6185  2593
6186  2594
6187  2595
6188  2596
6189  2597
6190  2598
6191  2599
6192  259A
6193  259B
6194  259C
6195  259D
6196  259E
6197  259F
6198  25A0
6199  25A1
6200  25A2
6201  25A3
6202  25A4
6203  25A5
6204  25A6
6205  25A7
6206  25A8
6207  25A9
6208  25AA
6209  25AB
6210  25AC
6211  25AD
6212  25AE
6213  25AF
6214  25B0
6215  25B1
6216  25B2
6217  25B3
6218  25B4
6219  25B5
6220  25B6
6221  25B7
6222  25B8
6223  25B9
6224  25BA
6225  25BB
6226  25BC
6227  25BD
6228  25BE
6229  25BF
6230  25C0
6231  25C1
6232  25C2
6233  25C3
6234  25C4
6235  25C5
6236  25C6
6237  25C7
6238  25C8
6239  25C9
6240  25CA
6241  25CB
6242  25CC
6243  25CD
6244  25CE
6245  25CF
6246  25D0
6247  25D1
6248  25D2
6249  25D3
6250  25D4
6251  25D5
6252  25D6
6253  25D7
6254  25D8
6255  25D9
6256  25DA
6257  25DB
6258  25DC
6259  25DD
6260  25DE
6261  25DF
6262  25E0
6263  25E1
6264  25E2
6265  25E3
6266  25E4
6267  25E5
6268  25E6
6269  25E7
6270  25E8
6271  25E9
6272  25EA
6273  25EB
6274  25EC
6275  25ED
6276  25EE
6277  25EF
6278  25F0
6279  25F1
6280  25F2
6281  25F3
6282  25F4
6283  25F5
6284  25F6
6285  25F7
6286  25F8
6287  25F9
6288  25FA
6289  25FB
6290  25FC
6291  25FD
6292  25FE
6293  25FF
6294  2600
6295  2601
6296  2602
6297  2603
6298  2604
6299  2605
6300  2606
6301  2607
6302  2608
6303  2609
6304  260A
6305  260B
6306  260C
6307  260D
6308  260E
6309  260F
6310  2610
6311  2611
6312  2612
6313  2613
6314  2614
6315  2615
6316  2616
6317  2617
6318  2618
6319  2619
6320  261A
6321  261B
6322  261C
6323  261D
6324  261E
6325  261F
6326  2620
6327  2621
6328  2622
6329  2623
6330  2624
6331  2625
6332  2626
6333  2627
6334  2628
6335  2629
6336  262A
6337  262B
6338  262C
6339  262D
6340  262E
6341  262F
6342  2630
6343  2631
6344  2632
6345  2633
6346  2634
6347  2635
6348  2636
6349  2637
6350  2638
6351  2639
6352  263A
6353  263B
6354  263C
6355  263D
6356  263E
6357  263F
6358  2640
6359  2641
6360  2642
6361  2643
6362  2644
6363  2645
6364  2646
6365  2647
6366  2648
6367  2649
6368  264A
6369  264B
6370  264C
6371  264D
6372  264E
6373  264F
6374  2650
6375  2651
6376  2652
6377  2653
6378  2654
6379  2655
6380  2656
6381  2657
6382  2658
6383  2659
6384  265A
6385  265B
6386  265C
6387  265D
6388  265E
6389  265F
6390  2660
6391  2661
6392  2662
6393  2663
6394  2664
6395  2665
6396  2666
6397  2667
6398  2668
6399  2669
6400  266A
6401  266B
6402  266C
6403  266D
6404  266E
6405  266F
6406  2670
6407  2671
6408  2672
6409  2673
6410  2674
6411  2675
6412  2676
6413  2677
6414  2678
6415  2679
6416  267A
6417  267B
6418  267C
6419  267D
6420  267E
6421  267F
6422  2680
6423  2681
6424  2682
6425  2683
6426  2684
6427  2685
6428  2686
6429  2687
6430  2688
6431  2689
6432  268A
6433  268B
6434  268C
6435  268D
6436  268E
6437  268F
6438  2690
6439  2691
6440  2692
6441  2693
6442  2694
6443  2695
6444  2696
6445  2697
6446  2698
6447  2699
6448  269A
6449  269B
6450  269C
6451  269D
6452  269E
6453  269F
6454  26A0
6455  26A1
6456  26A2
6457  26A3
6458  26A4
6459  26A5
6460  26A6
6461  26A7
6462  26A8
6463  26A9
6464  26AA
6465  26AB
6466  26AC
6467  26AD
6468  26AE
6469  26AF
6470  26B0
6471  26B1
6472  26B2
6473  26B3
6474  26B4
6475  26B5
6476  26B6
6477  26B7
6478  26B8
6479  26B9
6480  26BA
6481  26BB
6482  26BC
6483  26BD
6484  26BE
6485  26BF
6486  26C0
6487  26C1
6488  26C2
6489  26C3
6490  26C4
6491  26C5
6492  26C6
6493  26C7
6494  26C8
6495  26C9
6496  26CA
6497  26CB
6498  26CC
6499  26CD
6500  26CE
6501  26CF
6502  26D0
6503  26D1
6504  26D2
6505  26D3
6506  26D4
6507  26D5
6508  26D6
6509  26D7
6510  26D8
6511  26D9
6512  26DA
6513  26DB
6514  26DC
6515  26DD
6516  26DE
6517  26DF
6518  26E0
6519  26E1
6520  26E2
6521  26E3
6522  26E4
6523  26E5
6524  26E6
6525  26E7
6526  26E8
6527  26E9
6528  26EA
6529  26EB
6530  26EC
6531  26ED
6532  26EE
6533  26EF
6534  26F0
6535  26F1
6536  26F2
6537  26F3
6538  26F4
6539  26F5
6540  26F6
6541  26F7
6542  26F8
6543  26F9
6544  26FA
6545  26FB
6546  26FC
6547  26FD
6548  26FE
6549  26FF
6550  2700
6551  2701
6552  2702
6553  2703
6554  2704
6555  2705
6556  2706
6557  2707
6558  2708
6559  2709
6560  270A
6561  270B
6562  270C
6563  270D
6564  270E
6565  270F
6566  2710
6567  2711
6568  2712
6569  2713
6570  2714
6571  2715
6572  2716
6573  2717
6574  2718
6575  2719
6576  271A
6577  271B
6578  271C
6579  271D
6580  271E
6581  271F
6582  2720
6583  2721
6584  2722
6585  2723
6586  2724
6587  2725
6588  2726
6589  2727
6590  2728
6591  2729
6592  272A
6593  272B
6594  272C
6595  272D
6596  272E
6597  272F
6598  2730
6599  2731
6600  2732
6601  2733
6602  2734
6603  2735
6604  2736
6605  2737
6606  2738
6607  2739
6608  273A
6609  273B
6610  273C
6611  273D
6612  273E
6613  273F
6614  2740
6615  2741
6616  2742
6617  2743
6618  2744
6619  2745
6620  2746
6621  2747
6622  2748
6623  2749
6624  274A
6625  274B
6626  274C
6627  274D
6628  274E
6629  274F
6630  2750
6631  2751
6632  2752
6633  2753
6634  2754
6635  2755
6636  2756
6637  2757
6638  2758
6639  2759
6640  275A
6641  275B
6642  275C
6643  275D
6644  275E
6645  275F
6646  2760
6647  2761
6648  2762
6649  2763
6650  2764
6651  2765
6652  2766
6653  2767
6654  2768
6655  2769
6656  276A
6657  276B
6658  276C
6659  276D
6660  276E
6661  276F
6662  2770
6663  2771
6664  2772
6665  2773
6666  2774
6667  2775
6668  2776
6669  2777
6670  2778
6671  2779
6672  277A
6673  277B
6674  277C
6675  277D
6676  277E
6677  277F
6678  2780
6679  2781
6680  2782
6681  2783
6682  2784
6683  2785
6684  2786
6685  2787
6686  2788
6687  2789
6688  278A
6689  278B
6690  278C
6691  278D
6692  278E
6693  278F
6694  2790
6695  2791
6696  2792
6697  2793
6698  2794
6699  2795
6700  2796
6701  2797
6702  2798
6703  2799
6704  279A
6705  279B
6706  279C
6707  279D
6708  279E
6709  279F
6710  27A0
6711  27A1
6712  27A2
6713  27A3
6714  27A4
6715  27A5
6716  27A6
6717  27A7
6718  27A8
6719  27A9
6720  27AA
6721  27AB
6722  27AC
6723  27AD
6724  27AE
6725  27AF
6726  27B0
6727  27B1
6728  27B2
6729  27B3
6730  27B4
6731  27B5
6732  27B6
6733  27B7
6734  27B8
6735  27B9
6736  27BA
6737  27BB
6738  27BC
6739  27BD
6740  27BE
6741  27BF
6742  27C0
6743  27C1
6744  27C2
6745  27C3
6746  27C4
6747  27C5
6748  27C6
6749  27C7
6750  27C8
6751  27C9
6752  27CA
6753  27CB
6754  27CC
6755  27CD
6756  27CE
6757  27CF
6758  27D0
6759  27D1
6760  27D2
6761  27D3
6762  27D4
6763  27D5
6764  27D6
6765  27D7
6766  27D8
6767  27D9
6768  27DA
6769  27DB
6770  27DC
6771  27DD
6772  27DE
6773  27DF
6774  27E0
6775  27E1
6776  27E2
6777  27E3
6778  27E4
6779  27E5
6780  27E6
6781  27E7
6782  27E8
6783  27E9
6784  27EA
6785  27EB
6786  27EC
6787  27ED
6788  27EE
6789  27EF
6790  27F0
6791  27F1
6792  27F2
6793  27F3
6794  27F4
6795  27F5
6796  27F6
6797  27F7
6798  27F8
6799  27F9
6800  27FA
6801  27FB
6802  27FC
6803  27FD
6804  27FE
6805  27FF
6806  2800
6807  2801
6808  2802
6809  2803
6810  2804
6811  2805
6812  2806
6813  2807
6814  2808
6815  2809
6816  280A
6817  280B
6818  280C
6819  280D
6820  280E
6821  280F
6822  2810
6823  2811
6824  2812
6825  2813
6826  2814
6827  2815
6828  2816
6829  2817
6830  2818
6831  2819
6832  281A
6833  281B
6834  281C
6835  281D
6836  281E
6837  281F
6838  2820
6839  2821
6840  2822
6841  2823
6842  2824
6843  2825
6844  2826
6845  2827
6846  2828
6847  2829
6848  282A
6849  282B
6850  282C
6851  282D
6852  282E
6853  282F
6854  2830
6855  2831
6856  2832
6857  2833
6858  2834
6859  2835
6860  2836
6861  2837
6862  2838
6863  2839
6864  283A
6865  283B
6866  283C
6867  283D
6868  283E
6869  283F
6870  2840
6871  2841
6872  2842
6873  2843
6874  2844
6875  2845
6876  2846
6877  2847
6878  2848
6879  2849
6880  284A
6881  284B
6882  284C
6883  284D
6884  284E
6885  284F
6886  2850
6887  2851
6888  2852
6889  2853
6890  2854
6891  2855
6892  2856
6893  2857
6894  2858
6895  2859
6896  285A
6897  285B
6898  285C
6899  285D
6900  285E
6901  285F
6902  2860
6903  2861
6904  2862
6905  2863
6906  2864
6907  2865
6908  2866
6909  2867
6910  2868
6911  2869
6912  286A
6913  286B
6914  286C
6915  286D
6916  286E
6917  286F
6918  2870
6919  2871
6920  2872
6921  2873
6922  2874
6923  2875
6924  2876
6925  2877
6926  2878
6927  2879
6928  287A
6929  287B
6930  287C
6931  287D
6932  287E
6933  287F
6934  2880
6935  2881
6936  2882
6937  2883
6938  2884
6939  2885
6940  2886
6941  2887
6942  2888
6943  2889
6944  288A
6945  288B
6946  288C
6947  288D
6948  288E
6949  288F
6950  2890
6951  2891
6952  2892
6953  2893
6954  2894
6955  2895
6956  2896
6957  2897
6958  2898
6959  2899
6960  289A
6961  289B
6962  289C
6963  289D
6964  289E
6965  289F
6966  28A0
6967  28A1
6968  28A2
6969  28A3
6970  28A4
6971  28A5
6972  28A6
6973  28A7
6974  28A8
6975  28A9
6976  28AA
6977  28AB
6978  28AC
6979  28AD
6980  28AE
6981  28AF
6982  28B0
6983  28B1
6984  28B2
6985  28B3
6986  28B4
6987  28B5
6988  28B6
6989  28B7
6990  28B8
6991  28B9
6992  28BA
6993  28BB
6994  28BC
6995  28BD
6996  28BE
6997  28BF
6998  28C0
6999  28C1
7000  28C2
7001  28C3
7002  28C4
7003  28C5
7004  28C6
7005  28C7
7006  28C8
7007  28C9
7008  28CA
7009  28CB
7010  28CC
7011  28CD
7012  28CE
7013  28CF
7014  28D0
7015  28D1
7016  28D2
7017  28D3
7018  28D4
7019  28D5
7020  28D6
7021  28D7
7022  28D8
7023  28D9
7024  28DA
7025  28DB
7026  28DC
7027  28DD
7028  28DE
7029  28DF
7030  28E0
7031  28E1
7032  28E2
7033  28E3
7034  28E4
7035  28E5
7036  28E6
7037  28E7
7038  28E8
7039  28E9
7040  28EA
7041  28EB
7042  28EC
7043  28ED
7044  28EE
7045  28EF
7046  28F0
7047  28F1
7048  28F2
7049  28F3
7050  28F4
7051  28F5
7052  28F6
7053  28F7
7054  28F8
7055  28F9
7056  28FA
7057  28FB
7058  28FC
7059  28FD
7060  28FE
7061  28FF
7062  2900
7063  2901
7064  2902
7065  2903
7066  2904
7067  2905
7068  2906
7069  2907
7070  2908
7071  2909
7072  290A
7073  290B
7074  290C
7075  290D
7076  290E
7077  290F
7078  2910
7079  2911
7080  2912
7081  2913
7082  2914
7083  2915
7084  2916
7085  2917
7086  2918
7087  2919
7088  291A
7089  291B
7090  291C
7091  291D
7092  291E
7093  291F
7094  2920
7095  2921
7096  2922
7097  2923
7098  2924
7099  2925
7100  2926
7101  2927
7102  2928
7103  2929
7104  292A
7105  292B
7106  292C
7107  292D
7108  292E
7109  292F
7110  2930
7111  2931
7112  2932
7113  2933
7114  2934
7115  2935
7116  2936
7117  2937
7118  2938
7119  2939
7120  293A
7121  293B
7122  293C
7123  293D
7124  293E
7125  293F
7126  2940
7127  2941
7128  2942
7129  2943
7130  2944
7131  2945
7132  2946
7133  2947
7134  2948
7135  2949
7136  294A
7137  294B
7138  294C
7139  294D
7140  294E
7141  294F
7142  2950
7143  2951
7144  2952
7145  2953
7146  2954
7147  2955
7148  2956
7149  2957
7150  2958
7151  2959
7152  295A
7153  295B
7154  295C
7155  295D
7156  295E
7157  295F
7158  2960
7159  2961
7160  2962
7161  2963
7162  2964
7163  2965
7164  2966
7165  2967
7166  2968
7167  2969
7168  296A
7169  296B
7170  296C
7171  296D
7172  296E
7173  296F
7174  2970
7175  2971
7176  2972
7177  2973
7178  2974
7179  2975
7180  2976
7181  2977
7182  2978
7183  2979
7184  297A
7185  297B
7186  297C
7187  297D
7188  297E
7189  297F
7190  2980
7191  2981
7192  2982
7193  2983
7194  2984
7195  2985
7196  2986
7197  2987
7198  2988
7199  2989
7200  298A
7201  298B
7202  298C
7203  298D
7204  298E
7205  298F
7206  2990
7207  2991
7208  2992
7209  2993
7210  2994
7211  2995
7212  2996
7213  2997
7214  2998
7215  2999
7216  299A
7217  299B
7218  299C
7219  299D
7220  299E
7221  299F
7222  29A0
7223  29A1
7224  29A2
7225  29A3
7226  29A4
7227  29A5
7228  29A6
7229  29A7
7230  29A8
7231  29A9
7232  29AA
7233  29AB
7234  29AC
7235  29AD
7236  29AE
7237  29AF
7238  29B0
7239  29B1
7240  29B2
7241  29B3
7242  29B4
7243  29B5
7244  29B6
7245  29B7
7246  29B8
7247  29B9
7248  29BA
7249  29BB
7250  29BC
7251  29BD
7252  29BE
7253  29BF
7254  29C0
7255  29C1
7256  29C2
7257  29C3
7258  29C4
7259  29C5
7260  29C6
7261  29C7
7262  29C8
7263  29C9
7264  29CA
7265  29CB
7266  29CC
7267  29CD
7268  29CE
7269  29CF
7270  29D0
7271  29D1
7272  29D2
7273  29D3
7274  29D4
7275  29D5
7276  29D6
7277  29D7
7278  29D8
7279  29D9
7280  29DA
7281  29DB
7282  29DC
7283  29DD
7284  29DE
7285  29DF
7286  29E0
7287  29E1
7288  29E2
7289  29E3
7290  29E4
7291  29E5
7292  29E6
7293  29E7
7294  29E8
7295  29E9
7296  29EA
7297  29EB
7298  29EC
7299  29ED
7300  29EE
7301  29EF
7302  29F0
7303  29F1
7304  29F2
7305  29F3
7306  29F4
7307  29F5
7308  29F6
7309  29F7
7310  29F8
7311  29F9
7312  29FA
7313  29FB
7314  29FC
7315  29FD
7316  29FE
7317  29FF
7318  2A00
7319  2A01
7320  2A02
7321  2A03
7322  2A04
7323  2A05
7324  2A06
7325  2A07
7326  2A08
7327  2A09
7328  2A0A
7329  2A0B
7330  2A0C
7331  2A0D
7332  2A0E
7333  2A0F
7334  2A10
7335  2A11
7336  2A12
7337  2A13
7338  2A14
7339  2A15
7340  2A16
7341  2A17
7342  2A18
7343  2A19
7344  2A1A
7345  2A1B
7346  2A1C
7347  2A1D
7348  2A1E
7349  2A1F
7350  2A20
7351  2A21
7352  2A22
7353  2A23
7354  2A24
7355  2A25
7356  2A26
7357  2A27
7358  2A28
7359  2A29
7360  2A2A
7361  2A2B
7362  2A2C
7363  2A2D
7364  2A2E
7365  2A2F
7366  2A30
7367  2A31
7368  2A32
7369  2A33
7370  2A34
7371  2A35
7372  2A36
7373  2A37
7374  2A38
7375  2A39
7376  2A3A
7377  2A3B
7378  2A3C
7379  2A3D
7380  2A3E
7381  2A3F
7382  2A40
7383  2A41
7384  2A42
7385  2A43
7386  2A44
7387  2A45
7388  2A46
7389  2A47
7390  2A48
7391  2A49
7392  2A4A
7393  2A4B
7394  2A4C
7395  2A4D
7396  2A4E
7397  2A4F
7398  2A50
7399  2A51
7400  2A52
7401  2A53
7402  2A54
7403  2A55
7404  2A56
7405  2A57
7406  2A58
7407  2A59
7408  2A5A
7409  2A5B
7410  2A5C
7411  2A5D
7412  2A5E
7413  2A5F
7414  2A60
7415  2A61
7416  2A62
7417  2A63
7418  2A64
7419  2A65
7420  2A66
7421  2A67
7422  2A68
7423  2A69
7424  2A6A
7425  2A6B
7426  2A6C
7427  2A6D
7428  2A6E
7429  2A6F
7430  2A70
7431  2A71
7432  2A72
7433  2A73
7434  2A74
7435  2A75
7436  2A76
7437  2A77
7438  2A78
7439  2A79
7440  2A7A
7441  2A7B
7442  2A7C
7443  2A7D
7444  2A7E
7445  2A7F
7446  2A80
7447  2A81
7448  2A82
7449  2A83
7450  2A84
7451  2A85
7452  2A86
7453  2A87
7454  2A88
7455  2A89
7456  2A8A
7457  2A8B
7458  2A8C
7459  2A8D
7460  2A8E
7461  2A8F
7462  2A90
7463  2A91
7464  2A92
7465  2A93
7466  2A94
7467  2A95
7468  2A96
7469  2A97
7470  2A98
7471  2A99
7472  2A9A
7473  2A9B
7474  2A9C
7475  2A9D
7476  2A9E
7477  2A9F
7478  2AA0
7479  2AA1
7480  2AA2
7481  2AA3
7482  2AA4
7483  2AA5
7484  2AA6
7485  2AA7
7486  2AA8
7487  2AA9
7488  2AAA
7489  2AAB
7490  2AAC
7491  2AAD
7492  2AAE
7493  2AAF
7494  2AB0
7495  2AB1
7496  2AB2
7497  2AB3
7498  2AB4
7499  2AB5
7500  2AB6
7501  2AB7
7502  2AB8
7503  2AB9
7504  2ABA
7505  2ABB
7506  2ABC
7507  2ABD
7508  2ABE
7509  2ABF
7510  2AC0
7511  2AC1
7512  2AC2
7513  2AC3
7514  2AC4
7515  2AC5
7516  2AC6
7517  2AC7
7518  2AC8
7519  2AC9
7520  2ACA
7521  2ACB
7522  2ACC
7523  2ACD
7524  2ACE
7525  2ACF
7526  2AD0
7527  2AD1
7528  2AD2
7529  2AD3
7530  2AD4
7531  2AD5
7532  2AD6
7533  2AD7
7534  2AD8
7535  2AD9
7536  2ADA
7537  2ADB
7538  2ADC
7539  2ADD
7540  2ADE
7541  2ADF
7542  2AE0
7543  2AE1
7544  2AE2
7545  2AE3
7546  2AE4
7547  2AE5
7548  2AE6
7549  2AE7
7550  2AE8
7551  2AE9
7552  2AEA
7553  2AEB
7554  2AEC
7555  2AED
7556  2AEE
7557  2AEF
7558  2AF0
7559  2AF1
7560  2AF2
7561  2AF3
7562  2AF4
7563  2AF5
7564  2AF6
7565  2AF7
7566  2AF8
7567  2AF9
7568  2AFA
7569  2AFB
7570  2AFC
7571  2AFD
7572  2AFE
7573  2AFF
7574  2B00
7575  2B01
7576  2B02
7577  2B03
7578  2B04
7579  2B05
7580  2B06
7581  2B07
7582  2B08
7583  2B09
7584  2B0A
7585  2B0B
7586  2B0C
7587  2B0D
7588  2B0E
7589  2B0F
7590  2B10
7591  2B11
7592  2B12
7593  2B13
7594  2B14
7595  2B15
7596  2B16
7597  2B17
7598  2B18
7599  2B19
7600  2B1A
7601  2B1B
7602  2B1C
7603  2B1D
7604  2B1E
7605  2B1F
7606  2B20
7607  2B21
7608  2B22
7609  2B23
7610  2B24
7611  2B25
7612  2B26
7613  2B27
7614  2B28
7615  2B29
7616  2B2A
7617  2B2B
7618  2B2C
7619  2B2D
7620  2B2E
7621  2B2F
7622  2B30
7623  2B31
7624  2B32
7625  2B33
7626  2B34
7627  2B35
7628  2B36
7629  2B37
7630  2B38
7631  2B39
7632  2B3A
7633  2B3B
7634  2B3C
7635  2B3D
7636  2B3E
7637  2B3F
7638  2B40
7639  2B41
7640  2B42
7641  2B43
7642  2B44
7643  2B45
7644  2B46
7645  2B47
7646  2B48
7647  2B49
7648  2B4A
7649  2B4B
7650  2B4C
7651  2B4D
7652  2B4E
7653  2B4F
7654  2B50
7655  2B51
7656  2B52
7657  2B53
7658  2B54
7659  2B55
7660  2B56
7661  2B57
7662  2B58
7663  2B59
7664  2B5A
7665  2B5B
7666  2B5C
7667  2B5D
7668  2B5E
7669  2B5F
7670  2B60
7671  2B61
7672  2B62
7673  2B63
7674  2B64
7675  2B65
7676  2B66
7677  2B67
7678  2B68
7679  2B69
7680  2B6A
7681  2B6B
7682  2B6C
7683  2B6D
7684  2B6E
7685  2B6F
7686  2B70
7687  2B71
7688  2B72
7689  2B73
7690  2B74
7691  2B75
7692  2B76
7693  2B77
7694  2B78
7695  2B79
7696  2B7A
7697  2B7B
7698  2B7C
7699  2B7D
7700  2B7E
7701  2B7F
7702  2B80
7703  2B81
7704  2B82
7705  2B83
7706  2B84
7707  2B85
7708  2B86
7709  2B87
7710  2B88
7711  2B89
7712  2B8A
7713  2B8B
7714  2B8C
7715  2B8D
7716  2B8E
7717  2B8F
7718  2B90
7719  2B91
7720  2B92
7721  2B93
7722  2B94
7723  2B95
7724  2B96
7725  2B97
7726  2B98
7727  2B99
7728  2B9A
7729  2B9B
7730  2B9C
7731  2B9D
7732  2B9E
7733  2B9F
7734  2BA0
7735  2BA1
7736  2BA2
7737  2BA3
7738  2BA4
7739  2BA5
7740  2BA6
7741  2BA7
7742  2BA8
7743  2BA9
7744  2BAA
7745  2BAB
7746  2BAC
7747  2BAD
7748  2BAE
7749  2BAF
7750  2BB0
7751  2BB1
7752  2BB2
7753  2BB3
7754  2BB4
7755  2BB5
7756  2BB6
7757  2BB7
7758  2BB8
7759  2BB9
7760  2BBA
7761  2BBB
7762  2BBC
7763  2BBD
7764  2BBE
7765  2BBF
7766  2BC0
7767  2BC1
7768  2BC2
7769  2BC3
7770  2BC4
7771  2BC5
7772  2BC6
7773  2BC7
7774  2BC8
7775  2BC9
7776  2BCA
7777  2BCB
7778  2BCC
7779  2BCD
7780  2BCE
7781  2BCF
7782  2BD0
7783  2BD1
7784  2BD2
7785  2BD3
7786  2BD4
7787  2BD5
7788  2BD6
7789  2BD7
7790  2BD8
7791  2BD9
7792  2BDA
7793  2BDB
7794  2BDC
7795  2BDD
7796  2BDE
7797  2BDF
7798  2BE0
7799  2BE1
7800  2BE2
7801  2BE3
7802  2BE4
7803  2BE5
7804  2BE6
7805  2BE7
7806  2BE8
7807  2BE9
7808  2BEA
7809  2BEB
7810  2BEC
7811  2BED
7812  2BEE
7813  2BEF
7814  2BF0
7815  2BF1
7816  2BF2
7817  2BF3
7818  2BF4
7819  2BF5
7820  2BF6
7821  2BF7
7822  2BF8
7823  2BF9
7824  2BFA
7825  2BFB
7826  2BFC
7827  2BFD
7828  2BFE
7829  2BFF
7830  2C00
7831  2C01
7832  2C02
7833  2C03
7834  2C04
7835  2C05
7836  2C06
7837  2C07
7838  2C08
7839  2C09
7840  2C0A
7841  2C0B
7842  2C0C
7843  2C0D
7844  2C0E
7845  2C0F
7846  2C10
7847  2C11
7848  2C12
7849  2C13
7850  2C14
7851  2C15
7852  2C16
7853  2C17
7854  2C18
7855  2C19
7856  2C1A
7857  2C1B
7858  2C1C
7859  2C1D
7860  2C1E
7861  2C1F
7862  2C20
7863  2C21
7864  2C22
7865  2C23
7866  2C24
7867  2C25
7868  2C26
7869  2C27
7870  2C28
7871  2C29
7872  2C2A
7873  2C2B
7874  2C2C
7875  2C2D
7876  2C2E
7877  2C2F
7878  2C30
7879  2C31
7880  2C32
7881  2C33
7882  2C34
7883  2C35
7884  2C36
7885  2C37
7886  2C38
7887  2C39
7888  2C3A
7889  2C3B
7890  2C3C
7891  2C3D
7892  2C3E
7893  2C3F
7894  2C40
7895  2C41
7896  2C42
7897  2C43
7898  2C44
7899  2C45
7900  2C46
7901  2C47
7902  2C48
7903  2C49
7904  2C4A
7905  2C4B
7906  2C4C
7907  2C4D
7908  2C4E
7909  2C4F
7910  2C50
7911  2C51
7912  2C52
7913  2C53
7914  2C54
7915  2C55
7916  2C56
7917  2C57
7918  2C58
7919  2C59
7920  2C5A
7921  2C5B
7922  2C5C
7923  2C5D
7924  2C5E
7925  2C5F
7926  2C60
7927  2C61
7928  2C62
7929  2C63
7930  2C64
7931  2C65
7932  2C66
7933  2C67
7934  2C68
7935  2C69
7936  2C6A
7937  2C6B
7938  2C6C
7939  2C6D
7940  2C6E
7941  2C6F
7942  2C70
7943  2C71
7944  2C72
7945  2C73
7946  2C74
7947  2C75
7948  2C76
7949  2C77
7950  2C78
7951  2C79
7952  2C7A
7953  2C7B
7954  2C7C
7955  2C7D
7956  2C7E
7957  2C7F
7958  2C80
7959  2C81
7960  2C82
7961  2C83
7962  2C84
7963  2C85
7964  2C86
7965  2C87
7966  2C88
7967  2C89
7968  2C8A
7969  2C8B
7970  2C8C
7971  2C8D
7972  2C8E
7973  2C8F
7974  2C90
7975  2C91
7976  2C92
7977  2C93
7978  2C94
7979  2C95
7980  2C96
7981  2C97
7982  2C98
7983  2C99
7984  2C9A
7985  2C9B
7986  2C9C
7987  2C9D
7988  2C9E
7989  2C9F
7990  2CA0
7991  2CA1
7992  2CA2
7993  2CA3
7994  2CA4
7995  2CA5
7996  2CA6
7997  2CA7
7998  2CA8
7999  2CA9
8000  2CAA
8001  2CAB
8002  2CAC
8003  2CAD
8004  2CAE
8005  2CAF
8006  2CB0
8007  2CB1
8008  2CB2
8009  2CB3
8010  2CB4
8011  2CB5
8012  2CB6
8013  2CB7
8014  2CB8
8015  2CB9
8016  2CBA
8017  2CBB
8018  2CBC
8019  2CBD
8020  2CBE
8021  2CBF
8022  2CC0
8023  2CC1
8024  2CC2
8025  2CC3
8026  2CC4
8027  2CC5
8028  2CC6
8029  2CC7
8030  2CC8
8031  2CC9
8032  2CCA
8033  2CCB
8034  2CCC
8035  2CCD
8036  2CCE
8037  2CCF
8038  2CD0
8039  2CD1
8040  2CD2
8041  2CD3
8042  2CD4
8043  2CD5
8044  2CD6
8045  2CD7
8046  2CD8
8047  2CD9
8048  2CDA
8049  2CDB
8050  2CDC
8051  2CDD
8052  2CDE
8053  2CDF
8054  2CE0
8055  2CE1
8056  2CE2
8057  2CE3
8058  2CE4
8059  2CE5
8060  2CE6
8061  2CE7
8062  2CE8
8063  2CE9
8064  2CEA
8065  2CEB
8066  2CEC
8067  2CED
8068  2CEE
8069  2CEF
8070  2CF0
8071  2CF1
8072  2CF2
8073  2CF3
8074  2CF4
8075  2CF5
8076  2CF6
8077  2CF7
8078  2CF8
8079  2CF9
8080  2CFA
8081  2CFB
8082  2CFC
8083  2CFD
8084  2CFE
8085  2CFF
8086  2D00
8087  2D01
8088  2D02
8089  2D03
8090  2D04
8091  2D05
8092  2D06
8093  2D07
8094  2D08
8095  2D09
8096  2D0A
8097  2D0B
8098  2D0C
8099  2D0D
8100  2D0E
8101  2D0F
8102  2D10
8103  2D11
8104  2D12
8105  2D13
8106  2D14
8107  2D15
8108  2D16
8109  2D17
8110  2D18
8111  2D19
8112  2D1A
8113  2D1B
8114  2D1C
8115  2D1D
8116  2D1E
8117  2D1F
8118  2D20
8119  2D21
8120  2D22
8121  2D23
8122  2D24
8123  2D25
8124  2D26
8125  2D27
8126  2D28
8127  2D29
8128  2D2A
8129  2D2B
8130  2D2C
8131  2D2D
8132  2D2E
8133  2D2F
8134  2D30
8135  2D31
8136  2D32
8137  2D33
8138  2D34
8139  2D35
8140  2D36
8141  2D37
8142  2D38
8143  2D39
8144  2D3A
8145  2D3B
8146  2D3C
8147  2D3D
8148  2D3E
8149  2D3F
8150  2D40
8151  2D41
8152  2D42
8153  2D43
8154  2D44
8155  2D45
8156  2D46
8157  2D47
8158  2D48
8159  2D49
8160  2D4A
8161  2D4B
8162  2D4C
8163  2D4D
8164  2D4E
8165  2D4F
8166  2D50
8167  2D51
8168  2D52
8169  2D53
8170  2D54
8171  2D55
8172  2D56
8173  2D57
8174  2D58
8175  2D59
8176  2D5A
8177  2D5B
8178  2D5C
8179  2D5D
8180  2D5E
8181  2D5F
8182  2D60
8183  2D61
8184  2D62
8185  2D63
8186  2D64
8187  2D65
8188  2D66
8189  2D67
8190  2D68
8191  2D69
8192  2D6A
8193  2D6B
8194  2D6C
8195  2D6D
8196  2D6E
8197  2D6F
8198  2D70
8199  2D71
8200  2D72
8201  2D73
8202  2D74
8203  2D75
8204  2D76
8205  2D77
8206  2D78
8207  2D79
8208  2D7A
8209  2D7B
8210  2D7C
8211  2D7D
8212  2D7E
8213  2D7F
8214  2D80
8215  2D81
8216  2D82
8217  2D83
8218  2D84
8219  2D85
8220  2D86
8221  2D87
8222  2D88
8223  2D89
8224  2D8A
8225  2D8B
8226  2D8C
8227  2D8D
8228  2D8E
8229  2D8F
8230  2D90
8231  2D91
8232  2D92
8233  2D93
8234  2D94
8235  2D95
8236  2D96
8237  2D97
8238  2D98
8239  2D99
8240  2D9A
8241  2D9B
8242  2D9C
8243  2D9D
8244  2D9E
8245  2D9F
8246  2DA0
8247  2DA1
8248  2DA2
8249  2DA3
8250  2DA4
8251  2DA5
8252  2DA6
8253  2DA7
8254  2DA8
8255  2DA9
8256  2DAA
8257  2DAB
8258  2DAC
8259  2DAD
8260  2DAE
8261  2DAF
8262  2DB0
8263  2DB1
8264  2DB2
8265  2DB3
8266  2DB4
8267  2DB5
8268  2DB6
8269  2DB7
8270  2DB8
8271  2DB9
8272  2DBA
8273  2DBB
8274  2DBC
8275  2DBD
8276  2DBE
8277  2DBF
8278  2DC0
8279  2DC1
8280  2DC2
8281  2DC3
8282  2DC4
8283  2DC5
8284  2DC6
8285  2DC7
8286  2DC8
8287  2DC9
8288  2DCA
8289  2DCB
8290  2DCC
8291  2DCD
8292  2DCE
8293  2DCF
8294  2DD0
8295  2DD1
8296  2DD2
8297  2DD3
8298  2DD4
8299  2DD5
8300  2DD6
8301  2DD7
8302  2DD8
8303  2DD9
8304  2DDA
8305  2DDB
8306  2DDC
8307  2DDD
8308  2DDE
8309  2DDF
8310  2DE0
8311  2DE1
8312  2DE2
8313  2DE3
8314  2DE4
8315  2DE5
8316  2DE6
8317  2DE7
8318  2DE8
8319  2DE9
8320  2DEA
8321  2DEB
8322  2DEC
8323  2DED
8324  2DEE
8325  2DEF
8326  2DF0
8327  2DF1
8328  2DF2
8329  2DF3
8330  2DF4
8331  2DF5
8332  2DF6
8333  2DF7
8334  2DF8
8335  2DF9
8336  2DFA
8337  2DFB
8338  2DFC
8339  2DFD
8340  2DFE
8341  2DFF
8342  2E00
8343  2E01
8344  2E02
8345  2E03
8346  2E04
8347  2E05
8348  2E06
8349  2E07
8350  2E08
8351  2E09
8352  2E0A
8353  2E0B
8354  2E0C
8355  2E0D
8356  2E0E
8357  2E0F
8358  2E10
8359  2E11
8360  2E12
8361  2E13
8362  2E14
8363  2E15
8364  2E16
8365  2E17
8366  2E18
8367  2E19
8368  2E1A
8369  2E1B
8370  2E1C
8371  2E1D
8372  2E1E
8373  2E1F
8374  2E20
8375  2E21
8376  2E22
8377  2E23
8378  2E24
8379  2E25
8380  2E26
8381  2E27
8382  2E28
8383  2E29
8384  2E2A
8385  2E2B
8386  2E2C
8387  2E2D
8388  2E2E
8389  2E2F
8390  2E30
8391  2E31
8392  2E32
8393  2E33
8394  2E34
8395  2E35
8396  2E36
8397  2E37
8398  2E38
8399  2E39
8400  2E3A
8401  2E3B
8402  2E3C
8403  2E3D
8404  2E3E
8405  2E3F
8406  2E40
8407  2E41
8408  2E42
8409  2E43
8410  2E44
8411  2E45
8412  2E46
8413  2E47
8414  2E48
8415  2E49
8416  2E4A
8417  2E4B
8418  2E4C
8419  2E4D
8420  2E4E
8421  2E4F
8422  2E50
8423  2E51
8424  2E52
8425  2E53
8426  2E54
8427  2E55
8428  2E56
8429  2E57
8430  2E58
8431  2E59
8432  2E5A
8433  2E5B
8434  2E5C
8435  2E5D
8436  2E5E
8437  2E5F
8438  2E60
8439  2E61
8440  2E62
8441  2E63
8442  2E64
8443  2E65
8444  2E66
8445  2E67
8446  2E68
8447  2E69
8448  2E6A
8449  2E6B
8450  2E6C
8451  2E6D
8452  2E6E
8453  2E6F
8454  2E70
8455  2E71
8456  2E72
8457  2E73
8458  2E74
8459  2E75
8460  2E76
8461  2E77
8462  2E78
8463  2E79
8464  2E7A
8465  2E7B
8466  2E7C
8467  2E7D
8468  2E7E
8469  2E7F
8470  2E80
8471  2E81
8472  2E82
8473  2E83
8474  2E84
8475  2E85
8476  2E86
8477  2E87
8478  2E88
8479  2E89
8480  2E8A
8481  2E8B
8482  2E8C
8483  2E8D
8484  2E8E
8485  2E8F
8486  2E90
8487  2E91
8488  2E92
8489  2E93
8490  2E94
8491  2E95
8492  2E96
8493  2E97
8494  2E98
8495  2E99
8496  2E9A
8497  2E9B
8498  2E9C
8499  2E9D
8500  2E9E
8501  2E9F
8502  2EA0
8503  2EA1
8504  2EA2
8505  2EA3
8506  2EA4
8507  2EA5
8508  2EA6
8509  2EA7
8510  2EA8
8511  2EA9
8512  2EAA
8513  2EAB
8514  2EAC
8515  2EAD
8516  2EAE
8517  2EAF
8518  2EB0
8519  2EB1
8520  2EB2
8521  2EB3
8522  2EB4
8523  2EB5
8524  2EB6
8525  2EB7
8526  2EB8
8527  2EB9
8528  2EBA
8529  2EBB
8530  2EBC
8531  2EBD
8532  2EBE
8533  2EBF
8534  2EC0
8535  2EC1
8536  2EC2
8537  2EC3
8538  2EC4
8539  2EC5
8540  2EC6
8541  2EC7
8542  2EC8
8543  2EC9
8544  2ECA
8545  2ECB
8546  2ECC
8547  2ECD
8548  2ECE
8549  2ECF
8550  2ED0
8551  2ED1
8552  2ED2
8553  2ED3
8554  2ED4
8555  2ED5
8556  2ED6
8557  2ED7
8558  2ED8
8559  2ED9
8560  2EDA
8561  2EDB
8562  2EDC
8563  2EDD
8564  2EDE
8565  2EDF
8566  2EE0
8567  2EE1
8568  2EE2
8569  2EE3
8570  2EE4
8571  2EE5
8572  2EE6
8573  2EE7
8574  2EE8
8575  2EE9
8576  2EEA
8577  2EEB
8578  2EEC
8579  2EED
8580  2EEE
8581  2EEF
8582  2EF0
8583  2EF1
8584  2EF2
8585  2EF3
8586  2EF4
8587  2EF5
8588  2EF6
8589  2EF7
8590  2EF8
8591  2EF9
8592  2EFA
8593  2EFB
8594  2EFC
8595  2EFD
8596  2EFE
8597  2EFF
8598  2F00
8599  2F01
8600  2F02
8601  2F03
8602  2F04
8603  2F05
8604  2F06
8605  2F07
8606  2F08
8607  2F09
8608  2F0A
8609  2F0B
8610  2F0C
8611  2F0D
8612  2F0E
8613  2F0F
8614  2F10
8615  2F11
8616  2F12
8617  2F13
8618  2F14
8619  2F15
8620  2F16
8621  2F17
8622  2F18
8623  2F19
8624  2F1A
8625  2F1B
8626  2F1C
8627  2F1D
8628  2F1E
8629  2F1F
8630  2F20
8631  2F21
8632  2F22
8633  2F23
8634  2F24
8635  2F25
8636  2F26
8637  2F27
8638  2F28
8639  2F29
8640  2F2A
8641  2F2B
8642  2F2C
8643  2F2D
8644  2F2E
8645  2F2F
8646  2F30
8647  2F31
8648  2F32
8649  2F33
8650  2F34
8651  2F35
8652  2F36
8653  2F37
8654  2F38
8655  2F39
8656  2F3A
8657  2F3B
8658  2F3C
8659  2F3D
8660  2F3E
8661  2F3F
8662  2F40
8663  2F41
8664  2F42
8665  2F43
8666  2F44
8667  2F45
8668  2F46
8669  2F47
8670  2F48
8671  2F49
8672  2F4A
8673  2F4B
8674  2F4C
8675  2F4D
8676  2F4E
8677  2F4F
8678  2F50
8679  2F51
8680  2F52
8681  2F53
8682  2F54
8683  2F55
8684  2F56
8685  2F57
8686  2F58
8687  2F59
8688  2F5A
8689  2F5B
8690  2F5C
8691  2F5D
8692  2F5E
8693  2F5F
8694  2F60
8695  2F61
8696  2F62
8697  2F63
8698  2F64
8699  2F65
8700  2F66
8701  2F67
8702  2F68
8703  2F69
8704  2F6A
8705  2F6B
8706  2F6C
8707  2F6D
8708  2F6E
8709  2F6F
8710  2F70
8711  2F71
8712  2F72
8713  2F73
8714  2F74
8715  2F75
8716  2F76
8717  2F77
8718  2F78
8719  2F79
8720  2F7A
8721  2F7B
8722  2F7C
8723  2F7D
8724  2F7E
8725  2F7F
8726  2F80
8727  2F81
8728  2F82
8729  2F83
8730  2F84
8731  2F85
8732  2F86
8733  2F87
8734  2F88
8735  2F89
8736  2F8A
8737  2F8B
8738  2F8C
8739  2F8D
8740  2F8E
8741  2F8F
8742  2F90
8743  2F91
8744  2F92
8745  2F93
8746  2F94
8747  2F95
8748  2F96
8749  2F97
8750  2F98
8751  2F99
8752  2F9A
8753  2F9B
8754  2F9C
8755  2F9D
8756  2F9E
8757  2F9F
8758  2FA0
8759  2FA1
8760  2FA2
8761  2FA3
8762  2FA4
8763  2FA5
8764  2FA6
8765  2FA7
8766  2FA8
8767  2FA9
8768  2FAA
8769  2FAB
8770  2FAC
8771  2FAD
8772  2FAE
8773  2FAF
8774  2FB0
8775  2FB1
8776  2FB2
8777  2FB3
8778  2FB4
8779  2FB5
8780  2FB6
8781  2FB7
8782  2FB8
8783  2FB9
8784  2FBA
8785  2FBB
8786  2FBC
8787  2FBD
8788  2FBE
8789  2FBF
8790  2FC0
8791  2FC1
8792  2FC2
8793  2FC3
8794  2FC4
8795  2FC5
8796  2FC6
8797  2FC7
8798  2FC8
8799  2FC9
8800  2FCA
8801  2FCB
8802  2FCC
8803  2FCD
8804  2FCE
8805  2FCF
8806  2FD0
8807  2FD1
8808  2FD2
8809  2FD3
8810  2FD4
8811  2FD5
8812  2FD6
8813  2FD7
8814  2FD8
8815  2FD9
8816  2FDA
8817  2FDB
8818  2FDC
8819  2FDD
8820  2FDE
8821  2FDF
8822  2FE0
8823  2FE1
8824  2FE2
8825  2FE3
8826  2FE4
8827  2FE5
8828  2FE6
8829  2FE7
8830  2FE8
8831  2FE9
8832  2FEA
8833  2FEB
8834  2FEC
8835  2FED
8836  2FEE
8837  2FEF
8838  2FF0
8839  2FF1
8840  2FF2
8841  2FF3
8842  2FF4
8843  2FF5
8844  2FF6
8845  2FF7
8846  2FF8
8847  2FF9
8848  2FFA
8849  2FFB
8850  2FFC
8851  2FFD
8852  2FFE
8853  2FFF
8854  3000
8855  3001
8856  3002
8857  3003
8858  3004
8859  3005
8860  3006
8861  3007
8862  3008
8863  3009
8864  300A
8865  300B
8866  300C
8867  300D
8868  300E
8869  300F
8870  3010
8871  3011
8872  3012
8873  3013
8874  3014
8875  3015
8876  3016
8877  3017
8878  3018
8879  3019
8880  301A
8881  301B
8882  301C
8883  301D
8884  301E
8885  301F
8886  3020
8887  3021
8888  3022
8889  3023
8890  3024
8891  3025
8892  3026
8893  3027
8894  3028
8895  3029
8896  302A
8897  302B
8898  302C
8899  302D
8900  302E
8901  302F
8902  3030
8903  3031
8904  3032
8905  3033
8906  3034
8907  3035
8908  3036
8909  3037
8910  3038
8911  3039
8912  303A
8913  303B
8914  303C
8915  303D
8916  303E
8917  303F
8918  3040
8919  3041
8920  3042
8921  3043
8922  3044
8923  3045
8924  3046
8925  3047
8926  3048
8927  3049
8928  304A
8929  304B
8930  304C
8931  304D
8932  304E
8933  304F
8934  3050
8935  3051
8936  3052
8937  3053
8938  3054
8939  3055
8940  3056
8941  3057
8942  3058
8943  3059
8944  305A
8945  305B
8946  305C
8947  305D
8948  305E
8949  305F
8950  3060
8951  3061
8952  3062
8953  3063
8954  3064
8955  3065
8956  3066
8957  3067
8958  3068
8959  3069
8960  306A
8961  306B
8962  306C
8963  306D
8964  306E
8965  306F
8966  3070
8967  3071
8968  3072
8969  3073
8970  3074
8971  3075
8972  3076
8973  3077
8974  3078
8975  3079
8976  307A
8977  307B
8978  307C
8979  307D
8980  307E
8981  307F
8982  3080
8983  3081
8984  3082
8985  3083
8986  3084
8987  3085
8988  3086
8989  3087
8990  3088
8991  3089
8992  308A
8993  308B
8994  308C
8995  308D
8996  308E
8997  308F
8998  3090
8999  3091
9000  3092
9001  3093
9002  3094
9003  3095
9004  3096
9005  3097
9006  3098
9007  3099
9008  309A
9009  309B
9010  309C
9011  309D
9012  309E
9013  309F
9014  30A0
9015  30A1
9016  30A2
9017  30A3
9018  30A4
9019  30A5
9020  30A6
9021  30A7
9022  30A8
9023  30A9
9024  30AA
9025  30AB
9026  30AC
9027  30AD
9028  30AE
9029  30AF
9030  30B0
9031  30B1
9032  30B2
9033  30B3
9034  30B4
9035  30B5
9036  30B6
9037  30B7
9038  30B8
9039  30B9
9040  30BA
9041  30BB
9042  30BC
9043  30BD
9044  30BE
9045  30BF
9046  30C0
9047  30C1
9048  30C2
9049  30C3
9050  30C4
9051  30C5
9052  30C6
9053  30C7
9054  30C8
9055  30C9
9056  30CA
9057  30CB
9058  30CC
9059  30CD
9060  30CE
9061  30CF
9062  30D0
9063  30D1
9064  30D2
9065  30D3
9066  30D4
9067  30D5
9068  30D6
9069  30D7
9070  30D8
9071  30D9
9072  30DA
9073  30DB
9074  30DC
9075  30DD
9076  30DE
9077  30DF
9078  30E0
9079  30E1
9080  30E2
9081  30E3
9082  30E4
9083  30E5
9084  30E6
9085  30E7
9086  30E8
9087  30E9
9088  30EA
9089  30EB
9090  30EC
9091  30ED
9092  30EE
9093  30EF
9094  30F0
9095  30F1
9096  30F2
9097  30F3
9098  30F4
9099  30F5
9100  30F6
9101  30F7
9102  30F8
9103  30F9
9104  30FA
9105  30FB
9106  30FC
9107  30FD
9108  30FE
9109  30FF
9110  3100
9111  3101
9112  3102
9113  3103
9114  3104
9115  3105
9116  3106
9117  3107
9118  3108
9119  3109
9120  310A
9121  310B
9122  310C
9123  310D
9124  310E
9125  310F
9126  3110
9127  3111
9128  3112
9129  3113
9130  3114
9131  3115
9132  3116
9133  3117
9134  3118
9135  3119
9136  311A
9137  311B
9138  311C
9139  311D
9140  311E
9141  311F
9142  3120
9143  3121
9144  3122
9145  3123
9146  3124
9147  3125
9148  3126
9149  3127
9150  3128
9151  3129
9152  312A
9153  312B
9154  312C
9155  312D
9156  312E
9157  312F
9158  3130
9159  3131
9160  3132
9161  3133
9162  3134
9163  3135
9164  3136
9165  3137
9166  3138
9167  3139
9168  313A
9169  313B
9170  313C
9171  313D
9172  313E
9173  313F
9174  3140
9175  3141
9176  3142
9177  3143
9178  3144
9179  3145
9180  3146
9181  3147
9182  3148
9183  3149
9184  314A
9185  314B
9186  314C
9187  314D
9188  314E
9189  314F
9190  3150
9191  3151
9192  3152
9193  3153
9194  3154
9195  3155
9196  3156
9197  3157
9198  3158
9199  3159
9200  315A
9201  315B
9202  315C
9203  315D
9204  315E
9205  315F
9206  3160
9207  3161
9208  3162
9209  3163
9210  3164
9211  3165
9212  3166
9213  3167
9214  3168
9215  3169
9216  316A
9217  316B
9218  316C
9219  316D
9220  316E
9221  316F
9222  3170
9223  3171
9224  3172
9225  3173
9226  3174
9227  3175
9228  3176
9229  3177
9230  3178
9231  3179
9232  317A
9233  317B
9234  317C
9235  317D
9236  317E
9237  317F
9238  3180
9239  3181
9240  3182
9241  3183
9242  3184
9243  3185
9244  3186
9245  3187
9246  3188
9247  3189
9248  318A
9249  318B
9250  318C
9251  318D
9252  318E
9253  318F
9254  3190
9255  3191
9256  3192
9257  3193
9258  3194
9259  3195
9260  3196
9261  3197
9262  3198
9263  3199
9264  319A
9265  319B
9266  319C
9267  319D
9268  319E
9269  319F
9270  31A0
9271  31A1
9272  31A2
9273  31A3
9274  31A4
9275  31A5
9276  31A6
9277  31A7
9278  31A8
9279  31A9
9280  31AA
9281  31AB
9282  31AC
9283  31AD
9284  31AE
9285  31AF
9286  31B0
9287  31B1
9288  31B2
9289  31B3
9290  31B4
9291  31B5
9292  31B6
9293  31B7
9294  31B8
9295  31B9
9296  31BA
9297  31BB
9298  31BC
9299  31BD
9300  31BE
9301  31BF
9302  31C0
9303  31C1
9304  31C2
9305  31C3
9306  31C4
9307  31C5
9308  31C6
9309  31C7
9310  31C8
9311  31C9
9312  31CA
9313  31CB
9314  31CC
9315  31CD
9316  31CE
9317  31CF
9318  31D0
9319  31D1
9320  31D2
9321  31D3
9322  31D4
9323  31D5
9324  31D6
9325  31D7
9326  31D8
9327  31D9
9328  31DA
9329  31DB
9330  31DC
9331  31DD
9332  31DE
9333  31DF
9334  31E0
9335  31E1
9336  31E2
9337  31E3
9338  31E4
9339  31E5
9340  31E6
9341  31E7
9342  31E8
9343  31E9
9344  31EA
9345  31EB
9346  31EC
9347  31ED
9348  31EE
9349  31EF
9350  31F0
9351  31F1
9352  31F2
9353  31F3
9354  31F4
9355  31F5
9356  31F6
9357  31F7
9358  31F8
9359  31F9
9360  31FA
9361  31FB
9362  31FC
9363  31FD
9364  31FE
9365  31FF
9366  3200
9367  3201
9368  3202
9369  3203
9370  3204
9371  3205
9372  3206
9373  3207
9374  3208
9375  3209
9376  320A
9377  320B
9378  320C
9379  320D
9380  320E
9381  320F
9382  3210
9383  3211
9384  3212
9385  3213
9386  3214
9387  3215
9388  3216
9389  3217
9390  3218
9391  3219
9392  321A
9393  321B
9394  321C
9395  321D
9396  321E
9397  321F
9398  3220
9399  3221
9400  3222
9401  3223
9402  3224
9403  3225
9404  3226
9405  3227
9406  3228
9407  3229
9408  322A
9409  322B
9410  322C
9411  322D
9412  322E
9413  322F
9414  3230
9415  3231
9416  3232
9417  3233
9418  3234
9419  3235
9420  3236
9421  3237
9422  3238
9423  3239
9424  323A
9425  323B
9426  323C
9427  323D
9428  323E
9429  323F
9430  3240
9431  3241
9432  3242
9433  3243
9434  3244
9435  3245
9436  3246
9437  3247
9438  3248
9439  3249
9440  324A
9441  324B
9442  324C
9443  324D
9444  324E
9445  324F
9446  3250
9447  3251
9448  3252
9449  3253
9450  3254
9451  3255
9452  3256
9453  3257
9454  3258
9455  3259
9456  325A
9457  325B
9458  325C
9459  325D
9460  325E
9461  325F
9462  3260
9463  3261
9464  3262
9465  3263
9466  3264
9467  3265
9468  3266
9469  3267
9470  3268
9471  3269
9472  326A
9473  326B
9474  326C
9475  326D
9476  326E
9477  326F
9478  3270
9479  3271
9480  3272
9481  3273
9482  3274
9483  3275
9484  3276
9485  3277
9486  3278
9487  3279
9488  327A
9489  327B
9490  327C
9491  327D
9492  327E
9493  327F
9494  3280
9495  3281
9496  3282
9497  3283
9498  3284
9499  3285
9500  3286
9501  3287
9502  3288
9503  3289
9504  328A
9505  328B
9506  328C
9507  328D
9508  328E
9509  328F
9510  3290
9511  3291
9512  3292
9513  3293
9514  3294
9515  3295
9516  3296
9517  3297
9518  3298
9519  3299
9520  329A
9521  329B
9522  329C
9523  329D
9524  329E
9525  329F
9526  32A0
9527  32A1
9528  32A2
9529  32A3
9530  32A4
9531  32A5
9532  32A6
9533  32A7
9534  32A8
9535  32A9
9536  32AA
9537  32AB
9538  32AC
9539  32AD
9540  32AE
9541  32AF
9542  32B0
9543  32B1
9544  32B2
9545  32B3
9546  32B4
9547  32B5
9548  32B6
9549  32B7
9550  32B8
9551  32B9
9552  32BA
9553  32BB
9554  32BC
9555  32BD
9556  32BE
9557  32BF
9558  32C0
9559  32C1
9560  32C2
9561  32C3
9562  32C4
9563  32C5
9564  32C6
9565  32C7
9566  32C8
9567  32C9
9568  32CA
9569  32CB
9570  32CC
9571  32CD
9572  32CE
9573  32CF
9574  32D0
9575  32D1
9576  32D2
9577  32D3
9578  32D4
9579  32D5
9580  32D6
9581  32D7
9582  32D8
9583  32D9
9584  32DA
9585  32DB
9586  32DC
9587  32DD
9588  32DE
9589  32DF
9590  32E0
9591  32E1
9592  32E2
9593  32E3
9594  32E4
9595  32E5
9596  32E6
9597  32E7
9598  32E8
9599  32E9
9600  32EA
9601  32EB
9602  32EC
9603  32ED
9604  32EE
9605  32EF
9606  32F0
9607  32F1
9608  32F2
9609  32F3
9610  32F4
9611  32F5
9612  32F6
9613  32F7
9614  32F8
9615  32F9
9616  32FA
9617  32FB
9618  32FC
9619  32FD
9620  32FE
9621  32FF
9622  3300
9623  3301
9624  3302
9625  3303
9626  3304
9627  3305
9628  3306
9629  3307
9630  3308
9631  3309
9632  330A
9633  330B
9634  330C
9635  330D
9636  330E
9637  330F
9638  3310
9639  3311
9640  3312
9641  3313
9642  3314
9643  3315
9644  3316
9645  3317
9646  3318
9647  3319
9648  331A
9649  331B
9650  331C
9651  331D
9652  331E
9653  331F
9654  3320
9655  3321
9656  3322
9657  3323
9658  3324
9659  3325
9660  3326
9661  3327
9662  3328
9663  3329
9664  332A
9665  332B
9666  332C
9667  332D
9668  332E
9669  332F
9670  3330
9671  3331
9672  3332
9673  3333
9674  3334
9675  3335
9676  3336
9677  3337
9678  3338
9679  3339
9680  333A
9681  333B
9682  333C
9683  333D
9684  333E
9685  333F
9686  3340
9687  3341
9688  3342
9689  3343
9690  3344
9691  3345
9692  3346
9693  3347
9694  3348
9695  3349
9696  334A
9697  334B
9698  334C
9699  334D
9700  334E
9701  334F
9702  3350
9703  3351
9704  3352
9705  3353
9706  3354
9707  3355
9708  3356
9709  3357
9710  3358
9711  3359
9712  335A
9713  335B
9714  335C
9715  335D
9716  335E
9717  335F
9718  3360
9719  3361
9720  3362
9721  3363
9722  3364
9723  3365
9724  3366
9725  3367
9726  3368
9727  3369
9728  336A
9729  336B
9730  336C
9731  336D
9732  336E
9733  336F
9734  3370
9735  3371
9736  3372
9737  3373
9738  3374
9739  3375
9740  3376
9741  3377
9742  3378
9743  3379
9744  337A
9745  337B
9746  337C
9747  337D
9748  337E
9749  337F
9750  3380
9751  3381
9752  3382
9753  3383
9754  3384
9755  3385
9756  3386
9757  3387
9758  3388
9759  3389
9760  338A
9761  338B
9762  338C
9763  338D
9764  338E
9765  338F
9766  3390
9767  3391
9768  3392
9769  3393
9770  3394
9771  3395
9772  3396
9773  3397
9774  3398
9775  3399
9776  339A
9777  339B
9778  339C
9779  339D
9780  339E
9781  339F
9782  33A0
9783  33A1
9784  33A2
9785  33A3
9786  33A4
9787  33A5
9788  33A6
9789  33A7
9790  33A8
9791  33A9
9792  33AA
9793  33AB
9794  33AC
9795  33AD
9796  33AE
9797  33AF
9798  33B0
9799  33B1
9800  33B2
9801  33B3
9802  33B4
9803  33B5
9804  33B6
9805  33B7
9806  33B8
9807  33B9
9808  33BA
9809  33BB
9810  33BC
9811  33BD
9812  33BE
9813  33BF
9814  33C0
9815  33C1
9816  33C2
9817  33C3
9818  33C4
9819  33C5
9820  33C6
9821  33C7
9822  33C8
9823  33C9
9824  33CA
9825  33CB
9826  33CC
9827  33CD
9828  33CE
9829  33CF
9830  33D0
9831  33D1
9832  33D2
9833  33D3
9834  33D4
9835  33D5
9836  33D6
9837  33D7
9838  33D8
9839  33D9
9840  33DA
9841  33DB
9842  33DC
9843  33DD
9844  33DE
9845  33DF
9846  33E0
9847  33E1
9848  33E2
9849  33E3
9850  33E4
9851  33E5
9852  33E6
9853  33E7
9854  33E8
9855  33E9
9856  33EA
9857  33EB
9858  33EC
9859  33ED
9860  33EE
9861  33EF
9862  33F0
9863  33F1
9864  33F2
9865  33F3
9866  33F4
9867  33F5
9868  33F6
9869  33F7
9870  33F8
9871  33F9
9872  33FA
9873  33FB
9874  33FC
9875  33FD
9876  33FE
9877  33FF
9878  3400
9879  3401
9880  3402
9881  3403
9882  3404
9883  3405
9884  3406
9885  3407
9886  3408
9887  3409
9888  340A
9889  340B
9890  340C
9891  340D
9892  340E
9893  340F
9894  3410
9895  3411
9896  3412
9897  3413
9898  3414
9899  3415
9900  3416
9901  3417
9902  3418
9903  3419
9904  341A
9905  341B
9906  341C
9907  341D
9908  341E
9909  341F
9910  3420
9911  3421
9912  3422
9913  3423
9914  3424
9915  3425
9916  3426
9917  3427
9918  3428
9919  3429
9920  342A
9921  342B
9922  342C
9923  342D
9924  342E
9925  342F
9926  3430
9927  3431
9928  3432
9929  3433
9930  3434
9931  3435
9932  3436
9933  3437
9934  3438
9935  3439
9936  343A
9937  343B
9938  343C
9939  343D
9940  343E
9941  343F
9942  3440
9943  3441
9944  3442
9945  3443
9946  3444
9947  3445
9948  3446
9949  3447
9950  3448
9951  3449
9952  344A
9953  344B
9954  344C
9955  344D
9956  344E
9957  344F
9958  3450
9959  3451
9960  3452
9961  3453
9962  3454
9963  3455
9964  3456
9965  3457
9966  3458
9967  3459
9968  345A
9969  345B
9970  345C
9971  345D
9972  345E
9973  345F
9974  3460
9975  3461
9976  3462
9977  3463
9978  3464
9979  3465
9980  3466
9981  3467
9982  3468
9983  3469
9984  346A
9985  346B
9986  346C
9987  346D
9988  346E
9989  346F
9990  3470
9991  3471
9992  3472
9993  3473
9994  3474
9995  3475
9996  3476
9997  3477
9998  3478
9999  3479
10000  347A
10001  347B
10002  347C
10003  347D
10004  347E
10005  347F
10006  3480
10007  3481
10008  3482
10009  3483
10010  3484
10011  3485
10012  3486
10013  3487
10014  3488
10015  3489
10016  348A
10017  348B
10018  348C
10019  348D
10020  348E
10021  348F
10022  3490
10023  3491
10024  3492
10025  3493
10026  3494
10027  3495
10028  3496
10029  3497
10030  3498
10031  3499
10032  349A
10033  349B
10034  349C
10035  349D
10036  349E
10037  349F
10038  34A0
10039  34A1
10040  34A2
10041  34A3
10042  34A4
10043  34A5
10044  34A6
10045  34A7
10046  34A8
10047  34A9
10048  34AA
10049  34AB
10050  34AC
10051  34AD
10052  34AE
10053  34AF
10054  34B0
10055  34B1
10056  34B2
10057  34B3
10058  34B4
10059  34B5
10060  34B6
10061  34B7
10062  34B8
10063  34B9
10064  34BA
10065  34BB
10066  34BC
10067  34BD
10068  34BE
10069  34BF
10070  34C0
10071  34C1
10072  34C2
10073  34C3
10074  34C4
10075  34C5
10076  34C6
10077  34C7
10078  34C8
10079  34C9
10080  34CA
10081  34CB
10082  34CC
10083  34CD
10084  34CE
10085  34CF
10086  34D0
10087  34D1
10088  34D2
10089  34D3
10090  34D4
10091  34D5
10092  34D6
10093  34D7
10094  34D8
10095  34D9
10096  34DA
10097  34DB
10098  34DC
10099  34DD
10100  34DE
10101  34DF
10102  34E0
10103  34E1
10104  34E2
10105  34E3
10106  34E4
10107  34E5
10108  34E6
10109  34E7
10110  34E8
10111  34E9
10112  34EA
10113  34EB
10114  34EC
10115  34ED
10116  34EE
10117  34EF
10118  34F0
10119  34F1
10120  34F2
10121  34F3
10122  34F4
10123  34F5
10124  34F6
10125  34F7
10126  34F8
10127  34F9
10128  34FA
10129  34FB
10130  34FC
10131  34FD
10132  34FE
10133  34FF
10134  3500
10135  3501
10136  3502
10137  3503
10138  3504
10139  3505
10140  3506
10141  3507
10142  3508
10143  3509
10144  350A
10145  350B
10146  350C
10147  350D
10148  350E
10149  350F
10150  3510
10151  3511
10152  3512
10153  3513
10154  3514
10155  3515
10156  3516
10157  3517
10158  3518
10159  3519
10160  351A
10161  351B
10162  351C
10163  351D
10164  351E
10165  351F
10166  3520
10167  3521
10168  3522
10169  3523
10170  3524
10171  3525
10172  3526
10173  3527
10174  3528
10175  3529
10176  352A
10177  352B
10178  352C
10179  352D
10180  352E
10181  352F
10182  3530
10183  3531
10184  3532
10185  3533
10186  3534
10187  3535
10188  3536
10189  3537
10190  3538
10191  3539
10192  353A
10193  353B
10194  353C
10195  353D
10196  353E
10197  353F
10198  3540
10199  3541
10200  3542
10201  3543
10202  3544
10203  3545
10204  3546
10205  3547
10206  3548
10207  3549
10208  354A
10209  354B
10210  354C
10211  354D
10212  354E
10213  354F
10214  3550
10215  3551
10216  3552
10217  3553
10218  3554
10219  3555
10220  3556
10221  3557
10222  3558
10223  3559
10224  355A
10225  355B
10226  355C
10227  355D
10228  355E
10229  355F
10230  3560
10231  3561
10232  3562
10233  3563
10234  3564
10235  3565
10236  3566
10237  3567
10238  3568
10239  3569
10240  356A
10241  356B
10242  356C
10243  356D
10244  356E
10245  356F
10246  3570
10247  3571
10248  3572
10249  3573
10250  3574
10251  3575
10252  3576
10253  3577
10254  3578
10255  3579
10256  357A
10257  357B
10258  357C
10259  357D
10260  357E
10261  357F
10262  3580
10263  3581
10264  3582
10265  3583
10266  3584
10267  3585
10268  3586
10269  3587
10270  3588
10271  3589
10272  358A
10273  358B
10274  358C
10275  358D
10276  358E
10277  358F
10278  3590
10279  3591
10280  3592
10281  3593
10282  3594
10283  3595
10284  3596
10285  3597
10286  3598
10287  3599
10288  359A
10289  359B
10290  359C
10291  359D
10292  359E
10293  359F
10294  35A0
10295  35A1
10296  35A2
10297  35A3
10298  35A4
10299  35A5
10300  35A6
10301  35A7
10302  35A8
10303  35A9
10304  35AA
10305  35AB
10306  35AC
10307  35AD
10308  35AE
10309  35AF
10310  35B0
10311  35B1
10312  35B2
10313  35B3
10314  35B4
10315  35B5
10316  35B6
10317  35B7
10318  35B8
10319  35B9
10320  35BA
10321  35BB
10322  35BC
10323  35BD
10324  35BE
10325  35BF
10326  35C0
10327  35C1
10328  35C2
10329  35C3
10330  35C4
10331  35C5
10332  35C6
10333  35C7
10334  35C8
10335  35C9
10336  35CA
10337  35CB
10338  35CC
10339  35CD
10340  35CE
10341  35CF
10342  35D0
10343  35D1
10344  35D2
10345  35D3
10346  35D4
10347  35D5
10348  35D6
10349  35D7
10350  35D8
10351  35D9
10352  35DA
10353  35DB
10354  35DC
10355  35DD
10356  35DE
10357  35DF
10358  35E0
10359  35E1
10360  35E2
10361  35E3
10362  35E4
10363  35E5
10364  35E6
10365  35E7
10366  35E8
10367  35E9
10368  35EA
10369  35EB
10370  35EC
10371  35ED
10372  35EE
10373  35EF
10374  35F0
10375  35F1
10376  35F2
10377  35F3
10378  35F4
10379  35F5
10380  35F6
10381  35F7
10382  35F8
10383  35F9
10384  35FA
10385  35FB
10386  35FC
10387  35FD
10388  35FE
10389  35FF
10390  3600
10391  3601
10392  3602
10393  3603
10394  3604
10395  3605
10396  3606
10397  3607
10398  3608
10399  3609
10400  360A
10401  360B
10402  360C
10403  360D
10404  360E
10405  360F
10406  3610
10407  3611
10408  3612
10409  3613
10410  3614
10411  3615
10412  3616
10413  3617
10414  3618
10415  3619
10416  361A
10417  361B
10418  361C
10419  361D
10420  361E
10421  361F
10422  3620
10423  3621
10424  3622
10425  3623
10426  3624
10427  3625
10428  3626
10429  3627
10430  3628
10431  3629
10432  362A
10433  362B
10434  362C
10435  362D
10436  362E
10437  362F
10438  3630
10439  3631
10440  3632
10441  3633
10442  3634
10443  3635
10444  3636
10445  3637
10446  3638
10447  3639
10448  363A
10449  363B
10450  363C
10451  363D
10452  363E
10453  363F
10454  3640
10455  3641
10456  3642
10457  3643
10458  3644
10459  3645
10460  3646
10461  3647
10462  3648
10463  3649
10464  364A
10465  364B
10466  364C
10467  364D
10468  364E
10469  364F
10470  3650
10471  3651
10472  3652
10473  3653
10474  3654
10475  3655
10476  3656
10477  3657
10478  3658
10479  3659
10480  365A
10481  365B
10482  365C
10483  365D
10484  365E
10485  365F
10486  3660
10487  3661
10488  3662
10489  3663
10490  3664
10491  3665
10492  3666
10493  3667
10494  3668
10495  3669
10496  366A
10497  366B
10498  366C
10499  366D
10500  366E
10501  366F
10502  3670
10503  3671
10504  3672
10505  3673
10506  3674
10507  3675
10508  3676
10509  3677
10510  3678
10511  3679
10512  367A
10513  367B
10514  367C
10515  367D
10516  367E
10517  367F
10518  3680
10519  3681
10520  3682
10521  3683
10522  3684
10523  3685
10524  3686
10525  3687
10526  3688
10527  3689
10528  368A
10529  368B
10530  368C
10531  368D
10532  368E
10533  368F
10534  3690
10535  3691
10536  3692
10537  3693
10538  3694
10539  3695
10540  3696
10541  3697
10542  3698
10543  3699
10544  369A
10545  369B
10546  369C
10547  369D
10548  369E
10549  369F
10550  36A0
10551  36A1
10552  36A2
10553  36A3
10554  36A4
10555  36A5
10556  36A6
10557  36A7
10558  36A8
10559  36A9
10560  36AA
10561  36AB
10562  36AC
10563  36AD
10564  36AE
10565  36AF
10566  36B0
10567  36B1
10568  36B2
10569  36B3
10570  36B4
10571  36B5
10572  36B6
10573  36B7
10574  36B8
10575  36B9
10576  36BA
10577  36BB
10578  36BC
10579  36BD
10580  36BE
10581  36BF
10582  36C0
10583  36C1
10584  36C2
10585  36C3
10586  36C4
10587  36C5
10588  36C6
10589  36C7
10590  36C8
10591  36C9
10592  36CA
10593  36CB
10594  36CC
10595  36CD
10596  36CE
10597  36CF
10598  36D0
10599  36D1
10600  36D2
10601  36D3
10602  36D4
10603  36D5
10604  36D6
10605  36D7
10606  36D8
10607  36D9
10608  36DA
10609  36DB
10610  36DC
10611  36DD
10612  36DE
10613  36DF
10614  36E0
10615  36E1
10616  36E2
10617  36E3
10618  36E4
10619  36E5
10620  36E6
10621  36E7
10622  36E8
10623  36E9
10624  36EA
10625  36EB
10626  36EC
10627  36ED
10628  36EE
10629  36EF
10630  36F0
10631  36F1
10632  36F2
10633  36F3
10634  36F4
10635  36F5
10636  36F6
10637  36F7
10638  36F8
10639  36F9
10640  36FA
10641  36FB
10642  36FC
10643  36FD
10644  36FE
10645  36FF
10646  3700
10647  3701
10648  3702
10649  3703
10650  3704
10651  3705
10652  3706
10653  3707
10654  3708
10655  3709
10656  370A
10657  370B
10658  370C
10659  370D
10660  370E
10661  370F
10662  3710
10663  3711
10664  3712
10665  3713
10666  3714
10667  3715
10668  3716
10669  3717
10670  3718
10671  3719
10672  371A
10673  371B
10674  371C
10675  371D
10676  371E
10677  371F
10678  3720
10679  3721
10680  3722
10681  3723
10682  3724
10683  3725
10684  3726
10685  3727
10686  3728
10687  3729
10688  372A
10689  372B
10690  372C
10691  372D
10692  372E
10693  372F
10694  3730
10695  3731
10696  3732
10697  3733
10698  3734
10699  3735
10700  3736
10701  3737
10702  3738
10703  3739
10704  373A
10705  373B
10706  373C
10707  373D
10708  373E
10709  373F
10710  3740
10711  3741
10712  3742
10713  3743
10714  3744
10715  3745
10716  3746
10717  3747
10718  3748
10719  3749
10720  374A
10721  374B
10722  374C
10723  374D
10724  374E
10725  374F
10726  3750
10727  3751
10728  3752
10729  3753
10730  3754
10731  3755
10732  3756
10733  3757
10734  3758
10735  3759
10736  375A
10737  375B
10738  375C
10739  375D
10740  375E
10741  375F
10742  3760
10743  3761
10744  3762
10745  3763
10746  3764
10747  3765
10748  3766
10749  3767
10750  3768
10751  3769
10752  376A
10753  376B
10754  376C
10755  376D
10756  376E
10757  376F
10758  3770
10759  3771
10760  3772
10761  3773
10762  3774
10763  3775
10764  3776
10765  3777
10766  3778
10767  3779
10768  377A
10769  377B
10770  377C
10771  377D
10772  377E
10773  377F
10774  3780
10775  3781
10776  3782
10777  3783
10778  3784
10779  3785
10780  3786
10781  3787
10782  3788
10783  3789
10784  378A
10785  378B
10786  378C
10787  378D
10788  378E
10789  378F
10790  3790
10791  3791
10792  3792
10793  3793
10794  3794
10795  3795
10796  3796
10797  3797
10798  3798
10799  3799
10800  379A
10801  379B
10802  379C
10803  379D
10804  379E
10805  379F
10806  37A0
10807  37A1
10808  37A2
10809  37A3
10810  37A4
10811  37A5
10812  37A6
10813  37A7
10814  37A8
10815  37A9
10816  37AA
10817  37AB
10818  37AC
10819  37AD
10820  37AE
10821  37AF
10822  37B0
10823  37B1
10824  37B2
10825  37B3
10826  37B4
10827  37B5
10828  37B6
10829  37B7
10830  37B8
10831  37B9
10832  37BA
10833  37BB
10834  37BC
10835  37BD
10836  37BE
10837  37BF
10838  37C0
10839  37C1
10840  37C2
10841  37C3
10842  37C4
10843  37C5
10844  37C6
10845  37C7
10846  37C8
10847  37C9
10848  37CA
10849  37CB
10850  37CC
10851  37CD
10852  37CE
10853  37CF
10854  37D0
10855  37D1
10856  37D2
10857  37D3
10858  37D4
10859  37D5
10860  37D6
10861  37D7
10862  37D8
10863  37D9
10864  37DA
10865  37DB
10866  37DC
10867  37DD
10868  37DE
10869  37DF
10870  37E0
10871  37E1
10872  37E2
10873  37E3
10874  37E4
10875  37E5
10876  37E6
10877  37E7
10878  37E8
10879  37E9
10880  37EA
10881  37EB
10882  37EC
10883  37ED
10884  37EE
10885  37EF
10886  37F0
10887  37F1
10888  37F2
10889  37F3
10890  37F4
10891  37F5
10892  37F6
10893  37F7
10894  37F8
10895  37F9
10896  37FA
10897  37FB
10898  37FC
10899  37FD
10900  37FE
10901  37FF
10902  3800
10903  3801
10904  3802
10905  3803
10906  3804
10907  3805
10908  3806
10909  3807
10910  3808
10911  3809
10912  380A
10913  380B
10914  380C
10915  380D
10916  380E
10917  380F
10918  3810
10919  3811
10920  3812
10921  3813
10922  3814
10923  3815
10924  3816
10925  3817
10926  3818
10927  3819
10928  381A
10929  381B
10930  381C
10931  381D
10932  381E
10933  381F
10934  3820
10935  3821
10936  3822
10937  3823
10938  3824
10939  3825
10940  3826
10941  3827
10942  3828
10943  3829
10944  382A
10945  382B
10946  382C
10947  382D
10948  382E
10949  382F
10950  3830
10951  3831
10952  3832
10953  3833
10954  3834
10955  3835
10956  3836
10957  3837
10958  3838
10959  3839
10960  383A
10961  383B
10962  383C
10963  383D
10964  383E
10965  383F
10966  3840
10967  3841
10968  3842
10969  3843
10970  3844
10971  3845
10972  3846
10973  3847
10974  3848
10975  3849
10976  384A
10977  384B
10978  384C
10979  384D
10980  384E
10981  384F
10982  3850
10983  3851
10984  3852
10985  3853
10986  3854
10987  3855
10988  3856
10989  3857
10990  3858
10991  3859
10992  385A
10993  385B
10994  385C
10995  385D
10996  385E
10997  385F
10998  3860
10999  3861
11000  3862
11001  3863
11002  3864
11003  3865
11004  3866
11005  3867
11006  3868
11007  3869
11008  386A
11009  386B
11010  386C
11011  386D
11012  386E
11013  386F
11014  3870
11015  3871
11016  3872
11017  3873
11018  3874
11019  3875
11020  3876
11021  3877
11022  3878
11023  3879
11024  387A
11025  387B
11026  387C
11027  387D
11028  387E
11029  387F
11030  3880
11031  3881
11032  3882
11033  3883
11034  3884
11035  3885
11036  3886
11037  3887
11038  3888
11039  3889
11040  388A
11041  388B
11042  388C
11043  388D
11044  388E
11045  388F
11046  3890
11047  3891
11048  3892
11049  3893
11050  3894
11051  3895
11052  3896
11053  3897
11054  3898
11055  3899
11056  389A
11057  389B
11058  389C
11059  389D
11060  389E
11061  389F
11062  38A0
11063  38A1
11064  38A2
11065  38A3
11066  38A4
11067  38A5
11068  38A6
11069  38A7
11070  38A8
11071  38A9
11072  38AA
11073  38AB
11074  38AC
11075  38AD
11076  38AE
11077  38AF
11078  38B0
11079  38B1
11080  38B2
11081  38B3
11082  38B4
11083  38B5
11084  38B6
11085  38B7
11086  38B8
11087  38B9
11088  38BA
11089  38BB
11090  38BC
11091  38BD
11092  38BE
11093  38BF
11094  38C0
11095  38C1
11096  38C2
11097  38C3
11098  38C4
11099  38C5
11100  38C6
11101  38C7
11102  38C8
11103  38C9
11104  38CA
11105  38CB
11106  38CC
11107  38CD
11108  38CE
11109  38CF
11110  38D0
11111  38D1
11112  38D2
11113  38D3
11114  38D4
11115  38D5
11116  38D6
11117  38D7
11118  38D8
11119  38D9
11120  38DA
11121  38DB
11122  38DC
11123  38DD
11124  38DE
11125  38DF
11126  38E0
11127  38E1
11128  38E2
11129  38E3
11130  38E4
11131  38E5
11132  38E6
11133  38E7
11134  38E8
11135  38E9
11136  38EA
11137  38EB
11138  38EC
11139  38ED
11140  38EE
11141  38EF
11142  38F0
11143  38F1
11144  38F2
11145  38F3
11146  38F4
11147  38F5
11148  38F6
11149  38F7
11150  38F8
11151  38F9
11152  38FA
11153  38FB
11154  38FC
11155  38FD
11156  38FE
11157  38FF
11158  3900
11159  3901
11160  3902
11161  3903
11162  3904
11163  3905
11164  3906
11165  3907
11166  3908
11167  3909
11168  390A
11169  390B
11170  390C
11171  390D
11172  390E
11173  390F
11174  3910
11175  3911
11176  3912
11177  3913
11178  3914
11179  3915
11180  3916
11181  3917
11182  3918
11183  3919
11184  391A
11185  391B
11186  391C
11187  391D
11188  391E
11189  391F
11190  3920
11191  3921
11192  3922
11193  3923
11194  3924
11195  3925
11196  3926
11197  3927
11198  3928
11199  3929
11200  392A
11201  392B
11202  392C
11203  392D
11204  392E
11205  392F
11206  3930
11207  3931
11208  3932
11209  3933
11210  3934
11211  3935
11212  3936
11213  3937
11214  3938
11215  3939
11216  393A
11217  393B
11218  393C
11219  393D
11220  393E
11221  393F
11222  3940
11223  3941
11224  3942
11225  3943
11226  3944
11227  3945
11228  3946
11229  3947
11230  3948
11231  3949
11232  394A
11233  394B
11234  394C
11235  394D
11236  394E
11237  394F
11238  3950
11239  3951
11240  3952
11241  3953
11242  3954
11243  3955
11244  3956
11245  3957
11246  3958
11247  3959
11248  395A
11249  395B
11250  395C
11251  395D
11252  395E
11253  395F
11254  3960
11255  3961
11256  3962
11257  3963
11258  3964
11259  3965
11260  3966
11261  3967
11262  3968
11263  3969
11264  396A
11265  396B
11266  396C
11267  396D
11268  396E
11269  396F
11270  3970
11271  3971
11272  3972
11273  3973
11274  3974
11275  3975
11276  3976
11277  3977
11278  3978
11279  3979
11280  397A
11281  397B
11282  397C
11283  397D
11284  397E
11285  397F
11286  3980
11287  3981
11288  3982
11289  3983
11290  3984
11291  3985
11292  3986
11293  3987
11294  3988
11295  3989
11296  398A
11297  398B
11298  398C
11299  398D
11300  398E
11301  398F
11302  3990
11303  3991
11304  3992
11305  3993
11306  3994
11307  3995
11308  3996
11309  3997
11310  3998
11311  3999
11312  399A
11313  399B
11314  399C
11315  399D
11316  399E
11317  399F
11318  39A0
11319  39A1
11320  39A2
11321  39A3
11322  39A4
11323  39A5
11324  39A6
11325  39A7
11326  39A8
11327  39A9
11328  39AA
11329  39AB
11330  39AC
11331  39AD
11332  39AE
11333  39AF
11334  39B0
11335  39B1
11336  39B2
11337  39B3
11338  39B4
11339  39B5
11340  39B6
11341  39B7
11342  39B8
11343  39B9
11344  39BA
11345  39BB
11346  39BC
11347  39BD
11348  39BE
11349  39BF
11350  39C0
11351  39C1
11352  39C2
11353  39C3
11354  39C4
11355  39C5
11356  39C6
11357  39C7
11358  39C8
11359  39C9
11360  39CA
11361  39CB
11362  39CC
11363  39CD
11364  39CE
11365  39CF
11366  39D0
11367  39D1
11368  39D2
11369  39D3
11370  39D4
11371  39D5
11372  39D6
11373  39D7
11374  39D8
11375  39D9
11376  39DA
11377  39DB
11378  39DC
11379  39DD
11380  39DE
11381  39DF
11382  39E0
11383  39E1
11384  39E2
11385  39E3
11386  39E4
11387  39E5
11388  39E6
11389  39E7
11390  39E8
11391  39E9
11392  39EA
11393  39EB
11394  39EC
11395  39ED
11396  39EE
11397  39EF
11398  39F0
11399  39F1
11400  39F2
11401  39F3
11402  39F4
11403  39F5
11404  39F6
11405  39F7
11406  39F8
11407  39F9
11408  39FA
11409  39FB
11410  39FC
11411  39FD
11412  39FE
11413  39FF
11414  3A00
11415  3A01
11416  3A02
11417  3A03
11418  3A04
11419  3A05
11420  3A06
11421  3A07
11422  3A08
11423  3A09
11424  3A0A
11425  3A0B
11426  3A0C
11427  3A0D
11428  3A0E
11429  3A0F
11430  3A10
11431  3A11
11432  3A12
11433  3A13
11434  3A14
11435  3A15
11436  3A16
11437  3A17
11438  3A18
11439  3A19
11440  3A1A
11441  3A1B
11442  3A1C
11443  3A1D
11444  3A1E
11445  3A1F
11446  3A20
11447  3A21
11448  3A22
11449  3A23
11450  3A24
11451  3A25
11452  3A26
11453  3A27
11454  3A28
11455  3A29
11456  3A2A
11457  3A2B
11458  3A2C
11459  3A2D
11460  3A2E
11461  3A2F
11462  3A30
11463  3A31
11464  3A32
11465  3A33
11466  3A34
11467  3A35
11468  3A36
11469  3A37
11470  3A38
11471  3A39
11472  3A3A
11473  3A3B
11474  3A3C
11475  3A3D
11476  3A3E
11477  3A3F
11478  3A40
11479  3A41
11480  3A42
11481  3A43
11482  3A44
11483  3A45
11484  3A46
11485  3A47
11486  3A48
11487  3A49
11488  3A4A
11489  3A4B
11490  3A4C
11491  3A4D
11492  3A4E
11493  3A4F
11494  3A50
11495  3A51
11496  3A52
11497  3A53
11498  3A54
11499  3A55
11500  3A56
11501  3A57
11502  3A58
11503  3A59
11504  3A5A
11505  3A5B
11506  3A5C
11507  3A5D
11508  3A5E
11509  3A5F
11510  3A60
11511  3A61
11512  3A62
11513  3A63
11514  3A64
11515  3A65
11516  3A66
11517  3A67
11518  3A68
11519  3A69
11520  3A6A
11521  3A6B
11522  3A6C
11523  3A6D
11524  3A6E
11525  3A6F
11526  3A70
11527  3A71
11528  3A72
11529  3A73
11530  3A74
11531  3A75
11532  3A76
11533  3A77
11534  3A78
11535  3A79
11536  3A7A
11537  3A7B
11538  3A7C
11539  3A7D
11540  3A7E
11541  3A7F
11542  3A80
11543  3A81
11544  3A82
11545  3A83
11546  3A84
11547  3A85
11548  3A86
11549  3A87
11550  3A88
11551  3A89
11552  3A8A
11553  3A8B
11554  3A8C
11555  3A8D
11556  3A8E
11557  3A8F
11558  3A90
11559  3A91
11560  3A92
11561  3A93
11562  3A94
11563  3A95
11564  3A96
11565  3A97
11566  3A98
11567  3A99
11568  3A9A
11569  3A9B
11570  3A9C
11571  3A9D
11572  3A9E
11573  3A9F
11574  3AA0
11575  3AA1
11576  3AA2
11577  3AA3
11578  3AA4
11579  3AA5
11580  3AA6
11581  3AA7
11582  3AA8
11583  3AA9
11584  3AAA
11585  3AAB
11586  3AAC
11587  3AAD
11588  3AAE
11589  3AAF
11590  3AB0
11591  3AB1
11592  3AB2
11593  3AB3
11594  3AB4
11595  3AB5
11596  3AB6
11597  3AB7
11598  3AB8
11599  3AB9
11600  3ABA
11601  3ABB
11602  3ABC
11603  3ABD
11604  3ABE
11605  3ABF
11606  3AC0
11607  3AC1
11608  3AC2
11609  3AC3
11610  3AC4
11611  3AC5
11612  3AC6
11613  3AC7
11614  3AC8
11615  3AC9
11616  3ACA
11617  3ACB
11618  3ACC
11619  3ACD
11620  3ACE
11621  3ACF
11622  3AD0
11623  3AD1
11624  3AD2
11625  3AD3
11626  3AD4
11627  3AD5
11628  3AD6
11629  3AD7
11630  3AD8
11631  3AD9
11632  3ADA
11633  3ADB
11634  3ADC
11635  3ADD
11636  3ADE
11637  3ADF
11638  3AE0
11639  3AE1
11640  3AE2
11641  3AE3
11642  3AE4
11643  3AE5
11644  3AE6
11645  3AE7
11646  3AE8
11647  3AE9
11648  3AEA
11649  3AEB
11650  3AEC
11651  3AED
11652  3AEE
11653  3AEF
11654  3AF0
11655  3AF1
11656  3AF2
11657  3AF3
11658  3AF4
11659  3AF5
11660  3AF6
11661  3AF7
11662  3AF8
11663  3AF9
11664  3AFA
11665  3AFB
11666  3AFC
11667  3AFD
11668  3AFE
11669  3AFF
11670  3B00
11671  3B01
11672  3B02
11673  3B03
11674  3B04
11675  3B05
11676  3B06
11677  3B07
11678  3B08
11679  3B09
11680  3B0A
11681  3B0B
11682  3B0C
11683  3B0D
11684  3B0E
11685  3B0F
11686  3B10
11687  3B11
11688  3B12
11689  3B13
11690  3B14
11691  3B15
11692  3B16
11693  3B17
11694  3B18
11695  3B19
11696  3B1A
11697  3B1B
11698  3B1C
11699  3B1D
11700  3B1E
11701  3B1F
11702  3B20
11703  3B21
11704  3B22
11705  3B23
11706  3B24
11707  3B25
11708  3B26
11709  3B27
11710  3B28
11711  3B29
11712  3B2A
11713  3B2B
11714  3B2C
11715  3B2D
11716  3B2E
11717  3B2F
11718  3B30
11719  3B31
11720  3B32
11721  3B33
11722  3B34
11723  3B35
11724  3B36
11725  3B37
11726  3B38
11727  3B39
11728  3B3A
11729  3B3B
11730  3B3C
11731  3B3D
11732  3B3E
11733  3B3F
11734  3B40
11735  3B41
11736  3B42
11737  3B43
11738  3B44
11739  3B45
11740  3B46
11741  3B47
11742  3B48
11743  3B49
11744  3B4A
11745  3B4B
11746  3B4C
11747  3B4D
11748  3B4E
11749  3B4F
11750  3B50
11751  3B51
11752  3B52
11753  3B53
11754  3B54
11755  3B55
11756  3B56
11757  3B57
11758  3B58
11759  3B59
11760  3B5A
11761  3B5B
11762  3B5C
11763  3B5D
11764  3B5E
11765  3B5F
11766  3B60
11767  3B61
11768  3B62
11769  3B63
11770  3B64
11771  3B65
11772  3B66
11773  3B67
11774  3B68
11775  3B69
11776  3B6A
11777  3B6B
11778  3B6C
11779  3B6D
11780  3B6E
11781  3B6F
11782  3B70
11783  3B71
11784  3B72
11785  3B73
11786  3B74
11787  3B75
11788  3B76
11789  3B77
11790  3B78
11791  3B79
11792  3B7A
11793  3B7B
11794  3B7C
11795  3B7D
11796  3B7E
11797  3B7F
11798  3B80
11799  3B81
11800  3B82
11801  3B83
11802  3B84
11803  3B85
11804  3B86
11805  3B87
11806  3B88
11807  3B89
11808  3B8A
11809  3B8B
11810  3B8C
11811  3B8D
11812  3B8E
11813  3B8F
11814  3B90
11815  3B91
11816  3B92
11817  3B93
11818  3B94
11819  3B95
11820  3B96
11821  3B97
11822  3B98
11823  3B99
11824  3B9A
11825  3B9B
11826  3B9C
11827  3B9D
11828  3B9E
11829  3B9F
11830  3BA0
11831  3BA1
11832  3BA2
11833  3BA3
11834  3BA4
11835  3BA5
11836  3BA6
11837  3BA7
11838  3BA8
11839  3BA9
11840  3BAA
11841  3BAB
11842  3BAC
11843  3BAD
11844  3BAE
11845  3BAF
11846  3BB0
11847  3BB1
11848  3BB2
11849  3BB3
11850  3BB4
11851  3BB5
11852  3BB6
11853  3BB7
11854  3BB8
11855  3BB9
11856  3BBA
11857  3BBB
11858  3BBC
11859  3BBD
11860  3BBE
11861  3BBF
11862  3BC0
11863  3BC1
11864  3BC2
11865  3BC3
11866  3BC4
11867  3BC5
11868  3BC6
11869  3BC7
11870  3BC8
11871  3BC9
11872  3BCA
11873  3BCB
11874  3BCC
11875  3BCD
11876  3BCE
11877  3BCF
11878  3BD0
11879  3BD1
11880  3BD2
11881  3BD3
11882  3BD4
11883  3BD5
11884  3BD6
11885  3BD7
11886  3BD8
11887  3BD9
11888  3BDA
11889  3BDB
11890  3BDC
11891  3BDD
11892  3BDE
11893  3BDF
11894  3BE0
11895  3BE1
11896  3BE2
11897  3BE3
11898  3BE4
11899  3BE5
11900  3BE6
11901  3BE7
11902  3BE8
11903  3BE9
11904  3BEA
11905  3BEB
11906  3BEC
11907  3BED
11908  3BEE
11909  3BEF
11910  3BF0
11911  3BF1
11912  3BF2
11913  3BF3
11914  3BF4
11915  3BF5
11916  3BF6
11917  3BF7
11918  3BF8
11919  3BF9
11920  3BFA
11921  3BFB
11922  3BFC
11923  3BFD
11924  3BFE
11925  3BFF
11926  3C00
11927  3C01
11928  3C02
11929  3C03
11930  3C04
11931  3C05
11932  3C06
11933  3C07
11934  3C08
11935  3C09
11936  3C0A
11937  3C0B
11938  3C0C
11939  3C0D
11940  3C0E
11941  3C0F
11942  3C10
11943  3C11
11944  3C12
11945  3C13
11946  3C14
11947  3C15
11948  3C16
11949  3C17
11950  3C18
11951  3C19
11952  3C1A
11953  3C1B
11954  3C1C
11955  3C1D
11956  3C1E
11957  3C1F
11958  3C20
11959  3C21
11960  3C22
11961  3C23
11962  3C24
11963  3C25
11964  3C26
11965  3C27
11966  3C28
11967  3C29
11968  3C2A
11969  3C2B
11970  3C2C
11971  3C2D
11972  3C2E
11973  3C2F
11974  3C30
11975  3C31
11976  3C32
11977  3C33
11978  3C34
11979  3C35
11980  3C36
11981  3C37
11982  3C38
11983  3C39
11984  3C3A
11985  3C3B
11986  3C3C
11987  3C3D
11988  3C3E
11989  3C3F
11990  3C40
11991  3C41
11992  3C42
11993  3C43
11994  3C44
11995  3C45
11996  3C46
11997  3C47
11998  3C48
11999  3C49
12000  3C4A
12001  3C4B
12002  3C4C
12003  3C4D
12004  3C4E
12005  3C4F
12006  3C50
12007  3C51
12008  3C52
12009  3C53
12010  3C54
12011  3C55
12012  3C56
12013  3C57
12014  3C58
12015  3C59
12016  3C5A
12017  3C5B
12018  3C5C
12019  3C5D
12020  3C5E
12021  3C5F
12022  3C60
12023  3C61
12024  3C62
12025  3C63
12026  3C64
12027  3C65
12028  3C66
12029  3C67
12030  3C68
12031  3C69
12032  3C6A
12033  3C6B
12034  3C6C
12035  3C6D
12036  3C6E
12037  3C6F
12038  3C70
12039  3C71
12040  3C72
12041  3C73
12042  3C74
12043  3C75
12044  3C76
12045  3C77
12046  3C78
12047  3C79
12048  3C7A
12049  3C7B
12050  3C7C
12051  3C7D
12052  3C7E
12053  3C7F
12054  3C80
12055  3C81
12056  3C82
12057  3C83
12058  3C84
12059  3C85
12060  3C86
12061  3C87
12062  3C88
12063  3C89
12064  3C8A
12065  3C8B
12066  3C8C
12067  3C8D
12068  3C8E
12069  3C8F
12070  3C90
12071  3C91
12072  3C92
12073  3C93
12074  3C94
12075  3C95
12076  3C96
12077  3C97
12078  3C98
12079  3C99
12080  3C9A
12081  3C9B
12082  3C9C
12083  3C9D
12084  3C9E
12085  3C9F
12086  3CA0
12087  3CA1
12088  3CA2
12089  3CA3
12090  3CA4
12091  3CA5
12092  3CA6
12093  3CA7
12094  3CA8
12095  3CA9
12096  3CAA
12097  3CAB
12098  3CAC
12099  3CAD
12100  3CAE
12101  3CAF
12102  3CB0
12103  3CB1
12104  3CB2
12105  3CB3
12106  3CB4
12107  3CB5
12108  3CB6
12109  3CB7
12110  3CB8
12111  3CB9
12112  3CBA
12113  3CBB
12114  3CBC
12115  3CBD
12116  3CBE
12117  3CBF
12118  3CC0
12119  3CC1
12120  3CC2
12121  3CC3
12122  3CC4
12123  3CC5
12124  3CC6
12125  3CC7
12126  3CC8
12127  3CC9
12128  3CCA
12129  3CCB
12130  3CCC
12131  3CCD
12132  3CCE
12133  3CCF
12134  3CD0
12135  3CD1
12136  3CD2
12137  3CD3
12138  3CD4
12139  3CD5
12140  3CD6
12141  3CD7
12142  3CD8
12143  3CD9
12144  3CDA
12145  3CDB
12146  3CDC
12147  3CDD
12148  3CDE
12149  3CDF
12150  3CE0
12151  3CE1
12152  3CE2
12153  3CE3
12154  3CE4
12155  3CE5
12156  3CE6
12157  3CE7
12158  3CE8
12159  3CE9
12160  3CEA
12161  3CEB
12162  3CEC
12163  3CED
12164  3CEE
12165  3CEF
12166  3CF0
12167  3CF1
12168  3CF2
12169  3CF3
12170  3CF4
12171  3CF5
12172  3CF6
12173  3CF7
12174  3CF8
12175  3CF9
12176  3CFA
12177  3CFB
12178  3CFC
12179  3CFD
12180  3CFE
12181  3CFF
12182  3D00
12183  3D01
12184  3D02
12185  3D03
12186  3D04
12187  3D05
12188  3D06
12189  3D07
12190  3D08
12191  3D09
12192  3D0A
12193  3D0B
12194  3D0C
12195  3D0D
12196  3D0E
12197  3D0F
12198  3D10
12199  3D11
12200  3D12
12201  3D13
12202  3D14
12203  3D15
12204  3D16
12205  3D17
12206  3D18
12207  3D19
12208  3D1A
12209  3D1B
12210  3D1C
12211  3D1D
12212  3D1E
12213  3D1F
12214  3D20
12215  3D21
12216  3D22
12217  3D23
12218  3D24
12219  3D25
12220  3D26
12221  3D27
12222  3D28
12223  3D29
12224  3D2A
12225  3D2B
12226  3D2C
12227  3D2D
12228  3D2E
12229  3D2F
12230  3D30
12231  3D31
12232  3D32
12233  3D33
12234  3D34
12235  3D35
12236  3D36
12237  3D37
12238  3D38
12239  3D39
12240  3D3A
12241  3D3B
12242  3D3C
12243  3D3D
12244  3D3E
12245  3D3F
12246  3D40
12247  3D41
12248  3D42
12249  3D43
12250  3D44
12251  3D45
12252  3D46
12253  3D47
12254  3D48
12255  3D49
12256  3D4A
12257  3D4B
12258  3D4C
12259  3D4D
12260  3D4E
12261  3D4F
12262  3D50
12263  3D51
12264  3D52
12265  3D53
12266  3D54
12267  3D55
12268  3D56
12269  3D57
12270  3D58
12271  3D59
12272  3D5A
12273  3D5B
12274  3D5C
12275  3D5D
12276  3D5E
12277  3D5F
12278  3D60
12279  3D61
12280  3D62
12281  3D63
12282  3D64
12283  3D65
12284  3D66
12285  3D67
12286  3D68
12287  3D69
12288  3D6A
12289  3D6B
12290  3D6C
12291  3D6D
12292  3D6E
12293  3D6F
12294  3D70
12295  3D71
12296  3D72
12297  3D73
12298  3D74
12299  3D75
12300  3D76
12301  3D77
12302  3D78
12303  3D79
12304  3D7A
12305  3D7B
12306  3D7C
12307  3D7D
12308  3D7E
12309  3D7F
12310  3D80
12311  3D81
12312  3D82
12313  3D83
12314  3D84
12315  3D85
12316  3D86
12317  3D87
12318  3D88
12319  3D89
12320  3D8A
12321  3D8B
12322  3D8C
12323  3D8D
12324  3D8E
12325  3D8F
12326  3D90
12327  3D91
12328  3D92
12329  3D93
12330  3D94
12331  3D95
12332  3D96
12333  3D97
12334  3D98
12335  3D99
12336  3D9A
12337  3D9B
12338  3D9C
12339  3D9D
12340  3D9E
12341  3D9F
12342  3DA0
12343  3DA1
12344  3DA2
12345  3DA3
12346  3DA4
12347  3DA5
12348  3DA6
12349  3DA7
12350  3DA8
12351  3DA9
12352  3DAA
12353  3DAB
12354  3DAC
12355  3DAD
12356  3DAE
12357  3DAF
12358  3DB0
12359  3DB1
12360  3DB2
12361  3DB3
12362  3DB4
12363  3DB5
12364  3DB6
12365  3DB7
12366  3DB8
12367  3DB9
12368  3DBA
12369  3DBB
12370  3DBC
12371  3DBD
12372  3DBE
12373  3DBF
12374  3DC0
12375  3DC1
12376  3DC2
12377  3DC3
12378  3DC4
12379  3DC5
12380  3DC6
12381  3DC7
12382  3DC8
12383  3DC9
12384  3DCA
12385  3DCB
12386  3DCC
12387  3DCD
12388  3DCE
12389  3DCF
12390  3DD0
12391  3DD1
12392  3DD2
12393  3DD3
12394  3DD4
12395  3DD5
12396  3DD6
12397  3DD7
12398  3DD8
12399  3DD9
12400  3DDA
12401  3DDB
12402  3DDC
12403  3DDD
12404  3DDE
12405  3DDF
12406  3DE0
12407  3DE1
12408  3DE2
12409  3DE3
12410  3DE4
12411  3DE5
12412  3DE6
12413  3DE7
12414  3DE8
12415  3DE9
12416  3DEA
12417  3DEB
12418  3DEC
12419  3DED
12420  3DEE
12421  3DEF
12422  3DF0
12423  3DF1
12424  3DF2
12425  3DF3
12426  3DF4
12427  3DF5
12428  3DF6
12429  3DF7
12430  3DF8
12431  3DF9
12432  3DFA
12433  3DFB
12434  3DFC
12435  3DFD
12436  3DFE
12437  3DFF
12438  3E00
12439  3E01
12440  3E02
12441  3E03
12442  3E04
12443  3E05
12444  3E06
12445  3E07
12446  3E08
12447  3E09
12448  3E0A
12449  3E0B
12450  3E0C
12451  3E0D
12452  3E0E
12453  3E0F
12454  3E10
12455  3E11
12456  3E12
12457  3E13
12458  3E14
12459  3E15
12460  3E16
12461  3E17
12462  3E18
12463  3E19
12464  3E1A
12465  3E1B
12466  3E1C
12467  3E1D
12468  3E1E
12469  3E1F
12470  3E20
12471  3E21
12472  3E22
12473  3E23
12474  3E24
12475  3E25
12476  3E26
12477  3E27
12478  3E28
12479  3E29
12480  3E2A
12481  3E2B
12482  3E2C
12483  3E2D
12484  3E2E
12485  3E2F
12486  3E30
12487  3E31
12488  3E32
12489  3E33
12490  3E34
12491  3E35
12492  3E36
12493  3E37
12494  3E38
12495  3E39
12496  3E3A
12497  3E3B
12498  3E3C
12499  3E3D
12500  3E3E
12501  3E3F
12502  3E40
12503  3E41
12504  3E42
12505  3E43
12506  3E44
12507  3E45
12508  3E46
12509  3E47
12510  3E48
12511  3E49
12512  3E4A
12513  3E4B
12514  3E4C
12515  3E4D
12516  3E4E
12517  3E4F
12518  3E50
12519  3E51
12520  3E52
12521  3E53
12522  3E54
12523  3E55
12524  3E56
12525  3E57
12526  3E58
12527  3E59
12528  3E5A
12529  3E5B
12530  3E5C
12531  3E5D
12532  3E5E
12533  3E5F
12534  3E60
12535  3E61
12536  3E62
12537  3E63
12538  3E64
12539  3E65
12540  3E66
12541  3E67
12542  3E68
12543  3E69
12544  3E6A
12545  3E6B
12546  3E6C
12547  3E6D
12548  3E6E
12549  3E6F
12550  3E70
12551  3E71
12552  3E72
12553  3E73
12554  3E74
12555  3E75
12556  3E76
12557  3E77
12558  3E78
12559  3E79
12560  3E7A
12561  3E7B
12562  3E7C
12563  3E7D
12564  3E7E
12565  3E7F
12566  3E80
12567  3E81
12568  3E82
12569  3E83
12570  3E84
12571  3E85
12572  3E86
12573  3E87
12574  3E88
12575  3E89
12576  3E8A
12577  3E8B
12578  3E8C
12579  3E8D
12580  3E8E
12581  3E8F
12582  3E90
12583  3E91
12584  3E92
12585  3E93
12586  3E94
12587  3E95
12588  3E96
12589  3E97
12590  3E98
12591  3E99
12592  3E9A
12593  3E9B
12594  3E9C
12595  3E9D
12596  3E9E
12597  3E9F
12598  3EA0
12599  3EA1
12600  3EA2
12601  3EA3
12602  3EA4
12603  3EA5
12604  3EA6
12605  3EA7
12606  3EA8
12607  3EA9
12608  3EAA
12609  3EAB
12610  3EAC
12611  3EAD
12612  3EAE
12613  3EAF
12614  3EB0
12615  3EB1
12616  3EB2
12617  3EB3
12618  3EB4
12619  3EB5
12620  3EB6
12621  3EB7
12622  3EB8
12623  3EB9
12624  3EBA
12625  3EBB
12626  3EBC
12627  3EBD
12628  3EBE
12629  3EBF
12630  3EC0
12631  3EC1
12632  3EC2
12633  3EC3
12634  3EC4
12635  3EC5
12636  3EC6
12637  3EC7
12638  3EC8
12639  3EC9
12640  3ECA
12641  3ECB
12642  3ECC
12643  3ECD
12644  3ECE
12645  3ECF
12646  3ED0
12647  3ED1
12648  3ED2
12649  3ED3
12650  3ED4
12651  3ED5
12652  3ED6
12653  3ED7
12654  3ED8
12655  3ED9
12656  3EDA
12657  3EDB
12658  3EDC
12659  3EDD
12660  3EDE
12661  3EDF
12662  3EE0
12663  3EE1
12664  3EE2
12665  3EE3
12666  3EE4
12667  3EE5
12668  3EE6
12669  3EE7
12670  3EE8
12671  3EE9
12672  3EEA
12673  3EEB
12674  3EEC
12675  3EED
12676  3EEE
12677  3EEF
12678  3EF0
12679  3EF1
12680  3EF2
12681  3EF3
12682  3EF4
12683  3EF5
12684  3EF6
12685  3EF7
12686  3EF8
12687  3EF9
12688  3EFA
12689  3EFB
12690  3EFC
12691  3EFD
12692  3EFE
12693  3EFF
12694  3F00
12695  3F01
12696  3F02
12697  3F03
12698  3F04
12699  3F05
12700  3F06
12701  3F07
12702  3F08
12703  3F09
12704  3F0A
12705  3F0B
12706  3F0C
12707  3F0D
12708  3F0E
12709  3F0F
12710  3F10
12711  3F11
12712  3F12
12713  3F13
12714  3F14
12715  3F15
12716  3F16
12717  3F17
12718  3F18
12719  3F19
12720  3F1A
12721  3F1B
12722  3F1C
12723  3F1D
12724  3F1E
12725  3F1F
12726  3F20
12727  3F21
12728  3F22
12729  3F23
12730  3F24
12731  3F25
12732  3F26
12733  3F27
12734  3F28
12735  3F29
12736  3F2A
12737  3F2B
12738  3F2C
12739  3F2D
12740  3F2E
12741  3F2F
12742  3F30
12743  3F31
12744  3F32
12745  3F33
12746  3F34
12747  3F35
12748  3F36
12749  3F37
12750  3F38
12751  3F39
12752  3F3A
12753  3F3B
12754  3F3C
12755  3F3D
12756  3F3E
12757  3F3F
12758  3F40
12759  3F41
12760  3F42
12761  3F43
12762  3F44
12763  3F45
12764  3F46
12765  3F47
12766  3F48
12767  3F49
12768  3F4A
12769  3F4B
12770  3F4C
12771  3F4D
12772  3F4E
12773  3F4F
12774  3F50
12775  3F51
12776  3F52
12777  3F53
12778  3F54
12779  3F55
12780  3F56
12781  3F57
12782  3F58
12783  3F59
12784  3F5A
12785  3F5B
12786  3F5C
12787  3F5D
12788  3F5E
12789  3F5F
12790  3F60
12791  3F61
12792  3F62
12793  3F63
12794  3F64
12795  3F65
12796  3F66
12797  3F67
12798  3F68
12799  3F69
12800  3F6A
12801  3F6B
12802  3F6C
12803  3F6D
12804  3F6E
12805  3F6F
12806  3F70
12807  3F71
12808  3F72
12809  3F73
12810  3F74
12811  3F75
12812  3F76
12813  3F77
12814  3F78
12815  3F79
12816  3F7A
12817  3F7B
12818  3F7C
12819  3F7D
12820  3F7E
12821  3F7F
12822  3F80
12823  3F81
12824  3F82
12825  3F83
12826  3F84
12827  3F85
12828  3F86
12829  3F87
12830  3F88
12831  3F89
12832  3F8A
12833  3F8B
12834  3F8C
12835  3F8D
12836  3F8E
12837  3F8F
12838  3F90
12839  3F91
12840  3F92
12841  3F93
12842  3F94
12843  3F95
12844  3F96
12845  3F97
12846  3F98
12847  3F99
12848  3F9A
12849  3F9B
12850  3F9C
12851  3F9D
12852  3F9E
12853  3F9F
12854  3FA0
12855  3FA1
12856  3FA2
12857  3FA3
12858  3FA4
12859  3FA5
12860  3FA6
12861  3FA7
12862  3FA8
12863  3FA9
12864  3FAA
12865  3FAB
12866  3FAC
12867  3FAD
12868  3FAE
12869  3FAF
12870  3FB0
12871  3FB1
12872  3FB2
12873  3FB3
12874  3FB4
12875  3FB5
12876  3FB6
12877  3FB7
12878  3FB8
12879  3FB9
12880  3FBA
12881  3FBB
12882  3FBC
12883  3FBD
12884  3FBE
12885  3FBF
12886  3FC0
12887  3FC1
12888  3FC2
12889  3FC3
12890  3FC4
12891  3FC5
12892  3FC6
12893  3FC7
12894  3FC8
12895  3FC9
12896  3FCA
12897  3FCB
12898  3FCC
12899  3FCD
12900  3FCE
12901  3FCF
12902  3FD0
12903  3FD1
12904  3FD2
12905  3FD3
12906  3FD4
12907  3FD5
12908  3FD6
12909  3FD7
12910  3FD8
12911  3FD9
12912  3FDA
12913  3FDB
12914  3FDC
12915  3FDD
12916  3FDE
12917  3FDF
12918  3FE0
12919  3FE1
12920  3FE2
12921  3FE3
12922  3FE4
12923  3FE5
12924  3FE6
12925  3FE7
12926  3FE8
12927  3FE9
12928  3FEA
12929  3FEB
12930  3FEC
12931  3FED
12932  3FEE
12933  3FEF
12934  3FF0
12935  3FF1
12936  3FF2
12937  3FF3
12938  3FF4
12939  3FF5
12940  3FF6
12941  3FF7
12942  3FF8
12943  3FF9
12944  3FFA
12945  3FFB
12946  3FFC
12947  3FFD
12948  3FFE
12949  3FFF
12950  4000
12951  4001
12952  4002
12953  4003
12954  4004
12955  4005
12956  4006
12957  4007
12958  4008
12959  4009
12960  400A
12961  400B
12962  400C
12963  400D
12964  400E
12965  400F
12966  4010
12967  4011
12968  4012
12969  4013
12970  4014
12971  4015
12972  4016
12973  4017
12974  4018
12975  4019
12976  401A
12977  401B
12978  401C
12979  401D
12980  401E
12981  401F
12982  4020
12983  4021
12984  4022
12985  4023
12986  4024
12987  4025
12988  4026
12989  4027
12990  4028
12991  4029
12992  402A
12993  402B
12994  402C
12995  402D
12996  402E
12997  402F
12998  4030
12999  4031
13000  4032
13001  4033
13002  4034
13003  4035
13004  4036
13005  4037
13006  4038
13007  4039
13008  403A
13009  403B
13010  403C
13011  403D
13012  403E
13013  403F
13014  4040
13015  4041
13016  4042
13017  4043
13018  4044
13019  4045
13020  4046
13021  4047
13022  4048
13023  4049
13024  404A
13025  404B
13026  404C
13027  404D
13028  404E
13029  404F
13030  4050
13031  4051
13032  4052
13033  4053
13034  4054
13035  4055
13036  4056
13037  4057
13038  4058
13039  4059
13040  405A
13041  405B
13042  405C
13043  405D
13044  405E
13045  405F
13046  4060
13047  4061
13048  4062
13049  4063
13050  4064
13051  4065
13052  4066
13053  4067
13054  4068
13055  4069
13056  406A
13057  406B
13058  406C
13059  406D
13060  406E
13061  406F
13062  4070
13063  4071
13064  4072
13065  4073
13066  4074
13067  4075
13068  4076
13069  4077
13070  4078
13071  4079
13072  407A
13073  407B
13074  407C
13075  407D
13076  407E
13077  407F
13078  4080
13079  4081
13080  4082
13081  4083
13082  4084
13083  4085
13084  4086
13085  4087
13086  4088
13087  4089
13088  408A
13089  408B
13090  408C
13091  408D
13092  408E
13093  408F
13094  4090
13095  4091
13096  4092
13097  4093
13098  4094
13099  4095
13100  4096
13101  4097
13102  4098
13103  4099
13104  409A
13105  409B
13106  409C
13107  409D
13108  409E
13109  409F
13110  40A0
13111  40A1
13112  40A2
13113  40A3
13114  40A4
13115  40A5
13116  40A6
13117  40A7
13118  40A8
13119  40A9
13120  40AA
13121  40AB
13122  40AC
13123  40AD
13124  40AE
13125  40AF
13126  40B0
13127  40B1
13128  40B2
13129  40B3
13130  40B4
13131  40B5
13132  40B6
13133  40B7
13134  40B8
13135  40B9
13136  40BA
13137  40BB
13138  40BC
13139  40BD
13140  40BE
13141  40BF
13142  40C0
13143  40C1
13144  40C2
13145  40C3
13146  40C4
13147  40C5
13148  40C6
13149  40C7
13150  40C8
13151  40C9
13152  40CA
13153  40CB
13154  40CC
13155  40CD
13156  40CE
13157  40CF
13158  40D0
13159  40D1
13160  40D2
13161  40D3
13162  40D4
13163  40D5
13164  40D6
13165  40D7
13166  40D8
13167  40D9
13168  40DA
13169  40DB
13170  40DC
13171  40DD
13172  40DE
13173  40DF
13174  40E0
13175  40E1
13176  40E2
13177  40E3
13178  40E4
13179  40E5
13180  40E6
13181  40E7
13182  40E8
13183  40E9
13184  40EA
13185  40EB
13186  40EC
13187  40ED
13188  40EE
13189  40EF
13190  40F0
13191  40F1
13192  40F2
13193  40F3
13194  40F4
13195  40F5
13196  40F6
13197  40F7
13198  40F8
13199  40F9
13200  40FA
13201  40FB
13202  40FC
13203  40FD
13204  40FE
13205  40FF
13206  4100
13207  4101
13208  4102
13209  4103
13210  4104
13211  4105
13212  4106
13213  4107
13214  4108
13215  4109
13216  410A
13217  410B
13218  410C
13219  410D
13220  410E
13221  410F
13222  4110
13223  4111
13224  4112
13225  4113
13226  4114
13227  4115
13228  4116
13229  4117
13230  4118
13231  4119
13232  411A
13233  411B
13234  411C
13235  411D
13236  411E
13237  411F
13238  4120
13239  4121
13240  4122
13241  4123
13242  4124
13243  4125
13244  4126
13245  4127
13246  4128
13247  4129
13248  412A
13249  412B
13250  412C
13251  412D
13252  412E
13253  412F
13254  4130
13255  4131
13256  4132
13257  4133
13258  4134
13259  4135
13260  4136
13261  4137
13262  4138
13263  4139
13264  413A
13265  413B
13266  413C
13267  413D
13268  413E
13269  413F
13270  4140
13271  4141
13272  4142
13273  4143
13274  4144
13275  4145
13276  4146
13277  4147
13278  4148
13279  4149
13280  414A
13281  414B
13282  414C
13283  414D
13284  414E
13285  414F
13286  4150
13287  4151
13288  4152
13289  4153
13290  4154
13291  4155
13292  4156
13293  4157
13294  4158
13295  4159
13296  415A
13297  415B
13298  415C
13299  415D
13300  415E
13301  415F
13302  4160
13303  4161
13304  4162
13305  4163
13306  4164
13307  4165
13308  4166
13309  4167
13310  4168
13311  4169
13312  416A
13313  416B
13314  416C
13315  416D
13316  416E
13317  416F
13318  4170
13319  4171
13320  4172
13321  4173
13322  4174
13323  4175
13324  4176
13325  4177
13326  4178
13327  4179
13328  417A
13329  417B
13330  417C
13331  417D
13332  417E
13333  417F
13334  4180
13335  4181
13336  4182
13337  4183
13338  4184
13339  4185
13340  4186
13341  4187
13342  4188
13343  4189
13344  418A
13345  418B
13346  418C
13347  418D
13348  418E
13349  418F
13350  4190
13351  4191
13352  4192
13353  4193
13354  4194
13355  4195
13356  4196
13357  4197
13358  4198
13359  4199
13360  419A
13361  419B
13362  419C
13363  419D
13364  419E
13365  419F
13366  41A0
13367  41A1
13368  41A2
13369  41A3
13370  41A4
13371  41A5
13372  41A6
13373  41A7
13374  41A8
13375  41A9
13376  41AA
13377  41AB
13378  41AC
13379  41AD
13380  41AE
13381  41AF
13382  41B0
13383  41B1
13384  41B2
13385  41B3
13386  41B4
13387  41B5
13388  41B6
13389  41B7
13390  41B8
13391  41B9
13392  41BA
13393  41BB
13394  41BC
13395  41BD
13396  41BE
13397  41BF
13398  41C0
13399  41C1
13400  41C2
13401  41C3
13402  41C4
13403  41C5
13404  41C6
13405  41C7
13406  41C8
13407  41C9
13408  41CA
13409  41CB
13410  41CC
13411  41CD
13412  41CE
13413  41CF
13414  41D0
13415  41D1
13416  41D2
13417  41D3
13418  41D4
13419  41D5
13420  41D6
13421  41D7
13422  41D8
13423  41D9
13424  41DA
13425  41DB
13426  41DC
13427  41DD
13428  41DE
13429  41DF
13430  41E0
13431  41E1
13432  41E2
13433  41E3
13434  41E4
13435  41E5
13436  41E6
13437  41E7
13438  41E8
13439  41E9
13440  41EA
13441  41EB
13442  41EC
13443  41ED
13444  41EE
13445  41EF
13446  41F0
13447  41F1
13448  41F2
13449  41F3
13450  41F4
13451  41F5
13452  41F6
13453  41F7
13454  41F8
13455  41F9
13456  41FA
13457  41FB
13458  41FC
13459  41FD
13460  41FE
13461  41FF
13462  4200
13463  4201
13464  4202
13465  4203
13466  4204
13467  4205
13468  4206
13469  4207
13470  4208
13471  4209
13472  420A
13473  420B
13474  420C
13475  420D
13476  420E
13477  420F
13478  4210
13479  4211
13480  4212
13481  4213
13482  4214
13483  4215
13484  4216
13485  4217
13486  4218
13487  4219
13488  421A
13489  421B
13490  421C
13491  421D
13492  421E
13493  421F
13494  4220
13495  4221
13496  4222
13497  4223
13498  4224
13499  4225
13500  4226
13501  4227
13502  4228
13503  4229
13504  422A
13505  422B
13506  422C
13507  422D
13508  422E
13509  422F
13510  4230
13511  4231
13512  4232
13513  4233
13514  4234
13515  4235
13516  4236
13517  4237
13518  4238
13519  4239
13520  423A
13521  423B
13522  423C
13523  423D
13524  423E
13525  423F
13526  4240
13527  4241
13528  4242
13529  4243
13530  4244
13531  4245
13532  4246
13533  4247
13534  4248
13535  4249
13536  424A
13537  424B
13538  424C
13539  424D
13540  424E
13541  424F
13542  4250
13543  4251
13544  4252
13545  4253
13546  4254
13547  4255
13548  4256
13549  4257
13550  4258
13551  4259
13552  425A
13553  425B
13554  425C
13555  425D
13556  425E
13557  425F
13558  4260
13559  4261
13560  4262
13561  4263
13562  4264
13563  4265
13564  4266
13565  4267
13566  4268
13567  4269
13568  426A
13569  426B
13570  426C
13571  426D
13572  426E
13573  426F
13574  4270
13575  4271
13576  4272
13577  4273
13578  4274
13579  4275
13580  4276
13581  4277
13582  4278
13583  4279
13584  427A
13585  427B
13586  427C
13587  427D
13588  427E
13589  427F
13590  4280
13591  4281
13592  4282
13593  4283
13594  4284
13595  4285
13596  4286
13597  4287
13598  4288
13599  4289
13600  428A
13601  428B
13602  428C
13603  428D
13604  428E
13605  428F
13606  4290
13607  4291
13608  4292
13609  4293
13610  4294
13611  4295
13612  4296
13613  4297
13614  4298
13615  4299
13616  429A
13617  429B
13618  429C
13619  429D
13620  429E
13621  429F
13622  42A0
13623  42A1
13624  42A2
13625  42A3
13626  42A4
13627  42A5
13628  42A6
13629  42A7
13630  42A8
13631  42A9
13632  42AA
13633  42AB
13634  42AC
13635  42AD
13636  42AE
13637  42AF
13638  42B0
13639  42B1
13640  42B2
13641  42B3
13642  42B4
13643  42B5
13644  42B6
13645  42B7
13646  42B8
13647  42B9
13648  42BA
13649  42BB
13650  42BC
13651  42BD
13652  42BE
13653  42BF
13654  42C0
13655  42C1
13656  42C2
13657  42C3
13658  42C4
13659  42C5
13660  42C6
13661  42C7
13662  42C8
13663  42C9
13664  42CA
13665  42CB
13666  42CC
13667  42CD
13668  42CE
13669  42CF
13670  42D0
13671  42D1
13672  42D2
13673  42D3
13674  42D4
13675  42D5
13676  42D6
13677  42D7
13678  42D8
13679  42D9
13680  42DA
13681  42DB
13682  42DC
13683  42DD
13684  42DE
13685  42DF
13686  42E0
13687  42E1
13688  42E2
13689  42E3
13690  42E4
13691  42E5
13692  42E6
13693  42E7
13694  42E8
13695  42E9
13696  42EA
13697  42EB
13698  42EC
13699  42ED
13700  42EE
13701  42EF
13702  42F0
13703  42F1
13704  42F2
13705  42F3
13706  42F4
13707  42F5
13708  42F6
13709  42F7
13710  42F8
13711  42F9
13712  42FA
13713  42FB
13714  42FC
13715  42FD
13716  42FE
13717  42FF
13718  4300
13719  4301
13720  4302
13721  4303
13722  4304
13723  4305
13724  4306
13725  4307
13726  4308
13727  4309
13728  430A
13729  430B
13730  430C
13731  430D
13732  430E
13733  430F
13734  4310
13735  4311
13736  4312
13737  4313
13738  4314
13739  4315
13740  4316
13741  4317
13742  4318
13743  4319
13744  431A
13745  431B
13746  431C
13747  431D
13748  431E
13749  431F
13750  4320
13751  4321
13752  4322
13753  4323
13754  4324
13755  4325
13756  4326
13757  4327
13758  4328
13759  4329
13760  432A
13761  432B
13762  432C
13763  432D
13764  432E
13765  432F
13766  4330
13767  4331
13768  4332
13769  4333
13770  4334
13771  4335
13772  4336
13773  4337
13774  4338
13775  4339
13776  433A
13777  433B
13778  433C
13779  433D
13780  433E
13781  433F
13782  4340
13783  4341
13784  4342
13785  4343
13786  4344
13787  4345
13788  4346
13789  4347
13790  4348
13791  4349
13792  434A
13793  434B
13794  434C
13795  434D
13796  434E
13797  434F
13798  4350
13799  4351
13800  4352
13801  4353
13802  4354
13803  4355
13804  4356
13805  4357
13806  4358
13807  4359
13808  435A
13809  435B
13810  435C
13811  435D
13812  435E
13813  435F
13814  4360
13815  4361
13816  4362
13817  4363
13818  4364
13819  4365
13820  4366
13821  4367
13822  4368
13823  4369
13824  436A
13825  436B
13826  436C
13827  436D
13828  436E
13829  436F
13830  4370
13831  4371
13832  4372
13833  4373
13834  4374
13835  4375
13836  4376
13837  4377
13838  4378
13839  4379
13840  437A
13841  437B
13842  437C
13843  437D
13844  437E
13845  437F
13846  4380
13847  4381
13848  4382
13849  4383
13850  4384
13851  4385
13852  4386
13853  4387
13854  4388
13855  4389
13856  438A
13857  438B
13858  438C
13859  438D
13860  438E
13861  438F
13862  4390
13863  4391
13864  4392
13865  4393
13866  4394
13867  4395
13868  4396
13869  4397
13870  4398
13871  4399
13872  439A
13873  439B
13874  439C
13875  439D
13876  439E
13877  439F
13878  43A0
13879  43A1
13880  43A2
13881  43A3
13882  43A4
13883  43A5
13884  43A6
13885  43A7
13886  43A8
13887  43A9
13888  43AA
13889  43AB
13890  43AC
13891  43AD
13892  43AE
13893  43AF
13894  43B0
13895  43B1
13896  43B2
13897  43B3
13898  43B4
13899  43B5
13900  43B6
13901  43B7
13902  43B8
13903  43B9
13904  43BA
13905  43BB
13906  43BC
13907  43BD
13908  43BE
13909  43BF
13910  43C0
13911  43C1
13912  43C2
13913  43C3
13914  43C4
13915  43C5
13916  43C6
13917  43C7
13918  43C8
13919  43C9
13920  43CA
13921  43CB
13922  43CC
13923  43CD
13924  43CE
13925  43CF
13926  43D0
13927  43D1
13928  43D2
13929  43D3
13930  43D4
13931  43D5
13932  43D6
13933  43D7
13934  43D8
13935  43D9
13936  43DA
13937  43DB
13938  43DC
13939  43DD
13940  43DE
13941  43DF
13942  43E0
13943  43E1
13944  43E2
13945  43E3
13946  43E4
13947  43E5
13948  43E6
13949  43E7
13950  43E8
13951  43E9
13952  43EA
13953  43EB
13954  43EC
13955  43ED
13956  43EE
13957  43EF
13958  43F0
13959  43F1
13960  43F2
13961  43F3
13962  43F4
13963  43F5
13964  43F6
13965  43F7
13966  43F8
13967  43F9
13968  43FA
13969  43FB
13970  43FC
13971  43FD
13972  43FE
13973  43FF
13974  4400
13975  4401
13976  4402
13977  4403
13978  4404
13979  4405
13980  4406
13981  4407
13982  4408
13983  4409
13984  440A
13985  440B
13986  440C
13987  440D
13988  440E
13989  440F
13990  4410
13991  4411
13992  4412
13993  4413
13994  4414
13995  4415
13996  4416
13997  4417
13998  4418
13999  4419
14000  441A
14001  441B
14002  441C
14003  441D
14004  441E
14005  441F
14006  4420
14007  4421
14008  4422
14009  4423
14010  4424
14011  4425
14012  4426
14013  4427
14014  4428
14015  4429
14016  442A
14017  442B
14018  442C
14019  442D
14020  442E
14021  442F
14022  4430
14023  4431
14024  4432
14025  4433
14026  4434
14027  4435
14028  4436
14029  4437
14030  4438
14031  4439
14032  443A
14033  443B
14034  443C
14035  443D
14036  443E
14037  443F
14038  4440
14039  4441
14040  4442
14041  4443
14042  4444
14043  4445
14044  4446
14045  4447
14046  4448
14047  4449
14048  444A
14049  444B
14050  444C
14051  444D
14052  444E
14053  444F
14054  4450
14055  4451
14056  4452
14057  4453
14058  4454
14059  4455
14060  4456
14061  4457
14062  4458
14063  4459
14064  445A
14065  445B
14066  445C
14067  445D
14068  445E
14069  445F
14070  4460
14071  4461
14072  4462
14073  4463
14074  4464
14075  4465
14076  4466
14077  4467
14078  4468
14079  4469
14080  446A
14081  446B
14082  446C
14083  446D
14084  446E
14085  446F
14086  4470
14087  4471
14088  4472
14089  4473
14090  4474
14091  4475
14092  4476
14093  4477
14094  4478
14095  4479
14096  447A
14097  447B
14098  447C
14099  447D
14100  447E
14101  447F
14102  4480
14103  4481
14104  4482
14105  4483
14106  4484
14107  4485
14108  4486
14109  4487
14110  4488
14111  4489
14112  448A
14113  448B
14114  448C
14115  448D
14116  448E
14117  448F
14118  4490
14119  4491
14120  4492
14121  4493
14122  4494
14123  4495
14124  4496
14125  4497
14126  4498
14127  4499
14128  449A
14129  449B
14130  449C
14131  449D
14132  449E
14133  449F
14134  44A0
14135  44A1
14136  44A2
14137  44A3
14138  44A4
14139  44A5
14140  44A6
14141  44A7
14142  44A8
14143  44A9
14144  44AA
14145  44AB
14146  44AC
14147  44AD
14148  44AE
14149  44AF
14150  44B0
14151  44B1
14152  44B2
14153  44B3
14154  44B4
14155  44B5
14156  44B6
14157  44B7
14158  44B8
14159  44B9
14160  44BA
14161  44BB
14162  44BC
14163  44BD
14164  44BE
14165  44BF
14166  44C0
14167  44C1
14168  44C2
14169  44C3
14170  44C4
14171  44C5
14172  44C6
14173  44C7
14174  44C8
14175  44C9
14176  44CA
14177  44CB
14178  44CC
14179  44CD
14180  44CE
14181  44CF
14182  44D0
14183  44D1
14184  44D2
14185  44D3
14186  44D4
14187  44D5
14188  44D6
14189  44D7
14190  44D8
14191  44D9
14192  44DA
14193  44DB
14194  44DC
14195  44DD
14196  44DE
14197  44DF
14198  44E0
14199  44E1
14200  44E2
14201  44E3
14202  44E4
14203  44E5
14204  44E6
14205  44E7
14206  44E8
14207  44E9
14208  44EA
14209  44EB
14210  44EC
14211  44ED
14212  44EE
14213  44EF
14214  44F0
14215  44F1
14216  44F2
14217  44F3
14218  44F4
14219  44F5
14220  44F6
14221  44F7
14222  44F8
14223  44F9
14224  44FA
14225  44FB
14226  44FC
14227  44FD
14228  44FE
14229  44FF
14230  4500
14231  4501
14232  4502
14233  4503
14234  4504
14235  4505
14236  4506
14237  4507
14238  4508
14239  4509
14240  450A
14241  450B
14242  450C
14243  450D
14244  450E
14245  450F
14246  4510
14247  4511
14248  4512
14249  4513
14250  4514
14251  4515
14252  4516
14253  4517
14254  4518
14255  4519
14256  451A
14257  451B
14258  451C
14259  451D
14260  451E
14261  451F
14262  4520
14263  4521
14264  4522
14265  4523
14266  4524
14267  4525
14268  4526
14269  4527
14270  4528
14271  4529
14272  452A
14273  452B
14274  452C
14275  452D
14276  452E
14277  452F
14278  4530
14279  4531
14280  4532
14281  4533
14282  4534
14283  4535
14284  4536
14285  4537
14286  4538
14287  4539
14288  453A
14289  453B
14290  453C
14291  453D
14292  453E
14293  453F
14294  4540
14295  4541
14296  4542
14297  4543
14298  4544
14299  4545
14300  4546
14301  4547
14302  4548
14303  4549
14304  454A
14305  454B
14306  454C
14307  454D
14308  454E
14309  454F
14310  4550
14311  4551
14312  4552
14313  4553
14314  4554
14315  4555
14316  4556
14317  4557
14318  4558
14319  4559
14320  455A
14321  455B
14322  455C
14323  455D
14324  455E
14325  455F
14326  4560
14327  4561
14328  4562
14329  4563
14330  4564
14331  4565
14332  4566
14333  4567
14334  4568
14335  4569
14336  456A
14337  456B
14338  456C
14339  456D
14340  456E
14341  456F
14342  4570
14343  4571
14344  4572
14345  4573
14346  4574
14347  4575
14348  4576
14349  4577
14350  4578
14351  4579
14352  457A
14353  457B
14354  457C
14355  457D
14356  457E
14357  457F
14358  4580
14359  4581
14360  4582
14361  4583
14362  4584
14363  4585
14364  4586
14365  4587
14366  4588
14367  4589
14368  458A
14369  458B
14370  458C
14371  458D
14372  458E
14373  458F
14374  4590
14375  4591
14376  4592
14377  4593
14378  4594
14379  4595
14380  4596
14381  4597
14382  4598
14383  4599
14384  459A
14385  459B
14386  459C
14387  459D
14388  459E
14389  459F
14390  45A0
14391  45A1
14392  45A2
14393  45A3
14394  45A4
14395  45A5
14396  45A6
14397  45A7
14398  45A8
14399  45A9
14400  45AA
14401  45AB
14402  45AC
14403  45AD
14404  45AE
14405  45AF
14406  45B0
14407  45B1
14408  45B2
14409  45B3
14410  45B4
14411  45B5
14412  45B6
14413  45B7
14414  45B8
14415  45B9
14416  45BA
14417  45BB
14418  45BC
14419  45BD
14420  45BE
14421  45BF
14422  45C0
14423  45C1
14424  45C2
14425  45C3
14426  45C4
14427  45C5
14428  45C6
14429  45C7
14430  45C8
14431  45C9
14432  45CA
14433  45CB
14434  45CC
14435  45CD
14436  45CE
14437  45CF
14438  45D0
14439  45D1
14440  45D2
14441  45D3
14442  45D4
14443  45D5
14444  45D6
14445  45D7
14446  45D8
14447  45D9
14448  45DA
14449  45DB
14450  45DC
14451  45DD
14452  45DE
14453  45DF
14454  45E0
14455  45E1
14456  45E2
14457  45E3
14458  45E4
14459  45E5
14460  45E6
14461  45E7
14462  45E8
14463  45E9
14464  45EA
14465  45EB
14466  45EC
14467  45ED
14468  45EE
14469  45EF
14470  45F0
14471  45F1
14472  45F2
14473  45F3
14474  45F4
14475  45F5
14476  45F6
14477  45F7
14478  45F8
14479  45F9
14480  45FA
14481  45FB
14482  45FC
14483  45FD
14484  45FE
14485  45FF
14486  4600
14487  4601
14488  4602
14489  4603
14490  4604
14491  4605
14492  4606
14493  4607
14494  4608
14495  4609
14496  460A
14497  460B
14498  460C
14499  460D
14500  460E
14501  460F
14502  4610
14503  4611
14504  4612
14505  4613
14506  4614
14507  4615
14508  4616
14509  4617
14510  4618
14511  4619
14512  461A
14513  461B
14514  461C
14515  461D
14516  461E
14517  461F
14518  4620
14519  4621
14520  4622
14521  4623
14522  4624
14523  4625
14524  4626
14525  4627
14526  4628
14527  4629
14528  462A
14529  462B
14530  462C
14531  462D
14532  462E
14533  462F
14534  4630
14535  4631
14536  4632
14537  4633
14538  4634
14539  4635
14540  4636
14541  4637
14542  4638
14543  4639
14544  463A
14545  463B
14546  463C
14547  463D
14548  463E
14549  463F
14550  4640
14551  4641
14552  4642
14553  4643
14554  4644
14555  4645
014556  000531        
014557  000532  var hFonts[54] ;
014558  000533  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
14559  2392
14560  2393
14561  2394
14562  2395
14563  2396
14564  2397
14565  2398
14566  2399
14567  239A
14568  239B
14569  239C
14570  239D
14571  239E
14572  239F
14573  23A0
14574  23A1
14575  23A2
14576  23A3
14577  23A4
14578  23A5
14579  23A6
14580  23A7
14581  23A8
14582  23A9
14583  23AA
14584  23AB
14585  23AC
14586  23AD
14587  23AE
14588  23AF
14589  23B0
14590  23B1
14591  23B2
14592  23B3
14593  23B4
14594  23B5
14595  23B6
14596  23B7
14597  23B8
14598  23B9
14599  23BA
14600  23BB
14601  23BC
14602  23BD
14603  23BE
14604  23BF
14605  23C0
14606  23C1
14607  23C2
14608  23C3
14609  23C4
14610  23C5
14611  23C6
14612  23C7
14613  23C8
14614  23C9
14615  23CA
14616  23CB
14617  23CC
14618  23CD
14619  23CE
14620  23CF
14621  23D0
14622  23D1
14623  23D2
14624  23D3
14625  23D4
14626  23D5
14627  23D6
14628  23D7
14629  23D8
14630  23D9
14631  23DA
14632  23DB
14633  23DC
14634  23DD
14635  23DE
14636  23DF
14637  23E0
14638  23E1
14639  23E2
14640  23E3
14641  23E4
14642  23E5
14643  23E6
14644  23E7
14645  23E8
14646  23E9
14647  23EA
14648  23EB
14649  23EC
14650  23ED
14651  23EE
14652  23EF
14653  23F0
14654  23F1
14655  23F2
14656  23F3
14657  23F4
14658  23F5
14659  23F6
14660  23F7
14661  23F8
14662  23F9
14663  23FA
14664  23FB
14665  23FC
14666  23FD
014667  000534  // Start P2.inc
014668  000535  var oObjects[MaxTotObjects+1] ;                 // address of objects
014669  000536  var CurrentForm ;
014670  000537  var TouchXpos, TouchYpos ;
014671  000538  var InputType, TouchState, CurInputData, pInputIndex ;
014672  000539  var comRX[40], cmd[CMDLenMAX] ;
014673  000540        
014674  000541  var InputCS, OutputCS ;
014675  000542        
014676  000543        
014677  000544        
014678  000545  func seroutCS(var op)
014679  000546      serout(op) ;
014680  000547      OutputCS ^= op ;
014681  000548  endfunc
014682  000549        
014683  000550  func nak0()
014684  000551      serout(NAK) ;
014685  000552      InputCS := 0 ;
014686  000553  endfunc
014687  000554        
014688  000555  func seroutOcs()
014689  000556      serout(OutputCS) ;
014690  000557      OutputCS := 0 ;
014691  000558  endfunc
014692  000559        
014693  000560  func SendReport(var id, var objt, var objn, var val)
014694  000561      seroutCS(id) ;
014695  000562      seroutCS(objt) ;
014696  000563      seroutCS(objn) ;
014697  000564      seroutCS(val >> 8) ; // first 8 bits
014698  000565      seroutCS(val) ;
014699  000566      seroutOcs() ;
014700  000567  endfunc
014701  000568        
014702  000569        
014703  000570  func ReadObject(var ObjectType, var ObjectIdx)
014704  000571      var j, k, Objects ;
014705  000572      Objects := *(oObjects+ObjectType) ;
014706  000573        
014707  000574      j := 2 + ObjectIdx * 2 + Objects ;
014708  000575       if (ObjectType == tForm)
014709  000576          k := CurrentForm ;
014710  000577      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
014711  000578          k := img_GetWord(hndl, *j, IMAGE_TAG2);
014712  000579      else if (ObjectType == tStrings)
014713  000580          k := stringsCV[ObjectIdx];
014714  000581          else
014715  000582          k := img_GetWord(hndl, *j, IMAGE_INDEX);
014716  000583          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
014717  000584                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
014718  000585      endif
014719  000586      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
014720  000587  endfunc
014721  000588        
014722  000589        
014723  000590  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
014724  000591      var i, j, k, Objects ;
014725  000592      ObjectType &= 0x3f ;
014726  000593      if (ObjectType == tForm)
014727  000594          ActivateForm(ObjectIdx) ;
014728  000595      else
014729  000596          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
014730  000597          i := *(Objects) ;
014731  000598          switch (ObjectType)
014732  000599              case tWinButton :
014733  000600                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
014734  000601                  break ;
014735  000602              case tUserButton :
014736  000603                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
014737  000604                  break ;
014738  000605              default : j := -1 ;
014739  000606          endswitch
014740  000607          if (j != -1)
014741  000608              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
014742  000609              NewVal := NewVal << 1 ;
014743  000610              if (OVF())      // button group index change
014744  000611                  if (*(j+InputData+Ofs_IPD_P1))
014745  000612                      k &= 1 ;    // mask off old group index for momentary
014746  000613                  else
014747  000614                      k &= 3 ;    // mask off old group index for toggle
014748  000615                  endif
014749  000616              else            // normal set
014750  000617                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
014751  000618                  k &= 0xfffc ;    // retain only group index for state set
014752  000619              endif
014753  000620              NewVal |= k ;
014754  000621          endif
014755  000622           if (ObjectType == tLeddigits)
014756  000623              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
014757  000624              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014758  000625          else if (ObjectType == tStrings)
014759  000626              PrintStrings(ObjectIdx, NewVal, 0);
014760  000627          else
014761  000628              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
014762  000629              img_Show(hndl, i) ; // will only display if form is current
014763  000630          endif
014764  000631      endif
014765  000632  endfunc
014766  000633        
014767  000634  func TurnOffButtons(var group)
014768  000635      var j, k, l;
014769  000636      for (j := 0; j < nInputs; j++)
014770  000637          k := j*IPDatasize ;
014771  000638          if (*(InputData+k+Ofs_IPD_P2) == group)
014772  000639              l := -1 ;
014773  000640               if (*(InputData+k) == tWinButton)
014774  000641                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014775  000642                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
014776  000643                  img_Show(hndl, l);      // only shows on current form
014777  000644              else if (*(InputData+k) == tUserButton)
014778  000645                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014779  000646                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
014780  000647                  img_Show(hndl, l);      // only shows on current form
014781  000648              endif
014782  000649          endif
014783  000650      next
014784  000651  endfunc
014785  000652        
014786  000653        
014787  000654  // WARNING, this code will crash if newval exceeds maximum displayable number
014788  000655  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
014789  000656      var i, j, k, l, lb, newval ;
014790  000657      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
014791  000658      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
014792  000659      i := -1 ;
014793  000660      j := *(typeptr) ;
014794  000661      repeat
014795  000662          typeptr += 2 ;
014796  000663          i++ ;
014797  000664          until (*(typeptr) == imgidx);
014798  000665      j := setptr + i*10 ;
014799  000666        
014800  000667      imgidx++ ;
014801  000668      l := 1 ;
014802  000669      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
014803  000670          l *= 10 ;
014804  000671      next
014805  000672      lb := *(j+Ofs_Digits_LeadingBlanks) ;
014806  000673      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
014807  000674          k := newval / l ;
014808  000675          newval -= k * l ;
014809  000676          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
014810  000677              if (k == 0)
014811  000678                  k := 10 ;
014812  000679              else
014813  000680                  lb := 0 ;
014814  000681              endif
014815  000682          endif
014816  000683          l /= 10 ;
014817  000684          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
014818  000685          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
014819  000686          img_Show(hndl, imgidx);
014820  000687      next
014821  000688  endfunc
014822  000689        
014823  000690        
014824  000691  func ActivateForm(var newform)
014825  000692      var i, j, *p ;
014826  000693        
014827  000694      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
014828  000695          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
014829  000696              if (img_GetWord(hndl, i, IMAGE_TAG))
014830  000697                  img_Disable(hndl,i) ;
014831  000698              endif
014832  000699          next
014833  000700      endif
014834  000701      CurrentForm := newform ;
014835  000702      // display newform image or clear to image color
014836  000703      if (FormBGcolors[CurrentForm] != ColorBGimage)
014837  000704          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
014838  000705          gfx_Cls() ;
014839  000706          DoGFXObjects() ;                                    // display GFX 'widgets'
014840  000707      endif
014841  000708        
014842  000709      // enable inputs
014843  000710      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
014844  000711          j := img_GetWord(hndl, i, IMAGE_TAG) ;
014845  000712          if (j)
014846  000713              j-- ;
014847  000714              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
014848  000715              //if (j != tKeyboard)
014849  000716              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
014850  000717                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
014851  000718              endif
014852  000719              img_Show(hndl,i) ; // show initialy, if required
014853  000720              if (j == tForm)
014854  000721                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
014855  000722              else if (j == tLeddigits)
014856  000723                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014857  000724              endif
014858  000725          endif
014859  000726      next
014860  000727      for (i := 0; i < nStrings; i++)
014861  000728          if (stringsCV[i] != -1)
014862  000729              WriteObject(tStrings, i, stringsCV[i]) ;
014863  000730          endif
014864  000731      next
014865  000732        
014866  000733  endfunc
014867  000734        
014868  000735  func UpdateObjects(var newval)
014869  000736      var IPidx, otherOBJ ;
014870  000737      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
014871  000738        
014872  000739          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
014873  000740              img_Show(hndl, *(pInputIndex));      // only shows on current form
014874  000741          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
014875  000742              if (*(CurInputData+Ofs_IPD_P1))
014876  000743                  newval &= 1;
014877  000744              else
014878  000745                  newval &= 3;
014879  000746              endif
014880  000747              if (newval > 1) newval := 1;
014881  000748          endif
014882  000749          IPidx := *(CurInputData+TouchState) ;
014883  000750          while(IPidx != 0)
014884  000751              otherOBJ := IPidx + InputData;
014885  000752              if (*(otherOBJ) == OT_REPORT)
014886  000753          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
014887  000754              else if (*(otherOBJ) == OT_MAGIC)
014888  000755                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
014889  000756                  IPidx(newval) ;
014890  000757              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
014891  000758                  if (*(otherOBJ) == OT_ACTIVATE)
014892  000759                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
014893  000760                      InputType := tForm ;
014894  000761                  else if (*(otherOBJ) == OT_SETCONST)
014895  000762                      newval := *(otherOBJ+Ofs_IPD_P3) ;
014896  000763                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
014897  000764                  else if (*(otherOBJ) == OT_SETANOTHER)
014898  000765                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
014899  000766                  else if (*(otherOBJ) == OT_PREVFRAME)
014900  000767                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
014901  000768                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
014902  000769                      endif
014903  000770                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
014904  000771                  else if (*(otherOBJ) == OT_NEXTFRAME)
014905  000772                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
014906  000773                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
014907  000774                      endif
014908  000775                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
014909  000776                  else if (*(otherOBJ) == OT_PREVSTRING)
014910  000777                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
014911  000778                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
014912  000779                      endif
014913  000780                  else if (*(otherOBJ) == OT_NEXTSTRING)
014914  000781                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
014915  000782                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
014916  000783                      endif
014917  000784                  endif
014918  000785              endif
014919  000786              IPidx := *(otherOBJ+TouchState) ;
014920  000787          wend
014921  000788      endif
014922  000789  endfunc
014923  000790        
014924  000791  // End P2.inc
014925  000792  func DoGFXObjects()
014926  000793  endfunc
014927  000794        
014928  000795  // Start P3.inc
014929  000796  func main()
014930  000797      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
014931  000798        
014932  000799      putstr("Mounting...\n");
014933  000800      if (!(file_Mount()))
014934  000801          while(!(file_Mount()))
014935  000802              putstr("Drive not mounted...");
014936  000803              pause(200);
014937  000804              gfx_Cls();
014938  000805              pause(200);
014939  000806          wend
014940  000807      endif
014941  000808  //    gfx_MoveTo(0, 0);
014942  000809  //    print(mem_Heap()," ") ;
014943  000810  //    gfx_TransparentColour(0x0020);
014944  000811  //    gfx_Transparency(ON);
014945  000812        
014946  000813      gfx_ScreenMode(LANDSCAPE) ;
014947  000814        
014948  000815      // open image control
014949  000816      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
014950  000817        
014951  000818      // init 'constants'
014952  000819  // End P3.inc
014953  000820        
014954  000821      oObjects[tDipSwitch] := oDipSwitchs ;
014955  000822      oObjects[tKnob] := oKnobs ;
014956  000823      oObjects[tRockerSwitch] := oRockerSwitchs ;
014957  000824      oObjects[tRotarySwitch] := oRotarySwitchs ;
014958  000825      oObjects[tGSlider] := oGSliders ;
014959  000826      oObjects[tTrackbar] := oTrackbars ;
014960  000827      oObjects[tWinButton] := oWinButtons ;
014961  000828      oObjects[tAngularmeter] := oAngularmeters ;
014962  000829      oObjects[tCoolgauge] := oCoolgauges ;
014963  000830      oObjects[tCustomdigits] := oCustomdigitss ;
014964  000831      oObjects[tForm] := oForms ;
014965  000832      oObjects[tGauge] := oGauges ;
014966  000833      oObjects[tImage] := oImages ;
014967  000834      oObjects[tKeyboard] := oKeyboards ;
014968  000835      oObjects[tLed] := oLeds ;
014969  000836      oObjects[tLeddigits] := oLeddigitss ;
014970  000837      oObjects[tMeter] := oMeters ;
014971  000838      oObjects[tStrings] := oStringss ;
014972  000839      oObjects[tThermometer] := oThermometers ;
014973  000840      oObjects[tUserled] := oUserleds ;
014974  000841      oObjects[tVideo] := oVideos ;
014975  000842      oObjects[tStaticText] := oStaticTexts ;
014976  000843      oObjects[tSounds] := oSoundss ;
014977  000844      oObjects[tTimer] := oTimers ;
014978  000845      oObjects[tSpectrum] := oSpectrums ;
014979  000846      oObjects[tTank] := oTanks ;
014980  000847      oObjects[tUserImages] := oUserImagess ;
014981  000848      oObjects[tPinOutput] := oPinOutputs ;
014982  000849      oObjects[tPinInput] := oPinInputs ;
014983  000850      oObjects[t4Dbutton] := o4Dbuttons ;
014984  000851      oObjects[tAniButton] := oAniButtons ;
014985  000852      oObjects[tColorPicker] := oColorPickers ;
014986  000853      oObjects[tUserButton] := oUserButtons ;
014987  000854      hFonts[0] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
014988  000855      hFonts[1] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
014989  000856      hFonts[2] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
014990  000857      hFonts[3] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
014991  000858      hFonts[4] := FONT3 ;
014992  000859      hFonts[5] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
014993  000860      hFonts[6] := FONT3 ;
014994  000861      hFonts[10] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
014995  000862      hFonts[11] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
014996  000863      hFonts[12] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
014997  000864      hFonts[16] := FONT3 ;
014998  000865      hFonts[17] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
014999  000866      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015000  000867      hFonts[37] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015001  000868      hFonts[50] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015002  000869      hFonts[51] := FONT3 ;
015003  000870      hFonts[52] := FONT3 ;
015004  000871      hFonts[7] := hFonts[37] ;
015005  000872      hFonts[8] := hFonts[37] ;
015006  000873      hFonts[9] := hFonts[0] ;
015007  000874      hFonts[29] := hFonts[11] ;
015008  000875      hFonts[32] := hFonts[31] ;
015009  000876      hFonts[34] := hFonts[0] ;
015010  000877      hFonts[36] := hFonts[0] ;
015011  000878      hFonts[38] := hFonts[37] ;
015012  000879      hFonts[39] := hFonts[37] ;
015013  000880      hFonts[40] := hFonts[0] ;
015014  000881      hFonts[41] := hFonts[0] ;
015015  000882      hFonts[42] := hFonts[0] ;
015016  000883      hFonts[43] := hFonts[37] ;
015017  000884      hFonts[44] := hFonts[37] ;
015018  000885      hFonts[45] := hFonts[37] ;
015019  000886      hFonts[53] := hFonts[50] ;
015020  000887      WriteObject(tUserButton, 155, 1) ;
015021  000888  // Start P4.inc
015022  000889      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015023  000890      // init comms
015024  000891      com_Init(comRX,CMDLenMAX,0);
015025  000892      com_SetBaud(COM0,19886);
015026  000893      com_TXbuffer(comTX, 100, 0);
015027  000894      snd_BufSize(2) ;
015028  000895      // tag 'real' objects
015029  000896      for (i := 0; i <= MaxTotObjects; i++)
015030  000897          if (   (i != tSounds)
015031  000898              && (i != tTimer)
015032  000899              && (i != tPinOutput)
015033  000900              && (i != tPinInput) )
015034  000901              TouchXpos := oObjects[i] ;
015035  000902              TouchYpos := *(TouchXpos) ;
015036  000903              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015037  000904                  oldn := *(TouchXpos+ImageTouched*2) ;
015038  000905                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015039  000906                  if (oldn != -1)
015040  000907                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015041  000908                      img_Disable(hndl, oldn) ;
015042  000909                  endif
015043  000910              next
015044  000911          endif
015045  000912      next
015046  000913        
015047  000914      // display initial form
015048  000915      CurrentForm := -1 ;
015049  000916      ActivateForm(0) ; // need to change this according to first actual form
015050  000917        
015051  000918  // End P4.inc
015052  000919  // Start P5.inc
015053  000920      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015054  000921      oldn := -1 ;
015055  000922      repeat
015056  000923        
015057  000924          // check comms for command, how to NAK invalid command
015058  000925          if (com_Count() != 0)
015059  000926              i := serin() ;
015060  000927              InputCS ^= i ;               // update checksum
015061  000928              if (   (cmdi > 2)
015062  000929                  && (cmd[0] == WRITE_STRU) )
015063  000930                  j := (cmdi-1) >> 1 + 2 ;
015064  000931                  if (j == CMDLenMAX)    // max length exceeded
015065  000932                      nak0() ;
015066  000933                      cmdi := -1 ;
015067  000934                  else if (cmdi & 1)
015068  000935                      cmd[j] := i ;
015069  000936                      if (cmd[2] == 0)    // if string complete
015070  000937                          if (InputCS)
015071  000938                              nak0() ;
015072  000939                          else
015073  000940                              if (cmd[0] == WRITE_STRU)
015074  000941                              cmd[j] := 0 ;                     // terminate it
015075  000942                              PrintStrings(cmd[1], &cmd[3], 1) ;
015076  000943                              serout(ACK) ;
015077  000944                              else
015078  000945                              endif
015079  000946                          endif
015080  000947                          cmdi := -1 ;
015081  000948                      endif
015082  000949                  else
015083  000950                      cmd[j] := cmd[j] << 8 + i ;
015084  000951                      cmd[2]-- ;          // dec length
015085  000952                  endif
015086  000953                  cmdi++ ;
015087  000954              else // not unicode string
015088  000955                  cmd[cmdi++] := i ;
015089  000956                   if (cmd[0] == WRITE_STR)                  // Ansi String
015090  000957                      if (cmdi == CMDLenMAX)      // max length exceeded
015091  000958                          nak0() ;
015092  000959                          cmdi := 0 ;
015093  000960                      else if (cmdi > 2)
015094  000961                          if (cmd[2] == -1)
015095  000962                              if (InputCS)
015096  000963                                  nak0() ;
015097  000964                              else
015098  000965                                  if (cmd[0] == WRITE_STR)
015099  000966                                  cmd[cmdi-1] := 0 ;                     // terminate it
015100  000967                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015101  000968                                  serout(ACK) ;
015102  000969                                  else
015103  000970                                  endif
015104  000971                              endif
015105  000972                              cmdi := 0 ;
015106  000973                          else
015107  000974                              cmd[2]-- ;          // dec length
015108  000975                          endif
015109  000976                      endif
015110  000977                  else if (   (cmd[0] == READ_OBJ)
015111  000978                           && (cmdi == 4)         )
015112  000979                      if (InputCS)
015113  000980                          nak0() ;
015114  000981                      else
015115  000982                          ReadObject(cmd[1], cmd[2]) ;
015116  000983                      endif
015117  000984                      cmdi := 0 ;
015118  000985                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015119  000986                           && (cmdi == 6)          )
015120  000987                      if (InputCS)
015121  000988                          nak0() ;
015122  000989                      else
015123  000990                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015124  000991                          serout(ACK) ;
015125  000992                      endif
015126  000993                      cmdi := 0 ;
015127  000994                  else if (   (cmd[0] == WRITE_CONTRAST)
015128  000995                           && (cmdi == 3)         )
015129  000996                      if (InputCS)
015130  000997                          nak0() ;
015131  000998                      else
015132  000999                          gfx_Contrast(cmd[1]) ;
015133  001000                          serout(ACK) ;
015134  001001                      endif
015135  001002                      cmdi := 0 ;
015136  001003                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
015137  001004                      nak0() ;
015138  001005                      cmdi := 0 ;
015139  001006                  endif
015140  001007              endif   // not unicode string
015141  001008          endif   // a character is available
015142  001009        
015143  001010        
015144  001011      // touch code processing
015145  001012        
015146  001013          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
015147  001014          ImageTouched := img_Touched(hndl,-1) ;
015148  001015          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
015149  001016              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
015150  001017                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
015151  001018              endif
015152  001019              if (TouchStatus != TOUCH_RELEASED)        // if not released
015153  001020                  if (oldn != -1)
015154  001021                      ImageTouched := oldn ;
015155  001022                  else
015156  001023                      if (oldn != ImageTouched)
015157  001024                  oldn := ImageTouched ;
015158  001025                          TouchStatus := TOUCH_PRESSED ;
015159  001026                      endif
015160  001027                  endif
015161  001028                  TouchXpos  := touch_Get(TOUCH_GETX);
015162  001029                  TouchYpos  := touch_Get(TOUCH_GETY);
015163  001030                  TouchState := Ofs_IPD_DOWN ;
015164  001031              else
015165  001032                  ImageTouched := oldn ;                     // simulate release of what we touched
015166  001033                  oldn := -1 ;                    // prevent double release
015167  001034                  TouchState := Ofs_IPD_RELEASE ;
015168  001035              endif
015169  001036              if (ImageTouched != -1)
015170  001037                          CurInputData := InputControls[ImageTouched] + InputData;
015171  001038                          InputType := *(CurInputData) ;
015172  001039                          i := InputType ;
015173  001040                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
015174  001041                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
015175  001042              endif
015176  001043          endif
015177  001044   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
015178  001045        
015179  001046          sys_EventsResume() ;
015180  001047      forever
015181  001048        
015182  001049  cDipswitch:
015183  001050        
015184  001051  cKnob:
015185  001052        
015186  001053  cRockerswitch:
015187  001054        
015188  001055  cRotaryswitch:
015189  001056        
015190  001057  cSlider:
015191  001058  cTrackbar:
015192  001059        
015193  001060  c4DButton:
015194  001061  cUserButton:
015195  001062      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015196  001063      goto gbutton ;
015197  001064  cWinbutton:
015198  001065      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015199  001066  gbutton:
015200  001067      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
015201  001068      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
015202  001069          if (TouchStatus == TOUCH_RELEASED)
015203  001070              i &= 0xfffe ;
015204  001071              TouchState == Ofs_IPD_DOWN ;
015205  001072          else
015206  001073              i |= 1 ;
015207  001074              TouchState == Ofs_IPD_RELEASE ;
015208  001075          endif
015209  001076      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
015210  001077          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
015211  001078              if ((i & 3) == 3)
015212  001079                  i &= 0xfffc ;
015213  001080              else
015214  001081                  i++ ;
015215  001082              endif
015216  001083          else
015217  001084              i |= 1 ;                                      // make down regardless of current state
015218  001085          endif
015219  001086      else                        // group action, up all other buttons on touch press, reports 0 for button down
015220  001087          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
015221  001088              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
015222  001089          endif
015223  001090          i := (i & 0xfffc) | 2 ;
015224  001091      endif
015225  001092        
015226  001093      UpdateObjects(i) ;
015227  001094  endsub ;
015228  001095        
015229  001096  cAniButton:
015230  001097        
015231  001098  cColorPicker:
015232  001099        
015233  001100  endfunc
015234  001101  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 756 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 692 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       12110  0x00002f4e (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 90)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 123)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 6)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       11478  0x00002cd6 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 39)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 15)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        8867  0x000022a3FormBGcolors                        8867  0x000022a3 (mem) word[49] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         105  0x00000069FormEndIndex                         105  0x00000069 (mem) word[49] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[49] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 150)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               91  0x0000005b (const ??? 0)  (usage 3)
iForm11                               77  0x0000004d (const ??? 0)  (usage 3)
iForm12                               46  0x0000002e (const ??? 0)  (usage 3)
iForm14                               47  0x0000002f (const ??? 0)  (usage 3)
iForm16                              154  0x0000009a (const ??? 0)  (usage 3)
iForm18                              159  0x0000009f (const ??? 0)  (usage 3)
iForm19                               54  0x00000036 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               57  0x00000039 (const ??? 0)  (usage 3)
iForm21                               61  0x0000003d (const ??? 0)  (usage 3)
iForm22                              207  0x000000cf (const ??? 0)  (usage 3)
iForm23                               65  0x00000041 (const ??? 0)  (usage 3)
iForm24                               69  0x00000045 (const ??? 0)  (usage 3)
iForm26                               73  0x00000049 (const ??? 0)  (usage 3)
iForm27                               79  0x0000004f (const ??? 0)  (usage 3)
iForm28                              101  0x00000065 (const ??? 0)  (usage 3)
iForm29                              108  0x0000006c (const ??? 0)  (usage 3)
iForm30                              117  0x00000075 (const ??? 0)  (usage 3)
iForm31                              121  0x00000079 (const ??? 0)  (usage 3)
iForm32                              125  0x0000007d (const ??? 0)  (usage 3)
iForm33                              129  0x00000081 (const ??? 0)  (usage 3)
iForm34                              141  0x0000008d (const ??? 0)  (usage 3)
iForm35                              145  0x00000091 (const ??? 0)  (usage 3)
iForm36                              211  0x000000d3 (const ??? 0)  (usage 3)
iForm37                              213  0x000000d5 (const ??? 0)  (usage 3)
iForm38                              161  0x000000a1 (const ??? 0)  (usage 3)
iForm39                              216  0x000000d8 (const ??? 0)  (usage 3)
iForm4                                 9  0x00000009 (const ??? 0)  (usage 3)
iForm40                              172  0x000000ac (const ??? 0)  (usage 3)
iForm41                              175  0x000000af (const ??? 0)  (usage 3)
iForm42                              220  0x000000dc (const ??? 0)  (usage 3)
iForm45                              224  0x000000e0 (const ??? 0)  (usage 3)
iForm46                              228  0x000000e4 (const ??? 0)  (usage 3)
iForm5                                14  0x0000000e (const ??? 0)  (usage 3)
iForm6                                17  0x00000011 (const ??? 0)  (usage 3)
iForm7                               149  0x00000095 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        203  0x000000cbInputControls                        203  0x000000cb (mem) word[242] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            687  0x000002afInputData                            687  0x000002af (mem) word[3300] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          70  0x00000046 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext10                         51  0x00000033 (const ??? 0)  (usage 3)
iStatictext11                        178  0x000000b2 (const ??? 0)  (usage 3)
iStatictext12                        190  0x000000be (const ??? 0)  (usage 3)
iStatictext13                        174  0x000000ae (const ??? 0)  (usage 3)
iStatictext14                        235  0x000000eb (const ??? 0)  (usage 3)
iStatictext15                        192  0x000000c0 (const ??? 0)  (usage 3)
iStatictext16                        198  0x000000c6 (const ??? 0)  (usage 3)
iStatictext17                        196  0x000000c4 (const ??? 0)  (usage 3)
iStatictext18                        202  0x000000ca (const ??? 0)  (usage 3)
iStatictext19                         53  0x00000035 (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext20                        204  0x000000cc (const ??? 0)  (usage 3)
iStatictext21                        205  0x000000cd (const ??? 0)  (usage 3)
iStatictext22                        197  0x000000c5 (const ??? 0)  (usage 3)
iStatictext23                        203  0x000000cb (const ??? 0)  (usage 3)
iStatictext24                        232  0x000000e8 (const ??? 0)  (usage 3)
iStatictext3                          76  0x0000004c (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext5                         157  0x0000009d (const ??? 0)  (usage 3)
iStatictext6                         173  0x000000ad (const ??? 0)  (usage 3)
iStatictext7                         152  0x00000098 (const ??? 0)  (usage 3)
iStatictext8                          63  0x0000003f (const ??? 0)  (usage 3)
iStatictext9                          52  0x00000034 (const ??? 0)  (usage 3)
iStrings0                           7287  0x00001c77iStrings0                           7287  0x00001c77 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7313  0x00001c91iStrings1                           7313  0x00001c91 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          7547  0x00001d7biStrings10                          7547  0x00001d7b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          7573  0x00001d95iStrings11                          7573  0x00001d95 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7599  0x00001dafiStrings12                          7599  0x00001daf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          7625  0x00001dc9iStrings16                          7625  0x00001dc9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          7651  0x00001de3iStrings17                          7651  0x00001de3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7339  0x00001cabiStrings2                           7339  0x00001cab (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          7677  0x00001dfdiStrings29                          7677  0x00001dfd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7365  0x00001cc5iStrings3                           7365  0x00001cc5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          7703  0x00001e17iStrings31                          7703  0x00001e17 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          7729  0x00001e31iStrings32                          7729  0x00001e31 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          7755  0x00001e4biStrings34                          7755  0x00001e4b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          7781  0x00001e65iStrings36                          7781  0x00001e65 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          7807  0x00001e7fiStrings37                          7807  0x00001e7f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          7833  0x00001e99iStrings38                          7833  0x00001e99 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          7859  0x00001eb3iStrings39                          7859  0x00001eb3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7391  0x00001cdfiStrings4                           7391  0x00001cdf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          7885  0x00001ecdiStrings40                          7885  0x00001ecd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          7911  0x00001ee7iStrings41                          7911  0x00001ee7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          7937  0x00001f01iStrings42                          7937  0x00001f01 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          7963  0x00001f1biStrings43                          7963  0x00001f1b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          7989  0x00001f35iStrings44                          7989  0x00001f35 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8015  0x00001f4fiStrings45                          8015  0x00001f4f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           7417  0x00001cf9iStrings5                           7417  0x00001cf9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8041  0x00001f69iStrings50                          8041  0x00001f69 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8067  0x00001f83iStrings51                          8067  0x00001f83 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8093  0x00001f9diStrings52                          8093  0x00001f9d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          8119  0x00001fb7iStrings53                          8119  0x00001fb7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7443  0x00001d13iStrings6                           7443  0x00001d13 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7469  0x00001d2diStrings7                           7469  0x00001d2d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7495  0x00001d47iStrings8                           7495  0x00001d47 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7521  0x00001d61iStrings9                           7521  0x00001d61 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton100                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton101                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton102                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton103                       131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton104                       132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton105                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton106                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton107                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton108                       136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton109                       137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton11                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton110                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton111                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton112                       142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton113                       143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton114                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton115                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton116                       147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton117                       148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton118                        68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton119                       241  0x000000f1 (const ??? 0)  (usage 3)
iUserbutton12                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton120                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton121                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton122                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton123                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton124                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton125                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton126                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton13                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton151                       183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton152                       184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton153                       185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton154                       186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton155                       187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton156                       188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton157                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton158                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton159                        21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton160                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton17                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton20                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton21                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton22                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton23                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton24                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton25                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton26                        140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton27                        193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton28                        194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton29                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                        199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton31                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton32                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton33                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton34                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton35                        201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton36                        206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton37                        212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton38                        215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton39                        209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                        218  0x000000da (const ??? 0)  (usage 3)
iUserbutton41                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton42                        222  0x000000de (const ??? 0)  (usage 3)
iUserbutton43                        236  0x000000ec (const ??? 0)  (usage 3)
iUserbutton44                        226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton45                        160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton46                        230  0x000000e6 (const ??? 0)  (usage 3)
iUserbutton47                        237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton48                        238  0x000000ee (const ??? 0)  (usage 3)
iUserbutton49                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton51                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton52                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton53                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton54                        231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton55                        219  0x000000db (const ??? 0)  (usage 3)
iUserbutton56                        223  0x000000df (const ??? 0)  (usage 3)
iUserbutton57                        227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton58                        234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton59                        210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton6                          10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton60                        239  0x000000ef (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton65                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton66                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton67                        176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton68                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton69                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton7                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton70                        164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton71                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton72                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton73                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton74                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton75                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton76                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton77                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton78                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton79                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton8                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton80                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton81                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton82                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton83                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton84                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton85                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton86                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton87                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton88                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton89                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton9                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton90                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton91                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton92                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton93                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton94                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton95                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton96                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton97                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton98                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton99                         87  0x00000057 (const ??? 0)  (usage 3)
iUserimages0                         105  0x00000069 (const ??? 0)  (usage 3)
iUserimages1                          56  0x00000038 (const ??? 0)  (usage 3)
iUserimages10                         75  0x0000004b (const ??? 0)  (usage 3)
iUserimages11                        177  0x000000b1 (const ??? 0)  (usage 3)
iUserimages12                        156  0x0000009c (const ??? 0)  (usage 3)
iUserimages13                         64  0x00000040 (const ??? 0)  (usage 3)
iUserimages14                        106  0x0000006a (const ??? 0)  (usage 3)
iUserimages15                        107  0x0000006b (const ??? 0)  (usage 3)
iUserimages16                         72  0x00000048 (const ??? 0)  (usage 3)
iUserimages17                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserimages18                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserimages19                        208  0x000000d0 (const ??? 0)  (usage 3)
iUserimages2                          78  0x0000004e (const ??? 0)  (usage 3)
iUserimages20                        214  0x000000d6 (const ??? 0)  (usage 3)
iUserimages21                        217  0x000000d9 (const ??? 0)  (usage 3)
iUserimages22                        221  0x000000dd (const ??? 0)  (usage 3)
iUserimages23                        225  0x000000e1 (const ??? 0)  (usage 3)
iUserimages24                        229  0x000000e5 (const ??? 0)  (usage 3)
iUserimages25                        233  0x000000e9 (const ??? 0)  (usage 3)
iUserimages3                         118  0x00000076 (const ??? 0)  (usage 3)
iUserimages4                         123  0x0000007b (const ??? 0)  (usage 3)
iUserimages5                         127  0x0000007f (const ??? 0)  (usage 3)
iUserimages6                         150  0x00000096 (const ??? 0)  (usage 3)
iUserimages7                         120  0x00000078 (const ??? 0)  (usage 3)
iUserimages8                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages9                         128  0x00000080 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 8965  0x00002305kKeyboardKeystrokes                 8965  0x00002305 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   12456  0x000030a8 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                9531  0x0000253b (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               13578  0x0000350a (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              300  0x0000012c (const dword)  (usage 3)
nObjects                             242  0x000000f2 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          8531  0x00002153o4Dbuttons                          8531  0x00002153 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      8177  0x00001ff1oAngularmeters                      8177  0x00001ff1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         8533  0x00002155oAniButtons                         8533  0x00002155 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       8535  0x00002157oColorPickers                       8535  0x00002157 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         8179  0x00001ff3oCoolgauges                         8179  0x00001ff3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      8181  0x00001ff5oCustomdigitss                      8181  0x00001ff5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         8145  0x00001fd1oDipSwitchs                         8145  0x00001fd1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              8183  0x00001ff7oForms                              8183  0x00001ff7 (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             8283  0x0000205boGauges                             8283  0x0000205b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           8153  0x00001fd9oGSliders                           8153  0x00001fd9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             8285  0x0000205doImages                             8285  0x0000205d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          8287  0x0000205foKeyboards                          8287  0x0000205f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              8147  0x00001fd3oKnobs                              8147  0x00001fd3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         8969  0x00002309oLedDigitsn                         8969  0x00002309 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         8291  0x00002063oLeddigitss                         8291  0x00002063 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               8289  0x00002061oLeds                               8289  0x00002061 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             8299  0x0000206boMeters                             8299  0x0000206b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          8529  0x00002151oPinInputs                          8529  0x00002151 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         8865  0x000022a1oPinOutputs                         8865  0x000022a1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      8149  0x00001fd5oRockerSwitchs                      8149  0x00001fd5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      8151  0x00001fd7oRotarySwitchs                      8151  0x00001fd7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             8471  0x00002117oScopes                             8471  0x00002117 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            8863  0x0000229foSoundss                            8863  0x0000229f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          8469  0x00002115oSpectrums                          8469  0x00002115 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        8417  0x000020e1oStaticTexts                        8417  0x000020e1 (mem) word[26] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           8301  0x0000206doStringss                           8301  0x0000206d (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 87)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 381)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              8473  0x00002119oTanks                              8473  0x00002119 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       8411  0x000020dboThermometers                       8411  0x000020db (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             8861  0x0000229doTimers                             8861  0x0000229d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          8155  0x00001fdboTrackbars                          8155  0x00001fdb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        8537  0x00002159oUserButtons                        8537  0x00002159 (mem) word[162] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        8475  0x0000211boUserImagess                        8475  0x0000211b (mem) word[27] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           8413  0x000020ddoUserleds                           8413  0x000020dd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             8415  0x000020dfoVideos                             8415  0x000020df (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         8157  0x00001fddoWinButtons                         8157  0x00001fdd (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       13613  0x0000352d (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         13325  0x0000340d (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   8967  0x00002307rKeyboardRoutines                   8967  0x00002307 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13511  0x000034c7 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           13594  0x0000351a (User func) args[1] r=0  (usage 15)
seroutOcs                          13561  0x000034f9 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          5  0x00000005 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Size                          0  0x00000000 (const dword)  (not used)
Strings13StartH                        0  0x00000000 (const dword)  (not used)
Strings13StartL                        0  0x00000000 (const dword)  (not used)
Strings14Size                          0  0x00000000 (const dword)  (not used)
Strings14StartH                        0  0x00000000 (const dword)  (not used)
Strings14StartL                        0  0x00000000 (const dword)  (not used)
Strings15Size                          0  0x00000000 (const dword)  (not used)
Strings15StartH                        0  0x00000000 (const dword)  (not used)
Strings15StartL                        0  0x00000000 (const dword)  (not used)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings17Count                         0  0x00000000 (const dword)  (not used)
Strings17Size                          1  0x00000001 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Size                          0  0x00000000 (const dword)  (not used)
Strings19StartH                        0  0x00000000 (const dword)  (not used)
Strings19StartL                        0  0x00000000 (const dword)  (not used)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Size                          0  0x00000000 (const dword)  (not used)
Strings24StartH                        0  0x00000000 (const dword)  (not used)
Strings24StartL                        0  0x00000000 (const dword)  (not used)
Strings25Size                          0  0x00000000 (const dword)  (not used)
Strings25StartH                        0  0x00000000 (const dword)  (not used)
Strings25StartL                        0  0x00000000 (const dword)  (not used)
Strings26Size                          0  0x00000000 (const dword)  (not used)
Strings26StartH                        0  0x00000000 (const dword)  (not used)
Strings26StartL                        0  0x00000000 (const dword)  (not used)
Strings27Size                          0  0x00000000 (const dword)  (not used)
Strings27StartH                        0  0x00000000 (const dword)  (not used)
Strings27StartL                        0  0x00000000 (const dword)  (not used)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Size                          0  0x00000000 (const dword)  (not used)
Strings30StartH                        0  0x00000000 (const dword)  (not used)
Strings30StartL                        0  0x00000000 (const dword)  (not used)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings46Size                          0  0x00000000 (const dword)  (not used)
Strings46StartH                        0  0x00000000 (const dword)  (not used)
Strings46StartL                        0  0x00000000 (const dword)  (not used)
Strings47Size                          0  0x00000000 (const dword)  (not used)
Strings47StartH                        0  0x00000000 (const dword)  (not used)
Strings47StartL                        0  0x00000000 (const dword)  (not used)
Strings48Size                          0  0x00000000 (const dword)  (not used)
Strings48StartH                        0  0x00000000 (const dword)  (not used)
Strings48StartL                        0  0x00000000 (const dword)  (not used)
Strings49Size                          0  0x00000000 (const dword)  (not used)
Strings49StartH                        0  0x00000000 (const dword)  (not used)
Strings49StartL                        0  0x00000000 (const dword)  (not used)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         67  0x00000043 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     15360  0x00003c00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      6656  0x00001a00 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      7168  0x00001c00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     12770  0x000031e2 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 429)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      11479  0x00002cd7 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 96)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        12970  0x000032aa (User func) args[3] r=0  (usage 27)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
