file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 30/06/2015 11:34:33
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 30/06/2015 11:34:20
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    0
005098  000005  #constant  Strings1Count    0
005099  000006  #constant  Strings1Size     1
005100  000006  #constant  Strings1Size     1
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings20Count    1
005106  000009  #constant  Strings20Count    1
005107  000010  #constant  Strings20Size     35
005108  000010  #constant  Strings20Size     35
005109  000011  #constant  Strings4Count    1
005110  000011  #constant  Strings4Count    1
005111  000012  #constant  Strings4Size     25
005112  000012  #constant  Strings4Size     25
005113  000013  #constant  Strings6Count    1
005114  000013  #constant  Strings6Count    1
005115  000014  #constant  Strings6Size     31
005116  000014  #constant  Strings6Size     31
005117  000015  #constant  Strings2Count    0
005118  000015  #constant  Strings2Count    0
005119  000016  #constant  Strings2Size     1
005120  000016  #constant  Strings2Size     1
005121  000017  #constant  Strings0Count    1
005122  000017  #constant  Strings0Count    1
005123  000018  #constant  Strings0Size     7
005124  000018  #constant  Strings0Size     7
005125  000019  #constant  Strings9Count    0
005126  000019  #constant  Strings9Count    0
005127  000020  #constant  Strings9Size     1
005128  000020  #constant  Strings9Size     1
005129  000021  #constant  Strings34Count    0
005130  000021  #constant  Strings34Count    0
005131  000022  #constant  Strings34Size     1
005132  000022  #constant  Strings34Size     1
005133  000023  #constant  Strings36Count    0
005134  000023  #constant  Strings36Count    0
005135  000024  #constant  Strings36Size     1
005136  000024  #constant  Strings36Size     1
005137  000025  #constant  Strings37Count    0
005138  000025  #constant  Strings37Count    0
005139  000026  #constant  Strings37Size     1
005140  000026  #constant  Strings37Size     1
005141  000027  #constant  Strings12Count    1
005142  000027  #constant  Strings12Count    1
005143  000028  #constant  Strings12Size     15
005144  000028  #constant  Strings12Size     15
005145  000029  #constant  Strings14Count    1
005146  000029  #constant  Strings14Count    1
005147  000030  #constant  Strings14Size     23
005148  000030  #constant  Strings14Size     23
005149  000031  #constant  Strings16Count    0
005150  000031  #constant  Strings16Count    0
005151  000032  #constant  Strings16Size     1
005152  000032  #constant  Strings16Size     1
005153  000033  #constant  Strings15Count    1
005154  000033  #constant  Strings15Count    1
005155  000034  #constant  Strings15Size     24
005156  000034  #constant  Strings15Size     24
005157  000035  #constant  Strings21Count    1
005158  000035  #constant  Strings21Count    1
005159  000036  #constant  Strings21Size     35
005160  000036  #constant  Strings21Size     35
005161  000037  #constant  Strings11Count    1
005162  000037  #constant  Strings11Count    1
005163  000038  #constant  Strings11Size     33
005164  000038  #constant  Strings11Size     33
005165  000039  #constant  Strings22Count    1
005166  000039  #constant  Strings22Count    1
005167  000040  #constant  Strings22Size     20
005168  000040  #constant  Strings22Size     20
005169  000041  #constant  Strings23Count    1
005170  000041  #constant  Strings23Count    1
005171  000042  #constant  Strings23Size     17
005172  000042  #constant  Strings23Size     17
005173  000043  #constant  Strings24Count    1
005174  000043  #constant  Strings24Count    1
005175  000044  #constant  Strings24Size     26
005176  000044  #constant  Strings24Size     26
005177  000045  #constant  Strings25Count    1
005178  000045  #constant  Strings25Count    1
005179  000046  #constant  Strings25Size     10
005180  000046  #constant  Strings25Size     10
005181  000047  #constant  Strings26Count    1
005182  000047  #constant  Strings26Count    1
005183  000048  #constant  Strings26Size     10
005184  000048  #constant  Strings26Size     10
005185  000049  #constant  Strings27Count    1
005186  000049  #constant  Strings27Count    1
005187  000050  #constant  Strings27Size     11
005188  000050  #constant  Strings27Size     11
005189  000051  #constant  Strings5Count    1
005190  000051  #constant  Strings5Count    1
005191  000052  #constant  Strings5Size     37
005192  000052  #constant  Strings5Size     37
005193  000053  #constant  Strings28Count    1
005194  000053  #constant  Strings28Count    1
005195  000054  #constant  Strings28Size     40
005196  000054  #constant  Strings28Size     40
005197  000055  #constant  Strings35Count    1
005198  000055  #constant  Strings35Count    1
005199  000056  #constant  Strings35Size     36
005200  000056  #constant  Strings35Size     36
005201  000057  #constant  Strings33Count    1
005202  000057  #constant  Strings33Count    1
005203  000058  #constant  Strings33Size     33
005204  000058  #constant  Strings33Size     33
005205  000059  #constant  Strings10Count    1
005206  000059  #constant  Strings10Count    1
005207  000060  #constant  Strings10Size     15
005208  000060  #constant  Strings10Size     15
005209  000061  #constant  Strings7Count    0
005210  000061  #constant  Strings7Count    0
005211  000062  #constant  Strings7Size     1
005212  000062  #constant  Strings7Size     1
005213  000063  #constant  Strings8Count    0
005214  000063  #constant  Strings8Count    0
005215  000064  #constant  Strings8Size     1
005216  000064  #constant  Strings8Size     1
005217  000065  #constant  Strings38Count    0
005218  000065  #constant  Strings38Count    0
005219  000066  #constant  Strings38Size     1
005220  000066  #constant  Strings38Size     1
005221  000067  #constant  Strings39Count    0
005222  000067  #constant  Strings39Count    0
005223  000068  #constant  Strings39Size     1
005224  000068  #constant  Strings39Size     1
005225  000069  #constant  Strings40Count    1
005226  000069  #constant  Strings40Count    1
005227  000070  #constant  Strings40Size     7
005228  000070  #constant  Strings40Size     7
005229  000071  #constant  Strings41Count    1
005230  000071  #constant  Strings41Count    1
005231  000072  #constant  Strings41Size     7
005232  000072  #constant  Strings41Size     7
005233  000073  #constant  Strings42Count    1
005234  000073  #constant  Strings42Count    1
005235  000074  #constant  Strings42Size     7
005236  000074  #constant  Strings42Size     7
005237  000075  #constant  Strings43Count    0
005238  000075  #constant  Strings43Count    0
005239  000076  #constant  Strings43Size     1
005240  000076  #constant  Strings43Size     1
005241  000077  #constant  Strings44Count    0
005242  000077  #constant  Strings44Count    0
005243  000078  #constant  Strings44Size     1
005244  000078  #constant  Strings44Size     1
005245  000079  #constant  Strings45Count    0
005246  000079  #constant  Strings45Count    0
005247  000080  #constant  Strings45Size     1
005248  000080  #constant  Strings45Size     1
005249  000081  #constant  Strings13Count    1
005250  000081  #constant  Strings13Count    1
005251  000082  #constant  Strings13Size     8
005252  000082  #constant  Strings13Size     8
005253  000083  #constant  Strings48Count    1
005254  000083  #constant  Strings48Count    1
005255  000084  #constant  Strings48Size     10
005256  000084  #constant  Strings48Size     10
005257  000085  #constant  Strings46Count    1
005258  000085  #constant  Strings46Count    1
005259  000086  #constant  Strings46Size     8
005260  000086  #constant  Strings46Size     8
005261  000087  #constant  Strings49Count    1
005262  000087  #constant  Strings49Count    1
005263  000088  #constant  Strings49Size     10
005264  000088  #constant  Strings49Size     10
005265  000089  #constant  Strings47Count    1
005266  000089  #constant  Strings47Count    1
005267  000090  #constant  Strings47Size     8
005268  000090  #constant  Strings47Size     8
005269  000091  #constant  Strings50Count    1
005270  000091  #constant  Strings50Count    1
005271  000092  #constant  Strings50Size     10
005272  000092  #constant  Strings50Size     10
005273  000093  #constant  Strings51Count    0
005274  000093  #constant  Strings51Count    0
005275  000094  #constant  Strings51Size     1
005276  000094  #constant  Strings51Size     1
005277  000095  #constant  Strings52Count    0
005278  000095  #constant  Strings52Count    0
005279  000096  #constant  Strings52Size     1
005280  000096  #constant  Strings52Size     1
005281  000097  #constant  Strings17Count    1
005282  000097  #constant  Strings17Count    1
005283  000098  #constant  Strings17Size     65
005284  000098  #constant  Strings17Size     65
005285  000099  #constant  Strings18Count    1
005286  000099  #constant  Strings18Count    1
005287  000100  #constant  Strings18Size     42
005288  000100  #constant  Strings18Size     42
005289  000101  #constant  Strings19Count    1
005290  000101  #constant  Strings19Count    1
005291  000102  #constant  Strings19Size     45
005292  000102  #constant  Strings19Size     45
005293  000103  #constant  Strings29Count    1
005294  000103  #constant  Strings29Count    1
005295  000104  #constant  Strings29Size     65
005296  000104  #constant  Strings29Size     65
005297  000105  #constant  Strings30Count    1
005298  000105  #constant  Strings30Count    1
005299  000106  #constant  Strings30Size     45
005300  000106  #constant  Strings30Size     45
005301  000107  #constant  Strings31Count    1
005302  000107  #constant  Strings31Count    1
005303  000108  #constant  Strings31Size     7
005304  000108  #constant  Strings31Size     7
005305  000109  #constant  Strings32Count    1
005306  000109  #constant  Strings32Count    1
005307  000110  #constant  Strings32Size     19
005308  000110  #constant  Strings32Size     19
005309  000111  // object indexes into ImageControl
005310  000112  #CONST
005311  000285  #END
005312  000286        
005313  000287  #constant  Strings1StartH   0x0
005314  000287  #constant  Strings1StartH   0x0
005315  000288  #constant  Strings1StartL   0x0
005316  000288  #constant  Strings1StartL   0x0
005317  000289  #constant  Strings3StartH   0x0
005318  000289  #constant  Strings3StartH   0x0
005319  000290  #constant  Strings3StartL   0x200
005320  000290  #constant  Strings3StartL   0x200
005321  000291  #constant  Strings20StartH   0x0
005322  000291  #constant  Strings20StartH   0x0
005323  000292  #constant  Strings20StartL   0x400
005324  000292  #constant  Strings20StartL   0x400
005325  000293  #constant  Strings4StartH   0x0
005326  000293  #constant  Strings4StartH   0x0
005327  000294  #constant  Strings4StartL   0x600
005328  000294  #constant  Strings4StartL   0x600
005329  000295  #constant  Strings6StartH   0x0
005330  000295  #constant  Strings6StartH   0x0
005331  000296  #constant  Strings6StartL   0x800
005332  000296  #constant  Strings6StartL   0x800
005333  000297  #constant  Strings2StartH   0x0
005334  000297  #constant  Strings2StartH   0x0
005335  000298  #constant  Strings2StartL   0xA00
005336  000298  #constant  Strings2StartL   0xA00
005337  000299  #constant  Strings0StartH   0x0
005338  000299  #constant  Strings0StartH   0x0
005339  000300  #constant  Strings0StartL   0xC00
005340  000300  #constant  Strings0StartL   0xC00
005341  000301  #constant  Strings9StartH   0x0
005342  000301  #constant  Strings9StartH   0x0
005343  000302  #constant  Strings9StartL   0xE00
005344  000302  #constant  Strings9StartL   0xE00
005345  000303  #constant  Strings34StartH   0x0
005346  000303  #constant  Strings34StartH   0x0
005347  000304  #constant  Strings34StartL   0x1000
005348  000304  #constant  Strings34StartL   0x1000
005349  000305  #constant  Strings36StartH   0x0
005350  000305  #constant  Strings36StartH   0x0
005351  000306  #constant  Strings36StartL   0x1200
005352  000306  #constant  Strings36StartL   0x1200
005353  000307  #constant  Strings37StartH   0x0
005354  000307  #constant  Strings37StartH   0x0
005355  000308  #constant  Strings37StartL   0x1400
005356  000308  #constant  Strings37StartL   0x1400
005357  000309  #constant  Strings12StartH   0x0
005358  000309  #constant  Strings12StartH   0x0
005359  000310  #constant  Strings12StartL   0x1600
005360  000310  #constant  Strings12StartL   0x1600
005361  000311  #constant  Strings14StartH   0x0
005362  000311  #constant  Strings14StartH   0x0
005363  000312  #constant  Strings14StartL   0x1800
005364  000312  #constant  Strings14StartL   0x1800
005365  000313  #constant  Strings16StartH   0x0
005366  000313  #constant  Strings16StartH   0x0
005367  000314  #constant  Strings16StartL   0x1A00
005368  000314  #constant  Strings16StartL   0x1A00
005369  000315  #constant  Strings15StartH   0x0
005370  000315  #constant  Strings15StartH   0x0
005371  000316  #constant  Strings15StartL   0x1C00
005372  000316  #constant  Strings15StartL   0x1C00
005373  000317  #constant  Strings21StartH   0x0
005374  000317  #constant  Strings21StartH   0x0
005375  000318  #constant  Strings21StartL   0x1E00
005376  000318  #constant  Strings21StartL   0x1E00
005377  000319  #constant  Strings11StartH   0x0
005378  000319  #constant  Strings11StartH   0x0
005379  000320  #constant  Strings11StartL   0x2000
005380  000320  #constant  Strings11StartL   0x2000
005381  000321  #constant  Strings22StartH   0x0
005382  000321  #constant  Strings22StartH   0x0
005383  000322  #constant  Strings22StartL   0x2200
005384  000322  #constant  Strings22StartL   0x2200
005385  000323  #constant  Strings23StartH   0x0
005386  000323  #constant  Strings23StartH   0x0
005387  000324  #constant  Strings23StartL   0x2400
005388  000324  #constant  Strings23StartL   0x2400
005389  000325  #constant  Strings24StartH   0x0
005390  000325  #constant  Strings24StartH   0x0
005391  000326  #constant  Strings24StartL   0x2600
005392  000326  #constant  Strings24StartL   0x2600
005393  000327  #constant  Strings25StartH   0x0
005394  000327  #constant  Strings25StartH   0x0
005395  000328  #constant  Strings25StartL   0x2800
005396  000328  #constant  Strings25StartL   0x2800
005397  000329  #constant  Strings26StartH   0x0
005398  000329  #constant  Strings26StartH   0x0
005399  000330  #constant  Strings26StartL   0x2A00
005400  000330  #constant  Strings26StartL   0x2A00
005401  000331  #constant  Strings27StartH   0x0
005402  000331  #constant  Strings27StartH   0x0
005403  000332  #constant  Strings27StartL   0x2C00
005404  000332  #constant  Strings27StartL   0x2C00
005405  000333  #constant  Strings5StartH   0x0
005406  000333  #constant  Strings5StartH   0x0
005407  000334  #constant  Strings5StartL   0x2E00
005408  000334  #constant  Strings5StartL   0x2E00
005409  000335  #constant  Strings28StartH   0x0
005410  000335  #constant  Strings28StartH   0x0
005411  000336  #constant  Strings28StartL   0x3000
005412  000336  #constant  Strings28StartL   0x3000
005413  000337  #constant  Strings35StartH   0x0
005414  000337  #constant  Strings35StartH   0x0
005415  000338  #constant  Strings35StartL   0x3200
005416  000338  #constant  Strings35StartL   0x3200
005417  000339  #constant  Strings33StartH   0x0
005418  000339  #constant  Strings33StartH   0x0
005419  000340  #constant  Strings33StartL   0x3400
005420  000340  #constant  Strings33StartL   0x3400
005421  000341  #constant  Strings10StartH   0x0
005422  000341  #constant  Strings10StartH   0x0
005423  000342  #constant  Strings10StartL   0x3600
005424  000342  #constant  Strings10StartL   0x3600
005425  000343  #constant  Strings7StartH   0x0
005426  000343  #constant  Strings7StartH   0x0
005427  000344  #constant  Strings7StartL   0x3800
005428  000344  #constant  Strings7StartL   0x3800
005429  000345  #constant  Strings8StartH   0x0
005430  000345  #constant  Strings8StartH   0x0
005431  000346  #constant  Strings8StartL   0x3A00
005432  000346  #constant  Strings8StartL   0x3A00
005433  000347  #constant  Strings38StartH   0x0
005434  000347  #constant  Strings38StartH   0x0
005435  000348  #constant  Strings38StartL   0x3C00
005436  000348  #constant  Strings38StartL   0x3C00
005437  000349  #constant  Strings39StartH   0x0
005438  000349  #constant  Strings39StartH   0x0
005439  000350  #constant  Strings39StartL   0x3E00
005440  000350  #constant  Strings39StartL   0x3E00
005441  000351  #constant  Strings40StartH   0x0
005442  000351  #constant  Strings40StartH   0x0
005443  000352  #constant  Strings40StartL   0x4000
005444  000352  #constant  Strings40StartL   0x4000
005445  000353  #constant  Strings41StartH   0x0
005446  000353  #constant  Strings41StartH   0x0
005447  000354  #constant  Strings41StartL   0x4200
005448  000354  #constant  Strings41StartL   0x4200
005449  000355  #constant  Strings42StartH   0x0
005450  000355  #constant  Strings42StartH   0x0
005451  000356  #constant  Strings42StartL   0x4400
005452  000356  #constant  Strings42StartL   0x4400
005453  000357  #constant  Strings43StartH   0x0
005454  000357  #constant  Strings43StartH   0x0
005455  000358  #constant  Strings43StartL   0x4600
005456  000358  #constant  Strings43StartL   0x4600
005457  000359  #constant  Strings44StartH   0x0
005458  000359  #constant  Strings44StartH   0x0
005459  000360  #constant  Strings44StartL   0x4800
005460  000360  #constant  Strings44StartL   0x4800
005461  000361  #constant  Strings45StartH   0x0
005462  000361  #constant  Strings45StartH   0x0
005463  000362  #constant  Strings45StartL   0x4A00
005464  000362  #constant  Strings45StartL   0x4A00
005465  000363  #constant  Strings13StartH   0x0
005466  000363  #constant  Strings13StartH   0x0
005467  000364  #constant  Strings13StartL   0x4C00
005468  000364  #constant  Strings13StartL   0x4C00
005469  000365  #constant  Strings48StartH   0x0
005470  000365  #constant  Strings48StartH   0x0
005471  000366  #constant  Strings48StartL   0x4E00
005472  000366  #constant  Strings48StartL   0x4E00
005473  000367  #constant  Strings46StartH   0x0
005474  000367  #constant  Strings46StartH   0x0
005475  000368  #constant  Strings46StartL   0x5000
005476  000368  #constant  Strings46StartL   0x5000
005477  000369  #constant  Strings49StartH   0x0
005478  000369  #constant  Strings49StartH   0x0
005479  000370  #constant  Strings49StartL   0x5200
005480  000370  #constant  Strings49StartL   0x5200
005481  000371  #constant  Strings47StartH   0x0
005482  000371  #constant  Strings47StartH   0x0
005483  000372  #constant  Strings47StartL   0x5400
005484  000372  #constant  Strings47StartL   0x5400
005485  000373  #constant  Strings50StartH   0x0
005486  000373  #constant  Strings50StartH   0x0
005487  000374  #constant  Strings50StartL   0x5600
005488  000374  #constant  Strings50StartL   0x5600
005489  000375  #constant  Strings51StartH   0x0
005490  000375  #constant  Strings51StartH   0x0
005491  000376  #constant  Strings51StartL   0x5800
005492  000376  #constant  Strings51StartL   0x5800
005493  000377  #constant  Strings52StartH   0x0
005494  000377  #constant  Strings52StartH   0x0
005495  000378  #constant  Strings52StartL   0x5A00
005496  000378  #constant  Strings52StartL   0x5A00
005497  000379  #constant  Strings17StartH   0x0
005498  000379  #constant  Strings17StartH   0x0
005499  000380  #constant  Strings17StartL   0x5C00
005500  000380  #constant  Strings17StartL   0x5C00
005501  000381  #constant  Strings18StartH   0x0
005502  000381  #constant  Strings18StartH   0x0
005503  000382  #constant  Strings18StartL   0x5E00
005504  000382  #constant  Strings18StartL   0x5E00
005505  000383  #constant  Strings19StartH   0x0
005506  000383  #constant  Strings19StartH   0x0
005507  000384  #constant  Strings19StartL   0x6000
005508  000384  #constant  Strings19StartL   0x6000
005509  000385  #constant  Strings29StartH   0x0
005510  000385  #constant  Strings29StartH   0x0
005511  000386  #constant  Strings29StartL   0x6200
005512  000386  #constant  Strings29StartL   0x6200
005513  000387  #constant  Strings30StartH   0x0
005514  000387  #constant  Strings30StartH   0x0
005515  000388  #constant  Strings30StartL   0x6400
005516  000388  #constant  Strings30StartL   0x6400
005517  000389  #constant  Strings31StartH   0x0
005518  000389  #constant  Strings31StartH   0x0
005519  000390  #constant  Strings31StartL   0x6600
005520  000390  #constant  Strings31StartL   0x6600
005521  000391  #constant  Strings32StartH   0x0
005522  000391  #constant  Strings32StartH   0x0
005523  000392  #constant  Strings32StartL   0x6800
005524  000392  #constant  Strings32StartL   0x6800
005525  000393  #IFNOT EXISTS NOGLOBALS
005526  000394  var hndl ;
005527  000395  #ENDIF
005528  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005529  000013  #inherit "CLPrintStrings.inc"
005530  000013  #inherit "CLPrintStrings.inc"
005531  000001  func PrintStrings(var ID, var *msgid, var String)
005532  000002      var StringID, i, ch, offs32[2], res32[2];
005533  000003      StringID := oStringss[1+ID] ;
005534  000004      if (String)
005535  000005          stringsCV[ID] := -1 ;
005536  000006      else
005537  000007          stringsCV[ID] := msgid ;
005538  000008      endif
005539  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005540  000010      txt_FontID(hFonts[ID]) ;
005541  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005542  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005543  000013        
005544  000014      if (*(StringID + Ofs_String_Transparent))
005545  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005546  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005547  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005548  000018      else
005549  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005550  000020          gfx_Clipping(ON) ;
005551  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005552  000022          gfx_Clipping(OFF) ;
005553  000023        
005554  000024      endif
005555  000025        
005556  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005557  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005558  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005559  000029        
005560  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005561  000031        
005562  000032      if (String)
005563  000033          i := 0 ;
005564  000034          ch := msgid[i++] ;
005565  000035          while (ch != 0)
005566  000036              putch(ch) ;
005567  000037              ch := msgid[i++] ;
005568  000038          wend
005569  000039      else
005570  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005571  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005572  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005573  000043          uadd_3232(res32,res32,offs32) ;
005574  000044          file_Seek(hstrings, res32[1], res32[0]);
005575  000045          repeat
005576  000046              if (*(StringID + Ofs_String_Ansi))
005577  000047                  ch := file_GetC(hstrings) ;
005578  000048              else
005579  000049                  ch := file_GetW(hstrings) ;
005580  000050              endif
005581  000051              putch(ch) ;
005582  000052          until (ch == 0) ;
005583  000053      endif
005584  000054        
005585  000055  endfunc
005586  000056        
005587  000014        
005588  000015  #constant IPDatasize 22
005589  000015  #constant IPDatasize 22
005590  000016        
005591  000017  #CONST
005592  000021  #END
005593  000022        
005594  000023  #CONST
005595  000130  #END
005596  000131        
005597  000510  #END
5598  2236
5599  2237
5600  2238
5601  2239
5602  223A
5603  223B
5604  223C
5605  223D
5606  223E
5607  223F
5608  2240
5609  2241
5610  2242
5611  2243
5612  2244
5613  2245
5614  2246
5615  2247
5616  2248
5617  2249
5618  224A
5619  224B
5620  224C
5621  224D
5622  224E
5623  224F
5624  2250
5625  2251
5626  2252
5627  2253
5628  2254
5629  2255
5630  2256
5631  2257
5632  2258
5633  2259
5634  225A
5635  225B
5636  225C
5637  225D
5638  225E
5639  225F
5640  2260
5641  2261
5642  2262
5643  2263
5644  2264
5645  2265
5646  2266
5647  2267
5648  2268
5649  2269
5650  226A
5651  226B
5652  226C
5653  226D
5654  226E
5655  226F
5656  2270
5657  2271
5658  2272
5659  2273
5660  2274
5661  2275
5662  2276
5663  2277
5664  2278
5665  2279
5666  227A
5667  227B
5668  227C
5669  227D
5670  227E
5671  227F
5672  2280
5673  2281
5674  2282
5675  2283
5676  2284
5677  2285
5678  2286
5679  2287
5680  2288
5681  2289
5682  228A
5683  228B
5684  228C
5685  228D
5686  228E
5687  228F
5688  2290
5689  2291
5690  2292
5691  2293
5692  2294
5693  2295
5694  2296
5695  2297
5696  2298
5697  2299
5698  229A
5699  229B
5700  229C
5701  229D
5702  229E
5703  229F
5704  22A0
5705  22A1
5706  22A2
5707  22A3
5708  22A4
5709  22A5
5710  22A6
5711  22A7
5712  22A8
5713  22A9
5714  22AA
5715  22AB
5716  22AC
5717  22AD
5718  22AE
5719  22AF
5720  22B0
5721  22B1
5722  22B2
5723  22B3
5724  22B4
5725  22B5
5726  22B6
5727  22B7
5728  22B8
5729  22B9
5730  22BA
5731  22BB
5732  22BC
5733  22BD
5734  22BE
5735  22BF
5736  22C0
5737  22C1
5738  22C2
5739  22C3
5740  22C4
5741  22C5
5742  22C6
5743  22C7
5744  22C8
5745  22C9
5746  22CA
5747  22CB
5748  22CC
5749  22CD
5750  22CE
5751  22CF
5752  22D0
5753  22D1
5754  22D2
5755  22D3
5756  22D4
5757  22D5
5758  22D6
5759  22D7
5760  22D8
5761  22D9
5762  22DA
5763  22DB
5764  22DC
5765  22DD
5766  22DE
5767  22DF
5768  22E0
5769  22E1
5770  22E2
5771  22E3
5772  22E4
5773  22E5
5774  22E6
5775  22E7
5776  22E8
5777  22E9
5778  22EA
5779  22EB
5780  22EC
5781  22ED
5782  22EE
5783  22EF
5784  22F0
5785  22F1
5786  22F2
5787  22F3
5788  22F4
5789  22F5
5790  22F6
5791  22F7
5792  22F8
5793  22F9
5794  22FA
5795  22FB
5796  22FC
5797  22FD
5798  22FE
5799  22FF
5800  2300
5801  2301
5802  2302
5803  2303
5804  2304
5805  2305
5806  2306
5807  2307
5808  2308
5809  2309
5810  230A
5811  230B
5812  230C
5813  230D
5814  230E
5815  230F
5816  2310
5817  2311
5818  2312
5819  2313
5820  2314
5821  2315
5822  2316
5823  2317
5824  2318
5825  2319
5826  231A
5827  231B
5828  231C
5829  231D
5830  231E
5831  231F
5832  2320
5833  2321
5834  2322
5835  2323
5836  2324
5837  2325
5838  2326
5839  2327
5840  2328
5841  2329
5842  232A
5843  232B
5844  232C
5845  232D
5846  232E
5847  232F
5848  2330
5849  2331
5850  2332
5851  2333
5852  2334
5853  2335
5854  2336
5855  2337
5856  2338
5857  2339
5858  233A
5859  233B
5860  233C
5861  233D
5862  233E
5863  233F
5864  2340
5865  2341
5866  2342
5867  2343
5868  2344
5869  2345
5870  2346
5871  2347
5872  2348
5873  2349
5874  234A
5875  234B
5876  234C
5877  234D
5878  234E
5879  234F
5880  2350
5881  2351
5882  2352
5883  2353
5884  2354
5885  2355
5886  2356
5887  2357
5888  2358
5889  2359
5890  235A
5891  235B
5892  235C
5893  235D
5894  235E
5895  235F
5896  2360
5897  2361
5898  2362
5899  2363
5900  2364
5901  2365
5902  2366
5903  2367
5904  2368
5905  2369
5906  236A
5907  236B
5908  236C
5909  236D
5910  236E
5911  236F
5912  2370
5913  2371
5914  2372
5915  2373
5916  2374
5917  2375
5918  2376
5919  2377
5920  2378
5921  2379
5922  237A
5923  237B
5924  237C
5925  237D
5926  237E
5927  237F
5928  2380
5929  2381
5930  2382
5931  2383
5932  2384
5933  2385
5934  2386
5935  2387
5936  2388
5937  2389
5938  238A
5939  238B
5940  238C
5941  238D
5942  238E
5943  238F
5944  2390
5945  2391
5946  2392
5947  2393
5948  2394
5949  2395
5950  2396
5951  2397
5952  2398
5953  2399
5954  239A
5955  239B
5956  239C
5957  239D
5958  239E
5959  239F
5960  23A0
5961  23A1
5962  23A2
5963  23A3
5964  23A4
5965  23A5
5966  23A6
5967  23A7
5968  23A8
5969  23A9
5970  23AA
5971  23AB
5972  23AC
5973  23AD
5974  23AE
5975  23AF
5976  23B0
5977  23B1
5978  23B2
5979  23B3
5980  23B4
5981  23B5
5982  23B6
5983  23B7
5984  23B8
5985  23B9
5986  23BA
5987  23BB
5988  23BC
5989  23BD
5990  23BE
5991  23BF
5992  23C0
5993  23C1
5994  23C2
5995  23C3
5996  23C4
5997  23C5
5998  23C6
5999  23C7
6000  23C8
6001  23C9
6002  23CA
6003  23CB
6004  23CC
6005  23CD
6006  23CE
6007  23CF
6008  23D0
6009  23D1
6010  23D2
6011  23D3
6012  23D4
6013  23D5
6014  23D6
6015  23D7
6016  23D8
6017  23D9
6018  23DA
6019  23DB
6020  23DC
6021  23DD
6022  23DE
6023  23DF
6024  23E0
6025  23E1
6026  23E2
6027  23E3
6028  23E4
6029  23E5
6030  23E6
6031  23E7
6032  23E8
6033  23E9
6034  23EA
6035  23EB
6036  23EC
6037  23ED
6038  23EE
6039  23EF
6040  23F0
6041  23F1
6042  23F2
6043  23F3
6044  23F4
6045  23F5
6046  23F6
6047  23F7
6048  23F8
6049  23F9
6050  23FA
6051  23FB
6052  23FC
6053  23FD
6054  23FE
6055  23FF
6056  2400
6057  2401
6058  2402
6059  2403
6060  2404
6061  2405
6062  2406
6063  2407
6064  2408
6065  2409
6066  240A
6067  240B
6068  240C
6069  240D
6070  240E
6071  240F
6072  2410
6073  2411
6074  2412
6075  2413
6076  2414
6077  2415
6078  2416
6079  2417
6080  2418
6081  2419
6082  241A
6083  241B
6084  241C
6085  241D
6086  241E
6087  241F
6088  2420
6089  2421
6090  2422
6091  2423
6092  2424
6093  2425
6094  2426
6095  2427
6096  2428
6097  2429
6098  242A
6099  242B
6100  242C
6101  242D
6102  242E
6103  242F
6104  2430
6105  2431
6106  2432
6107  2433
6108  2434
6109  2435
6110  2436
6111  2437
6112  2438
6113  2439
6114  243A
6115  243B
6116  243C
6117  243D
6118  243E
6119  243F
6120  2440
6121  2441
6122  2442
6123  2443
6124  2444
6125  2445
6126  2446
6127  2447
6128  2448
6129  2449
6130  244A
6131  244B
6132  244C
6133  244D
6134  244E
6135  244F
6136  2450
6137  2451
6138  2452
6139  2453
6140  2454
6141  2455
6142  2456
6143  2457
6144  2458
6145  2459
6146  245A
6147  245B
6148  245C
6149  245D
6150  245E
6151  245F
6152  2460
6153  2461
6154  2462
6155  2463
6156  2464
6157  2465
6158  2466
6159  2467
6160  2468
6161  2469
6162  246A
6163  246B
6164  246C
6165  246D
6166  246E
6167  246F
6168  2470
6169  2471
6170  2472
6171  2473
6172  2474
6173  2475
6174  2476
6175  2477
6176  2478
6177  2479
6178  247A
6179  247B
6180  247C
6181  247D
6182  247E
6183  247F
6184  2480
6185  2481
6186  2482
6187  2483
6188  2484
6189  2485
6190  2486
6191  2487
6192  2488
6193  2489
6194  248A
6195  248B
6196  248C
6197  248D
6198  248E
6199  248F
6200  2490
6201  2491
6202  2492
6203  2493
6204  2494
6205  2495
6206  2496
6207  2497
6208  2498
6209  2499
6210  249A
6211  249B
6212  249C
6213  249D
6214  249E
6215  249F
6216  24A0
6217  24A1
6218  24A2
6219  24A3
6220  24A4
6221  24A5
6222  24A6
6223  24A7
6224  24A8
6225  24A9
6226  24AA
6227  24AB
6228  24AC
6229  24AD
6230  24AE
6231  24AF
6232  24B0
6233  24B1
6234  24B2
6235  24B3
6236  24B4
6237  24B5
6238  24B6
6239  24B7
6240  24B8
6241  24B9
6242  24BA
6243  24BB
6244  24BC
6245  24BD
6246  24BE
6247  24BF
6248  24C0
6249  24C1
6250  24C2
6251  24C3
6252  24C4
6253  24C5
6254  24C6
6255  24C7
6256  24C8
6257  24C9
6258  24CA
6259  24CB
6260  24CC
6261  24CD
6262  24CE
6263  24CF
6264  24D0
6265  24D1
6266  24D2
6267  24D3
6268  24D4
6269  24D5
6270  24D6
6271  24D7
6272  24D8
6273  24D9
6274  24DA
6275  24DB
6276  24DC
6277  24DD
6278  24DE
6279  24DF
6280  24E0
6281  24E1
6282  24E2
6283  24E3
6284  24E4
6285  24E5
6286  24E6
6287  24E7
6288  24E8
6289  24E9
6290  24EA
6291  24EB
6292  24EC
6293  24ED
6294  24EE
6295  24EF
6296  24F0
6297  24F1
6298  24F2
6299  24F3
6300  24F4
6301  24F5
6302  24F6
6303  24F7
6304  24F8
6305  24F9
6306  24FA
6307  24FB
6308  24FC
6309  24FD
6310  24FE
6311  24FF
6312  2500
6313  2501
6314  2502
6315  2503
6316  2504
6317  2505
6318  2506
6319  2507
6320  2508
6321  2509
6322  250A
6323  250B
6324  250C
6325  250D
6326  250E
6327  250F
6328  2510
6329  2511
6330  2512
6331  2513
6332  2514
6333  2515
6334  2516
6335  2517
6336  2518
6337  2519
6338  251A
6339  251B
6340  251C
6341  251D
6342  251E
6343  251F
6344  2520
6345  2521
6346  2522
6347  2523
6348  2524
6349  2525
6350  2526
6351  2527
6352  2528
6353  2529
6354  252A
6355  252B
6356  252C
6357  252D
6358  252E
6359  252F
6360  2530
6361  2531
6362  2532
6363  2533
6364  2534
6365  2535
6366  2536
6367  2537
6368  2538
6369  2539
6370  253A
6371  253B
6372  253C
6373  253D
6374  253E
6375  253F
6376  2540
6377  2541
6378  2542
6379  2543
6380  2544
6381  2545
6382  2546
6383  2547
6384  2548
6385  2549
6386  254A
6387  254B
6388  254C
6389  254D
6390  254E
6391  254F
6392  2550
6393  2551
6394  2552
6395  2553
6396  2554
6397  2555
6398  2556
6399  2557
6400  2558
6401  2559
6402  255A
6403  255B
6404  255C
6405  255D
6406  255E
6407  255F
6408  2560
6409  2561
6410  2562
6411  2563
6412  2564
6413  2565
6414  2566
6415  2567
6416  2568
6417  2569
6418  256A
6419  256B
6420  256C
6421  256D
6422  256E
6423  256F
6424  2570
6425  2571
6426  2572
6427  2573
6428  2574
6429  2575
6430  2576
6431  2577
6432  2578
6433  2579
6434  257A
6435  257B
6436  257C
6437  257D
6438  257E
6439  257F
6440  2580
6441  2581
6442  2582
6443  2583
6444  2584
6445  2585
6446  2586
6447  2587
6448  2588
6449  2589
6450  258A
6451  258B
6452  258C
6453  258D
6454  258E
6455  258F
6456  2590
6457  2591
6458  2592
6459  2593
6460  2594
6461  2595
6462  2596
6463  2597
6464  2598
6465  2599
6466  259A
6467  259B
6468  259C
6469  259D
6470  259E
6471  259F
6472  25A0
6473  25A1
6474  25A2
6475  25A3
6476  25A4
6477  25A5
6478  25A6
6479  25A7
6480  25A8
6481  25A9
6482  25AA
6483  25AB
6484  25AC
6485  25AD
6486  25AE
6487  25AF
6488  25B0
6489  25B1
6490  25B2
6491  25B3
6492  25B4
6493  25B5
6494  25B6
6495  25B7
6496  25B8
6497  25B9
6498  25BA
6499  25BB
6500  25BC
6501  25BD
6502  25BE
6503  25BF
6504  25C0
6505  25C1
6506  25C2
6507  25C3
6508  25C4
6509  25C5
6510  25C6
6511  25C7
6512  25C8
6513  25C9
6514  25CA
6515  25CB
6516  25CC
6517  25CD
6518  25CE
6519  25CF
6520  25D0
6521  25D1
6522  25D2
6523  25D3
6524  25D4
6525  25D5
6526  25D6
6527  25D7
6528  25D8
6529  25D9
6530  25DA
6531  25DB
6532  25DC
6533  25DD
6534  25DE
6535  25DF
6536  25E0
6537  25E1
6538  25E2
6539  25E3
6540  25E4
6541  25E5
6542  25E6
6543  25E7
6544  25E8
6545  25E9
6546  25EA
6547  25EB
6548  25EC
6549  25ED
6550  25EE
6551  25EF
6552  25F0
6553  25F1
6554  25F2
6555  25F3
6556  25F4
6557  25F5
6558  25F6
6559  25F7
6560  25F8
6561  25F9
6562  25FA
6563  25FB
6564  25FC
6565  25FD
6566  25FE
6567  25FF
6568  2600
6569  2601
6570  2602
6571  2603
6572  2604
6573  2605
6574  2606
6575  2607
6576  2608
6577  2609
6578  260A
6579  260B
6580  260C
6581  260D
6582  260E
6583  260F
6584  2610
6585  2611
6586  2612
6587  2613
6588  2614
6589  2615
6590  2616
6591  2617
6592  2618
6593  2619
6594  261A
6595  261B
6596  261C
6597  261D
6598  261E
6599  261F
6600  2620
6601  2621
6602  2622
6603  2623
6604  2624
6605  2625
6606  2626
6607  2627
6608  2628
6609  2629
6610  262A
6611  262B
6612  262C
6613  262D
6614  262E
6615  262F
6616  2630
6617  2631
6618  2632
6619  2633
6620  2634
6621  2635
6622  2636
6623  2637
6624  2638
6625  2639
6626  263A
6627  263B
6628  263C
6629  263D
6630  263E
6631  263F
6632  2640
6633  2641
6634  2642
6635  2643
6636  2644
6637  2645
6638  2646
6639  2647
6640  2648
6641  2649
6642  264A
6643  264B
6644  264C
6645  264D
6646  264E
6647  264F
6648  2650
6649  2651
6650  2652
6651  2653
6652  2654
6653  2655
6654  2656
6655  2657
6656  2658
6657  2659
6658  265A
6659  265B
6660  265C
6661  265D
6662  265E
6663  265F
6664  2660
6665  2661
6666  2662
6667  2663
6668  2664
6669  2665
6670  2666
6671  2667
6672  2668
6673  2669
6674  266A
6675  266B
6676  266C
6677  266D
6678  266E
6679  266F
6680  2670
6681  2671
6682  2672
6683  2673
6684  2674
6685  2675
6686  2676
6687  2677
6688  2678
6689  2679
6690  267A
6691  267B
6692  267C
6693  267D
6694  267E
6695  267F
6696  2680
6697  2681
6698  2682
6699  2683
6700  2684
6701  2685
6702  2686
6703  2687
6704  2688
6705  2689
6706  268A
6707  268B
6708  268C
6709  268D
6710  268E
6711  268F
6712  2690
6713  2691
6714  2692
6715  2693
6716  2694
6717  2695
6718  2696
6719  2697
6720  2698
6721  2699
6722  269A
6723  269B
6724  269C
6725  269D
6726  269E
6727  269F
6728  26A0
6729  26A1
6730  26A2
6731  26A3
6732  26A4
6733  26A5
6734  26A6
6735  26A7
6736  26A8
6737  26A9
6738  26AA
6739  26AB
6740  26AC
6741  26AD
6742  26AE
6743  26AF
6744  26B0
6745  26B1
6746  26B2
6747  26B3
6748  26B4
6749  26B5
6750  26B6
6751  26B7
6752  26B8
6753  26B9
6754  26BA
6755  26BB
6756  26BC
6757  26BD
6758  26BE
6759  26BF
6760  26C0
6761  26C1
6762  26C2
6763  26C3
6764  26C4
6765  26C5
6766  26C6
6767  26C7
6768  26C8
6769  26C9
6770  26CA
6771  26CB
6772  26CC
6773  26CD
6774  26CE
6775  26CF
6776  26D0
6777  26D1
6778  26D2
6779  26D3
6780  26D4
6781  26D5
6782  26D6
6783  26D7
6784  26D8
6785  26D9
6786  26DA
6787  26DB
6788  26DC
6789  26DD
6790  26DE
6791  26DF
6792  26E0
6793  26E1
6794  26E2
6795  26E3
6796  26E4
6797  26E5
6798  26E6
6799  26E7
6800  26E8
6801  26E9
6802  26EA
6803  26EB
6804  26EC
6805  26ED
6806  26EE
6807  26EF
6808  26F0
6809  26F1
6810  26F2
6811  26F3
6812  26F4
6813  26F5
6814  26F6
6815  26F7
6816  26F8
6817  26F9
6818  26FA
6819  26FB
6820  26FC
6821  26FD
6822  26FE
6823  26FF
6824  2700
6825  2701
6826  2702
6827  2703
6828  2704
6829  2705
6830  2706
6831  2707
6832  2708
6833  2709
6834  270A
6835  270B
6836  270C
6837  270D
6838  270E
6839  270F
6840  2710
6841  2711
6842  2712
6843  2713
6844  2714
6845  2715
6846  2716
6847  2717
6848  2718
6849  2719
6850  271A
6851  271B
6852  271C
6853  271D
6854  271E
6855  271F
6856  2720
6857  2721
6858  2722
6859  2723
6860  2724
6861  2725
6862  2726
6863  2727
6864  2728
6865  2729
6866  272A
6867  272B
6868  272C
6869  272D
6870  272E
6871  272F
6872  2730
6873  2731
6874  2732
6875  2733
6876  2734
6877  2735
6878  2736
6879  2737
6880  2738
6881  2739
6882  273A
6883  273B
6884  273C
6885  273D
6886  273E
6887  273F
6888  2740
6889  2741
6890  2742
6891  2743
6892  2744
6893  2745
6894  2746
6895  2747
6896  2748
6897  2749
6898  274A
6899  274B
6900  274C
6901  274D
6902  274E
6903  274F
6904  2750
6905  2751
6906  2752
6907  2753
6908  2754
6909  2755
6910  2756
6911  2757
6912  2758
6913  2759
6914  275A
6915  275B
6916  275C
6917  275D
6918  275E
6919  275F
6920  2760
6921  2761
6922  2762
6923  2763
6924  2764
6925  2765
6926  2766
6927  2767
6928  2768
6929  2769
6930  276A
6931  276B
6932  276C
6933  276D
6934  276E
6935  276F
6936  2770
6937  2771
6938  2772
6939  2773
6940  2774
6941  2775
6942  2776
6943  2777
6944  2778
6945  2779
6946  277A
6947  277B
6948  277C
6949  277D
6950  277E
6951  277F
6952  2780
6953  2781
6954  2782
6955  2783
6956  2784
6957  2785
6958  2786
6959  2787
6960  2788
6961  2789
6962  278A
6963  278B
6964  278C
6965  278D
6966  278E
6967  278F
6968  2790
6969  2791
6970  2792
6971  2793
6972  2794
6973  2795
6974  2796
6975  2797
6976  2798
6977  2799
6978  279A
6979  279B
6980  279C
6981  279D
6982  279E
6983  279F
6984  27A0
6985  27A1
6986  27A2
6987  27A3
6988  27A4
6989  27A5
6990  27A6
6991  27A7
6992  27A8
6993  27A9
6994  27AA
6995  27AB
6996  27AC
6997  27AD
6998  27AE
6999  27AF
7000  27B0
7001  27B1
7002  27B2
7003  27B3
7004  27B4
7005  27B5
7006  27B6
7007  27B7
7008  27B8
7009  27B9
7010  27BA
7011  27BB
7012  27BC
7013  27BD
7014  27BE
7015  27BF
7016  27C0
7017  27C1
7018  27C2
7019  27C3
7020  27C4
7021  27C5
7022  27C6
7023  27C7
7024  27C8
7025  27C9
7026  27CA
7027  27CB
7028  27CC
7029  27CD
7030  27CE
7031  27CF
7032  27D0
7033  27D1
7034  27D2
7035  27D3
7036  27D4
7037  27D5
7038  27D6
7039  27D7
7040  27D8
7041  27D9
7042  27DA
7043  27DB
7044  27DC
7045  27DD
7046  27DE
7047  27DF
7048  27E0
7049  27E1
7050  27E2
7051  27E3
7052  27E4
7053  27E5
7054  27E6
7055  27E7
7056  27E8
7057  27E9
7058  27EA
7059  27EB
7060  27EC
7061  27ED
7062  27EE
7063  27EF
7064  27F0
7065  27F1
7066  27F2
7067  27F3
7068  27F4
7069  27F5
7070  27F6
7071  27F7
7072  27F8
7073  27F9
7074  27FA
7075  27FB
7076  27FC
7077  27FD
7078  27FE
7079  27FF
7080  2800
7081  2801
7082  2802
7083  2803
7084  2804
7085  2805
7086  2806
7087  2807
7088  2808
7089  2809
7090  280A
7091  280B
7092  280C
7093  280D
7094  280E
7095  280F
7096  2810
7097  2811
7098  2812
7099  2813
7100  2814
7101  2815
7102  2816
7103  2817
7104  2818
7105  2819
7106  281A
7107  281B
7108  281C
7109  281D
7110  281E
7111  281F
7112  2820
7113  2821
7114  2822
7115  2823
7116  2824
7117  2825
7118  2826
7119  2827
7120  2828
7121  2829
7122  282A
7123  282B
7124  282C
7125  282D
7126  282E
7127  282F
7128  2830
7129  2831
7130  2832
7131  2833
7132  2834
7133  2835
7134  2836
7135  2837
7136  2838
7137  2839
7138  283A
7139  283B
7140  283C
7141  283D
7142  283E
7143  283F
7144  2840
7145  2841
7146  2842
7147  2843
7148  2844
7149  2845
7150  2846
7151  2847
7152  2848
7153  2849
7154  284A
7155  284B
7156  284C
7157  284D
7158  284E
7159  284F
7160  2850
7161  2851
7162  2852
7163  2853
7164  2854
7165  2855
7166  2856
7167  2857
7168  2858
7169  2859
7170  285A
7171  285B
7172  285C
7173  285D
7174  285E
7175  285F
7176  2860
7177  2861
7178  2862
7179  2863
7180  2864
7181  2865
7182  2866
7183  2867
7184  2868
7185  2869
7186  286A
7187  286B
7188  286C
7189  286D
7190  286E
7191  286F
7192  2870
7193  2871
7194  2872
7195  2873
7196  2874
7197  2875
7198  2876
7199  2877
7200  2878
7201  2879
7202  287A
7203  287B
7204  287C
7205  287D
7206  287E
7207  287F
7208  2880
7209  2881
7210  2882
7211  2883
7212  2884
7213  2885
7214  2886
7215  2887
7216  2888
7217  2889
7218  288A
7219  288B
7220  288C
7221  288D
7222  288E
7223  288F
7224  2890
7225  2891
7226  2892
7227  2893
7228  2894
7229  2895
7230  2896
7231  2897
7232  2898
7233  2899
7234  289A
7235  289B
7236  289C
7237  289D
7238  289E
7239  289F
7240  28A0
7241  28A1
7242  28A2
7243  28A3
7244  28A4
7245  28A5
7246  28A6
7247  28A7
7248  28A8
7249  28A9
7250  28AA
7251  28AB
7252  28AC
7253  28AD
7254  28AE
7255  28AF
7256  28B0
7257  28B1
7258  28B2
7259  28B3
7260  28B4
7261  28B5
7262  28B6
7263  28B7
7264  28B8
7265  28B9
7266  28BA
7267  28BB
7268  28BC
7269  28BD
7270  28BE
7271  28BF
7272  28C0
7273  28C1
7274  28C2
7275  28C3
7276  28C4
7277  28C5
7278  28C6
7279  28C7
7280  28C8
7281  28C9
7282  28CA
7283  28CB
7284  28CC
7285  28CD
7286  28CE
7287  28CF
7288  28D0
7289  28D1
7290  28D2
7291  28D3
7292  28D4
7293  28D5
7294  28D6
7295  28D7
7296  28D8
7297  28D9
7298  28DA
7299  28DB
7300  28DC
7301  28DD
7302  28DE
7303  28DF
7304  28E0
7305  28E1
7306  28E2
7307  28E3
7308  28E4
7309  28E5
7310  28E6
7311  28E7
7312  28E8
7313  28E9
7314  28EA
7315  28EB
7316  28EC
7317  28ED
7318  28EE
7319  28EF
7320  28F0
7321  28F1
7322  28F2
7323  28F3
7324  28F4
7325  28F5
7326  28F6
7327  28F7
7328  28F8
7329  28F9
7330  28FA
7331  28FB
7332  28FC
7333  28FD
7334  28FE
7335  28FF
7336  2900
7337  2901
7338  2902
7339  2903
7340  2904
7341  2905
7342  2906
7343  2907
7344  2908
7345  2909
7346  290A
7347  290B
7348  290C
7349  290D
7350  290E
7351  290F
7352  2910
7353  2911
7354  2912
7355  2913
7356  2914
7357  2915
7358  2916
7359  2917
7360  2918
7361  2919
7362  291A
7363  291B
7364  291C
7365  291D
7366  291E
7367  291F
7368  2920
7369  2921
7370  2922
7371  2923
7372  2924
7373  2925
7374  2926
7375  2927
7376  2928
7377  2929
7378  292A
7379  292B
7380  292C
7381  292D
7382  292E
7383  292F
7384  2930
7385  2931
7386  2932
7387  2933
7388  2934
7389  2935
7390  2936
7391  2937
7392  2938
7393  2939
7394  293A
7395  293B
7396  293C
7397  293D
7398  293E
7399  293F
7400  2940
7401  2941
7402  2942
7403  2943
7404  2944
7405  2945
7406  2946
7407  2947
7408  2948
7409  2949
7410  294A
7411  294B
7412  294C
7413  294D
7414  294E
7415  294F
7416  2950
7417  2951
7418  2952
7419  2953
7420  2954
7421  2955
7422  2956
7423  2957
7424  2958
7425  2959
7426  295A
7427  295B
7428  295C
7429  295D
7430  295E
7431  295F
7432  2960
7433  2961
7434  2962
7435  2963
7436  2964
7437  2965
7438  2966
7439  2967
7440  2968
7441  2969
7442  296A
7443  296B
7444  296C
7445  296D
7446  296E
7447  296F
7448  2970
7449  2971
7450  2972
7451  2973
7452  2974
7453  2975
7454  2976
7455  2977
7456  2978
7457  2979
7458  297A
7459  297B
7460  297C
7461  297D
7462  297E
7463  297F
7464  2980
7465  2981
7466  2982
7467  2983
7468  2984
7469  2985
7470  2986
7471  2987
7472  2988
7473  2989
7474  298A
7475  298B
7476  298C
7477  298D
7478  298E
7479  298F
7480  2990
7481  2991
7482  2992
7483  2993
7484  2994
7485  2995
7486  2996
7487  2997
7488  2998
7489  2999
7490  299A
7491  299B
7492  299C
7493  299D
7494  299E
7495  299F
7496  29A0
7497  29A1
7498  29A2
7499  29A3
7500  29A4
7501  29A5
7502  29A6
7503  29A7
7504  29A8
7505  29A9
7506  29AA
7507  29AB
7508  29AC
7509  29AD
7510  29AE
7511  29AF
7512  29B0
7513  29B1
7514  29B2
7515  29B3
7516  29B4
7517  29B5
7518  29B6
7519  29B7
7520  29B8
7521  29B9
7522  29BA
7523  29BB
7524  29BC
7525  29BD
7526  29BE
7527  29BF
7528  29C0
7529  29C1
7530  29C2
7531  29C3
7532  29C4
7533  29C5
7534  29C6
7535  29C7
7536  29C8
7537  29C9
7538  29CA
7539  29CB
7540  29CC
7541  29CD
7542  29CE
7543  29CF
7544  29D0
7545  29D1
7546  29D2
7547  29D3
7548  29D4
7549  29D5
7550  29D6
7551  29D7
7552  29D8
7553  29D9
7554  29DA
7555  29DB
7556  29DC
7557  29DD
7558  29DE
7559  29DF
7560  29E0
7561  29E1
7562  29E2
7563  29E3
7564  29E4
7565  29E5
7566  29E6
7567  29E7
7568  29E8
7569  29E9
7570  29EA
7571  29EB
7572  29EC
7573  29ED
7574  29EE
7575  29EF
7576  29F0
7577  29F1
7578  29F2
7579  29F3
7580  29F4
7581  29F5
7582  29F6
7583  29F7
7584  29F8
7585  29F9
7586  29FA
7587  29FB
7588  29FC
7589  29FD
7590  29FE
7591  29FF
7592  2A00
7593  2A01
7594  2A02
7595  2A03
7596  2A04
7597  2A05
7598  2A06
7599  2A07
7600  2A08
7601  2A09
7602  2A0A
7603  2A0B
7604  2A0C
7605  2A0D
7606  2A0E
7607  2A0F
7608  2A10
7609  2A11
7610  2A12
7611  2A13
7612  2A14
7613  2A15
7614  2A16
7615  2A17
7616  2A18
7617  2A19
7618  2A1A
7619  2A1B
7620  2A1C
7621  2A1D
7622  2A1E
7623  2A1F
7624  2A20
7625  2A21
7626  2A22
7627  2A23
7628  2A24
7629  2A25
7630  2A26
7631  2A27
7632  2A28
7633  2A29
7634  2A2A
7635  2A2B
7636  2A2C
7637  2A2D
7638  2A2E
7639  2A2F
7640  2A30
7641  2A31
7642  2A32
7643  2A33
7644  2A34
7645  2A35
7646  2A36
7647  2A37
7648  2A38
7649  2A39
7650  2A3A
7651  2A3B
7652  2A3C
7653  2A3D
7654  2A3E
7655  2A3F
7656  2A40
7657  2A41
7658  2A42
7659  2A43
7660  2A44
7661  2A45
7662  2A46
7663  2A47
7664  2A48
7665  2A49
7666  2A4A
7667  2A4B
7668  2A4C
7669  2A4D
7670  2A4E
7671  2A4F
7672  2A50
7673  2A51
7674  2A52
7675  2A53
7676  2A54
7677  2A55
7678  2A56
7679  2A57
7680  2A58
7681  2A59
7682  2A5A
7683  2A5B
7684  2A5C
7685  2A5D
7686  2A5E
7687  2A5F
7688  2A60
7689  2A61
7690  2A62
7691  2A63
7692  2A64
7693  2A65
7694  2A66
7695  2A67
7696  2A68
7697  2A69
7698  2A6A
7699  2A6B
7700  2A6C
7701  2A6D
7702  2A6E
7703  2A6F
7704  2A70
7705  2A71
7706  2A72
7707  2A73
7708  2A74
7709  2A75
7710  2A76
7711  2A77
7712  2A78
7713  2A79
7714  2A7A
7715  2A7B
7716  2A7C
7717  2A7D
7718  2A7E
7719  2A7F
7720  2A80
7721  2A81
7722  2A82
7723  2A83
7724  2A84
7725  2A85
7726  2A86
7727  2A87
7728  2A88
7729  2A89
7730  2A8A
7731  2A8B
7732  2A8C
7733  2A8D
7734  2A8E
7735  2A8F
7736  2A90
7737  2A91
7738  2A92
7739  2A93
7740  2A94
7741  2A95
7742  2A96
7743  2A97
7744  2A98
7745  2A99
7746  2A9A
7747  2A9B
7748  2A9C
7749  2A9D
7750  2A9E
7751  2A9F
7752  2AA0
7753  2AA1
7754  2AA2
7755  2AA3
7756  2AA4
7757  2AA5
7758  2AA6
7759  2AA7
7760  2AA8
7761  2AA9
7762  2AAA
7763  2AAB
7764  2AAC
7765  2AAD
7766  2AAE
7767  2AAF
7768  2AB0
7769  2AB1
7770  2AB2
7771  2AB3
7772  2AB4
7773  2AB5
7774  2AB6
7775  2AB7
7776  2AB8
7777  2AB9
7778  2ABA
7779  2ABB
7780  2ABC
7781  2ABD
7782  2ABE
7783  2ABF
7784  2AC0
7785  2AC1
7786  2AC2
7787  2AC3
7788  2AC4
7789  2AC5
7790  2AC6
7791  2AC7
7792  2AC8
7793  2AC9
7794  2ACA
7795  2ACB
7796  2ACC
7797  2ACD
7798  2ACE
7799  2ACF
7800  2AD0
7801  2AD1
7802  2AD2
7803  2AD3
7804  2AD4
7805  2AD5
7806  2AD6
7807  2AD7
7808  2AD8
7809  2AD9
7810  2ADA
7811  2ADB
7812  2ADC
7813  2ADD
7814  2ADE
7815  2ADF
7816  2AE0
7817  2AE1
7818  2AE2
7819  2AE3
7820  2AE4
7821  2AE5
7822  2AE6
7823  2AE7
7824  2AE8
7825  2AE9
7826  2AEA
7827  2AEB
7828  2AEC
7829  2AED
7830  2AEE
7831  2AEF
7832  2AF0
7833  2AF1
7834  2AF2
7835  2AF3
7836  2AF4
7837  2AF5
7838  2AF6
7839  2AF7
7840  2AF8
7841  2AF9
7842  2AFA
7843  2AFB
7844  2AFC
7845  2AFD
7846  2AFE
7847  2AFF
7848  2B00
7849  2B01
7850  2B02
7851  2B03
7852  2B04
7853  2B05
7854  2B06
7855  2B07
7856  2B08
7857  2B09
7858  2B0A
7859  2B0B
7860  2B0C
7861  2B0D
7862  2B0E
7863  2B0F
7864  2B10
7865  2B11
7866  2B12
7867  2B13
7868  2B14
7869  2B15
7870  2B16
7871  2B17
7872  2B18
7873  2B19
7874  2B1A
7875  2B1B
7876  2B1C
7877  2B1D
7878  2B1E
7879  2B1F
7880  2B20
7881  2B21
7882  2B22
7883  2B23
7884  2B24
7885  2B25
7886  2B26
7887  2B27
7888  2B28
7889  2B29
7890  2B2A
7891  2B2B
7892  2B2C
7893  2B2D
7894  2B2E
7895  2B2F
7896  2B30
7897  2B31
7898  2B32
7899  2B33
7900  2B34
7901  2B35
7902  2B36
7903  2B37
7904  2B38
7905  2B39
7906  2B3A
7907  2B3B
7908  2B3C
7909  2B3D
7910  2B3E
7911  2B3F
7912  2B40
7913  2B41
7914  2B42
7915  2B43
7916  2B44
7917  2B45
7918  2B46
7919  2B47
7920  2B48
7921  2B49
7922  2B4A
7923  2B4B
7924  2B4C
7925  2B4D
7926  2B4E
7927  2B4F
7928  2B50
7929  2B51
7930  2B52
7931  2B53
7932  2B54
7933  2B55
7934  2B56
7935  2B57
7936  2B58
7937  2B59
7938  2B5A
7939  2B5B
7940  2B5C
7941  2B5D
7942  2B5E
7943  2B5F
7944  2B60
7945  2B61
7946  2B62
7947  2B63
7948  2B64
7949  2B65
7950  2B66
7951  2B67
7952  2B68
7953  2B69
7954  2B6A
7955  2B6B
7956  2B6C
7957  2B6D
7958  2B6E
7959  2B6F
7960  2B70
7961  2B71
7962  2B72
7963  2B73
7964  2B74
7965  2B75
7966  2B76
7967  2B77
7968  2B78
7969  2B79
7970  2B7A
7971  2B7B
7972  2B7C
7973  2B7D
7974  2B7E
7975  2B7F
7976  2B80
7977  2B81
7978  2B82
7979  2B83
7980  2B84
7981  2B85
7982  2B86
7983  2B87
7984  2B88
7985  2B89
7986  2B8A
7987  2B8B
7988  2B8C
7989  2B8D
7990  2B8E
7991  2B8F
7992  2B90
7993  2B91
7994  2B92
7995  2B93
7996  2B94
7997  2B95
7998  2B96
7999  2B97
8000  2B98
8001  2B99
8002  2B9A
8003  2B9B
8004  2B9C
8005  2B9D
8006  2B9E
8007  2B9F
8008  2BA0
8009  2BA1
8010  2BA2
8011  2BA3
8012  2BA4
8013  2BA5
8014  2BA6
8015  2BA7
8016  2BA8
8017  2BA9
8018  2BAA
8019  2BAB
8020  2BAC
8021  2BAD
8022  2BAE
8023  2BAF
8024  2BB0
8025  2BB1
8026  2BB2
8027  2BB3
8028  2BB4
8029  2BB5
8030  2BB6
8031  2BB7
8032  2BB8
8033  2BB9
8034  2BBA
8035  2BBB
8036  2BBC
8037  2BBD
8038  2BBE
8039  2BBF
8040  2BC0
8041  2BC1
8042  2BC2
8043  2BC3
8044  2BC4
8045  2BC5
8046  2BC6
8047  2BC7
8048  2BC8
8049  2BC9
8050  2BCA
8051  2BCB
8052  2BCC
8053  2BCD
8054  2BCE
8055  2BCF
8056  2BD0
8057  2BD1
8058  2BD2
8059  2BD3
8060  2BD4
8061  2BD5
8062  2BD6
8063  2BD7
8064  2BD8
8065  2BD9
8066  2BDA
8067  2BDB
8068  2BDC
8069  2BDD
8070  2BDE
8071  2BDF
8072  2BE0
8073  2BE1
8074  2BE2
8075  2BE3
8076  2BE4
8077  2BE5
8078  2BE6
8079  2BE7
8080  2BE8
8081  2BE9
8082  2BEA
8083  2BEB
8084  2BEC
8085  2BED
8086  2BEE
8087  2BEF
8088  2BF0
8089  2BF1
8090  2BF2
8091  2BF3
8092  2BF4
8093  2BF5
8094  2BF6
8095  2BF7
8096  2BF8
8097  2BF9
8098  2BFA
8099  2BFB
8100  2BFC
8101  2BFD
8102  2BFE
8103  2BFF
8104  2C00
8105  2C01
8106  2C02
8107  2C03
8108  2C04
8109  2C05
8110  2C06
8111  2C07
8112  2C08
8113  2C09
8114  2C0A
8115  2C0B
8116  2C0C
8117  2C0D
8118  2C0E
8119  2C0F
8120  2C10
8121  2C11
8122  2C12
8123  2C13
8124  2C14
8125  2C15
8126  2C16
8127  2C17
8128  2C18
8129  2C19
8130  2C1A
8131  2C1B
8132  2C1C
8133  2C1D
8134  2C1E
8135  2C1F
8136  2C20
8137  2C21
8138  2C22
8139  2C23
8140  2C24
8141  2C25
8142  2C26
8143  2C27
8144  2C28
8145  2C29
8146  2C2A
8147  2C2B
8148  2C2C
8149  2C2D
8150  2C2E
8151  2C2F
8152  2C30
8153  2C31
8154  2C32
8155  2C33
8156  2C34
8157  2C35
8158  2C36
8159  2C37
8160  2C38
8161  2C39
8162  2C3A
8163  2C3B
8164  2C3C
8165  2C3D
8166  2C3E
8167  2C3F
8168  2C40
8169  2C41
8170  2C42
8171  2C43
8172  2C44
8173  2C45
8174  2C46
8175  2C47
8176  2C48
8177  2C49
8178  2C4A
8179  2C4B
8180  2C4C
8181  2C4D
8182  2C4E
8183  2C4F
8184  2C50
8185  2C51
8186  2C52
8187  2C53
8188  2C54
8189  2C55
8190  2C56
8191  2C57
8192  2C58
8193  2C59
8194  2C5A
8195  2C5B
8196  2C5C
8197  2C5D
8198  2C5E
8199  2C5F
8200  2C60
8201  2C61
8202  2C62
8203  2C63
8204  2C64
8205  2C65
8206  2C66
8207  2C67
8208  2C68
8209  2C69
8210  2C6A
8211  2C6B
8212  2C6C
8213  2C6D
8214  2C6E
8215  2C6F
8216  2C70
8217  2C71
8218  2C72
8219  2C73
8220  2C74
8221  2C75
8222  2C76
8223  2C77
8224  2C78
8225  2C79
8226  2C7A
8227  2C7B
8228  2C7C
8229  2C7D
8230  2C7E
8231  2C7F
8232  2C80
8233  2C81
8234  2C82
8235  2C83
8236  2C84
8237  2C85
8238  2C86
8239  2C87
8240  2C88
8241  2C89
8242  2C8A
8243  2C8B
8244  2C8C
8245  2C8D
8246  2C8E
8247  2C8F
8248  2C90
8249  2C91
8250  2C92
8251  2C93
8252  2C94
8253  2C95
8254  2C96
8255  2C97
8256  2C98
8257  2C99
8258  2C9A
8259  2C9B
8260  2C9C
8261  2C9D
8262  2C9E
8263  2C9F
8264  2CA0
8265  2CA1
8266  2CA2
8267  2CA3
8268  2CA4
8269  2CA5
8270  2CA6
8271  2CA7
8272  2CA8
8273  2CA9
8274  2CAA
8275  2CAB
8276  2CAC
8277  2CAD
8278  2CAE
8279  2CAF
8280  2CB0
8281  2CB1
8282  2CB2
8283  2CB3
8284  2CB4
8285  2CB5
8286  2CB6
8287  2CB7
8288  2CB8
8289  2CB9
8290  2CBA
8291  2CBB
8292  2CBC
8293  2CBD
8294  2CBE
8295  2CBF
8296  2CC0
8297  2CC1
8298  2CC2
8299  2CC3
8300  2CC4
8301  2CC5
8302  2CC6
8303  2CC7
8304  2CC8
8305  2CC9
8306  2CCA
8307  2CCB
8308  2CCC
8309  2CCD
8310  2CCE
8311  2CCF
8312  2CD0
8313  2CD1
8314  2CD2
8315  2CD3
8316  2CD4
8317  2CD5
8318  2CD6
8319  2CD7
8320  2CD8
8321  2CD9
8322  2CDA
8323  2CDB
8324  2CDC
8325  2CDD
8326  2CDE
8327  2CDF
8328  2CE0
8329  2CE1
8330  2CE2
8331  2CE3
8332  2CE4
8333  2CE5
8334  2CE6
8335  2CE7
8336  2CE8
8337  2CE9
8338  2CEA
8339  2CEB
8340  2CEC
8341  2CED
8342  2CEE
8343  2CEF
8344  2CF0
8345  2CF1
8346  2CF2
8347  2CF3
8348  2CF4
8349  2CF5
8350  2CF6
8351  2CF7
8352  2CF8
8353  2CF9
8354  2CFA
8355  2CFB
8356  2CFC
8357  2CFD
8358  2CFE
8359  2CFF
8360  2D00
8361  2D01
8362  2D02
8363  2D03
8364  2D04
8365  2D05
8366  2D06
8367  2D07
8368  2D08
8369  2D09
8370  2D0A
8371  2D0B
8372  2D0C
8373  2D0D
8374  2D0E
8375  2D0F
8376  2D10
8377  2D11
8378  2D12
8379  2D13
8380  2D14
8381  2D15
8382  2D16
8383  2D17
8384  2D18
8385  2D19
8386  2D1A
8387  2D1B
8388  2D1C
8389  2D1D
8390  2D1E
8391  2D1F
8392  2D20
8393  2D21
8394  2D22
8395  2D23
8396  2D24
8397  2D25
8398  2D26
8399  2D27
8400  2D28
8401  2D29
8402  2D2A
8403  2D2B
8404  2D2C
8405  2D2D
8406  2D2E
8407  2D2F
8408  2D30
8409  2D31
8410  2D32
8411  2D33
8412  2D34
8413  2D35
8414  2D36
8415  2D37
8416  2D38
8417  2D39
8418  2D3A
8419  2D3B
8420  2D3C
8421  2D3D
8422  2D3E
8423  2D3F
8424  2D40
8425  2D41
8426  2D42
8427  2D43
8428  2D44
8429  2D45
8430  2D46
8431  2D47
8432  2D48
8433  2D49
8434  2D4A
8435  2D4B
8436  2D4C
8437  2D4D
8438  2D4E
8439  2D4F
8440  2D50
8441  2D51
8442  2D52
8443  2D53
8444  2D54
8445  2D55
8446  2D56
8447  2D57
8448  2D58
8449  2D59
8450  2D5A
8451  2D5B
8452  2D5C
8453  2D5D
8454  2D5E
8455  2D5F
8456  2D60
8457  2D61
8458  2D62
8459  2D63
8460  2D64
8461  2D65
8462  2D66
8463  2D67
8464  2D68
8465  2D69
8466  2D6A
8467  2D6B
8468  2D6C
8469  2D6D
8470  2D6E
8471  2D6F
8472  2D70
8473  2D71
8474  2D72
8475  2D73
8476  2D74
8477  2D75
8478  2D76
8479  2D77
8480  2D78
8481  2D79
8482  2D7A
8483  2D7B
8484  2D7C
8485  2D7D
8486  2D7E
8487  2D7F
8488  2D80
8489  2D81
8490  2D82
8491  2D83
8492  2D84
8493  2D85
8494  2D86
8495  2D87
8496  2D88
8497  2D89
8498  2D8A
8499  2D8B
8500  2D8C
8501  2D8D
8502  2D8E
8503  2D8F
8504  2D90
8505  2D91
8506  2D92
8507  2D93
8508  2D94
8509  2D95
8510  2D96
8511  2D97
8512  2D98
8513  2D99
8514  2D9A
8515  2D9B
8516  2D9C
8517  2D9D
8518  2D9E
8519  2D9F
8520  2DA0
8521  2DA1
8522  2DA2
8523  2DA3
8524  2DA4
8525  2DA5
8526  2DA6
8527  2DA7
8528  2DA8
8529  2DA9
8530  2DAA
8531  2DAB
8532  2DAC
8533  2DAD
8534  2DAE
8535  2DAF
8536  2DB0
8537  2DB1
8538  2DB2
8539  2DB3
8540  2DB4
8541  2DB5
8542  2DB6
8543  2DB7
8544  2DB8
8545  2DB9
8546  2DBA
8547  2DBB
8548  2DBC
8549  2DBD
8550  2DBE
8551  2DBF
8552  2DC0
8553  2DC1
8554  2DC2
8555  2DC3
8556  2DC4
8557  2DC5
8558  2DC6
8559  2DC7
8560  2DC8
8561  2DC9
8562  2DCA
8563  2DCB
8564  2DCC
8565  2DCD
8566  2DCE
8567  2DCF
8568  2DD0
8569  2DD1
8570  2DD2
8571  2DD3
8572  2DD4
8573  2DD5
8574  2DD6
8575  2DD7
8576  2DD8
8577  2DD9
8578  2DDA
8579  2DDB
8580  2DDC
8581  2DDD
8582  2DDE
8583  2DDF
8584  2DE0
8585  2DE1
8586  2DE2
8587  2DE3
8588  2DE4
8589  2DE5
8590  2DE6
8591  2DE7
8592  2DE8
8593  2DE9
8594  2DEA
8595  2DEB
8596  2DEC
8597  2DED
8598  2DEE
8599  2DEF
8600  2DF0
8601  2DF1
8602  2DF2
8603  2DF3
8604  2DF4
8605  2DF5
8606  2DF6
8607  2DF7
8608  2DF8
8609  2DF9
8610  2DFA
8611  2DFB
8612  2DFC
8613  2DFD
8614  2DFE
8615  2DFF
8616  2E00
8617  2E01
8618  2E02
8619  2E03
8620  2E04
8621  2E05
8622  2E06
8623  2E07
8624  2E08
8625  2E09
8626  2E0A
8627  2E0B
8628  2E0C
8629  2E0D
8630  2E0E
8631  2E0F
8632  2E10
8633  2E11
8634  2E12
8635  2E13
8636  2E14
8637  2E15
8638  2E16
8639  2E17
8640  2E18
8641  2E19
8642  2E1A
8643  2E1B
8644  2E1C
8645  2E1D
8646  2E1E
8647  2E1F
8648  2E20
8649  2E21
8650  2E22
8651  2E23
8652  2E24
8653  2E25
8654  2E26
8655  2E27
8656  2E28
8657  2E29
8658  2E2A
8659  2E2B
8660  2E2C
8661  2E2D
8662  2E2E
8663  2E2F
8664  2E30
8665  2E31
8666  2E32
8667  2E33
8668  2E34
8669  2E35
8670  2E36
8671  2E37
8672  2E38
8673  2E39
8674  2E3A
8675  2E3B
8676  2E3C
8677  2E3D
8678  2E3E
8679  2E3F
8680  2E40
8681  2E41
8682  2E42
8683  2E43
8684  2E44
8685  2E45
8686  2E46
8687  2E47
8688  2E48
8689  2E49
8690  2E4A
8691  2E4B
8692  2E4C
8693  2E4D
8694  2E4E
8695  2E4F
8696  2E50
8697  2E51
8698  2E52
8699  2E53
8700  2E54
8701  2E55
8702  2E56
8703  2E57
8704  2E58
8705  2E59
8706  2E5A
8707  2E5B
8708  2E5C
8709  2E5D
8710  2E5E
8711  2E5F
8712  2E60
8713  2E61
8714  2E62
8715  2E63
8716  2E64
8717  2E65
8718  2E66
8719  2E67
8720  2E68
8721  2E69
8722  2E6A
8723  2E6B
8724  2E6C
8725  2E6D
8726  2E6E
8727  2E6F
8728  2E70
8729  2E71
8730  2E72
8731  2E73
8732  2E74
8733  2E75
8734  2E76
8735  2E77
8736  2E78
8737  2E79
8738  2E7A
8739  2E7B
8740  2E7C
8741  2E7D
8742  2E7E
8743  2E7F
8744  2E80
8745  2E81
8746  2E82
8747  2E83
8748  2E84
8749  2E85
8750  2E86
8751  2E87
8752  2E88
8753  2E89
8754  2E8A
8755  2E8B
8756  2E8C
8757  2E8D
8758  2E8E
8759  2E8F
8760  2E90
8761  2E91
8762  2E92
8763  2E93
8764  2E94
8765  2E95
8766  2E96
8767  2E97
8768  2E98
8769  2E99
8770  2E9A
8771  2E9B
8772  2E9C
8773  2E9D
8774  2E9E
8775  2E9F
8776  2EA0
8777  2EA1
8778  2EA2
8779  2EA3
8780  2EA4
8781  2EA5
8782  2EA6
8783  2EA7
8784  2EA8
8785  2EA9
8786  2EAA
8787  2EAB
8788  2EAC
8789  2EAD
8790  2EAE
8791  2EAF
8792  2EB0
8793  2EB1
8794  2EB2
8795  2EB3
8796  2EB4
8797  2EB5
8798  2EB6
8799  2EB7
8800  2EB8
8801  2EB9
8802  2EBA
8803  2EBB
8804  2EBC
8805  2EBD
8806  2EBE
8807  2EBF
8808  2EC0
8809  2EC1
8810  2EC2
8811  2EC3
8812  2EC4
8813  2EC5
8814  2EC6
8815  2EC7
8816  2EC8
8817  2EC9
8818  2ECA
8819  2ECB
8820  2ECC
8821  2ECD
8822  2ECE
8823  2ECF
8824  2ED0
8825  2ED1
8826  2ED2
8827  2ED3
8828  2ED4
8829  2ED5
8830  2ED6
8831  2ED7
8832  2ED8
8833  2ED9
8834  2EDA
8835  2EDB
8836  2EDC
8837  2EDD
8838  2EDE
8839  2EDF
8840  2EE0
8841  2EE1
8842  2EE2
8843  2EE3
8844  2EE4
8845  2EE5
8846  2EE6
8847  2EE7
8848  2EE8
8849  2EE9
8850  2EEA
8851  2EEB
8852  2EEC
8853  2EED
8854  2EEE
8855  2EEF
8856  2EF0
8857  2EF1
8858  2EF2
8859  2EF3
8860  2EF4
8861  2EF5
8862  2EF6
8863  2EF7
8864  2EF8
8865  2EF9
8866  2EFA
8867  2EFB
8868  2EFC
8869  2EFD
8870  2EFE
8871  2EFF
8872  2F00
8873  2F01
8874  2F02
8875  2F03
8876  2F04
8877  2F05
8878  2F06
8879  2F07
8880  2F08
8881  2F09
8882  2F0A
8883  2F0B
8884  2F0C
8885  2F0D
8886  2F0E
8887  2F0F
8888  2F10
8889  2F11
8890  2F12
8891  2F13
8892  2F14
8893  2F15
8894  2F16
8895  2F17
8896  2F18
8897  2F19
8898  2F1A
8899  2F1B
8900  2F1C
8901  2F1D
8902  2F1E
8903  2F1F
8904  2F20
8905  2F21
8906  2F22
8907  2F23
8908  2F24
8909  2F25
8910  2F26
8911  2F27
8912  2F28
8913  2F29
8914  2F2A
8915  2F2B
8916  2F2C
8917  2F2D
8918  2F2E
8919  2F2F
8920  2F30
8921  2F31
8922  2F32
8923  2F33
8924  2F34
8925  2F35
8926  2F36
8927  2F37
8928  2F38
8929  2F39
8930  2F3A
8931  2F3B
8932  2F3C
8933  2F3D
8934  2F3E
8935  2F3F
8936  2F40
8937  2F41
8938  2F42
8939  2F43
8940  2F44
8941  2F45
8942  2F46
8943  2F47
8944  2F48
8945  2F49
8946  2F4A
8947  2F4B
8948  2F4C
8949  2F4D
8950  2F4E
8951  2F4F
8952  2F50
8953  2F51
8954  2F52
8955  2F53
8956  2F54
8957  2F55
8958  2F56
8959  2F57
8960  2F58
8961  2F59
8962  2F5A
8963  2F5B
8964  2F5C
8965  2F5D
8966  2F5E
8967  2F5F
8968  2F60
8969  2F61
8970  2F62
8971  2F63
8972  2F64
8973  2F65
8974  2F66
8975  2F67
8976  2F68
8977  2F69
8978  2F6A
8979  2F6B
8980  2F6C
8981  2F6D
8982  2F6E
8983  2F6F
8984  2F70
8985  2F71
8986  2F72
8987  2F73
8988  2F74
8989  2F75
8990  2F76
8991  2F77
8992  2F78
8993  2F79
8994  2F7A
8995  2F7B
8996  2F7C
8997  2F7D
8998  2F7E
8999  2F7F
9000  2F80
9001  2F81
9002  2F82
9003  2F83
9004  2F84
9005  2F85
9006  2F86
9007  2F87
9008  2F88
9009  2F89
9010  2F8A
9011  2F8B
9012  2F8C
9013  2F8D
9014  2F8E
9015  2F8F
9016  2F90
9017  2F91
9018  2F92
9019  2F93
9020  2F94
9021  2F95
9022  2F96
9023  2F97
9024  2F98
9025  2F99
9026  2F9A
9027  2F9B
9028  2F9C
9029  2F9D
9030  2F9E
9031  2F9F
9032  2FA0
9033  2FA1
9034  2FA2
9035  2FA3
9036  2FA4
9037  2FA5
9038  2FA6
9039  2FA7
9040  2FA8
9041  2FA9
9042  2FAA
9043  2FAB
9044  2FAC
9045  2FAD
9046  2FAE
9047  2FAF
9048  2FB0
9049  2FB1
9050  2FB2
9051  2FB3
9052  2FB4
9053  2FB5
9054  2FB6
9055  2FB7
9056  2FB8
9057  2FB9
9058  2FBA
9059  2FBB
9060  2FBC
9061  2FBD
9062  2FBE
9063  2FBF
9064  2FC0
9065  2FC1
9066  2FC2
9067  2FC3
9068  2FC4
9069  2FC5
9070  2FC6
9071  2FC7
9072  2FC8
9073  2FC9
9074  2FCA
9075  2FCB
9076  2FCC
9077  2FCD
9078  2FCE
9079  2FCF
9080  2FD0
9081  2FD1
9082  2FD2
9083  2FD3
9084  2FD4
9085  2FD5
9086  2FD6
9087  2FD7
9088  2FD8
9089  2FD9
9090  2FDA
9091  2FDB
9092  2FDC
9093  2FDD
9094  2FDE
9095  2FDF
9096  2FE0
9097  2FE1
9098  2FE2
9099  2FE3
9100  2FE4
9101  2FE5
9102  2FE6
9103  2FE7
9104  2FE8
9105  2FE9
9106  2FEA
9107  2FEB
9108  2FEC
9109  2FED
9110  2FEE
9111  2FEF
9112  2FF0
9113  2FF1
9114  2FF2
9115  2FF3
9116  2FF4
9117  2FF5
9118  2FF6
9119  2FF7
9120  2FF8
9121  2FF9
9122  2FFA
9123  2FFB
9124  2FFC
9125  2FFD
9126  2FFE
9127  2FFF
9128  3000
9129  3001
9130  3002
9131  3003
9132  3004
9133  3005
9134  3006
9135  3007
9136  3008
9137  3009
9138  300A
9139  300B
9140  300C
9141  300D
9142  300E
9143  300F
9144  3010
9145  3011
9146  3012
9147  3013
9148  3014
9149  3015
9150  3016
9151  3017
9152  3018
9153  3019
9154  301A
9155  301B
9156  301C
9157  301D
9158  301E
9159  301F
9160  3020
9161  3021
9162  3022
9163  3023
9164  3024
9165  3025
9166  3026
9167  3027
9168  3028
9169  3029
9170  302A
9171  302B
9172  302C
9173  302D
9174  302E
9175  302F
9176  3030
9177  3031
9178  3032
9179  3033
9180  3034
9181  3035
9182  3036
9183  3037
9184  3038
9185  3039
9186  303A
9187  303B
9188  303C
9189  303D
9190  303E
9191  303F
9192  3040
9193  3041
9194  3042
9195  3043
9196  3044
9197  3045
9198  3046
9199  3047
9200  3048
9201  3049
9202  304A
9203  304B
9204  304C
9205  304D
9206  304E
9207  304F
9208  3050
9209  3051
9210  3052
9211  3053
9212  3054
9213  3055
9214  3056
9215  3057
9216  3058
9217  3059
9218  305A
9219  305B
9220  305C
9221  305D
9222  305E
9223  305F
9224  3060
9225  3061
9226  3062
9227  3063
9228  3064
9229  3065
9230  3066
9231  3067
9232  3068
9233  3069
9234  306A
9235  306B
9236  306C
9237  306D
9238  306E
9239  306F
9240  3070
9241  3071
9242  3072
9243  3073
9244  3074
9245  3075
9246  3076
9247  3077
9248  3078
9249  3079
9250  307A
9251  307B
9252  307C
9253  307D
9254  307E
9255  307F
9256  3080
9257  3081
9258  3082
9259  3083
9260  3084
9261  3085
9262  3086
9263  3087
9264  3088
9265  3089
9266  308A
9267  308B
9268  308C
9269  308D
9270  308E
9271  308F
9272  3090
9273  3091
9274  3092
9275  3093
9276  3094
9277  3095
9278  3096
9279  3097
9280  3098
9281  3099
9282  309A
9283  309B
9284  309C
9285  309D
9286  309E
9287  309F
9288  30A0
9289  30A1
9290  30A2
9291  30A3
9292  30A4
9293  30A5
9294  30A6
9295  30A7
9296  30A8
9297  30A9
9298  30AA
9299  30AB
9300  30AC
9301  30AD
9302  30AE
9303  30AF
9304  30B0
9305  30B1
9306  30B2
9307  30B3
9308  30B4
9309  30B5
9310  30B6
9311  30B7
9312  30B8
9313  30B9
9314  30BA
9315  30BB
9316  30BC
9317  30BD
9318  30BE
9319  30BF
9320  30C0
9321  30C1
9322  30C2
9323  30C3
9324  30C4
9325  30C5
9326  30C6
9327  30C7
9328  30C8
9329  30C9
9330  30CA
9331  30CB
9332  30CC
9333  30CD
9334  30CE
9335  30CF
9336  30D0
9337  30D1
9338  30D2
9339  30D3
9340  30D4
9341  30D5
9342  30D6
9343  30D7
9344  30D8
9345  30D9
9346  30DA
9347  30DB
9348  30DC
9349  30DD
9350  30DE
9351  30DF
9352  30E0
9353  30E1
9354  30E2
9355  30E3
9356  30E4
9357  30E5
9358  30E6
9359  30E7
9360  30E8
9361  30E9
9362  30EA
9363  30EB
9364  30EC
9365  30ED
9366  30EE
9367  30EF
9368  30F0
9369  30F1
9370  30F2
9371  30F3
9372  30F4
9373  30F5
9374  30F6
9375  30F7
9376  30F8
9377  30F9
9378  30FA
9379  30FB
9380  30FC
9381  30FD
9382  30FE
9383  30FF
9384  3100
9385  3101
9386  3102
9387  3103
9388  3104
9389  3105
9390  3106
9391  3107
9392  3108
9393  3109
9394  310A
9395  310B
9396  310C
9397  310D
9398  310E
9399  310F
9400  3110
9401  3111
9402  3112
9403  3113
9404  3114
9405  3115
9406  3116
9407  3117
9408  3118
9409  3119
9410  311A
9411  311B
9412  311C
9413  311D
9414  311E
9415  311F
9416  3120
9417  3121
9418  3122
9419  3123
9420  3124
9421  3125
9422  3126
9423  3127
9424  3128
9425  3129
9426  312A
9427  312B
9428  312C
9429  312D
9430  312E
9431  312F
9432  3130
9433  3131
9434  3132
9435  3133
9436  3134
9437  3135
9438  3136
9439  3137
9440  3138
9441  3139
9442  313A
9443  313B
9444  313C
9445  313D
9446  313E
9447  313F
9448  3140
9449  3141
9450  3142
9451  3143
9452  3144
9453  3145
9454  3146
9455  3147
9456  3148
9457  3149
9458  314A
9459  314B
9460  314C
9461  314D
9462  314E
9463  314F
9464  3150
9465  3151
9466  3152
9467  3153
9468  3154
9469  3155
9470  3156
9471  3157
9472  3158
9473  3159
9474  315A
9475  315B
9476  315C
9477  315D
9478  315E
9479  315F
9480  3160
9481  3161
9482  3162
9483  3163
9484  3164
9485  3165
9486  3166
9487  3167
9488  3168
9489  3169
9490  316A
9491  316B
9492  316C
9493  316D
9494  316E
9495  316F
9496  3170
9497  3171
9498  3172
9499  3173
9500  3174
9501  3175
9502  3176
9503  3177
9504  3178
9505  3179
9506  317A
9507  317B
9508  317C
9509  317D
9510  317E
9511  317F
9512  3180
9513  3181
9514  3182
9515  3183
9516  3184
9517  3185
9518  3186
9519  3187
9520  3188
9521  3189
9522  318A
9523  318B
9524  318C
9525  318D
9526  318E
9527  318F
9528  3190
9529  3191
9530  3192
9531  3193
9532  3194
9533  3195
9534  3196
9535  3197
9536  3198
9537  3199
9538  319A
9539  319B
9540  319C
9541  319D
9542  319E
9543  319F
9544  31A0
9545  31A1
9546  31A2
9547  31A3
9548  31A4
9549  31A5
9550  31A6
9551  31A7
9552  31A8
9553  31A9
9554  31AA
9555  31AB
9556  31AC
9557  31AD
9558  31AE
9559  31AF
9560  31B0
9561  31B1
9562  31B2
9563  31B3
9564  31B4
9565  31B5
9566  31B6
9567  31B7
9568  31B8
9569  31B9
9570  31BA
9571  31BB
9572  31BC
9573  31BD
9574  31BE
9575  31BF
9576  31C0
9577  31C1
9578  31C2
9579  31C3
9580  31C4
9581  31C5
9582  31C6
9583  31C7
9584  31C8
9585  31C9
9586  31CA
9587  31CB
9588  31CC
9589  31CD
9590  31CE
9591  31CF
9592  31D0
9593  31D1
9594  31D2
9595  31D3
9596  31D4
9597  31D5
9598  31D6
9599  31D7
9600  31D8
9601  31D9
9602  31DA
9603  31DB
9604  31DC
9605  31DD
9606  31DE
9607  31DF
9608  31E0
9609  31E1
9610  31E2
9611  31E3
9612  31E4
9613  31E5
9614  31E6
9615  31E7
9616  31E8
9617  31E9
9618  31EA
9619  31EB
9620  31EC
9621  31ED
9622  31EE
9623  31EF
9624  31F0
9625  31F1
9626  31F2
9627  31F3
9628  31F4
9629  31F5
9630  31F6
9631  31F7
9632  31F8
9633  31F9
9634  31FA
9635  31FB
9636  31FC
9637  31FD
9638  31FE
9639  31FF
9640  3200
9641  3201
9642  3202
9643  3203
9644  3204
9645  3205
9646  3206
9647  3207
9648  3208
9649  3209
9650  320A
9651  320B
9652  320C
9653  320D
9654  320E
9655  320F
9656  3210
9657  3211
9658  3212
9659  3213
9660  3214
9661  3215
9662  3216
9663  3217
9664  3218
9665  3219
9666  321A
9667  321B
9668  321C
9669  321D
9670  321E
9671  321F
9672  3220
9673  3221
9674  3222
9675  3223
9676  3224
9677  3225
9678  3226
9679  3227
9680  3228
9681  3229
9682  322A
9683  322B
9684  322C
9685  322D
9686  322E
9687  322F
9688  3230
9689  3231
9690  3232
9691  3233
9692  3234
9693  3235
9694  3236
9695  3237
9696  3238
9697  3239
9698  323A
9699  323B
9700  323C
9701  323D
9702  323E
9703  323F
9704  3240
9705  3241
9706  3242
9707  3243
9708  3244
9709  3245
9710  3246
9711  3247
9712  3248
9713  3249
9714  324A
9715  324B
9716  324C
9717  324D
9718  324E
9719  324F
9720  3250
9721  3251
9722  3252
9723  3253
9724  3254
9725  3255
9726  3256
9727  3257
9728  3258
9729  3259
9730  325A
9731  325B
9732  325C
9733  325D
9734  325E
9735  325F
9736  3260
9737  3261
9738  3262
9739  3263
9740  3264
9741  3265
9742  3266
9743  3267
9744  3268
9745  3269
9746  326A
9747  326B
9748  326C
9749  326D
9750  326E
9751  326F
9752  3270
9753  3271
9754  3272
9755  3273
9756  3274
9757  3275
9758  3276
9759  3277
9760  3278
9761  3279
9762  327A
9763  327B
9764  327C
9765  327D
9766  327E
9767  327F
9768  3280
9769  3281
9770  3282
9771  3283
9772  3284
9773  3285
9774  3286
9775  3287
9776  3288
9777  3289
9778  328A
9779  328B
9780  328C
9781  328D
9782  328E
9783  328F
9784  3290
9785  3291
9786  3292
9787  3293
9788  3294
9789  3295
9790  3296
9791  3297
9792  3298
9793  3299
9794  329A
9795  329B
9796  329C
9797  329D
9798  329E
9799  329F
9800  32A0
9801  32A1
9802  32A2
9803  32A3
9804  32A4
9805  32A5
9806  32A6
9807  32A7
9808  32A8
9809  32A9
9810  32AA
9811  32AB
9812  32AC
9813  32AD
9814  32AE
9815  32AF
9816  32B0
9817  32B1
9818  32B2
9819  32B3
9820  32B4
9821  32B5
9822  32B6
9823  32B7
9824  32B8
9825  32B9
9826  32BA
9827  32BB
9828  32BC
9829  32BD
9830  32BE
9831  32BF
9832  32C0
9833  32C1
9834  32C2
9835  32C3
9836  32C4
9837  32C5
9838  32C6
9839  32C7
9840  32C8
9841  32C9
9842  32CA
9843  32CB
9844  32CC
9845  32CD
9846  32CE
9847  32CF
9848  32D0
9849  32D1
9850  32D2
9851  32D3
9852  32D4
9853  32D5
9854  32D6
9855  32D7
9856  32D8
9857  32D9
9858  32DA
9859  32DB
9860  32DC
9861  32DD
9862  32DE
9863  32DF
9864  32E0
9865  32E1
9866  32E2
9867  32E3
9868  32E4
9869  32E5
9870  32E6
9871  32E7
9872  32E8
9873  32E9
9874  32EA
9875  32EB
9876  32EC
9877  32ED
9878  32EE
9879  32EF
9880  32F0
9881  32F1
9882  32F2
9883  32F3
9884  32F4
9885  32F5
9886  32F6
9887  32F7
9888  32F8
9889  32F9
9890  32FA
9891  32FB
9892  32FC
9893  32FD
9894  32FE
9895  32FF
9896  3300
9897  3301
9898  3302
9899  3303
9900  3304
9901  3305
9902  3306
9903  3307
9904  3308
9905  3309
9906  330A
9907  330B
9908  330C
9909  330D
9910  330E
9911  330F
9912  3310
9913  3311
9914  3312
9915  3313
9916  3314
9917  3315
9918  3316
9919  3317
9920  3318
9921  3319
9922  331A
9923  331B
9924  331C
9925  331D
9926  331E
9927  331F
9928  3320
9929  3321
9930  3322
9931  3323
9932  3324
9933  3325
9934  3326
9935  3327
9936  3328
9937  3329
9938  332A
9939  332B
9940  332C
9941  332D
9942  332E
9943  332F
9944  3330
9945  3331
9946  3332
9947  3333
9948  3334
9949  3335
9950  3336
9951  3337
9952  3338
9953  3339
9954  333A
9955  333B
9956  333C
9957  333D
9958  333E
9959  333F
9960  3340
9961  3341
9962  3342
9963  3343
9964  3344
9965  3345
9966  3346
9967  3347
9968  3348
9969  3349
9970  334A
9971  334B
9972  334C
9973  334D
9974  334E
9975  334F
9976  3350
9977  3351
9978  3352
9979  3353
9980  3354
9981  3355
9982  3356
9983  3357
9984  3358
9985  3359
9986  335A
9987  335B
9988  335C
9989  335D
9990  335E
9991  335F
9992  3360
9993  3361
9994  3362
9995  3363
9996  3364
9997  3365
9998  3366
9999  3367
10000  3368
10001  3369
10002  336A
10003  336B
10004  336C
10005  336D
10006  336E
10007  336F
10008  3370
10009  3371
10010  3372
10011  3373
10012  3374
10013  3375
10014  3376
10015  3377
10016  3378
10017  3379
10018  337A
10019  337B
10020  337C
10021  337D
10022  337E
10023  337F
10024  3380
10025  3381
10026  3382
10027  3383
10028  3384
10029  3385
10030  3386
10031  3387
10032  3388
10033  3389
10034  338A
10035  338B
10036  338C
10037  338D
10038  338E
10039  338F
10040  3390
10041  3391
10042  3392
10043  3393
10044  3394
10045  3395
10046  3396
10047  3397
10048  3398
10049  3399
10050  339A
10051  339B
10052  339C
10053  339D
10054  339E
10055  339F
10056  33A0
10057  33A1
10058  33A2
10059  33A3
10060  33A4
10061  33A5
10062  33A6
10063  33A7
10064  33A8
10065  33A9
10066  33AA
10067  33AB
10068  33AC
10069  33AD
10070  33AE
10071  33AF
10072  33B0
10073  33B1
10074  33B2
10075  33B3
10076  33B4
10077  33B5
10078  33B6
10079  33B7
10080  33B8
10081  33B9
10082  33BA
10083  33BB
10084  33BC
10085  33BD
10086  33BE
10087  33BF
10088  33C0
10089  33C1
10090  33C2
10091  33C3
10092  33C4
10093  33C5
10094  33C6
10095  33C7
10096  33C8
10097  33C9
10098  33CA
10099  33CB
10100  33CC
10101  33CD
10102  33CE
10103  33CF
10104  33D0
10105  33D1
10106  33D2
10107  33D3
10108  33D4
10109  33D5
10110  33D6
10111  33D7
10112  33D8
10113  33D9
10114  33DA
10115  33DB
10116  33DC
10117  33DD
10118  33DE
10119  33DF
10120  33E0
10121  33E1
10122  33E2
10123  33E3
10124  33E4
10125  33E5
10126  33E6
10127  33E7
10128  33E8
10129  33E9
10130  33EA
10131  33EB
10132  33EC
10133  33ED
10134  33EE
10135  33EF
10136  33F0
10137  33F1
10138  33F2
10139  33F3
10140  33F4
10141  33F5
10142  33F6
10143  33F7
10144  33F8
10145  33F9
10146  33FA
10147  33FB
10148  33FC
10149  33FD
10150  33FE
10151  33FF
10152  3400
10153  3401
10154  3402
10155  3403
10156  3404
10157  3405
10158  3406
10159  3407
10160  3408
10161  3409
10162  340A
10163  340B
10164  340C
10165  340D
10166  340E
10167  340F
10168  3410
10169  3411
10170  3412
10171  3413
10172  3414
10173  3415
10174  3416
10175  3417
10176  3418
10177  3419
10178  341A
10179  341B
10180  341C
10181  341D
10182  341E
10183  341F
10184  3420
10185  3421
10186  3422
10187  3423
10188  3424
10189  3425
10190  3426
10191  3427
10192  3428
10193  3429
10194  342A
10195  342B
10196  342C
10197  342D
10198  342E
10199  342F
10200  3430
10201  3431
10202  3432
10203  3433
10204  3434
10205  3435
10206  3436
10207  3437
10208  3438
10209  3439
10210  343A
10211  343B
10212  343C
10213  343D
10214  343E
10215  343F
10216  3440
10217  3441
10218  3442
10219  3443
10220  3444
10221  3445
10222  3446
10223  3447
10224  3448
10225  3449
10226  344A
10227  344B
10228  344C
10229  344D
10230  344E
10231  344F
10232  3450
10233  3451
10234  3452
10235  3453
10236  3454
10237  3455
10238  3456
10239  3457
10240  3458
10241  3459
10242  345A
10243  345B
10244  345C
10245  345D
10246  345E
10247  345F
10248  3460
10249  3461
10250  3462
10251  3463
10252  3464
10253  3465
10254  3466
10255  3467
10256  3468
10257  3469
10258  346A
10259  346B
10260  346C
10261  346D
10262  346E
10263  346F
10264  3470
10265  3471
10266  3472
10267  3473
10268  3474
10269  3475
10270  3476
10271  3477
10272  3478
10273  3479
10274  347A
10275  347B
10276  347C
10277  347D
10278  347E
10279  347F
10280  3480
10281  3481
10282  3482
10283  3483
10284  3484
10285  3485
10286  3486
10287  3487
10288  3488
10289  3489
10290  348A
10291  348B
10292  348C
10293  348D
10294  348E
10295  348F
10296  3490
10297  3491
10298  3492
10299  3493
10300  3494
10301  3495
10302  3496
10303  3497
10304  3498
10305  3499
10306  349A
10307  349B
10308  349C
10309  349D
10310  349E
10311  349F
10312  34A0
10313  34A1
10314  34A2
10315  34A3
10316  34A4
10317  34A5
10318  34A6
10319  34A7
10320  34A8
10321  34A9
10322  34AA
10323  34AB
10324  34AC
10325  34AD
10326  34AE
10327  34AF
10328  34B0
10329  34B1
10330  34B2
10331  34B3
10332  34B4
10333  34B5
10334  34B6
10335  34B7
10336  34B8
10337  34B9
10338  34BA
10339  34BB
10340  34BC
10341  34BD
10342  34BE
10343  34BF
10344  34C0
10345  34C1
10346  34C2
10347  34C3
10348  34C4
10349  34C5
10350  34C6
10351  34C7
10352  34C8
10353  34C9
10354  34CA
10355  34CB
10356  34CC
10357  34CD
10358  34CE
10359  34CF
10360  34D0
10361  34D1
10362  34D2
10363  34D3
10364  34D4
10365  34D5
10366  34D6
10367  34D7
10368  34D8
10369  34D9
10370  34DA
10371  34DB
10372  34DC
10373  34DD
10374  34DE
10375  34DF
10376  34E0
10377  34E1
10378  34E2
10379  34E3
10380  34E4
10381  34E5
10382  34E6
10383  34E7
10384  34E8
10385  34E9
10386  34EA
10387  34EB
10388  34EC
10389  34ED
10390  34EE
10391  34EF
10392  34F0
10393  34F1
10394  34F2
10395  34F3
10396  34F4
10397  34F5
10398  34F6
10399  34F7
10400  34F8
10401  34F9
10402  34FA
10403  34FB
10404  34FC
10405  34FD
10406  34FE
10407  34FF
10408  3500
10409  3501
10410  3502
10411  3503
10412  3504
10413  3505
10414  3506
10415  3507
10416  3508
10417  3509
10418  350A
10419  350B
10420  350C
10421  350D
10422  350E
10423  350F
10424  3510
10425  3511
10426  3512
10427  3513
10428  3514
10429  3515
10430  3516
10431  3517
10432  3518
10433  3519
10434  351A
10435  351B
10436  351C
10437  351D
10438  351E
10439  351F
10440  3520
10441  3521
10442  3522
10443  3523
10444  3524
10445  3525
10446  3526
10447  3527
10448  3528
10449  3529
10450  352A
10451  352B
10452  352C
10453  352D
10454  352E
10455  352F
10456  3530
10457  3531
10458  3532
10459  3533
10460  3534
10461  3535
10462  3536
10463  3537
10464  3538
10465  3539
10466  353A
10467  353B
10468  353C
10469  353D
10470  353E
10471  353F
10472  3540
10473  3541
10474  3542
10475  3543
10476  3544
10477  3545
10478  3546
10479  3547
10480  3548
10481  3549
10482  354A
10483  354B
10484  354C
10485  354D
10486  354E
10487  354F
10488  3550
10489  3551
10490  3552
10491  3553
10492  3554
10493  3555
10494  3556
10495  3557
10496  3558
10497  3559
10498  355A
10499  355B
10500  355C
10501  355D
10502  355E
10503  355F
10504  3560
10505  3561
10506  3562
10507  3563
10508  3564
10509  3565
10510  3566
10511  3567
10512  3568
10513  3569
10514  356A
10515  356B
10516  356C
10517  356D
10518  356E
10519  356F
10520  3570
10521  3571
10522  3572
10523  3573
10524  3574
10525  3575
10526  3576
10527  3577
10528  3578
10529  3579
10530  357A
10531  357B
10532  357C
10533  357D
10534  357E
10535  357F
10536  3580
10537  3581
10538  3582
10539  3583
10540  3584
10541  3585
10542  3586
10543  3587
10544  3588
10545  3589
10546  358A
10547  358B
10548  358C
10549  358D
10550  358E
10551  358F
10552  3590
10553  3591
10554  3592
10555  3593
10556  3594
10557  3595
10558  3596
10559  3597
10560  3598
10561  3599
10562  359A
10563  359B
10564  359C
10565  359D
10566  359E
10567  359F
10568  35A0
10569  35A1
10570  35A2
10571  35A3
10572  35A4
10573  35A5
10574  35A6
10575  35A7
10576  35A8
10577  35A9
10578  35AA
10579  35AB
10580  35AC
10581  35AD
10582  35AE
10583  35AF
10584  35B0
10585  35B1
10586  35B2
10587  35B3
10588  35B4
10589  35B5
10590  35B6
10591  35B7
10592  35B8
10593  35B9
10594  35BA
10595  35BB
10596  35BC
10597  35BD
10598  35BE
10599  35BF
10600  35C0
10601  35C1
10602  35C2
10603  35C3
10604  35C4
10605  35C5
10606  35C6
10607  35C7
10608  35C8
10609  35C9
10610  35CA
10611  35CB
10612  35CC
10613  35CD
10614  35CE
10615  35CF
10616  35D0
10617  35D1
10618  35D2
10619  35D3
10620  35D4
10621  35D5
10622  35D6
10623  35D7
10624  35D8
10625  35D9
10626  35DA
10627  35DB
10628  35DC
10629  35DD
10630  35DE
10631  35DF
10632  35E0
10633  35E1
10634  35E2
10635  35E3
10636  35E4
10637  35E5
10638  35E6
10639  35E7
10640  35E8
10641  35E9
10642  35EA
10643  35EB
10644  35EC
10645  35ED
10646  35EE
10647  35EF
10648  35F0
10649  35F1
10650  35F2
10651  35F3
10652  35F4
10653  35F5
10654  35F6
10655  35F7
10656  35F8
10657  35F9
10658  35FA
10659  35FB
10660  35FC
10661  35FD
10662  35FE
10663  35FF
10664  3600
10665  3601
10666  3602
10667  3603
10668  3604
10669  3605
10670  3606
10671  3607
10672  3608
10673  3609
10674  360A
10675  360B
10676  360C
10677  360D
10678  360E
10679  360F
10680  3610
10681  3611
10682  3612
10683  3613
10684  3614
10685  3615
10686  3616
10687  3617
10688  3618
10689  3619
10690  361A
10691  361B
10692  361C
10693  361D
10694  361E
10695  361F
10696  3620
10697  3621
10698  3622
10699  3623
10700  3624
10701  3625
10702  3626
10703  3627
10704  3628
10705  3629
10706  362A
10707  362B
10708  362C
10709  362D
10710  362E
10711  362F
10712  3630
10713  3631
10714  3632
10715  3633
10716  3634
10717  3635
10718  3636
10719  3637
10720  3638
10721  3639
10722  363A
10723  363B
10724  363C
10725  363D
10726  363E
10727  363F
10728  3640
10729  3641
10730  3642
10731  3643
10732  3644
10733  3645
10734  3646
10735  3647
10736  3648
10737  3649
10738  364A
10739  364B
10740  364C
10741  364D
10742  364E
10743  364F
10744  3650
10745  3651
10746  3652
10747  3653
10748  3654
10749  3655
10750  3656
10751  3657
10752  3658
10753  3659
10754  365A
10755  365B
10756  365C
10757  365D
10758  365E
10759  365F
10760  3660
10761  3661
10762  3662
10763  3663
10764  3664
10765  3665
10766  3666
10767  3667
10768  3668
10769  3669
10770  366A
10771  366B
10772  366C
10773  366D
10774  366E
10775  366F
10776  3670
10777  3671
10778  3672
10779  3673
10780  3674
10781  3675
10782  3676
10783  3677
10784  3678
10785  3679
10786  367A
10787  367B
10788  367C
10789  367D
10790  367E
10791  367F
10792  3680
10793  3681
10794  3682
10795  3683
10796  3684
10797  3685
10798  3686
10799  3687
10800  3688
10801  3689
10802  368A
10803  368B
10804  368C
10805  368D
10806  368E
10807  368F
10808  3690
10809  3691
10810  3692
10811  3693
10812  3694
10813  3695
10814  3696
10815  3697
10816  3698
10817  3699
10818  369A
10819  369B
10820  369C
10821  369D
10822  369E
10823  369F
10824  36A0
10825  36A1
10826  36A2
10827  36A3
10828  36A4
10829  36A5
10830  36A6
10831  36A7
10832  36A8
10833  36A9
10834  36AA
10835  36AB
10836  36AC
10837  36AD
10838  36AE
10839  36AF
10840  36B0
10841  36B1
10842  36B2
10843  36B3
10844  36B4
10845  36B5
10846  36B6
10847  36B7
10848  36B8
10849  36B9
10850  36BA
10851  36BB
10852  36BC
10853  36BD
10854  36BE
10855  36BF
10856  36C0
10857  36C1
10858  36C2
10859  36C3
10860  36C4
10861  36C5
10862  36C6
10863  36C7
10864  36C8
10865  36C9
10866  36CA
10867  36CB
10868  36CC
10869  36CD
10870  36CE
10871  36CF
10872  36D0
10873  36D1
10874  36D2
10875  36D3
10876  36D4
10877  36D5
10878  36D6
10879  36D7
10880  36D8
10881  36D9
10882  36DA
10883  36DB
10884  36DC
10885  36DD
10886  36DE
10887  36DF
10888  36E0
10889  36E1
10890  36E2
10891  36E3
10892  36E4
10893  36E5
10894  36E6
10895  36E7
10896  36E8
10897  36E9
10898  36EA
10899  36EB
10900  36EC
10901  36ED
10902  36EE
10903  36EF
10904  36F0
10905  36F1
10906  36F2
10907  36F3
10908  36F4
10909  36F5
10910  36F6
10911  36F7
10912  36F8
10913  36F9
10914  36FA
10915  36FB
10916  36FC
10917  36FD
10918  36FE
10919  36FF
10920  3700
10921  3701
10922  3702
10923  3703
10924  3704
10925  3705
10926  3706
10927  3707
10928  3708
10929  3709
10930  370A
10931  370B
10932  370C
10933  370D
10934  370E
10935  370F
10936  3710
10937  3711
10938  3712
10939  3713
10940  3714
10941  3715
10942  3716
10943  3717
10944  3718
10945  3719
10946  371A
10947  371B
10948  371C
10949  371D
10950  371E
10951  371F
10952  3720
10953  3721
10954  3722
10955  3723
10956  3724
10957  3725
10958  3726
10959  3727
10960  3728
10961  3729
10962  372A
10963  372B
10964  372C
10965  372D
10966  372E
10967  372F
10968  3730
10969  3731
10970  3732
10971  3733
10972  3734
10973  3735
10974  3736
10975  3737
10976  3738
10977  3739
10978  373A
10979  373B
10980  373C
10981  373D
10982  373E
10983  373F
10984  3740
10985  3741
10986  3742
10987  3743
10988  3744
10989  3745
10990  3746
10991  3747
10992  3748
10993  3749
10994  374A
10995  374B
10996  374C
10997  374D
10998  374E
10999  374F
11000  3750
11001  3751
11002  3752
11003  3753
11004  3754
11005  3755
11006  3756
11007  3757
11008  3758
11009  3759
11010  375A
11011  375B
11012  375C
11013  375D
11014  375E
11015  375F
11016  3760
11017  3761
11018  3762
11019  3763
11020  3764
11021  3765
11022  3766
11023  3767
11024  3768
11025  3769
11026  376A
11027  376B
11028  376C
11029  376D
11030  376E
11031  376F
11032  3770
11033  3771
11034  3772
11035  3773
11036  3774
11037  3775
11038  3776
11039  3777
11040  3778
11041  3779
11042  377A
11043  377B
11044  377C
11045  377D
11046  377E
11047  377F
11048  3780
11049  3781
11050  3782
11051  3783
11052  3784
11053  3785
11054  3786
11055  3787
11056  3788
11057  3789
11058  378A
11059  378B
11060  378C
11061  378D
11062  378E
11063  378F
11064  3790
11065  3791
11066  3792
11067  3793
11068  3794
11069  3795
11070  3796
11071  3797
11072  3798
11073  3799
11074  379A
11075  379B
11076  379C
11077  379D
11078  379E
11079  379F
11080  37A0
11081  37A1
11082  37A2
11083  37A3
11084  37A4
11085  37A5
11086  37A6
11087  37A7
11088  37A8
11089  37A9
11090  37AA
11091  37AB
11092  37AC
11093  37AD
11094  37AE
11095  37AF
11096  37B0
11097  37B1
11098  37B2
11099  37B3
11100  37B4
11101  37B5
11102  37B6
11103  37B7
11104  37B8
11105  37B9
11106  37BA
11107  37BB
11108  37BC
11109  37BD
11110  37BE
11111  37BF
11112  37C0
11113  37C1
11114  37C2
11115  37C3
11116  37C4
11117  37C5
11118  37C6
11119  37C7
11120  37C8
11121  37C9
11122  37CA
11123  37CB
11124  37CC
11125  37CD
11126  37CE
11127  37CF
11128  37D0
11129  37D1
11130  37D2
11131  37D3
11132  37D4
11133  37D5
11134  37D6
11135  37D7
11136  37D8
11137  37D9
11138  37DA
11139  37DB
11140  37DC
11141  37DD
11142  37DE
11143  37DF
11144  37E0
11145  37E1
11146  37E2
11147  37E3
11148  37E4
11149  37E5
11150  37E6
11151  37E7
11152  37E8
11153  37E9
11154  37EA
11155  37EB
11156  37EC
11157  37ED
11158  37EE
11159  37EF
11160  37F0
11161  37F1
11162  37F2
11163  37F3
11164  37F4
11165  37F5
11166  37F6
11167  37F7
11168  37F8
11169  37F9
11170  37FA
11171  37FB
11172  37FC
11173  37FD
11174  37FE
11175  37FF
11176  3800
11177  3801
11178  3802
11179  3803
11180  3804
11181  3805
11182  3806
11183  3807
11184  3808
11185  3809
11186  380A
11187  380B
11188  380C
11189  380D
11190  380E
11191  380F
11192  3810
11193  3811
11194  3812
11195  3813
11196  3814
11197  3815
11198  3816
11199  3817
11200  3818
11201  3819
11202  381A
11203  381B
11204  381C
11205  381D
11206  381E
11207  381F
11208  3820
11209  3821
11210  3822
11211  3823
11212  3824
11213  3825
11214  3826
11215  3827
11216  3828
11217  3829
11218  382A
11219  382B
11220  382C
11221  382D
11222  382E
11223  382F
11224  3830
11225  3831
11226  3832
11227  3833
11228  3834
11229  3835
11230  3836
11231  3837
11232  3838
11233  3839
11234  383A
11235  383B
11236  383C
11237  383D
11238  383E
11239  383F
11240  3840
11241  3841
11242  3842
11243  3843
11244  3844
11245  3845
11246  3846
11247  3847
11248  3848
11249  3849
11250  384A
11251  384B
11252  384C
11253  384D
11254  384E
11255  384F
11256  3850
11257  3851
11258  3852
11259  3853
11260  3854
11261  3855
11262  3856
11263  3857
11264  3858
11265  3859
11266  385A
11267  385B
11268  385C
11269  385D
11270  385E
11271  385F
11272  3860
11273  3861
11274  3862
11275  3863
11276  3864
11277  3865
11278  3866
11279  3867
11280  3868
11281  3869
11282  386A
11283  386B
11284  386C
11285  386D
11286  386E
11287  386F
11288  3870
11289  3871
11290  3872
11291  3873
11292  3874
11293  3875
11294  3876
11295  3877
11296  3878
11297  3879
11298  387A
11299  387B
11300  387C
11301  387D
11302  387E
11303  387F
11304  3880
11305  3881
11306  3882
11307  3883
11308  3884
11309  3885
11310  3886
11311  3887
11312  3888
11313  3889
11314  388A
11315  388B
11316  388C
11317  388D
11318  388E
11319  388F
11320  3890
11321  3891
11322  3892
11323  3893
11324  3894
11325  3895
11326  3896
11327  3897
11328  3898
11329  3899
11330  389A
11331  389B
11332  389C
11333  389D
11334  389E
11335  389F
11336  38A0
11337  38A1
11338  38A2
11339  38A3
11340  38A4
11341  38A5
11342  38A6
11343  38A7
11344  38A8
11345  38A9
11346  38AA
11347  38AB
11348  38AC
11349  38AD
11350  38AE
11351  38AF
11352  38B0
11353  38B1
11354  38B2
11355  38B3
11356  38B4
11357  38B5
11358  38B6
11359  38B7
11360  38B8
11361  38B9
11362  38BA
11363  38BB
11364  38BC
11365  38BD
11366  38BE
11367  38BF
11368  38C0
11369  38C1
11370  38C2
11371  38C3
11372  38C4
11373  38C5
11374  38C6
11375  38C7
11376  38C8
11377  38C9
11378  38CA
11379  38CB
11380  38CC
11381  38CD
11382  38CE
11383  38CF
11384  38D0
11385  38D1
11386  38D2
11387  38D3
11388  38D4
11389  38D5
11390  38D6
11391  38D7
11392  38D8
11393  38D9
11394  38DA
11395  38DB
11396  38DC
11397  38DD
11398  38DE
11399  38DF
11400  38E0
11401  38E1
11402  38E2
11403  38E3
11404  38E4
11405  38E5
11406  38E6
11407  38E7
11408  38E8
11409  38E9
11410  38EA
11411  38EB
11412  38EC
11413  38ED
11414  38EE
11415  38EF
11416  38F0
11417  38F1
11418  38F2
11419  38F3
11420  38F4
11421  38F5
11422  38F6
11423  38F7
11424  38F8
11425  38F9
11426  38FA
11427  38FB
11428  38FC
11429  38FD
11430  38FE
11431  38FF
11432  3900
11433  3901
11434  3902
11435  3903
11436  3904
11437  3905
11438  3906
11439  3907
11440  3908
11441  3909
11442  390A
11443  390B
11444  390C
11445  390D
11446  390E
11447  390F
11448  3910
11449  3911
11450  3912
11451  3913
11452  3914
11453  3915
11454  3916
11455  3917
11456  3918
11457  3919
11458  391A
11459  391B
11460  391C
11461  391D
11462  391E
11463  391F
11464  3920
11465  3921
11466  3922
11467  3923
11468  3924
11469  3925
11470  3926
11471  3927
11472  3928
11473  3929
11474  392A
11475  392B
11476  392C
11477  392D
11478  392E
11479  392F
11480  3930
11481  3931
11482  3932
11483  3933
11484  3934
11485  3935
11486  3936
11487  3937
11488  3938
11489  3939
11490  393A
11491  393B
11492  393C
11493  393D
11494  393E
11495  393F
11496  3940
11497  3941
11498  3942
11499  3943
11500  3944
11501  3945
11502  3946
11503  3947
11504  3948
11505  3949
11506  394A
11507  394B
11508  394C
11509  394D
11510  394E
11511  394F
11512  3950
11513  3951
11514  3952
11515  3953
11516  3954
11517  3955
11518  3956
11519  3957
11520  3958
11521  3959
11522  395A
11523  395B
11524  395C
11525  395D
11526  395E
11527  395F
11528  3960
11529  3961
11530  3962
11531  3963
11532  3964
11533  3965
11534  3966
11535  3967
11536  3968
11537  3969
11538  396A
11539  396B
11540  396C
11541  396D
11542  396E
11543  396F
11544  3970
11545  3971
11546  3972
11547  3973
11548  3974
11549  3975
11550  3976
11551  3977
11552  3978
11553  3979
11554  397A
11555  397B
11556  397C
11557  397D
11558  397E
11559  397F
11560  3980
11561  3981
11562  3982
11563  3983
11564  3984
11565  3985
11566  3986
11567  3987
11568  3988
11569  3989
11570  398A
11571  398B
11572  398C
11573  398D
11574  398E
11575  398F
11576  3990
11577  3991
11578  3992
11579  3993
11580  3994
11581  3995
11582  3996
11583  3997
11584  3998
11585  3999
11586  399A
11587  399B
11588  399C
11589  399D
11590  399E
11591  399F
11592  39A0
11593  39A1
11594  39A2
11595  39A3
11596  39A4
11597  39A5
11598  39A6
11599  39A7
11600  39A8
11601  39A9
11602  39AA
11603  39AB
11604  39AC
11605  39AD
11606  39AE
11607  39AF
11608  39B0
11609  39B1
11610  39B2
11611  39B3
11612  39B4
11613  39B5
11614  39B6
11615  39B7
11616  39B8
11617  39B9
11618  39BA
11619  39BB
11620  39BC
11621  39BD
11622  39BE
11623  39BF
11624  39C0
11625  39C1
11626  39C2
11627  39C3
11628  39C4
11629  39C5
11630  39C6
11631  39C7
11632  39C8
11633  39C9
11634  39CA
11635  39CB
11636  39CC
11637  39CD
11638  39CE
11639  39CF
11640  39D0
11641  39D1
11642  39D2
11643  39D3
11644  39D4
11645  39D5
11646  39D6
11647  39D7
11648  39D8
11649  39D9
11650  39DA
11651  39DB
11652  39DC
11653  39DD
11654  39DE
11655  39DF
11656  39E0
11657  39E1
11658  39E2
11659  39E3
11660  39E4
11661  39E5
11662  39E6
11663  39E7
11664  39E8
11665  39E9
11666  39EA
11667  39EB
11668  39EC
11669  39ED
11670  39EE
11671  39EF
11672  39F0
11673  39F1
11674  39F2
11675  39F3
11676  39F4
11677  39F5
11678  39F6
11679  39F7
11680  39F8
11681  39F9
11682  39FA
11683  39FB
11684  39FC
11685  39FD
11686  39FE
11687  39FF
11688  3A00
11689  3A01
11690  3A02
11691  3A03
11692  3A04
11693  3A05
11694  3A06
11695  3A07
11696  3A08
11697  3A09
11698  3A0A
11699  3A0B
11700  3A0C
11701  3A0D
11702  3A0E
11703  3A0F
11704  3A10
11705  3A11
11706  3A12
11707  3A13
11708  3A14
11709  3A15
11710  3A16
11711  3A17
11712  3A18
11713  3A19
11714  3A1A
11715  3A1B
11716  3A1C
11717  3A1D
11718  3A1E
11719  3A1F
11720  3A20
11721  3A21
11722  3A22
11723  3A23
11724  3A24
11725  3A25
11726  3A26
11727  3A27
11728  3A28
11729  3A29
11730  3A2A
11731  3A2B
11732  3A2C
11733  3A2D
11734  3A2E
11735  3A2F
11736  3A30
11737  3A31
11738  3A32
11739  3A33
11740  3A34
11741  3A35
11742  3A36
11743  3A37
11744  3A38
11745  3A39
11746  3A3A
11747  3A3B
11748  3A3C
11749  3A3D
11750  3A3E
11751  3A3F
11752  3A40
11753  3A41
11754  3A42
11755  3A43
11756  3A44
11757  3A45
11758  3A46
11759  3A47
11760  3A48
11761  3A49
11762  3A4A
11763  3A4B
11764  3A4C
11765  3A4D
11766  3A4E
11767  3A4F
11768  3A50
11769  3A51
11770  3A52
11771  3A53
11772  3A54
11773  3A55
11774  3A56
11775  3A57
11776  3A58
11777  3A59
11778  3A5A
11779  3A5B
11780  3A5C
11781  3A5D
11782  3A5E
11783  3A5F
11784  3A60
11785  3A61
11786  3A62
11787  3A63
11788  3A64
11789  3A65
11790  3A66
11791  3A67
11792  3A68
11793  3A69
11794  3A6A
11795  3A6B
11796  3A6C
11797  3A6D
11798  3A6E
11799  3A6F
11800  3A70
11801  3A71
11802  3A72
11803  3A73
11804  3A74
11805  3A75
11806  3A76
11807  3A77
11808  3A78
11809  3A79
11810  3A7A
11811  3A7B
11812  3A7C
11813  3A7D
11814  3A7E
11815  3A7F
11816  3A80
11817  3A81
11818  3A82
11819  3A83
11820  3A84
11821  3A85
11822  3A86
11823  3A87
11824  3A88
11825  3A89
11826  3A8A
11827  3A8B
11828  3A8C
11829  3A8D
11830  3A8E
11831  3A8F
11832  3A90
11833  3A91
11834  3A92
11835  3A93
11836  3A94
11837  3A95
11838  3A96
11839  3A97
11840  3A98
11841  3A99
11842  3A9A
11843  3A9B
11844  3A9C
11845  3A9D
11846  3A9E
11847  3A9F
11848  3AA0
11849  3AA1
11850  3AA2
11851  3AA3
11852  3AA4
11853  3AA5
11854  3AA6
11855  3AA7
11856  3AA8
11857  3AA9
11858  3AAA
11859  3AAB
11860  3AAC
11861  3AAD
11862  3AAE
11863  3AAF
11864  3AB0
11865  3AB1
11866  3AB2
11867  3AB3
11868  3AB4
11869  3AB5
11870  3AB6
11871  3AB7
11872  3AB8
11873  3AB9
11874  3ABA
11875  3ABB
11876  3ABC
11877  3ABD
11878  3ABE
11879  3ABF
11880  3AC0
11881  3AC1
11882  3AC2
11883  3AC3
11884  3AC4
11885  3AC5
11886  3AC6
11887  3AC7
11888  3AC8
11889  3AC9
11890  3ACA
11891  3ACB
11892  3ACC
11893  3ACD
11894  3ACE
11895  3ACF
11896  3AD0
11897  3AD1
11898  3AD2
11899  3AD3
11900  3AD4
11901  3AD5
11902  3AD6
11903  3AD7
11904  3AD8
11905  3AD9
11906  3ADA
11907  3ADB
11908  3ADC
11909  3ADD
11910  3ADE
11911  3ADF
11912  3AE0
11913  3AE1
11914  3AE2
11915  3AE3
11916  3AE4
11917  3AE5
11918  3AE6
11919  3AE7
11920  3AE8
11921  3AE9
11922  3AEA
11923  3AEB
11924  3AEC
11925  3AED
11926  3AEE
11927  3AEF
11928  3AF0
11929  3AF1
11930  3AF2
11931  3AF3
11932  3AF4
11933  3AF5
11934  3AF6
11935  3AF7
11936  3AF8
11937  3AF9
11938  3AFA
11939  3AFB
11940  3AFC
11941  3AFD
11942  3AFE
11943  3AFF
11944  3B00
11945  3B01
11946  3B02
11947  3B03
11948  3B04
11949  3B05
11950  3B06
11951  3B07
11952  3B08
11953  3B09
11954  3B0A
11955  3B0B
11956  3B0C
11957  3B0D
11958  3B0E
11959  3B0F
11960  3B10
11961  3B11
11962  3B12
11963  3B13
11964  3B14
11965  3B15
11966  3B16
11967  3B17
11968  3B18
11969  3B19
11970  3B1A
11971  3B1B
11972  3B1C
11973  3B1D
11974  3B1E
11975  3B1F
11976  3B20
11977  3B21
11978  3B22
11979  3B23
11980  3B24
11981  3B25
11982  3B26
11983  3B27
11984  3B28
11985  3B29
11986  3B2A
11987  3B2B
11988  3B2C
11989  3B2D
11990  3B2E
11991  3B2F
11992  3B30
11993  3B31
11994  3B32
11995  3B33
11996  3B34
11997  3B35
11998  3B36
11999  3B37
12000  3B38
12001  3B39
12002  3B3A
12003  3B3B
12004  3B3C
12005  3B3D
12006  3B3E
12007  3B3F
12008  3B40
12009  3B41
12010  3B42
12011  3B43
12012  3B44
12013  3B45
12014  3B46
12015  3B47
12016  3B48
12017  3B49
12018  3B4A
12019  3B4B
12020  3B4C
12021  3B4D
12022  3B4E
12023  3B4F
12024  3B50
12025  3B51
12026  3B52
12027  3B53
12028  3B54
12029  3B55
12030  3B56
12031  3B57
12032  3B58
12033  3B59
12034  3B5A
12035  3B5B
12036  3B5C
12037  3B5D
12038  3B5E
12039  3B5F
12040  3B60
12041  3B61
12042  3B62
12043  3B63
12044  3B64
12045  3B65
12046  3B66
12047  3B67
12048  3B68
12049  3B69
12050  3B6A
12051  3B6B
12052  3B6C
12053  3B6D
12054  3B6E
12055  3B6F
12056  3B70
12057  3B71
12058  3B72
12059  3B73
12060  3B74
12061  3B75
12062  3B76
12063  3B77
12064  3B78
12065  3B79
12066  3B7A
12067  3B7B
12068  3B7C
12069  3B7D
12070  3B7E
12071  3B7F
12072  3B80
12073  3B81
12074  3B82
12075  3B83
12076  3B84
12077  3B85
12078  3B86
12079  3B87
12080  3B88
12081  3B89
12082  3B8A
12083  3B8B
12084  3B8C
12085  3B8D
12086  3B8E
12087  3B8F
12088  3B90
12089  3B91
12090  3B92
12091  3B93
12092  3B94
12093  3B95
12094  3B96
12095  3B97
12096  3B98
12097  3B99
12098  3B9A
12099  3B9B
12100  3B9C
12101  3B9D
12102  3B9E
12103  3B9F
12104  3BA0
12105  3BA1
12106  3BA2
12107  3BA3
12108  3BA4
12109  3BA5
12110  3BA6
12111  3BA7
12112  3BA8
12113  3BA9
12114  3BAA
12115  3BAB
12116  3BAC
12117  3BAD
12118  3BAE
12119  3BAF
12120  3BB0
12121  3BB1
12122  3BB2
12123  3BB3
12124  3BB4
12125  3BB5
12126  3BB6
12127  3BB7
12128  3BB8
12129  3BB9
12130  3BBA
12131  3BBB
12132  3BBC
12133  3BBD
12134  3BBE
12135  3BBF
12136  3BC0
12137  3BC1
12138  3BC2
12139  3BC3
12140  3BC4
12141  3BC5
12142  3BC6
12143  3BC7
12144  3BC8
12145  3BC9
12146  3BCA
12147  3BCB
12148  3BCC
12149  3BCD
12150  3BCE
12151  3BCF
12152  3BD0
12153  3BD1
12154  3BD2
12155  3BD3
12156  3BD4
12157  3BD5
12158  3BD6
12159  3BD7
12160  3BD8
12161  3BD9
12162  3BDA
12163  3BDB
12164  3BDC
12165  3BDD
12166  3BDE
12167  3BDF
12168  3BE0
12169  3BE1
12170  3BE2
12171  3BE3
12172  3BE4
12173  3BE5
12174  3BE6
12175  3BE7
12176  3BE8
12177  3BE9
12178  3BEA
12179  3BEB
12180  3BEC
12181  3BED
12182  3BEE
12183  3BEF
12184  3BF0
12185  3BF1
12186  3BF2
12187  3BF3
12188  3BF4
12189  3BF5
12190  3BF6
12191  3BF7
12192  3BF8
12193  3BF9
12194  3BFA
12195  3BFB
12196  3BFC
12197  3BFD
12198  3BFE
12199  3BFF
12200  3C00
12201  3C01
12202  3C02
12203  3C03
12204  3C04
12205  3C05
12206  3C06
12207  3C07
12208  3C08
12209  3C09
12210  3C0A
12211  3C0B
12212  3C0C
12213  3C0D
12214  3C0E
12215  3C0F
12216  3C10
12217  3C11
12218  3C12
12219  3C13
12220  3C14
12221  3C15
12222  3C16
12223  3C17
12224  3C18
12225  3C19
12226  3C1A
12227  3C1B
12228  3C1C
12229  3C1D
12230  3C1E
12231  3C1F
12232  3C20
12233  3C21
12234  3C22
12235  3C23
12236  3C24
12237  3C25
12238  3C26
12239  3C27
12240  3C28
12241  3C29
12242  3C2A
12243  3C2B
12244  3C2C
12245  3C2D
12246  3C2E
12247  3C2F
12248  3C30
12249  3C31
12250  3C32
12251  3C33
12252  3C34
12253  3C35
12254  3C36
12255  3C37
12256  3C38
12257  3C39
12258  3C3A
12259  3C3B
12260  3C3C
12261  3C3D
12262  3C3E
12263  3C3F
12264  3C40
12265  3C41
12266  3C42
12267  3C43
12268  3C44
12269  3C45
12270  3C46
12271  3C47
12272  3C48
12273  3C49
12274  3C4A
12275  3C4B
12276  3C4C
12277  3C4D
12278  3C4E
12279  3C4F
12280  3C50
12281  3C51
12282  3C52
12283  3C53
12284  3C54
12285  3C55
12286  3C56
12287  3C57
12288  3C58
12289  3C59
12290  3C5A
12291  3C5B
12292  3C5C
12293  3C5D
12294  3C5E
12295  3C5F
12296  3C60
12297  3C61
12298  3C62
12299  3C63
12300  3C64
12301  3C65
12302  3C66
12303  3C67
12304  3C68
12305  3C69
12306  3C6A
12307  3C6B
12308  3C6C
12309  3C6D
12310  3C6E
12311  3C6F
12312  3C70
12313  3C71
12314  3C72
12315  3C73
12316  3C74
12317  3C75
12318  3C76
12319  3C77
12320  3C78
12321  3C79
12322  3C7A
12323  3C7B
12324  3C7C
12325  3C7D
12326  3C7E
12327  3C7F
12328  3C80
12329  3C81
12330  3C82
12331  3C83
12332  3C84
12333  3C85
12334  3C86
12335  3C87
12336  3C88
12337  3C89
12338  3C8A
12339  3C8B
12340  3C8C
12341  3C8D
12342  3C8E
12343  3C8F
12344  3C90
12345  3C91
12346  3C92
12347  3C93
12348  3C94
12349  3C95
12350  3C96
12351  3C97
12352  3C98
12353  3C99
12354  3C9A
12355  3C9B
12356  3C9C
12357  3C9D
12358  3C9E
12359  3C9F
12360  3CA0
12361  3CA1
12362  3CA2
12363  3CA3
12364  3CA4
12365  3CA5
12366  3CA6
12367  3CA7
12368  3CA8
12369  3CA9
12370  3CAA
12371  3CAB
12372  3CAC
12373  3CAD
12374  3CAE
12375  3CAF
12376  3CB0
12377  3CB1
12378  3CB2
12379  3CB3
12380  3CB4
12381  3CB5
12382  3CB6
12383  3CB7
12384  3CB8
12385  3CB9
12386  3CBA
12387  3CBB
12388  3CBC
12389  3CBD
12390  3CBE
12391  3CBF
12392  3CC0
12393  3CC1
12394  3CC2
12395  3CC3
12396  3CC4
12397  3CC5
12398  3CC6
12399  3CC7
12400  3CC8
12401  3CC9
12402  3CCA
12403  3CCB
12404  3CCC
12405  3CCD
12406  3CCE
12407  3CCF
12408  3CD0
12409  3CD1
12410  3CD2
12411  3CD3
12412  3CD4
12413  3CD5
12414  3CD6
12415  3CD7
12416  3CD8
12417  3CD9
12418  3CDA
12419  3CDB
12420  3CDC
12421  3CDD
12422  3CDE
12423  3CDF
12424  3CE0
12425  3CE1
12426  3CE2
12427  3CE3
12428  3CE4
12429  3CE5
12430  3CE6
12431  3CE7
12432  3CE8
12433  3CE9
12434  3CEA
12435  3CEB
12436  3CEC
12437  3CED
12438  3CEE
12439  3CEF
12440  3CF0
12441  3CF1
12442  3CF2
12443  3CF3
12444  3CF4
12445  3CF5
12446  3CF6
12447  3CF7
12448  3CF8
12449  3CF9
12450  3CFA
12451  3CFB
12452  3CFC
12453  3CFD
12454  3CFE
12455  3CFF
12456  3D00
12457  3D01
12458  3D02
12459  3D03
12460  3D04
12461  3D05
12462  3D06
12463  3D07
12464  3D08
12465  3D09
12466  3D0A
12467  3D0B
12468  3D0C
12469  3D0D
12470  3D0E
12471  3D0F
12472  3D10
12473  3D11
12474  3D12
12475  3D13
12476  3D14
12477  3D15
12478  3D16
12479  3D17
12480  3D18
12481  3D19
12482  3D1A
12483  3D1B
12484  3D1C
12485  3D1D
12486  3D1E
12487  3D1F
12488  3D20
12489  3D21
12490  3D22
12491  3D23
12492  3D24
12493  3D25
12494  3D26
12495  3D27
12496  3D28
12497  3D29
12498  3D2A
12499  3D2B
12500  3D2C
12501  3D2D
12502  3D2E
12503  3D2F
12504  3D30
12505  3D31
12506  3D32
12507  3D33
12508  3D34
12509  3D35
12510  3D36
12511  3D37
12512  3D38
12513  3D39
12514  3D3A
12515  3D3B
12516  3D3C
12517  3D3D
12518  3D3E
12519  3D3F
12520  3D40
12521  3D41
12522  3D42
12523  3D43
12524  3D44
12525  3D45
12526  3D46
12527  3D47
12528  3D48
12529  3D49
12530  3D4A
12531  3D4B
12532  3D4C
12533  3D4D
12534  3D4E
12535  3D4F
12536  3D50
12537  3D51
12538  3D52
12539  3D53
12540  3D54
12541  3D55
12542  3D56
12543  3D57
12544  3D58
12545  3D59
12546  3D5A
12547  3D5B
12548  3D5C
12549  3D5D
12550  3D5E
12551  3D5F
12552  3D60
12553  3D61
12554  3D62
12555  3D63
12556  3D64
12557  3D65
12558  3D66
12559  3D67
12560  3D68
12561  3D69
12562  3D6A
12563  3D6B
12564  3D6C
12565  3D6D
12566  3D6E
12567  3D6F
12568  3D70
12569  3D71
12570  3D72
12571  3D73
12572  3D74
12573  3D75
12574  3D76
12575  3D77
12576  3D78
12577  3D79
12578  3D7A
12579  3D7B
12580  3D7C
12581  3D7D
12582  3D7E
12583  3D7F
12584  3D80
12585  3D81
12586  3D82
12587  3D83
12588  3D84
12589  3D85
12590  3D86
12591  3D87
12592  3D88
12593  3D89
12594  3D8A
12595  3D8B
12596  3D8C
12597  3D8D
12598  3D8E
12599  3D8F
12600  3D90
12601  3D91
12602  3D92
12603  3D93
12604  3D94
12605  3D95
12606  3D96
12607  3D97
12608  3D98
12609  3D99
12610  3D9A
12611  3D9B
12612  3D9C
12613  3D9D
12614  3D9E
12615  3D9F
12616  3DA0
12617  3DA1
12618  3DA2
12619  3DA3
12620  3DA4
12621  3DA5
12622  3DA6
12623  3DA7
12624  3DA8
12625  3DA9
12626  3DAA
12627  3DAB
12628  3DAC
12629  3DAD
12630  3DAE
12631  3DAF
12632  3DB0
12633  3DB1
12634  3DB2
12635  3DB3
12636  3DB4
12637  3DB5
12638  3DB6
12639  3DB7
12640  3DB8
12641  3DB9
12642  3DBA
12643  3DBB
12644  3DBC
12645  3DBD
12646  3DBE
12647  3DBF
12648  3DC0
12649  3DC1
12650  3DC2
12651  3DC3
12652  3DC4
12653  3DC5
12654  3DC6
12655  3DC7
12656  3DC8
12657  3DC9
12658  3DCA
12659  3DCB
12660  3DCC
12661  3DCD
12662  3DCE
12663  3DCF
12664  3DD0
12665  3DD1
12666  3DD2
12667  3DD3
12668  3DD4
12669  3DD5
12670  3DD6
12671  3DD7
12672  3DD8
12673  3DD9
12674  3DDA
12675  3DDB
12676  3DDC
12677  3DDD
12678  3DDE
12679  3DDF
12680  3DE0
12681  3DE1
12682  3DE2
12683  3DE3
12684  3DE4
12685  3DE5
12686  3DE6
12687  3DE7
12688  3DE8
12689  3DE9
12690  3DEA
12691  3DEB
12692  3DEC
12693  3DED
12694  3DEE
12695  3DEF
12696  3DF0
12697  3DF1
12698  3DF2
12699  3DF3
12700  3DF4
12701  3DF5
12702  3DF6
12703  3DF7
12704  3DF8
12705  3DF9
12706  3DFA
12707  3DFB
12708  3DFC
12709  3DFD
12710  3DFE
12711  3DFF
12712  3E00
12713  3E01
12714  3E02
12715  3E03
12716  3E04
12717  3E05
12718  3E06
12719  3E07
12720  3E08
12721  3E09
12722  3E0A
12723  3E0B
12724  3E0C
12725  3E0D
12726  3E0E
12727  3E0F
12728  3E10
12729  3E11
12730  3E12
12731  3E13
12732  3E14
12733  3E15
12734  3E16
12735  3E17
12736  3E18
12737  3E19
12738  3E1A
12739  3E1B
12740  3E1C
12741  3E1D
12742  3E1E
12743  3E1F
12744  3E20
12745  3E21
12746  3E22
12747  3E23
12748  3E24
12749  3E25
12750  3E26
12751  3E27
12752  3E28
12753  3E29
12754  3E2A
12755  3E2B
12756  3E2C
12757  3E2D
12758  3E2E
12759  3E2F
12760  3E30
12761  3E31
12762  3E32
12763  3E33
12764  3E34
12765  3E35
12766  3E36
12767  3E37
12768  3E38
12769  3E39
12770  3E3A
12771  3E3B
12772  3E3C
12773  3E3D
12774  3E3E
12775  3E3F
12776  3E40
12777  3E41
12778  3E42
12779  3E43
12780  3E44
12781  3E45
12782  3E46
12783  3E47
12784  3E48
12785  3E49
12786  3E4A
12787  3E4B
12788  3E4C
12789  3E4D
12790  3E4E
12791  3E4F
12792  3E50
12793  3E51
12794  3E52
12795  3E53
12796  3E54
12797  3E55
12798  3E56
12799  3E57
12800  3E58
12801  3E59
12802  3E5A
12803  3E5B
12804  3E5C
12805  3E5D
12806  3E5E
12807  3E5F
12808  3E60
12809  3E61
12810  3E62
12811  3E63
12812  3E64
12813  3E65
12814  3E66
12815  3E67
12816  3E68
12817  3E69
12818  3E6A
12819  3E6B
12820  3E6C
12821  3E6D
12822  3E6E
12823  3E6F
12824  3E70
12825  3E71
12826  3E72
12827  3E73
12828  3E74
12829  3E75
12830  3E76
12831  3E77
12832  3E78
12833  3E79
12834  3E7A
12835  3E7B
12836  3E7C
12837  3E7D
12838  3E7E
12839  3E7F
12840  3E80
12841  3E81
12842  3E82
12843  3E83
12844  3E84
12845  3E85
12846  3E86
12847  3E87
12848  3E88
12849  3E89
12850  3E8A
12851  3E8B
12852  3E8C
12853  3E8D
12854  3E8E
12855  3E8F
12856  3E90
12857  3E91
12858  3E92
12859  3E93
12860  3E94
12861  3E95
12862  3E96
12863  3E97
12864  3E98
12865  3E99
12866  3E9A
12867  3E9B
12868  3E9C
12869  3E9D
12870  3E9E
12871  3E9F
12872  3EA0
12873  3EA1
12874  3EA2
12875  3EA3
12876  3EA4
12877  3EA5
12878  3EA6
12879  3EA7
12880  3EA8
12881  3EA9
12882  3EAA
12883  3EAB
12884  3EAC
12885  3EAD
12886  3EAE
12887  3EAF
12888  3EB0
12889  3EB1
12890  3EB2
12891  3EB3
12892  3EB4
12893  3EB5
12894  3EB6
12895  3EB7
12896  3EB8
12897  3EB9
12898  3EBA
12899  3EBB
12900  3EBC
12901  3EBD
12902  3EBE
12903  3EBF
12904  3EC0
12905  3EC1
12906  3EC2
12907  3EC3
12908  3EC4
12909  3EC5
12910  3EC6
12911  3EC7
12912  3EC8
12913  3EC9
12914  3ECA
12915  3ECB
12916  3ECC
12917  3ECD
12918  3ECE
12919  3ECF
12920  3ED0
12921  3ED1
12922  3ED2
12923  3ED3
12924  3ED4
12925  3ED5
12926  3ED6
12927  3ED7
12928  3ED8
12929  3ED9
12930  3EDA
12931  3EDB
12932  3EDC
12933  3EDD
12934  3EDE
12935  3EDF
12936  3EE0
12937  3EE1
12938  3EE2
12939  3EE3
12940  3EE4
12941  3EE5
12942  3EE6
12943  3EE7
12944  3EE8
12945  3EE9
12946  3EEA
12947  3EEB
12948  3EEC
12949  3EED
12950  3EEE
12951  3EEF
12952  3EF0
12953  3EF1
12954  3EF2
12955  3EF3
12956  3EF4
12957  3EF5
12958  3EF6
12959  3EF7
12960  3EF8
12961  3EF9
12962  3EFA
12963  3EFB
12964  3EFC
12965  3EFD
12966  3EFE
12967  3EFF
12968  3F00
12969  3F01
12970  3F02
12971  3F03
12972  3F04
12973  3F05
12974  3F06
12975  3F07
12976  3F08
12977  3F09
12978  3F0A
12979  3F0B
12980  3F0C
12981  3F0D
12982  3F0E
12983  3F0F
12984  3F10
12985  3F11
12986  3F12
12987  3F13
12988  3F14
12989  3F15
12990  3F16
12991  3F17
12992  3F18
12993  3F19
12994  3F1A
12995  3F1B
12996  3F1C
12997  3F1D
12998  3F1E
12999  3F1F
13000  3F20
13001  3F21
13002  3F22
13003  3F23
13004  3F24
13005  3F25
13006  3F26
13007  3F27
13008  3F28
13009  3F29
13010  3F2A
13011  3F2B
13012  3F2C
13013  3F2D
13014  3F2E
13015  3F2F
13016  3F30
13017  3F31
13018  3F32
13019  3F33
13020  3F34
13021  3F35
13022  3F36
13023  3F37
13024  3F38
13025  3F39
13026  3F3A
13027  3F3B
13028  3F3C
13029  3F3D
13030  3F3E
13031  3F3F
13032  3F40
13033  3F41
13034  3F42
13035  3F43
13036  3F44
13037  3F45
13038  3F46
13039  3F47
13040  3F48
13041  3F49
13042  3F4A
13043  3F4B
13044  3F4C
13045  3F4D
13046  3F4E
13047  3F4F
13048  3F50
13049  3F51
13050  3F52
13051  3F53
13052  3F54
13053  3F55
13054  3F56
13055  3F57
13056  3F58
13057  3F59
13058  3F5A
13059  3F5B
13060  3F5C
13061  3F5D
13062  3F5E
13063  3F5F
13064  3F60
13065  3F61
13066  3F62
13067  3F63
13068  3F64
13069  3F65
13070  3F66
13071  3F67
13072  3F68
13073  3F69
13074  3F6A
13075  3F6B
13076  3F6C
13077  3F6D
13078  3F6E
13079  3F6F
13080  3F70
13081  3F71
13082  3F72
13083  3F73
13084  3F74
13085  3F75
13086  3F76
13087  3F77
13088  3F78
13089  3F79
13090  3F7A
13091  3F7B
13092  3F7C
13093  3F7D
13094  3F7E
13095  3F7F
13096  3F80
13097  3F81
13098  3F82
13099  3F83
13100  3F84
13101  3F85
13102  3F86
13103  3F87
13104  3F88
13105  3F89
13106  3F8A
13107  3F8B
13108  3F8C
13109  3F8D
13110  3F8E
13111  3F8F
13112  3F90
13113  3F91
13114  3F92
13115  3F93
13116  3F94
13117  3F95
13118  3F96
13119  3F97
13120  3F98
13121  3F99
13122  3F9A
13123  3F9B
13124  3F9C
13125  3F9D
13126  3F9E
13127  3F9F
13128  3FA0
13129  3FA1
13130  3FA2
13131  3FA3
13132  3FA4
13133  3FA5
13134  3FA6
13135  3FA7
13136  3FA8
13137  3FA9
13138  3FAA
13139  3FAB
13140  3FAC
13141  3FAD
13142  3FAE
13143  3FAF
13144  3FB0
13145  3FB1
13146  3FB2
13147  3FB3
13148  3FB4
13149  3FB5
13150  3FB6
13151  3FB7
13152  3FB8
13153  3FB9
13154  3FBA
13155  3FBB
13156  3FBC
13157  3FBD
13158  3FBE
13159  3FBF
13160  3FC0
13161  3FC1
13162  3FC2
13163  3FC3
13164  3FC4
13165  3FC5
13166  3FC6
13167  3FC7
13168  3FC8
13169  3FC9
13170  3FCA
13171  3FCB
13172  3FCC
13173  3FCD
13174  3FCE
13175  3FCF
13176  3FD0
13177  3FD1
13178  3FD2
13179  3FD3
13180  3FD4
13181  3FD5
13182  3FD6
13183  3FD7
13184  3FD8
13185  3FD9
13186  3FDA
13187  3FDB
13188  3FDC
13189  3FDD
13190  3FDE
13191  3FDF
13192  3FE0
13193  3FE1
13194  3FE2
13195  3FE3
13196  3FE4
13197  3FE5
13198  3FE6
13199  3FE7
13200  3FE8
13201  3FE9
13202  3FEA
13203  3FEB
13204  3FEC
13205  3FED
13206  3FEE
13207  3FEF
13208  3FF0
13209  3FF1
13210  3FF2
13211  3FF3
13212  3FF4
13213  3FF5
13214  3FF6
13215  3FF7
13216  3FF8
13217  3FF9
13218  3FFA
13219  3FFB
13220  3FFC
13221  3FFD
13222  3FFE
13223  3FFF
13224  4000
13225  4001
13226  4002
13227  4003
13228  4004
13229  4005
13230  4006
13231  4007
13232  4008
13233  4009
13234  400A
13235  400B
13236  400C
13237  400D
13238  400E
13239  400F
13240  4010
13241  4011
13242  4012
13243  4013
13244  4014
13245  4015
13246  4016
13247  4017
13248  4018
13249  4019
13250  401A
13251  401B
13252  401C
13253  401D
13254  401E
13255  401F
13256  4020
13257  4021
13258  4022
13259  4023
13260  4024
13261  4025
13262  4026
13263  4027
13264  4028
13265  4029
13266  402A
13267  402B
13268  402C
13269  402D
13270  402E
13271  402F
13272  4030
13273  4031
13274  4032
13275  4033
13276  4034
13277  4035
13278  4036
13279  4037
13280  4038
13281  4039
13282  403A
13283  403B
13284  403C
13285  403D
13286  403E
13287  403F
13288  4040
13289  4041
13290  4042
13291  4043
13292  4044
13293  4045
13294  4046
13295  4047
13296  4048
13297  4049
13298  404A
13299  404B
13300  404C
13301  404D
13302  404E
13303  404F
13304  4050
13305  4051
13306  4052
13307  4053
13308  4054
13309  4055
13310  4056
13311  4057
13312  4058
13313  4059
13314  405A
13315  405B
13316  405C
13317  405D
13318  405E
13319  405F
13320  4060
13321  4061
13322  4062
13323  4063
13324  4064
13325  4065
13326  4066
13327  4067
13328  4068
13329  4069
13330  406A
13331  406B
13332  406C
13333  406D
13334  406E
13335  406F
13336  4070
13337  4071
13338  4072
13339  4073
13340  4074
13341  4075
13342  4076
13343  4077
13344  4078
13345  4079
13346  407A
13347  407B
13348  407C
13349  407D
13350  407E
13351  407F
13352  4080
13353  4081
13354  4082
13355  4083
13356  4084
13357  4085
13358  4086
13359  4087
13360  4088
13361  4089
13362  408A
13363  408B
13364  408C
13365  408D
13366  408E
13367  408F
13368  4090
13369  4091
13370  4092
13371  4093
13372  4094
13373  4095
13374  4096
13375  4097
13376  4098
13377  4099
13378  409A
13379  409B
13380  409C
13381  409D
13382  409E
13383  409F
13384  40A0
13385  40A1
13386  40A2
13387  40A3
13388  40A4
13389  40A5
13390  40A6
13391  40A7
13392  40A8
13393  40A9
13394  40AA
13395  40AB
13396  40AC
13397  40AD
13398  40AE
13399  40AF
13400  40B0
13401  40B1
13402  40B2
13403  40B3
13404  40B4
13405  40B5
13406  40B6
13407  40B7
13408  40B8
13409  40B9
13410  40BA
13411  40BB
13412  40BC
13413  40BD
13414  40BE
13415  40BF
13416  40C0
13417  40C1
13418  40C2
13419  40C3
13420  40C4
13421  40C5
13422  40C6
13423  40C7
13424  40C8
13425  40C9
13426  40CA
13427  40CB
13428  40CC
13429  40CD
13430  40CE
13431  40CF
13432  40D0
13433  40D1
13434  40D2
13435  40D3
13436  40D4
13437  40D5
13438  40D6
13439  40D7
13440  40D8
13441  40D9
13442  40DA
13443  40DB
13444  40DC
13445  40DD
13446  40DE
13447  40DF
13448  40E0
13449  40E1
13450  40E2
13451  40E3
13452  40E4
13453  40E5
13454  40E6
13455  40E7
13456  40E8
13457  40E9
13458  40EA
13459  40EB
13460  40EC
13461  40ED
13462  40EE
13463  40EF
13464  40F0
13465  40F1
13466  40F2
13467  40F3
13468  40F4
13469  40F5
13470  40F6
13471  40F7
13472  40F8
13473  40F9
13474  40FA
13475  40FB
13476  40FC
13477  40FD
13478  40FE
13479  40FF
13480  4100
13481  4101
13482  4102
13483  4103
13484  4104
13485  4105
13486  4106
13487  4107
13488  4108
13489  4109
13490  410A
13491  410B
13492  410C
13493  410D
13494  410E
13495  410F
13496  4110
13497  4111
13498  4112
13499  4113
13500  4114
13501  4115
13502  4116
13503  4117
13504  4118
13505  4119
13506  411A
13507  411B
13508  411C
13509  411D
13510  411E
13511  411F
13512  4120
13513  4121
13514  4122
13515  4123
13516  4124
13517  4125
13518  4126
13519  4127
13520  4128
13521  4129
13522  412A
13523  412B
13524  412C
13525  412D
13526  412E
13527  412F
13528  4130
13529  4131
13530  4132
13531  4133
13532  4134
13533  4135
13534  4136
13535  4137
13536  4138
13537  4139
13538  413A
13539  413B
13540  413C
13541  413D
13542  413E
13543  413F
13544  4140
13545  4141
13546  4142
13547  4143
13548  4144
13549  4145
13550  4146
13551  4147
13552  4148
13553  4149
13554  414A
13555  414B
13556  414C
13557  414D
13558  414E
13559  414F
13560  4150
13561  4151
13562  4152
13563  4153
13564  4154
13565  4155
13566  4156
13567  4157
13568  4158
13569  4159
13570  415A
13571  415B
13572  415C
13573  415D
13574  415E
13575  415F
13576  4160
13577  4161
13578  4162
13579  4163
13580  4164
13581  4165
13582  4166
13583  4167
13584  4168
13585  4169
13586  416A
13587  416B
13588  416C
13589  416D
13590  416E
13591  416F
13592  4170
13593  4171
13594  4172
13595  4173
13596  4174
13597  4175
13598  4176
13599  4177
13600  4178
13601  4179
13602  417A
13603  417B
13604  417C
13605  417D
13606  417E
13607  417F
13608  4180
13609  4181
13610  4182
13611  4183
13612  4184
13613  4185
13614  4186
13615  4187
13616  4188
13617  4189
13618  418A
13619  418B
13620  418C
13621  418D
13622  418E
13623  418F
13624  4190
13625  4191
13626  4192
13627  4193
13628  4194
13629  4195
13630  4196
13631  4197
13632  4198
13633  4199
13634  419A
13635  419B
13636  419C
13637  419D
13638  419E
13639  419F
13640  41A0
13641  41A1
13642  41A2
13643  41A3
13644  41A4
13645  41A5
13646  41A6
13647  41A7
13648  41A8
13649  41A9
13650  41AA
13651  41AB
13652  41AC
13653  41AD
13654  41AE
13655  41AF
13656  41B0
13657  41B1
13658  41B2
13659  41B3
13660  41B4
13661  41B5
13662  41B6
13663  41B7
13664  41B8
13665  41B9
13666  41BA
13667  41BB
13668  41BC
13669  41BD
13670  41BE
13671  41BF
13672  41C0
13673  41C1
13674  41C2
13675  41C3
13676  41C4
13677  41C5
13678  41C6
13679  41C7
13680  41C8
13681  41C9
13682  41CA
13683  41CB
13684  41CC
13685  41CD
13686  41CE
13687  41CF
13688  41D0
13689  41D1
13690  41D2
13691  41D3
13692  41D4
13693  41D5
13694  41D6
13695  41D7
13696  41D8
13697  41D9
13698  41DA
13699  41DB
13700  41DC
13701  41DD
13702  41DE
13703  41DF
13704  41E0
13705  41E1
13706  41E2
13707  41E3
13708  41E4
13709  41E5
13710  41E6
13711  41E7
13712  41E8
13713  41E9
13714  41EA
13715  41EB
13716  41EC
13717  41ED
13718  41EE
13719  41EF
13720  41F0
13721  41F1
13722  41F2
13723  41F3
13724  41F4
13725  41F5
13726  41F6
13727  41F7
13728  41F8
13729  41F9
13730  41FA
13731  41FB
13732  41FC
13733  41FD
13734  41FE
13735  41FF
13736  4200
13737  4201
13738  4202
13739  4203
13740  4204
13741  4205
13742  4206
13743  4207
13744  4208
13745  4209
13746  420A
13747  420B
13748  420C
13749  420D
13750  420E
13751  420F
13752  4210
13753  4211
13754  4212
13755  4213
13756  4214
13757  4215
13758  4216
13759  4217
13760  4218
13761  4219
13762  421A
13763  421B
13764  421C
13765  421D
13766  421E
13767  421F
13768  4220
13769  4221
13770  4222
13771  4223
13772  4224
13773  4225
13774  4226
13775  4227
13776  4228
13777  4229
13778  422A
13779  422B
13780  422C
13781  422D
13782  422E
13783  422F
13784  4230
13785  4231
13786  4232
13787  4233
13788  4234
13789  4235
13790  4236
13791  4237
13792  4238
13793  4239
13794  423A
13795  423B
13796  423C
13797  423D
13798  423E
13799  423F
13800  4240
13801  4241
13802  4242
13803  4243
13804  4244
13805  4245
13806  4246
13807  4247
13808  4248
13809  4249
13810  424A
13811  424B
13812  424C
13813  424D
13814  424E
13815  424F
13816  4250
13817  4251
13818  4252
13819  4253
13820  4254
13821  4255
13822  4256
13823  4257
13824  4258
13825  4259
13826  425A
13827  425B
13828  425C
13829  425D
13830  425E
13831  425F
13832  4260
13833  4261
13834  4262
13835  4263
13836  4264
13837  4265
13838  4266
13839  4267
13840  4268
13841  4269
13842  426A
13843  426B
13844  426C
13845  426D
13846  426E
13847  426F
13848  4270
13849  4271
13850  4272
13851  4273
13852  4274
13853  4275
13854  4276
13855  4277
13856  4278
13857  4279
13858  427A
13859  427B
13860  427C
13861  427D
13862  427E
13863  427F
13864  4280
13865  4281
13866  4282
13867  4283
13868  4284
13869  4285
13870  4286
13871  4287
13872  4288
13873  4289
13874  428A
13875  428B
13876  428C
13877  428D
13878  428E
13879  428F
13880  4290
13881  4291
13882  4292
13883  4293
13884  4294
13885  4295
13886  4296
13887  4297
13888  4298
13889  4299
13890  429A
13891  429B
13892  429C
13893  429D
13894  429E
13895  429F
13896  42A0
13897  42A1
13898  42A2
13899  42A3
13900  42A4
13901  42A5
13902  42A6
13903  42A7
13904  42A8
13905  42A9
13906  42AA
13907  42AB
13908  42AC
13909  42AD
13910  42AE
13911  42AF
13912  42B0
13913  42B1
13914  42B2
13915  42B3
13916  42B4
13917  42B5
13918  42B6
13919  42B7
13920  42B8
13921  42B9
13922  42BA
13923  42BB
13924  42BC
13925  42BD
13926  42BE
13927  42BF
13928  42C0
13929  42C1
13930  42C2
13931  42C3
13932  42C4
13933  42C5
13934  42C6
13935  42C7
13936  42C8
13937  42C9
13938  42CA
13939  42CB
13940  42CC
13941  42CD
13942  42CE
13943  42CF
13944  42D0
13945  42D1
13946  42D2
13947  42D3
13948  42D4
13949  42D5
13950  42D6
13951  42D7
13952  42D8
13953  42D9
13954  42DA
13955  42DB
13956  42DC
13957  42DD
13958  42DE
13959  42DF
13960  42E0
13961  42E1
13962  42E2
13963  42E3
13964  42E4
13965  42E5
13966  42E6
13967  42E7
13968  42E8
13969  42E9
13970  42EA
13971  42EB
13972  42EC
13973  42ED
13974  42EE
13975  42EF
13976  42F0
13977  42F1
13978  42F2
13979  42F3
13980  42F4
13981  42F5
13982  42F6
13983  42F7
13984  42F8
13985  42F9
13986  42FA
13987  42FB
13988  42FC
13989  42FD
13990  42FE
13991  42FF
13992  4300
13993  4301
13994  4302
13995  4303
13996  4304
13997  4305
13998  4306
13999  4307
14000  4308
14001  4309
14002  430A
14003  430B
14004  430C
14005  430D
14006  430E
14007  430F
14008  4310
14009  4311
14010  4312
14011  4313
14012  4314
14013  4315
14014  4316
14015  4317
14016  4318
14017  4319
14018  431A
14019  431B
14020  431C
14021  431D
14022  431E
14023  431F
14024  4320
14025  4321
14026  4322
14027  4323
14028  4324
14029  4325
14030  4326
14031  4327
14032  4328
14033  4329
14034  432A
14035  432B
14036  432C
14037  432D
14038  432E
14039  432F
14040  4330
14041  4331
14042  4332
14043  4333
14044  4334
14045  4335
14046  4336
14047  4337
14048  4338
14049  4339
14050  433A
14051  433B
14052  433C
14053  433D
14054  433E
14055  433F
14056  4340
14057  4341
14058  4342
14059  4343
14060  4344
14061  4345
14062  4346
14063  4347
14064  4348
14065  4349
14066  434A
14067  434B
14068  434C
14069  434D
14070  434E
14071  434F
14072  4350
14073  4351
14074  4352
14075  4353
14076  4354
14077  4355
14078  4356
14079  4357
14080  4358
14081  4359
14082  435A
14083  435B
14084  435C
14085  435D
14086  435E
14087  435F
14088  4360
14089  4361
14090  4362
14091  4363
14092  4364
14093  4365
14094  4366
14095  4367
14096  4368
14097  4369
14098  436A
14099  436B
14100  436C
14101  436D
14102  436E
14103  436F
14104  4370
14105  4371
14106  4372
14107  4373
14108  4374
14109  4375
14110  4376
14111  4377
14112  4378
14113  4379
14114  437A
14115  437B
14116  437C
14117  437D
14118  437E
14119  437F
14120  4380
14121  4381
14122  4382
14123  4383
14124  4384
14125  4385
14126  4386
14127  4387
14128  4388
14129  4389
14130  438A
14131  438B
14132  438C
14133  438D
14134  438E
14135  438F
14136  4390
14137  4391
14138  4392
14139  4393
14140  4394
14141  4395
14142  4396
14143  4397
14144  4398
14145  4399
14146  439A
14147  439B
14148  439C
14149  439D
14150  439E
14151  439F
14152  43A0
14153  43A1
14154  43A2
14155  43A3
14156  43A4
14157  43A5
14158  43A6
14159  43A7
14160  43A8
14161  43A9
14162  43AA
14163  43AB
14164  43AC
14165  43AD
14166  43AE
14167  43AF
14168  43B0
14169  43B1
14170  43B2
14171  43B3
14172  43B4
14173  43B5
14174  43B6
14175  43B7
14176  43B8
14177  43B9
14178  43BA
14179  43BB
14180  43BC
14181  43BD
14182  43BE
14183  43BF
14184  43C0
14185  43C1
14186  43C2
14187  43C3
14188  43C4
14189  43C5
14190  43C6
14191  43C7
14192  43C8
14193  43C9
14194  43CA
14195  43CB
14196  43CC
14197  43CD
14198  43CE
14199  43CF
14200  43D0
14201  43D1
14202  43D2
14203  43D3
14204  43D4
14205  43D5
14206  43D6
14207  43D7
14208  43D8
14209  43D9
14210  43DA
14211  43DB
14212  43DC
14213  43DD
14214  43DE
14215  43DF
14216  43E0
14217  43E1
14218  43E2
14219  43E3
14220  43E4
14221  43E5
14222  43E6
14223  43E7
14224  43E8
14225  43E9
14226  43EA
14227  43EB
14228  43EC
14229  43ED
14230  43EE
14231  43EF
14232  43F0
14233  43F1
14234  43F2
14235  43F3
14236  43F4
14237  43F5
14238  43F6
14239  43F7
14240  43F8
14241  43F9
14242  43FA
14243  43FB
14244  43FC
14245  43FD
14246  43FE
14247  43FF
14248  4400
14249  4401
14250  4402
14251  4403
14252  4404
14253  4405
14254  4406
14255  4407
14256  4408
14257  4409
14258  440A
14259  440B
14260  440C
14261  440D
14262  440E
14263  440F
14264  4410
14265  4411
14266  4412
14267  4413
14268  4414
14269  4415
14270  4416
14271  4417
14272  4418
14273  4419
14274  441A
14275  441B
14276  441C
14277  441D
14278  441E
14279  441F
14280  4420
14281  4421
14282  4422
14283  4423
14284  4424
14285  4425
14286  4426
14287  4427
14288  4428
14289  4429
14290  442A
14291  442B
14292  442C
14293  442D
14294  442E
14295  442F
14296  4430
14297  4431
14298  4432
14299  4433
14300  4434
14301  4435
14302  4436
14303  4437
14304  4438
14305  4439
14306  443A
14307  443B
14308  443C
14309  443D
14310  443E
14311  443F
14312  4440
14313  4441
14314  4442
14315  4443
14316  4444
14317  4445
14318  4446
14319  4447
14320  4448
14321  4449
14322  444A
14323  444B
14324  444C
14325  444D
14326  444E
14327  444F
14328  4450
14329  4451
14330  4452
14331  4453
14332  4454
14333  4455
14334  4456
14335  4457
14336  4458
14337  4459
14338  445A
14339  445B
14340  445C
14341  445D
14342  445E
14343  445F
14344  4460
14345  4461
14346  4462
14347  4463
14348  4464
14349  4465
014350  000511        
014351  000512  var hFonts[53] ;
014352  000513  var stringsCV[53] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
14353  22A0
14354  22A1
14355  22A2
14356  22A3
14357  22A4
14358  22A5
14359  22A6
14360  22A7
14361  22A8
14362  22A9
14363  22AA
14364  22AB
14365  22AC
14366  22AD
14367  22AE
14368  22AF
14369  22B0
14370  22B1
14371  22B2
14372  22B3
14373  22B4
14374  22B5
14375  22B6
14376  22B7
14377  22B8
14378  22B9
14379  22BA
14380  22BB
14381  22BC
14382  22BD
14383  22BE
14384  22BF
14385  22C0
14386  22C1
14387  22C2
14388  22C3
14389  22C4
14390  22C5
14391  22C6
14392  22C7
14393  22C8
14394  22C9
14395  22CA
14396  22CB
14397  22CC
14398  22CD
14399  22CE
14400  22CF
14401  22D0
14402  22D1
14403  22D2
14404  22D3
14405  22D4
14406  22D5
14407  22D6
14408  22D7
14409  22D8
14410  22D9
14411  22DA
14412  22DB
14413  22DC
14414  22DD
14415  22DE
14416  22DF
14417  22E0
14418  22E1
14419  22E2
14420  22E3
14421  22E4
14422  22E5
14423  22E6
14424  22E7
14425  22E8
14426  22E9
14427  22EA
14428  22EB
14429  22EC
14430  22ED
14431  22EE
14432  22EF
14433  22F0
14434  22F1
14435  22F2
14436  22F3
14437  22F4
14438  22F5
14439  22F6
14440  22F7
14441  22F8
14442  22F9
14443  22FA
14444  22FB
14445  22FC
14446  22FD
14447  22FE
14448  22FF
14449  2300
14450  2301
14451  2302
14452  2303
14453  2304
14454  2305
14455  2306
14456  2307
14457  2308
14458  2309
014459  000514  // Start P2.inc
014460  000515  var oObjects[MaxTotObjects+1] ;                 // address of objects
014461  000516  var CurrentForm ;
014462  000517  var TouchXpos, TouchYpos ;
014463  000518  var InputType, TouchState, CurInputData, pInputIndex ;
014464  000519  var comRX[40], cmd[CMDLenMAX] ;
014465  000520        
014466  000521  var InputCS, OutputCS ;
014467  000522        
014468  000523        
014469  000524        
014470  000525  func seroutCS(var op)
014471  000526      serout(op) ;
014472  000527      OutputCS ^= op ;
014473  000528  endfunc
014474  000529        
014475  000530  func nak0()
014476  000531      serout(NAK) ;
014477  000532      InputCS := 0 ;
014478  000533  endfunc
014479  000534        
014480  000535  func seroutOcs()
014481  000536      serout(OutputCS) ;
014482  000537      OutputCS := 0 ;
014483  000538  endfunc
014484  000539        
014485  000540  func SendReport(var id, var objt, var objn, var val)
014486  000541      seroutCS(id) ;
014487  000542      seroutCS(objt) ;
014488  000543      seroutCS(objn) ;
014489  000544      seroutCS(val >> 8) ; // first 8 bits
014490  000545      seroutCS(val) ;
014491  000546      seroutOcs() ;
014492  000547  endfunc
014493  000548        
014494  000549        
014495  000550  func ReadObject(var ObjectType, var ObjectIdx)
014496  000551      var j, k, Objects ;
014497  000552      Objects := *(oObjects+ObjectType) ;
014498  000553        
014499  000554      j := 2 + ObjectIdx * 2 + Objects ;
014500  000555       if (ObjectType == tForm)
014501  000556          k := CurrentForm ;
014502  000557      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
014503  000558          k := img_GetWord(hndl, *j, IMAGE_TAG2);
014504  000559      else if (ObjectType == tStrings)
014505  000560          k := stringsCV[ObjectIdx];
014506  000561          else
014507  000562          k := img_GetWord(hndl, *j, IMAGE_INDEX);
014508  000563          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
014509  000564                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
014510  000565      endif
014511  000566      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
014512  000567  endfunc
014513  000568        
014514  000569        
014515  000570  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
014516  000571      var i, j, k, Objects ;
014517  000572      ObjectType &= 0x3f ;
014518  000573      if (ObjectType == tForm)
014519  000574          ActivateForm(ObjectIdx) ;
014520  000575      else
014521  000576          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
014522  000577          i := *(Objects) ;
014523  000578          switch (ObjectType)
014524  000579              case tWinButton :
014525  000580                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
014526  000581                  break ;
014527  000582              case tUserButton :
014528  000583                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
014529  000584                  break ;
014530  000585              default : j := -1 ;
014531  000586          endswitch
014532  000587          if (j != -1)
014533  000588              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
014534  000589              NewVal := NewVal << 1 ;
014535  000590              if (OVF())      // button group index change
014536  000591                  if (*(j+InputData+Ofs_IPD_P1))
014537  000592                      k &= 1 ;    // mask off old group index for momentary
014538  000593                  else
014539  000594                      k &= 3 ;    // mask off old group index for toggle
014540  000595                  endif
014541  000596              else            // normal set
014542  000597                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
014543  000598                  k &= 0xfffc ;    // retain only group index for state set
014544  000599              endif
014545  000600              NewVal |= k ;
014546  000601          endif
014547  000602           if (ObjectType == tLeddigits)
014548  000603              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
014549  000604              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014550  000605          else if (ObjectType == tStrings)
014551  000606              PrintStrings(ObjectIdx, NewVal, 0);
014552  000607          else
014553  000608              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
014554  000609              img_Show(hndl, i) ; // will only display if form is current
014555  000610          endif
014556  000611      endif
014557  000612  endfunc
014558  000613        
014559  000614  func TurnOffButtons(var group)
014560  000615      var j, k, l;
014561  000616      for (j := 0; j < nInputs; j++)
014562  000617          k := j*IPDatasize ;
014563  000618          if (*(InputData+k+Ofs_IPD_P2) == group)
014564  000619              l := -1 ;
014565  000620               if (*(InputData+k) == tWinButton)
014566  000621                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014567  000622                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
014568  000623                  img_Show(hndl, l);      // only shows on current form
014569  000624              else if (*(InputData+k) == tUserButton)
014570  000625                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014571  000626                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
014572  000627                  img_Show(hndl, l);      // only shows on current form
014573  000628              endif
014574  000629          endif
014575  000630      next
014576  000631  endfunc
014577  000632        
014578  000633        
014579  000634  // WARNING, this code will crash if newval exceeds maximum displayable number
014580  000635  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
014581  000636      var i, j, k, l, lb, newval ;
014582  000637      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
014583  000638      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
014584  000639      i := -1 ;
014585  000640      j := *(typeptr) ;
014586  000641      repeat
014587  000642          typeptr += 2 ;
014588  000643          i++ ;
014589  000644          until (*(typeptr) == imgidx);
014590  000645      j := setptr + i*10 ;
014591  000646        
014592  000647      imgidx++ ;
014593  000648      l := 1 ;
014594  000649      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
014595  000650          l *= 10 ;
014596  000651      next
014597  000652      lb := *(j+Ofs_Digits_LeadingBlanks) ;
014598  000653      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
014599  000654          k := newval / l ;
014600  000655          newval -= k * l ;
014601  000656          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
014602  000657              if (k == 0)
014603  000658                  k := 10 ;
014604  000659              else
014605  000660                  lb := 0 ;
014606  000661              endif
014607  000662          endif
014608  000663          l /= 10 ;
014609  000664          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
014610  000665          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
014611  000666          img_Show(hndl, imgidx);
014612  000667      next
014613  000668  endfunc
014614  000669        
014615  000670        
014616  000671  func ActivateForm(var newform)
014617  000672      var i, j, *p ;
014618  000673        
014619  000674      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
014620  000675          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
014621  000676              if (img_GetWord(hndl, i, IMAGE_TAG))
014622  000677                  img_Disable(hndl,i) ;
014623  000678              endif
014624  000679          next
014625  000680      endif
014626  000681      CurrentForm := newform ;
014627  000682      // display newform image or clear to image color
014628  000683      if (FormBGcolors[CurrentForm] != ColorBGimage)
014629  000684          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
014630  000685          gfx_Cls() ;
014631  000686          DoGFXObjects() ;                                    // display GFX 'widgets'
014632  000687      endif
014633  000688        
014634  000689      // enable inputs
014635  000690      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
014636  000691          j := img_GetWord(hndl, i, IMAGE_TAG) ;
014637  000692          if (j)
014638  000693              j-- ;
014639  000694              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
014640  000695              //if (j != tKeyboard)
014641  000696              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
014642  000697                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
014643  000698              endif
014644  000699              img_Show(hndl,i) ; // show initialy, if required
014645  000700              if (j == tForm)
014646  000701                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
014647  000702              else if (j == tLeddigits)
014648  000703                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014649  000704              endif
014650  000705          endif
014651  000706      next
014652  000707      for (i := 0; i < nStrings; i++)
014653  000708          if (stringsCV[i] != -1)
014654  000709              WriteObject(tStrings, i, stringsCV[i]) ;
014655  000710          endif
014656  000711      next
014657  000712        
014658  000713  endfunc
014659  000714        
014660  000715  func UpdateObjects(var newval)
014661  000716      var IPidx, otherOBJ ;
014662  000717      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
014663  000718        
014664  000719          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
014665  000720              img_Show(hndl, *(pInputIndex));      // only shows on current form
014666  000721          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
014667  000722              if (*(CurInputData+Ofs_IPD_P1))
014668  000723                  newval &= 1;
014669  000724              else
014670  000725                  newval &= 3;
014671  000726              endif
014672  000727              if (newval > 1) newval := 1;
014673  000728          endif
014674  000729          IPidx := *(CurInputData+TouchState) ;
014675  000730          while(IPidx != 0)
014676  000731              otherOBJ := IPidx + InputData;
014677  000732              if (*(otherOBJ) == OT_REPORT)
014678  000733          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
014679  000734              else if (*(otherOBJ) == OT_MAGIC)
014680  000735                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
014681  000736                  IPidx(newval) ;
014682  000737              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
014683  000738                  if (*(otherOBJ) == OT_ACTIVATE)
014684  000739                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
014685  000740                      InputType := tForm ;
014686  000741                  else if (*(otherOBJ) == OT_SETCONST)
014687  000742                      newval := *(otherOBJ+Ofs_IPD_P3) ;
014688  000743                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
014689  000744                  else if (*(otherOBJ) == OT_SETANOTHER)
014690  000745                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
014691  000746                  else if (*(otherOBJ) == OT_PREVFRAME)
014692  000747                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
014693  000748                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
014694  000749                      endif
014695  000750                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
014696  000751                  else if (*(otherOBJ) == OT_NEXTFRAME)
014697  000752                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
014698  000753                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
014699  000754                      endif
014700  000755                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
014701  000756                  else if (*(otherOBJ) == OT_PREVSTRING)
014702  000757                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
014703  000758                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
014704  000759                      endif
014705  000760                  else if (*(otherOBJ) == OT_NEXTSTRING)
014706  000761                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
014707  000762                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
014708  000763                      endif
014709  000764                  endif
014710  000765              endif
014711  000766              IPidx := *(otherOBJ+TouchState) ;
014712  000767          wend
014713  000768      endif
014714  000769  endfunc
014715  000770        
014716  000771  // End P2.inc
014717  000772  func DoGFXObjects()
014718  000773  endfunc
014719  000774        
014720  000775  // Start P3.inc
014721  000776  func main()
014722  000777      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
014723  000778        
014724  000779      putstr("Mounting...\n");
014725  000780      if (!(file_Mount()))
014726  000781          while(!(file_Mount()))
014727  000782              putstr("Drive not mounted...");
014728  000783              pause(200);
014729  000784              gfx_Cls();
014730  000785              pause(200);
014731  000786          wend
014732  000787      endif
014733  000788  //    gfx_MoveTo(0, 0);
014734  000789  //    print(mem_Heap()," ") ;
014735  000790  //    gfx_TransparentColour(0x0020);
014736  000791  //    gfx_Transparency(ON);
014737  000792        
014738  000793      gfx_ScreenMode(LANDSCAPE) ;
014739  000794        
014740  000795      // open image control
014741  000796      hndl := file_LoadImageControl("REPRAP~2.dat", "REPRAP~2.gci", 1);
014742  000797        
014743  000798      // init 'constants'
014744  000799  // End P3.inc
014745  000800        
014746  000801      oObjects[tDipSwitch] := oDipSwitchs ;
014747  000802      oObjects[tKnob] := oKnobs ;
014748  000803      oObjects[tRockerSwitch] := oRockerSwitchs ;
014749  000804      oObjects[tRotarySwitch] := oRotarySwitchs ;
014750  000805      oObjects[tGSlider] := oGSliders ;
014751  000806      oObjects[tTrackbar] := oTrackbars ;
014752  000807      oObjects[tWinButton] := oWinButtons ;
014753  000808      oObjects[tAngularmeter] := oAngularmeters ;
014754  000809      oObjects[tCoolgauge] := oCoolgauges ;
014755  000810      oObjects[tCustomdigits] := oCustomdigitss ;
014756  000811      oObjects[tForm] := oForms ;
014757  000812      oObjects[tGauge] := oGauges ;
014758  000813      oObjects[tImage] := oImages ;
014759  000814      oObjects[tKeyboard] := oKeyboards ;
014760  000815      oObjects[tLed] := oLeds ;
014761  000816      oObjects[tLeddigits] := oLeddigitss ;
014762  000817      oObjects[tMeter] := oMeters ;
014763  000818      oObjects[tStrings] := oStringss ;
014764  000819      oObjects[tThermometer] := oThermometers ;
014765  000820      oObjects[tUserled] := oUserleds ;
014766  000821      oObjects[tVideo] := oVideos ;
014767  000822      oObjects[tStaticText] := oStaticTexts ;
014768  000823      oObjects[tSounds] := oSoundss ;
014769  000824      oObjects[tTimer] := oTimers ;
014770  000825      oObjects[tSpectrum] := oSpectrums ;
014771  000826      oObjects[tTank] := oTanks ;
014772  000827      oObjects[tUserImages] := oUserImagess ;
014773  000828      oObjects[tPinOutput] := oPinOutputs ;
014774  000829      oObjects[tPinInput] := oPinInputs ;
014775  000830      oObjects[t4Dbutton] := o4Dbuttons ;
014776  000831      oObjects[tAniButton] := oAniButtons ;
014777  000832      oObjects[tColorPicker] := oColorPickers ;
014778  000833      oObjects[tUserButton] := oUserButtons ;
014779  000834      hFonts[0] := file_LoadImageControl("REPRAP~2.d03", "REPRAP~2.g03", 1)  ;
014780  000835      hFonts[1] := file_LoadImageControl("REPRAP~2.d01", "REPRAP~2.g01", 1)  ;
014781  000836      hFonts[2] := file_LoadImageControl("REPRAP~2.d02", "REPRAP~2.g02", 1)  ;
014782  000837      hFonts[3] := FONT3 ;
014783  000838      hFonts[4] := FONT3 ;
014784  000839      hFonts[5] := FONT3 ;
014785  000840      hFonts[6] := FONT3 ;
014786  000841      hFonts[11] := file_LoadImageControl("REPRAP~2.d05", "REPRAP~2.g05", 1)  ;
014787  000842      hFonts[12] := FONT3 ;
014788  000843      hFonts[13] := file_LoadImageControl("REPRAP~2.d07", "REPRAP~2.g07", 1)  ;
014789  000844      hFonts[14] := FONT3 ;
014790  000845      hFonts[15] := FONT3 ;
014791  000846      hFonts[16] := FONT3 ;
014792  000847      hFonts[20] := FONT3 ;
014793  000848      hFonts[21] := FONT3 ;
014794  000849      hFonts[22] := FONT3 ;
014795  000850      hFonts[23] := FONT3 ;
014796  000851      hFonts[24] := FONT3 ;
014797  000852      hFonts[28] := FONT3 ;
014798  000853      hFonts[33] := file_LoadImageControl("REPRAP~2.d06", "REPRAP~2.g06", 1)  ;
014799  000854      hFonts[35] := FONT3 ;
014800  000855      hFonts[37] := file_LoadImageControl("REPRAP~2.d04", "REPRAP~2.g04", 1)  ;
014801  000856      hFonts[51] := FONT3 ;
014802  000857      hFonts[52] := FONT3 ;
014803  000858      hFonts[7] := hFonts[37] ;
014804  000859      hFonts[8] := hFonts[37] ;
014805  000860      hFonts[9] := hFonts[0] ;
014806  000861      hFonts[10] := hFonts[11] ;
014807  000862      hFonts[17] := hFonts[11] ;
014808  000863      hFonts[18] := hFonts[11] ;
014809  000864      hFonts[19] := hFonts[11] ;
014810  000865      hFonts[25] := hFonts[11] ;
014811  000866      hFonts[26] := hFonts[11] ;
014812  000867      hFonts[27] := hFonts[11] ;
014813  000868      hFonts[29] := hFonts[11] ;
014814  000869      hFonts[30] := hFonts[11] ;
014815  000870      hFonts[31] := hFonts[1] ;
014816  000871      hFonts[32] := hFonts[1] ;
014817  000872      hFonts[34] := hFonts[0] ;
014818  000873      hFonts[36] := hFonts[0] ;
014819  000874      hFonts[38] := hFonts[37] ;
014820  000875      hFonts[39] := hFonts[37] ;
014821  000876      hFonts[40] := hFonts[0] ;
014822  000877      hFonts[41] := hFonts[0] ;
014823  000878      hFonts[42] := hFonts[0] ;
014824  000879      hFonts[43] := hFonts[37] ;
014825  000880      hFonts[44] := hFonts[37] ;
014826  000881      hFonts[45] := hFonts[37] ;
014827  000882      hFonts[46] := hFonts[13] ;
014828  000883      hFonts[47] := hFonts[13] ;
014829  000884      hFonts[48] := hFonts[13] ;
014830  000885      hFonts[49] := hFonts[13] ;
014831  000886      hFonts[50] := hFonts[13] ;
014832  000887  // Start P4.inc
014833  000888      hstrings := file_Open("REPRAP~2.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
014834  000889      // init comms
014835  000890      com_Init(comRX,CMDLenMAX,0);
014836  000891      com_SetBaud(COM0,19886);
014837  000892      com_TXbuffer(comTX, 100, 0);
014838  000893      snd_BufSize(2) ;
014839  000894      // tag 'real' objects
014840  000895      for (i := 0; i <= MaxTotObjects; i++)
014841  000896          if (   (i != tSounds)
014842  000897              && (i != tTimer)
014843  000898              && (i != tPinOutput)
014844  000899              && (i != tPinInput) )
014845  000900              TouchXpos := oObjects[i] ;
014846  000901              TouchYpos := *(TouchXpos) ;
014847  000902              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
014848  000903                  oldn := *(TouchXpos+ImageTouched*2) ;
014849  000904                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
014850  000905                  if (oldn != -1)
014851  000906                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
014852  000907                      img_Disable(hndl, oldn) ;
014853  000908                  endif
014854  000909              next
014855  000910          endif
014856  000911      next
014857  000912        
014858  000913      // display initial form
014859  000914      CurrentForm := -1 ;
014860  000915      ActivateForm(0) ; // need to change this according to first actual form
014861  000916        
014862  000917  // End P4.inc
014863  000918  // Start P5.inc
014864  000919      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
014865  000920      oldn := -1 ;
014866  000921      repeat
014867  000922        
014868  000923          // check comms for command, how to NAK invalid command
014869  000924          if (com_Count() != 0)
014870  000925              i := serin() ;
014871  000926              InputCS ^= i ;               // update checksum
014872  000927              if (   (cmdi > 2)
014873  000928                  && (cmd[0] == WRITE_STRU) )
014874  000929                  j := (cmdi-1) >> 1 + 2 ;
014875  000930                  if (j == CMDLenMAX)    // max length exceeded
014876  000931                      nak0() ;
014877  000932                      cmdi := -1 ;
014878  000933                  else if (cmdi & 1)
014879  000934                      cmd[j] := i ;
014880  000935                      if (cmd[2] == 0)    // if string complete
014881  000936                          if (InputCS)
014882  000937                              nak0() ;
014883  000938                          else
014884  000939                              if (cmd[0] == WRITE_STRU)
014885  000940                              cmd[j] := 0 ;                     // terminate it
014886  000941                              PrintStrings(cmd[1], &cmd[3], 1) ;
014887  000942                              serout(ACK) ;
014888  000943                              else
014889  000944                              endif
014890  000945                          endif
014891  000946                          cmdi := -1 ;
014892  000947                      endif
014893  000948                  else
014894  000949                      cmd[j] := cmd[j] << 8 + i ;
014895  000950                      cmd[2]-- ;          // dec length
014896  000951                  endif
014897  000952                  cmdi++ ;
014898  000953              else // not unicode string
014899  000954                  cmd[cmdi++] := i ;
014900  000955                   if (cmd[0] == WRITE_STR)                  // Ansi String
014901  000956                      if (cmdi == CMDLenMAX)      // max length exceeded
014902  000957                          nak0() ;
014903  000958                          cmdi := 0 ;
014904  000959                      else if (cmdi > 2)
014905  000960                          if (cmd[2] == -1)
014906  000961                              if (InputCS)
014907  000962                                  nak0() ;
014908  000963                              else
014909  000964                                  if (cmd[0] == WRITE_STR)
014910  000965                                  cmd[cmdi-1] := 0 ;                     // terminate it
014911  000966                                  PrintStrings(cmd[1], &cmd[3], 1) ;
014912  000967                                  serout(ACK) ;
014913  000968                                  else
014914  000969                                  endif
014915  000970                              endif
014916  000971                              cmdi := 0 ;
014917  000972                          else
014918  000973                              cmd[2]-- ;          // dec length
014919  000974                          endif
014920  000975                      endif
014921  000976                  else if (   (cmd[0] == READ_OBJ)
014922  000977                           && (cmdi == 4)         )
014923  000978                      if (InputCS)
014924  000979                          nak0() ;
014925  000980                      else
014926  000981                          ReadObject(cmd[1], cmd[2]) ;
014927  000982                      endif
014928  000983                      cmdi := 0 ;
014929  000984                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
014930  000985                           && (cmdi == 6)          )
014931  000986                      if (InputCS)
014932  000987                          nak0() ;
014933  000988                      else
014934  000989                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
014935  000990                          serout(ACK) ;
014936  000991                      endif
014937  000992                      cmdi := 0 ;
014938  000993                  else if (   (cmd[0] == WRITE_CONTRAST)
014939  000994                           && (cmdi == 3)         )
014940  000995                      if (InputCS)
014941  000996                          nak0() ;
014942  000997                      else
014943  000998                          gfx_Contrast(cmd[1]) ;
014944  000999                          serout(ACK) ;
014945  001000                      endif
014946  001001                      cmdi := 0 ;
014947  001002                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
014948  001003                      nak0() ;
014949  001004                      cmdi := 0 ;
014950  001005                  endif
014951  001006              endif   // not unicode string
014952  001007          endif   // a character is available
014953  001008        
014954  001009        
014955  001010      // touch code processing
014956  001011        
014957  001012          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
014958  001013          ImageTouched := img_Touched(hndl,-1) ;
014959  001014          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
014960  001015              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
014961  001016                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
014962  001017              endif
014963  001018              if (TouchStatus != TOUCH_RELEASED)        // if not released
014964  001019                  if (oldn != -1)
014965  001020                      ImageTouched := oldn ;
014966  001021                  else
014967  001022                      if (oldn != ImageTouched)
014968  001023                  oldn := ImageTouched ;
014969  001024                          TouchStatus := TOUCH_PRESSED ;
014970  001025                      endif
014971  001026                  endif
014972  001027                  TouchXpos  := touch_Get(TOUCH_GETX);
014973  001028                  TouchYpos  := touch_Get(TOUCH_GETY);
014974  001029                  TouchState := Ofs_IPD_DOWN ;
014975  001030              else
014976  001031                  ImageTouched := oldn ;                     // simulate release of what we touched
014977  001032                  oldn := -1 ;                    // prevent double release
014978  001033                  TouchState := Ofs_IPD_RELEASE ;
014979  001034              endif
014980  001035              if (ImageTouched != -1)
014981  001036                          CurInputData := InputControls[ImageTouched] + InputData;
014982  001037                          InputType := *(CurInputData) ;
014983  001038                          i := InputType ;
014984  001039                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
014985  001040                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
014986  001041              endif
014987  001042          endif
014988  001043   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
014989  001044        
014990  001045          sys_EventsResume() ;
014991  001046      forever
014992  001047        
014993  001048  cDipswitch:
014994  001049        
014995  001050  cKnob:
014996  001051        
014997  001052  cRockerswitch:
014998  001053        
014999  001054  cRotaryswitch:
015000  001055        
015001  001056  cSlider:
015002  001057  cTrackbar:
015003  001058        
015004  001059  c4DButton:
015005  001060  cUserButton:
015006  001061      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015007  001062      goto gbutton ;
015008  001063  cWinbutton:
015009  001064      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015010  001065  gbutton:
015011  001066      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
015012  001067      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
015013  001068          if (TouchStatus == TOUCH_RELEASED)
015014  001069              i &= 0xfffe ;
015015  001070              TouchState == Ofs_IPD_DOWN ;
015016  001071          else
015017  001072              i |= 1 ;
015018  001073              TouchState == Ofs_IPD_RELEASE ;
015019  001074          endif
015020  001075      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
015021  001076          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
015022  001077              if ((i & 3) == 3)
015023  001078                  i &= 0xfffc ;
015024  001079              else
015025  001080                  i++ ;
015026  001081              endif
015027  001082          else
015028  001083              i |= 1 ;                                      // make down regardless of current state
015029  001084          endif
015030  001085      else                        // group action, up all other buttons on touch press, reports 0 for button down
015031  001086          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
015032  001087              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
015033  001088          endif
015034  001089          i := (i & 0xfffc) | 2 ;
015035  001090      endif
015036  001091        
015037  001092      UpdateObjects(i) ;
015038  001093  endsub ;
015039  001094        
015040  001095  cAniButton:
015041  001096        
015042  001097  cColorPicker:
015043  001098        
015044  001099  endfunc
015045  001100  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 736 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 672 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       11791  0x00002e0f (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 138)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  378  0x0000017a (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 33)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                298  0x0000012a (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         294  0x00000126 (mem) word (global)  (usage 27)
CurrentForm                          284  0x0000011c (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       11159  0x00002b97 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 24)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 51)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        8647  0x000021c7FormBGcolors                        8647  0x000021c7 (mem) word[39] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          85  0x00000055FormEndIndex                          85  0x00000055 (mem) word[39] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[39] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[53] (global)  (usage 249)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             214  0x000000d6 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               98  0x00000062 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm28                              108  0x0000006c (const ??? 0)  (usage 3)
iForm29                              113  0x00000071 (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iImage0                              152  0x00000098 (const ??? 0)  (usage 3)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        163  0x000000a3InputControls                        163  0x000000a3 (mem) word[172] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              538  0x0000021a (mem) word (global)  (usage 21)
InputData                            507  0x000001fbInputData                            507  0x000001fb (mem) word[3091] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            290  0x00000122 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          82  0x00000052 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext10                         56  0x00000038 (const ??? 0)  (usage 3)
iStatictext15                         87  0x00000057 (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext3                         128  0x00000080 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext5                         139  0x0000008b (const ??? 0)  (usage 3)
iStatictext6                         143  0x0000008f (const ??? 0)  (usage 3)
iStatictext7                         144  0x00000090 (const ??? 0)  (usage 3)
iStatictext8                         145  0x00000091 (const ??? 0)  (usage 3)
iStatictext9                          52  0x00000034 (const ??? 0)  (usage 3)
iStrings0                           6689  0x00001a21iStrings0                           6689  0x00001a21 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           6715  0x00001a3biStrings1                           6715  0x00001a3b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          6949  0x00001b25iStrings10                          6949  0x00001b25 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          6975  0x00001b3fiStrings11                          6975  0x00001b3f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7001  0x00001b59iStrings12                          7001  0x00001b59 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          7027  0x00001b73iStrings13                          7027  0x00001b73 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          7053  0x00001b8diStrings14                          7053  0x00001b8d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          7079  0x00001ba7iStrings15                          7079  0x00001ba7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          7105  0x00001bc1iStrings16                          7105  0x00001bc1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          7131  0x00001bdbiStrings17                          7131  0x00001bdb (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          7157  0x00001bf5iStrings18                          7157  0x00001bf5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          7183  0x00001c0fiStrings19                          7183  0x00001c0f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           6741  0x00001a55iStrings2                           6741  0x00001a55 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          7209  0x00001c29iStrings20                          7209  0x00001c29 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          7235  0x00001c43iStrings21                          7235  0x00001c43 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          7261  0x00001c5diStrings22                          7261  0x00001c5d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          7287  0x00001c77iStrings23                          7287  0x00001c77 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          7313  0x00001c91iStrings24                          7313  0x00001c91 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          7339  0x00001cabiStrings25                          7339  0x00001cab (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          7365  0x00001cc5iStrings26                          7365  0x00001cc5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          7391  0x00001cdfiStrings27                          7391  0x00001cdf (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          7417  0x00001cf9iStrings28                          7417  0x00001cf9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          7443  0x00001d13iStrings29                          7443  0x00001d13 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           6767  0x00001a6fiStrings3                           6767  0x00001a6f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          7469  0x00001d2diStrings30                          7469  0x00001d2d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          7495  0x00001d47iStrings31                          7495  0x00001d47 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          7521  0x00001d61iStrings32                          7521  0x00001d61 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          7547  0x00001d7biStrings33                          7547  0x00001d7b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          7573  0x00001d95iStrings34                          7573  0x00001d95 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          7599  0x00001dafiStrings35                          7599  0x00001daf (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          7625  0x00001dc9iStrings36                          7625  0x00001dc9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          7651  0x00001de3iStrings37                          7651  0x00001de3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          7677  0x00001dfdiStrings38                          7677  0x00001dfd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          7703  0x00001e17iStrings39                          7703  0x00001e17 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           6793  0x00001a89iStrings4                           6793  0x00001a89 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          7729  0x00001e31iStrings40                          7729  0x00001e31 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          7755  0x00001e4biStrings41                          7755  0x00001e4b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          7781  0x00001e65iStrings42                          7781  0x00001e65 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          7807  0x00001e7fiStrings43                          7807  0x00001e7f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          7833  0x00001e99iStrings44                          7833  0x00001e99 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          7859  0x00001eb3iStrings45                          7859  0x00001eb3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          7885  0x00001ecdiStrings46                          7885  0x00001ecd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          7911  0x00001ee7iStrings47                          7911  0x00001ee7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          7937  0x00001f01iStrings48                          7937  0x00001f01 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          7963  0x00001f1biStrings49                          7963  0x00001f1b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           6819  0x00001aa3iStrings5                           6819  0x00001aa3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          7989  0x00001f35iStrings50                          7989  0x00001f35 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8015  0x00001f4fiStrings51                          8015  0x00001f4f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8041  0x00001f69iStrings52                          8041  0x00001f69 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           6845  0x00001abdiStrings6                           6845  0x00001abd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           6871  0x00001ad7iStrings7                           6871  0x00001ad7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           6897  0x00001af1iStrings8                           6897  0x00001af1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           6923  0x00001b0biStrings9                           6923  0x00001b0b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                        96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton101                        97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton102                       129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton103                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton104                       131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton105                       132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton106                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton107                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton108                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton109                       136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton11                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton110                       137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton111                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton112                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton113                       141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton114                       142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton115                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton116                       147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton117                       148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton118                        80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton119                        81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton121                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton122                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton123                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton124                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton125                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton126                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton17                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton21                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton22                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton23                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton24                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton25                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton26                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton27                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton28                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton29                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton31                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton32                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton33                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton34                        150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton35                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton36                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton37                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton38                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton39                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton41                        153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton42                        154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton43                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton44                        156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton45                        157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton46                        158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton47                        159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton48                        160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton49                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton52                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton53                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton54                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton55                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton56                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton57                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton58                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton59                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton65                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton66                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton67                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton68                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton69                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton71                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton72                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton73                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton74                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton75                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton76                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton77                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton78                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton79                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton81                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton82                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton83                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton84                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton85                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton86                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton87                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton88                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton89                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton91                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton92                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton93                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton94                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton95                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton96                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton97                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton98                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton99                         95  0x0000005f (const ??? 0)  (usage 3)
iUserimages0                         111  0x0000006f (const ??? 0)  (usage 3)
iUserimages1                          63  0x0000003f (const ??? 0)  (usage 3)
iUserimages2                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages3                         122  0x0000007a (const ??? 0)  (usage 3)
iUserimages4                         125  0x0000007d (const ??? 0)  (usage 3)
iUserimages5                         126  0x0000007e (const ??? 0)  (usage 3)
iUserimages6                         149  0x00000095 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 8725  0x00002215kKeyboardKeystrokes                 8725  0x00002215 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   12137  0x00002f69 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                9159  0x000023c7 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               13259  0x000033cb (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              281  0x00000119 (const dword)  (usage 3)
nObjects                             172  0x000000ac (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              53  0x00000035 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          8379  0x000020bbo4Dbuttons                          8379  0x000020bb (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      8099  0x00001fa3oAngularmeters                      8099  0x00001fa3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         8381  0x000020bdoAniButtons                         8381  0x000020bd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       8383  0x000020bfoColorPickers                       8383  0x000020bf (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         8101  0x00001fa5oCoolgauges                         8101  0x00001fa5 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      8103  0x00001fa7oCustomdigitss                      8103  0x00001fa7 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         8067  0x00001f83oDipSwitchs                         8067  0x00001f83 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              8105  0x00001fa9oForms                              8105  0x00001fa9 (mem) word[40] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             8185  0x00001ff9oGauges                             8185  0x00001ff9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           8075  0x00001f8boGSliders                           8075  0x00001f8b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             8187  0x00001ffboImages                             8187  0x00001ffb (mem) word[2] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          8191  0x00001fffoKeyboards                          8191  0x00001fff (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              8069  0x00001f85oKnobs                              8069  0x00001f85 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         8729  0x00002219oLedDigitsn                         8729  0x00002219 (mem) word[15] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         8195  0x00002003oLeddigitss                         8195  0x00002003 (mem) word[4] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               8193  0x00002001oLeds                               8193  0x00002001 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             8203  0x0000200boMeters                             8203  0x0000200b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             216  0x000000d8 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          8377  0x000020b9oPinInputs                          8377  0x000020b9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         8645  0x000021c5oPinOutputs                         8645  0x000021c5 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      8071  0x00001f87oRockerSwitchs                      8071  0x00001f87 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      8073  0x00001f89oRotarySwitchs                      8073  0x00001f89 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             8357  0x000020a5oScopes                             8357  0x000020a5 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            8643  0x000021c3oSoundss                            8643  0x000021c3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          8355  0x000020a3oSpectrums                          8355  0x000020a3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        8321  0x00002081oStaticTexts                        8321  0x00002081 (mem) word[17] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           8205  0x0000200doStringss                           8205  0x0000200d (mem) word[54] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 357)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              8359  0x000020a7oTanks                              8359  0x000020a7 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       8313  0x00002079oThermometers                       8313  0x00002079 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             8641  0x000021c1oTimers                             8641  0x000021c1 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          8077  0x00001f8doTrackbars                          8077  0x00001f8d (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        8385  0x000020c1oUserButtons                        8385  0x000020c1 (mem) word[128] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        8361  0x000020a9oUserImagess                        8361  0x000020a9 (mem) word[8] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           8315  0x0000207boUserleds                           8315  0x0000207b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             540  0x0000021c (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             8317  0x0000207doVideos                             8317  0x0000207d (mem) word[2] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         8079  0x00001f8foWinButtons                         8079  0x00001f8f (mem) word[10] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          296  0x00000128 (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       13294  0x000033ee (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         13006  0x000032ce (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   8727  0x00002217rKeyboardRoutines                   8727  0x00002217 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13192  0x00003388 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           13275  0x000033db (User func) args[1] r=0  (usage 15)
seroutOcs                          13242  0x000033ba (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         15  0x0000000f (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         15  0x0000000f (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          8  0x00000008 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         65  0x00000041 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         42  0x0000002a (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         45  0x0000002d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         35  0x00000023 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     1024  0x00000400 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         35  0x00000023 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         17  0x00000011 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         65  0x00000041 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         45  0x0000002d (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    26624  0x00006800 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         33  0x00000021 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         36  0x00000024 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings46Count                         1  0x00000001 (const dword)  (not used)
Strings46Size                          8  0x00000008 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          8  0x00000008 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings48Count                         1  0x00000001 (const dword)  (not used)
Strings48Size                         10  0x0000000a (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         10  0x0000000a (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings50Count                         1  0x00000001 (const dword)  (not used)
Strings50Size                         10  0x0000000a (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          37  0x00000025 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     11776  0x00002e00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     14336  0x00003800 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     14848  0x00003a00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3584  0x00000e00 (const dword)  (usage 3)
stringsCV                            108  0x0000006c (mem) word[53] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           292  0x00000124 (mem) word (global)  (usage 24)
TouchXpos                            286  0x0000011e (mem) word (global)  (usage 12)
TouchYpos                            288  0x00000120 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     12451  0x000030a3 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 396)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      11160  0x00002b98 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 156)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        12651  0x0000316b (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
