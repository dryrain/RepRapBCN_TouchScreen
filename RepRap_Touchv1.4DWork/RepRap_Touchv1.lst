file F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\uLCD-32PTU.fnc

000001  000001  #platform "uLCD-32PTU"
000002  000001  #platform "uLCD-32PTU"
000003  000008  */
000004  000009      #constant ULCD_32PT_GFX
000005  000009      #constant ULCD_32PT_GFX
000006  000010        
000007  000011      #IFNOT EXISTS PICASO_FUNCTIONS
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\PicasoFunctions.fnc

000008  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000009  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for PicasoGFX2 platforms
000012  000003        
000013  000004  #constant PICASO_FUNCTIONS
000014  000004  #constant PICASO_FUNCTIONS
000015  000005        
000016  000006        
000017  000007  #CONST
000018  000017  #END
000019  000018        
000020  000019  #CONST
000021  000025  #END
000022  000026        
000023  000027        
000024  000028  #CONST
000025  000040  #END
000026  000041        
000027  000042        
000028  000043  #CONST
000029  000208  #END
000030  000209        
000031  000210        
000032  000211  // baud divisor rates for setbaud(n);
000033  000212  #CONST
000034  000234  #END
000035  000235        
000036  000236        
000037  000237        
000038  000238        
000039  000243  */
000040  000244        
000041  000245        
000042  000246  //==============================================//
000043  000247  // EVE bios functions                           //
000044  000248  //==============================================//
000045  000249                                                  //
000046  000250  func serin(), 1;                // read a byte from COM0
000047  000251  // Syntax: serin();
000048  000252  // Usage : char := serin();
000049  000253  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
000050  000254  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000051  000255  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000052  000256  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000053  000257  //     : Returns: -1 if no character is available
000054  000258  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
000055  000259  //     : Returns: positive value 0 to 255 for a valid character received
000056  000260        
000057  000261  func putch("char"), 0;                // write single char to current output device
000058  000262  // Syntax: putch("char");
000059  000263  // Usage : putch("A");
000060  000264  // Notes : Transmits a single byte from the Serial Port COM0. The transmission format is:
000061  000265  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000062  000266  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000063  000267  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000064  000268  //     : The arguments can be a variable, array element, expression or constant
000065  000269        
000066  000270  func serout("char"), 0;                // write a byte to COM0
000067  000271  // Syntax: serout1("char");
000068  000272  // Usage : serout1(ch);
000069  000273  // Notes : send character to COM1
000070  000274        
000071  000275  func setbaud("baudnum"), 0;            // set baud rate of COM0
000072  000276  // Syntax: setbaud(baud_number);
000073  000277  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
000074  000278  // *Notes : argument specifies the baud rate using pre-defined constant.
000075  000279  //       : The pre-defined constant is a value of 0-19 , and internally
000076  000280  //       : this is used as a table pointer to get the baud rate divisor
000077  000281  //       : value for one of the 20 selected baud rates, control is then
000078  000282  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
000079  000283  //       : The pre-defined constants equate to a value of 0-19.
000080  000284  //       : If a value other than 0-19 is used, a run time error (eror 25)
000081  000285  //       : will occur.
000082  000286        
000083  000287  func to("device"), 1;                // output device redirection
000084  000288  // Syntax: to(outstream);
000085  000289  // Usage : to(APPEND); putstr("TWO ");
000086  000290  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000087  000291  //     :
000088  000292  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000089  000293  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000090  000294  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000091  000295  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000092  000296  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000093  000297  //     : completed its action. The APPEND argument is used to send the printed output to the same
000094  000298  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000095  000299  //     : sequential data to a media stream.
000096  000300  //     :
000097  000301  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000098  000302  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000099  000303  //     :                            appended to user memory if previous redirection was to an array.
000100  000304  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000101  000305  //     : TEXT           0xFF08      Output is directed to the screen (default).
000102  000306  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000103  000307  //     : I2C            0xF820      Output is directed to the I2C port.
000104  000308  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000105  000309        
000106  000310        
000107  000311  func pause("milliseconds"), 0;            // blocking delay
000108  000312  // Syntax: pause(milliseconds);
000109  000313  // Usage : pause(1000);                //pause for 1 second
000110  000314  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000111  000315        
000112  000316  func putnum("arg1","arg2"), 1;            // print number to current output device
000113  000317  // Syntax: putnum(format, value);
000114  000318  // Usage : var := putnum(HEX, val);
000115  000319  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000116  000320  //     : Format: A constant that specifies the number format
000117  000321  //     : Value : The number to be printed
000118  000322  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000119  000323  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000120  000324  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000121  000325  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000122  000326  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000123  000327  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000124  000328  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000125  000329  //     :                                     BIN6     BIN6Z     BIN6ZB
000126  000330  //     :                                     BIN7     BIN7Z     BIN7ZB
000127  000331  //     :                                     BIN8     BIN8Z     BIN8ZB
000128  000332  //     :                                     BIN9     BIN9Z     BIN9ZB
000129  000333  //     :                                     BIN10     BIN10Z     BIN10ZB
000130  000334  //     :                                     BIN11     BIN11Z     BIN11ZB
000131  000335  //     :                                     BIN12     BIN12Z     BIN12ZB
000132  000336  //     :                                     BIN13     BIN13Z     BIN13ZB
000133  000337  //     :                                     BIN14     BIN14Z     BIN14ZB
000134  000338  //     :                                     BIN15     BIN15Z     BIN15ZB
000135  000339  //     :                                     BIN16     BIN16Z     BIN16ZB
000136  000340  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000137  000341  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000138  000342  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000139  000343  //     : | | | | V V V
000140  000344  //     : | | | | | | |
000141  000345  //     : | | | | | |
000142  000346  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000143  000347  //     : | | | | digit count |
000144  000348  //     : | | | | |___reserved (not used on GOLDELOX)
000145  000349  //     : | | | |
000146  000350  //     : | | | |
000147  000351  //     : | | | |
000148  000352  //     : | | | |
000149  000353  //     : | | | |
000150  000354  //     : | | | |______ 1 = leading zeros included
000151  000355  //     : | | | 0 = leading zeros suppressed
000152  000356  //     : | | |
000153  000357  //     : | | |
000154  000358  //     : | | |_______ 1 = leading zero blanking
000155  000359  //     : | |
000156  000360  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000157  000361  //     : |
000158  000362  //     : |______ 1 = space before unsigned number
000159  000363        
000160  000364        
000161  000365  func translate("arg1","arg2","arg3","arg4"), 1; // list translator (internal use only, not usable)
000162  000366        
000163  000367  func putstr("string"), 1;                       // print string to current output device
000164  000368  // Syntax: putstr(pointer);
000165  000369  // Usage : putstr("HELLO\n");
000166  000370  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000167  000371  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000168  000372  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000169  000373  //       : The output of putstr can be redirected to the communications port, the media, or memory
000170  000374  //       : using the to(...); function.
000171  000375  //       : A string constant is automatically terminated with a zero.
000172  000376  //       : A string in a data statement is not automatically terminated with a zero.
000173  000377  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000174  000378  //       : element packs 1 or 2 characters.
000175  000379        
000176  000380        
000177  000381  func strlen("varAddress"), 1;                   // return length of a var packed string in character units
000178  000382  // Syntax: strlen("varAddress);
000179  000383  // Usage : strlen("HELLO\n");
000180  000384  // Notes : gives the length of a string that is packed into regular var array
000181  000385  //       : Use str_Length(ptr)  for string pointer mode
000182  000386        
000183  000387        
000184  000388  //==============================================//
000185  000389  // Memory Access Function Prototypes            //
000186  000390  //==============================================//
000187  000391                                                  //
000188  000392  func peekW("address"), 1;                       // read a word from system memory
000189  000393  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000190  000394  // refer to address map of internal variables   //
000191  000395  //==============================================//
000192  000396  // Math Functions                               //
000193  000397  //==============================================//
000194  000398                                                  //
000195  000399  func ABS("value"), 1;                           // return a positive number
000196  000400  // Syntax: ABS(value);
000197  000401  // Usage : var := ABS(arg);
000198  000402  // Notes : Returns the absolute value of an argument
000199  000403        
000200  000404  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000201  000405  // Syntax: MIN(value1, value2);
000202  000406  // Usage : var := MIN(arg1, arg2);
000203  000407  // Notes : Returns the minimum of 2 arguments
000204  000408        
000205  000409  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000206  000410  // Syntax: MAX(value1, value2);
000207  000411  // Usage : var := MAX(arg1, arg2);
000208  000412  // Notes : Returns the maximum of 2 arguments
000209  000413        
000210  000414  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000211  000415  // Syntax: SWAP(&var1, &var2);
000212  000416  // Usage : SWAP(&var1, &var2);
000213  000417  // Notes : Swaps the contents of 2 variables or memory locations
000214  000418        
000215  000419  func SIN("angle"), 1;                           // return SIN of angle
000216  000420  // Syntax: SIN(angle);
000217  000421  // Usage : var := SIN(arg);
000218  000422  // Notes : Returns the sine in radians of an argument in degrees
000219  000423  //       : the returned value range is from 127 to -127. The real
000220  000424  //       : cosine values vary from 1.0 to -1.0 so appropriate
000221  000425  //       : scaling must be done in user code.
000222  000426        
000223  000427  func COS("angle"), 1;                           // return COS of angle
000224  000428  // Syntax: COS(angle);
000225  000429  // Usage : var := COS(arg);
000226  000430  // Notes : Returns the cosine in radians of an argument in degrees
000227  000431  //       : the returned value range is from 127 to -127. The real
000228  000432  //       : cosine values vary from 1.0 to -1.0 so appropriate
000229  000433  //       : scaling must be done in user code.
000230  000434        
000231  000435  func RAND(), 1;                                 // return a pseudo random number
000232  000436  // Syntax: RAND();
000233  000437  // Usage : var := RAND();
000234  000438  // Notes : Returns a random number between 0 and 0xFFFF.
000235  000439  //       : The random number generator must first be seeded
000236  000440  //       : by using the SEED(number) function.
000237  000441        
000238  000442  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000239  000443  // Syntax: SEED(number);
000240  000444  // Usage : SEED(arg);
000241  000445  // Notes : Seeds the random number generator.
000242  000446        
000243  000447  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000244  000448  // Syntax: OVF();
000245  000449  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000246  000450  //       : hiWord := OVF();
000247  000451  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000248  000452        
000249  000453  func SQRT("number"), 1;                         // return square root of a number
000250  000454  // Syntax: SQRT(number);
000251  000455  // Usage : SQRT(arg);
000252  000456  // Notes : Returns the integer square root of a number.
000253  000457  //------------------------------------------------------------------//
000254  000458  //          Text Related Function Prototypes
000255  000459  //------------------------------------------------------------------//
000256  000460        
000257  000461  func txt_MoveCursor("line", "column"), 0;
000258  000462  // Syntax: txt_SetCursor(line, column);
000259  000463  // Usage : txt_SetCursor(arg1, arg2);
000260  000464  // Notes : Moves the text Cursor to a new screen position set by
000261  000465  //       : line,column parameters.
000262  000466        
000263  000467  func txt_Set("mode", "value"), 0;
000264  000468  // Syntax: txt_Set(mode, value);
000265  000469  // Usage : txt_Set(arg1, arg2);
000266  000470  // Returns : Original value before the change
000267  000471  // Notes : Sets various text related parameters used by other functions
000268  000472  //       : This allows the features to be set programatically with a
000269  000473  //       : single function call.It is strongly recommended to use the
000270  000474  //       : pre-defined constants rather than the mode numbers.
000271  000475  //       : NB:- Although it is often required to be able to set text
000272  000476  //       : functions with a single function call for graphics engine
000273  000477  //       : related functions, there is a complete set of single parameter
000274  000478  //       : shortcut functions that have exactly the same function as
000275  000479  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000276  000480  //       :
000277  000481  //       : mode = TEXT_COLOUR (mode 0)
000278  000482  //       : txt_Set(TEXT_COLOUR, value);
000279  000483  //       : value = 0 to 0xFFFF, Black to White
000280  000484  //       : Sets the Text colour for the display
000281  000485  //       : Default = LIME.
000282  000486  //       :
000283  000487  //       : mode = TEXT_HIGHLIGHT (mode 1)
000284  000488  //       : txt_Set(TEXT_HIGHLIGHT, value);
000285  000489  //       : value = 0 to 0xFFFF, Black to White
000286  000490  //       : Sets the Text background colour for the display. Effective
000287  000491  //       : when text mode is Opaque.
000288  000492  //       : Default = BLACK.
000289  000493  //       :
000290  000494  //       : mode = FONT_ID (mode 2)
000291  000495  //       : txt_Set(FONT_ID, value);
000292  000496  //       : value = FONT1, FONT2 or FONT3 for internal fonts
000293  000497  //       : else this value is the name of a font included
000294  000498  //       : in a users program in a data statement.
000295  000499  //       : Default = FONT SIZE 3.
000296  000500  //       :
000297  000501  //       : mode = TEXT_WIDTH  (mode 3)
000298  000502  //       : txt_Set(TEXT_WIDTH, value);
000299  000503  //       : value = 1 to 16
000300  000504  //       : Sets the Text Width multiplier
000301  000505  //       : text will be printed magnified horizontally
000302  000506  //       : by this factor, Default = 1.
000303  000507  //       :
000304  000508  //       : mode = TEXT_HEIGHT  (mode 4)
000305  000509  //       : txt_Set(TEXT_HEIGHT, value);
000306  000510  //       : value = 1 to 16
000307  000511  //       : Sets the Text Height multiplier
000308  000512  //       : text will be printed magnified vertically
000309  000513  //       : by this factor, Default = 1.
000310  000514  //       :
000311  000515  //       : mode = TEXT_XGAP  (mode 5)
000312  000516  //       : txt_Set(TEXT_XGAP, value);
000313  000517  //       : value = 1 to 32
000314  000518  //       : Sets the horizontal gap between characters
000315  000519  //       : The gap is in pixel units, Default = 0
000316  000520  //       :
000317  000521  //       : mode = TEXT_YGAP  (mode 6)
000318  000522  //       : txt_Set(TEXT_YGAP, value);
000319  000523  //       : value = 1 to 32
000320  000524  //       : Sets the vertical gap below characters
000321  000525  //       : The gap is in pixel units, Default = 0
000322  000526  //       :
000323  000527  //       : mode = TEXT_PRINTDELAY  (mode 7) DEPRECATED
000324  000528  //       : txt_Set(TEXT_PRINTDELAY, value);
000325  000529  //       : value = 0 to 255
000326  000530  //       : Sets the delay time (in ms) during character
000327  000531  //       : printing to give a 'teletype' like effect.
000328  000532  //       : Often used to attract attention to a string
000329  000533  //       : being printed which can often be missed if
000330  000534  //       : just suddenly appearing or changing.
000331  000535  //       : Default = 0 ms.
000332  000536  //       :
000333  000537  //       : mode = TEXT_OPACITY (mode 8)
000334  000538  //       : txt_Set(TEXT_OPACITY, value);
000335  000539  //       : value = TRANSPARENT (0) = Text Trasparent
000336  000540  //       : value = OPAQUE (1) = Text Opaque
000337  000541  //       : Sets the Opacity/Transparency of the text
000338  000542  //       : Default = 0 or TRANSPARENT
000339  000543  //       :
000340  000544  //       : mode = TEXT_BOLD (mode 9)
000341  000545  //       : txt_Set(TEXT_BOLD, value);
000342  000546  //       : value = dont care
000343  000547  //       : Sets Bold Text mode for the next string or char
000344  000548  //       : The feature automatically resets after printing
000345  000549  //       : using putstr or print has completed
000346  000550  //       :
000347  000551  //       : mode = TEXT_ITALIC (mode 10)
000348  000552  //       : txt_Set(TEXT_ITALIC, value);
000349  000553  //       : value = dont care
000350  000554  //       : Sets Italic Text mode for the next string or char
000351  000555  //       : The feature automatically resets after printing
000352  000556  //       : using putstr or print has completed
000353  000557        
000354  000558  //       : mode = TEXT_INVERSE (mode 11)
000355  000559  //       : txt_Set(TEXT_INVERSE, value);
000356  000560  //       : value = dont care
000357  000561  //       : Sets Inverse Text mode for the next string or char
000358  000562  //       : The feature automatically resets after printing
000359  000563  //       : using putstr or print has completed
000360  000564  //       :
000361  000565  //       : mode = TEXT_UNDERLINED (mode 12)
000362  000566  //       : txt_Set(TEXT_UNDERLINED, value);
000363  000567  //       : value = dont care
000364  000568  //       : Sets Underlined Text mode for the next string or char
000365  000569  //       : The feature automatically resets after printing
000366  000570  //       : using putstr or print has completed
000367  000571  //       :
000368  000572  //       : mode = TEXT_ATTRIBUTES (mode 13)
000369  000573  //       : txt_Set(TEXT_ATTRIBUTES, value);
000370  000574  //       : value = bits are defined as:
000371  000575  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000372  000576  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000373  000577  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000374  000578  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000375  000579  //       : Allows a combination of text attributes to be defined together
000376  000580  //       : by 'or'ing the bits together.
000377  000581  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000378  000582  //       : The feature automatically resets after printing
000379  000583  //       : using putstr or print has completed.
000380  000584  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000381  000585  //       :
000382  000586  //       : mode = TEXT_WRAP (mode 14)
000383  000587  //       : txt_Set(TEXT_WRAP , value);
000384  000588  //       : Sets the position where text wrap will occur
000385  000589  //       : The feature automatically resets when screen
000386  000590  //       : mode is changed. If the value is set to 0,
000387  000591  //       : text wrap is turned off.
000388  000592  //       : of the current screen. Default value is 0
000389  000593  // Notes : The value is in pixel units.
000390  000594  //       :
000391  000595        
000392  000596  //       : txt_Set mode 15 reserved for future use
000393  000597  //       :
000394  000598        
000395  000599        
000396  000600        
000397  000601  //=====================================================//
000398  000602  // Single parameter short-cuts                         //
000399  000603  // for the txt_Set functions                           //
000400  000604  // These functions return the existing value before    //
000401  000605  // the change is made.                                 //
000402  000606  //=====================================================//
000403  000607  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000404  000608  func txt_BGcolour("colour"), 1;             // 1  text background colour
000405  000609  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000406  000610  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000407  000611  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000408  000612  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000409  000613  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000410  000614  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000411  000615  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000412  000616  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000413  000617  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000414  000618  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000415  000619  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000416  000620  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000417  000621  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000418  000622  func _1F(), 0;                              // 15 text (reserved DO NOT REMOVE)
000419  000623        
000420  000624        
000421  000625  //------------------------------------------------------------------//
000422  000626  //                 Hardware Function Prototypes
000423  000627  //------------------------------------------------------------------//
000424  000628        
000425  000629  // I/O Pin reference:-
000426  000630  //
000427  000631  //    IO1_PIN           is pin 2 of J1
000428  000632  //    IO2_PIN           is pin 1 of J1
000429  000633  //    IO3_PIN           is pin 3 of J1
000430  000634  //    IO4_PIN           is pin 5 of J1 (also used for BUS_RD)
000431  000635  //    IO5_PIN           is pin 9 of J2 (also used for BUS_WR)
000432  000636  //    BUS_RD_PIN        is pin 5 of J1 (alias IO4_PIN)
000433  000637  //    BUS_WR_PIN        is pin 9 of J2 (alias IO5_PIN)
000434  000638  //    BUS_0             is pin 27 of J1
000435  000639  //    BUS_1             is pin 25 of J1
000436  000640  //    BUS_2             is pin 23 of J1
000437  000641  //    BUS_3             is pin 21 of J1
000438  000642  //    BUS_4             is pin 19 of J1
000439  000643  //    BUS_5             is pin 17 of J1
000440  000644  //    BUS_6             is pin 13 of J2
000441  000645  //    BUS_7             is pin 11 of J2
000442  000646  //    BACKLITE          is backlite control pin
000443  000647  //    AUDIO_ENABLE      is amplifier chip control pin
000444  000648        
000445  000649  func pin_Set("mode", "pin"), 1;            // set pin to required mode
000446  000650  // Syntax: pin_Set(mode, pin);
000447  000651  // Usage : pin_Set(arg1, arg2);
000448  000652  // Notes : Sets the appropriate pins to Inputs or Outputs
000449  000653  //       : returns true if the pin number is legal (usually ignored)
000450  000654  //       :
000451  000655  //       : mode = 0 : Set Pin to Output
000452  000656  //       : pin_Set(0, pin);
000453  000657  //       : pin_Set(OUTPUT, pin);
000454  000658  //       : pin = 1  : set IO1_PIN to output (pin 2 J1)
000455  000659  //       : pin = 2  : set IO2_PIN to output (pin 1 J1)
000456  000660  //       : pin = 3  : set IO3_PIN to output (pin 3 J1)
000457  000661  //       : pin = 4  : set IO4_PIN to output (pin 5 J1, also used for BUS_RD)
000458  000662  //       : pin = 5  : set IO5_PIN to output (pin 9 J2, also used for BUS_WR)
000459  000663  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000460  000664  //       : pin = 8  : set BUS_0   to output (pin 27 of J1)
000461  000665  //       : pin = 9  : set BUS_1   to output (pin 25 of J1)
000462  000666  //       : pin = 10 : set BUS_2   to output (pin 23 of J1)
000463  000667  //       : pin = 11 : set BUS_3   to output (pin 21 of J1)
000464  000668  //       : pin = 12 : set BUS_4   to output (pin 19 of J1)
000465  000669  //       : pin = 13 : set BUS_5   to output (pin 17 of J1)
000466  000670  //       : pin = 14 : set BUS_6   to output (pin 13 of J2)
000467  000671  //       : pin = 15 : set BUS_7   to output (pin 11 of J2)
000468  000672  //       : Sets the desired pin to be used as an Output.
000469  000673  //       :
000470  000674  //       : mode = 1 : Set Pin to Input
000471  000675  //       : pin_Set(1, pin);
000472  000676  //       : pin_Set(INPUT, pin);
000473  000677  //       : pin = 1  : set IO1_PIN to input (pin 2 J1)
000474  000678  //       : pin = 2  : set IO2_PIN to input (pin 1 J1)
000475  000679  //       : pin = 3  : set IO3_PIN to input (pin 3 J1)
000476  000680  //       : pin = 4  : set IO4_PIN to input (pin 5 J1, also used for BUS_RD)
000477  000681  //       : pin = 5  : set IO5_PIN to input (pin 9 J2, also used for BUS_WR)
000478  000682  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000479  000683  //       : pin = 8  : set BUS_0   to input (pin 27 of J1)
000480  000684  //       : pin = 9  : set BUS_1   to input (pin 25 of J1)
000481  000685  //       : pin = 10 : set BUS_2   to input (pin 23 of J1)
000482  000686  //       : pin = 11 : set BUS_3   to input (pin 21 of J1)
000483  000687  //       : pin = 12 : set BUS_4   to input (pin 19 of J1)
000484  000688  //       : pin = 13 : set BUS_5   to input (pin 17 of J1)
000485  000689  //       : pin = 14 : set BUS_6   to input (pin 13 of J2)
000486  000690  //       : pin = 15 : set BUS_7   to input (pin 11 of J2)
000487  000691  //       : Sets the desired pin to be used as an Input.
000488  000692        
000489  000693  func pin_HI("pin"), 1;                    // set pin to logic '1'
000490  000694  // Syntax: pin_HI(pin);
000491  000695  // Usage : pin_HI(arg);
000492  000696  // Notes : Outputs a logic "High" (3.3V) on the appropriate
000493  000697  //       : pin that was previously selected as an Output.
000494  000698  //       : returns true if the pin number is legal (usually ignored)
000495  000699  //       :
000496  000700  //       : pin = 1  : set IO1_PIN to "High" level (pin 2 of J1)
000497  000701  //       : pin = 2  : set IO2_PIN to "High" level (pin 1 of J1)
000498  000702  //       : pin = 3  : set IO3_PIN to "High" level (pin 3 of J1)
000499  000703  //       : pin = 4  : set IO4_PIN to "High" level (pin 5 of J1, also used for BUS_RD)
000500  000704  //       : pin = 5  : set IO5_PIN to "High" level (pin 9 of J2, also used for BUS_WR)
000501  000705  //       : pin = 6  : set DCENB pin to "High" level (BACKLITE ON)
000502  000706  //       : pin = 7  : set AUDIO_ENABL pin to "High" level (AMP OFF)
000503  000707  //       : pin = 8  : set BUS_0   to "High" level (pin 27 of J1)
000504  000708  //       : pin = 9  : set BUS_1   to "High" level (pin 25 of J1)
000505  000709  //       : pin = 10 : set BUS_2   to "High" level (pin 23 of J1)
000506  000710  //       : pin = 11 : set BUS_3   to "High" level (pin 21 of J1)
000507  000711  //       : pin = 12 : set BUS_4   to "High" level (pin 19 of J1)
000508  000712  //       : pin = 13 : set BUS_5   to "High" level (pin 17 of J1)
000509  000713  //       : pin = 14 : set BUS_6   to "High" level (pin 13 of J2)
000510  000714  //       : pin = 15 : set BUS_7   to "High" level (pin 11 of J2)
000511  000715        
000512  000716  func pin_LO("pin"), 1;                    // set pin to logic '0'
000513  000717  // Syntax: pin_LO(pin);
000514  000718  // Usage : pin_LO(arg);
000515  000719  // Notes : Outputs a logic "Low" (0V) on the appropriate
000516  000720  //       : pin that was previously selected as an Output.
000517  000721  //       : returns true if the pin number is legal (usually ignored)
000518  000722  //       :
000519  000723  //       : pin = 1 : set IO1_PIN to "Low" level (pin 2 of J1)
000520  000724  //       : pin = 2 : set IO2_PIN to "Low" level (pin 1 of J1)
000521  000725  //       : pin = 3 : set IO3_PIN to "Low" level (pin 3 of J1)
000522  000726  //       : pin = 4 : set IO4_PIN to "Low" level (pin 5 of J1, also used for BUS_RD)
000523  000727  //       : pin = 5 : set IO5_PIN to "Low" level (pin 9 of J2, also used for BUS_WR)
000524  000728  //       : pin = 6 : set DCENB pin to "Low" level (BACKLITE)
000525  000729  //       : pin = 7 : set AUDIO_ENABL pin to "Low" level (AMP ON)
000526  000730  //       : pin = 8  : set BUS_0  to "Low" level (pin 27 of J1)
000527  000731  //       : pin = 9  : set BUS_1  to "Low" level (pin 25 of J1)
000528  000732  //       : pin = 10 : set BUS_2  to "Low" level (pin 23 of J1)
000529  000733  //       : pin = 11 : set BUS_3  to "Low" level (pin 21 of J1)
000530  000734  //       : pin = 12 : set BUS_4  to "Low" level (pin 19 of J1)
000531  000735  //       : pin = 13 : set BUS_5  to "Low" level (pin 17 of J1)
000532  000736  //       : pin = 14 : set BUS_6  to "Low" level (pin 13 of J2)
000533  000737  //       : pin = 15 : set BUS_7  to "Low" level (pin 11 of J2)
000534  000738        
000535  000739  func pin_Read("pin"), 1;                // read pin, logic or analogue
000536  000740  // Syntax: pin_Read(pin);
000537  000741  // Usage : arg1 := pin_Read(arg2);
000538  000742  // Notes : Reads the logic state of the appropriate
000539  000743  //       : pin that was previously selected as an Input.
000540  000744  //       :
000541  000745  //       : pin = 1  : Read the state of IO1_PIN (pin 2 of J1)
000542  000746  //       : pin = 2  : Read the state of IO2_PIN (pin 1 of J1)
000543  000747  //       : pin = 3  : Read the state of IO3_PIN (pin 3 of J1)
000544  000748  //       : pin = 4  : Read the state of IO4_PIN (pin 5 of J1, also used for BUS_RD)
000545  000749  //       : pin = 5  : Read the state of IO5_PIN (pin 9 of J2, also used for BUS_WR)
000546  000750  //       : pin = 6  : Read the state of DCENB pin to "Low" level (BACKLITE)
000547  000751  //       : pin = 7  : Read the state of AUDIO_ENABL pin to "Low" level (AMP ON)
000548  000752  //       : pin = 8  : Read the state of BUS_0   (pin 27 of J1)
000549  000753  //       : pin = 9  : Read the state of BUS_1   (pin 25 of J1)
000550  000754  //       : pin = 10 : Read the state of BUS_2   (pin 23 of J1)
000551  000755  //       : pin = 11 : Read the state of BUS_3   (pin 21 of J1)
000552  000756  //       : pin = 12 : Read the state of BUS_4   (pin 19 of J1)
000553  000757  //       : pin = 13 : Read the state of BUS_5   (pin 17 of J1)
000554  000758  //       : pin = 14 : Read the state of BUS_6   (pin 13 of J2)
000555  000759  //       : pin = 15 : Read the state of BUS_7   (pin 11 of J2)
000556  000760  //       : Returns a 0 (logic low) or 1 (logic high).
000557  000761        
000558  000762        
000559  000763  //------------------------------------------------------------------//
000560  000764  //                 P1 module BUS I/O control
000561  000765  //------------------------------------------------------------------//
000562  000766        
000563  000767  func bus_In(), 1;
000564  000768  // Syntax: bus_In();
000565  000769  // Usage : arg1 := bus_In();
000566  000770  // Notes : Read the 8bit wide bus into the lower 8 bits of arg1.
000567  000771  //       : The upper 8 bits of arg1 are set to 0.
000568  000772  //       : the BUS_RD and BUS_WR pins are not affected.
000569  000773  //       :
000570  000774  //       : BUS_0 is pin 27 of J1
000571  000775  //       : BUS_1 is pin 25 of J1
000572  000776  //       : BUS_2 is pin 23 of J1
000573  000777  //       : BUS_3 is pin 21 of J1
000574  000778  //       : BUS_4 is pin 19 of J1
000575  000779  //       : BUS_5 is pin 17 of J1
000576  000780  //       : BUS_6 is pin 13 of J2
000577  000781  //       : BUS_7 is pin 11 of J2
000578  000782        
000579  000783  func bus_Out("var"), 0;
000580  000784  // Syntax: bus_Out(var);
000581  000785  // Usage : bus_Out(arg1);
000582  000786  // Notes : The lower 8 bits of arg1 are placed on the 8bit wide bus.
000583  000787  //       : The upper 8 bits of arg1 are ignored.
000584  000788  //       : the BUS_RD and BUS_WR pins are not affected.
000585  000789  //       : NB:- any BUS pins that are set to inputs are not affected.
000586  000790  //       :
000587  000791  //       : BUS_0 is pin 27 of J1
000588  000792  //       : BUS_1 is pin 25 of J1
000589  000793  //       : BUS_2 is pin 23 of J1
000590  000794  //       : BUS_3 is pin 21 of J1
000591  000795  //       : BUS_4 is pin 19 of J1
000592  000796  //       : BUS_5 is pin 17 of J1
000593  000797  //       : BUS_6 is pin 13 of J2
000594  000798  //       : BUS_7 is pin 11 of J2
000595  000799        
000596  000800  func bus_Set("var"), 0;
000597  000801  // Syntax: bus_Set(var);
000598  000802  // Usage : bus_Set(arg1);
000599  000803  // Notes : The lower 8 bits of arg1 are placed in the BUS direction register.
000600  000804  //       : a '1' sets a pin to be an input, a '0' sets a pin to be output.
000601  000805  //       : The upper 8 bits of arg1 are ignored.
000602  000806  //       : the BUS_RD and BUS_WR pins are not affected.
000603  000807  //       :
000604  000808  //       : BUS_0 is pin 27 of J1
000605  000809  //       : BUS_1 is pin 25 of J1
000606  000810  //       : BUS_2 is pin 23 of J1
000607  000811  //       : BUS_3 is pin 21 of J1
000608  000812  //       : BUS_4 is pin 19 of J1
000609  000813  //       : BUS_5 is pin 17 of J1
000610  000814  //       : BUS_6 is pin 13 of J2
000611  000815  //       : BUS_7 is pin 11 of J2
000612  000816        
000613  000817  func bus_Write("var"), 0;
000614  000818  // Syntax: bus_Write(var);
000615  000819  // Usage : bus_Write(arg1);
000616  000820  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
000617  000821  //       : a settling delay of approx 50nsec, the BUS_WR pin is strobed
000618  000822  //       : LO for approx 50nsec then set back HI.
000619  000823  //       : The upper 8 bits of arg1 are ignored.
000620  000824  //       : NB:- the BUS_WR pin is automatically pre-set to an output to
000621  000825  //       : ensure BUS write integrity.
000622  000826  //       :
000623  000827  //       : BUS_0 is pin 27 of J1
000624  000828  //       : BUS_1 is pin 25 of J1
000625  000829  //       : BUS_2 is pin 23 of J1
000626  000830  //       : BUS_3 is pin 21 of J1
000627  000831  //       : BUS_4 is pin 19 of J1
000628  000832  //       : BUS_5 is pin 17 of J1
000629  000833  //       : BUS_6 is pin 13 of J2
000630  000834  //       : BUS_7 is pin 11 of J2
000631  000835        
000632  000836  func bus_Read(), 1;
000633  000837  // Syntax: bus_Read();
000634  000838  // Usage : arg1 := bus_Read();
000635  000839  // Notes : The BUS_RD pin set to LO, then, after a settling delay
000636  000840  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
000637  000841  //       : (the upper 8 bits being set to 0)
000638  000842  //       : the BUS_RD pin is then set back to a HI level.
000639  000843  //       : NB:- the BUS_RD pin is automatically pre-set to an output to
000640  000844  //       : ensure BUS write integrity.
000641  000845  //       :
000642  000846  //       : BUS_0 is pin 27 of J1
000643  000847  //       : BUS_1 is pin 25 of J1
000644  000848  //       : BUS_2 is pin 23 of J1
000645  000849  //       : BUS_3 is pin 21 of J1
000646  000850  //       : BUS_4 is pin 19 of J1
000647  000851  //       : BUS_5 is pin 17 of J1
000648  000852  //       : BUS_6 is pin 13 of J2
000649  000853  //       : BUS_7 is pin 11 of J2
000650  000854        
000651  000855        
000652  000856  //------------------------------------------------------------------//
000653  000857  //   Graphics Functions
000654  000858  //------------------------------------------------------------------//
000655  000859  func gfx_Set("mode", "value"), 0;            // set various graphics functions
000656  000860  // Syntax: gfx_Set(mode, value);
000657  000861  // Usage : gfx_Set(arg1, arg2);
000658  000862  // Notes : Sets various graphics parameters used by other functions
000659  000863  //       : This allows the features to be set programatically with a
000660  000864  //       : single function call.It is strongly recommended to use the
000661  000865  //       : pre-defined constants rather than the mode numbers.
000662  000866  //       : NB:- Although it is often required to be able to set graphics
000663  000867  //       : functions with a single function call for graphics engine
000664  000868  //       : related functions, there is a complete set of single parameter
000665  000869  //       : shortcut functions that have exactly the same function as
000666  000870  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
000667  000871  //       :
000668  000872  //       : mode = PEN_SIZE (mode 16)
000669  000873  //       : gfx_Set(PEN_SIZE, value);
000670  000874  //       : value = SOLID (value 0) rectangle and circle objects are solid
000671  000875  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
000672  000876  //       : Sets the mode of the Pen used by most graphics objects
000673  000877  //       :
000674  000878  //       : mode = BACKGROUND_COLOUR (mode 17)
000675  000879  //       : gfx_Set(BACKGROUND_COLOUR, value);
000676  000880  //       : value = 0 to 0xFFFF, Black to White
000677  000881  //       : Sets the Background colour of the screen
000678  000882  //       :
000679  000883  //       : mode = OBJECT_COLOUR (mode 18)
000680  000884  //       : gfx_Set(OBJECT_COLOUR, value);
000681  000885  //       : value = 0 to 0xFFFF, Black to White
000682  000886  //       : Sets the Object colour used in various functions
000683  000887  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
000684  000888  //       :
000685  000889  //       : mode = CLIPPING (mode 19)
000686  000890  //       : gfx_Set(CLIPPING, value);
000687  000891  //       : value = OFF (value 0) Clipping disabled
000688  000892  //       : value = ON (value 1) Clipping enabled
000689  000893  //       : Enables/Disables the Clipping feature
000690  000894  //       :
000691  000895  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
000692  000896  //       : gfx_Set(TRANSPARENT_COLOUR, value);
000693  000897  //       : value = 0 to 0xFFFF Black to White
000694  000898  //       : Sets Bitmap, Image or Animation Transparency Colour.
000695  000899  //       : NB not implemented
000696  000900  //       :
000697  000901  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
000698  000902  //       : gfx_Set(5, value);
000699  000903  //       : value = OFF (value 0) Transparency disabled
000700  000904  //       : value = ON (value 1) Transparency enabled
000701  000905  //       : Enables/Disables the Transparency feature
000702  000906  //       : NB not implemented
000703  000907  //       :
000704  000908  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
000705  000909  //       : gfx_Set(FRAME_DELAY, value);
000706  000910  //       : value = 0 to 65535 ms
000707  000911  //       : Sets the Video/Animation clip inter-frame delay. This setting will
000708  000912  //       : over-ride the embedded frame delay of the clip. After the event,
000709  000913  //       : the setting will auto disable and if further inter-frame delays need
000710  000914  //       : overriding the setting must be re-issued.
000711  000915  //       :
000712  000916  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
000713  000917  //       : gfx_Set(SCREEN_MODE, value);
000714  000918  //       : value = LANDSCAPE   (value 0)
000715  000919  //       : value = LANDSCAPE_R (value 1)
000716  000920  //       : value = PORTRAIT    (value 2)
000717  000921  //       : value = PORTRAIT_R  (value 3)
000718  000922  //       :
000719  000923  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
000720  000924  //       : gfx_Set(OUTLINE_COLOUR, value);
000721  000925  //       : value = 1 to 0xFFFF, if 0, featre is OFF
000722  000926  //       : Sets the filled Rectangle or Circle objects outline colour
000723  000927  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
000724  000928  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
000725  000929  //       :
000726  000930  //       : Only supports variable contrast for uOLED Modules
000727  000931  //       : mode = CONTRAST (mode 25) : Contrast
000728  000932  //       : gfx_Set(CONTRAST, value);
000729  000933  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
000730  000934  //       : when contrast=0, display is placed in low power mode.
000731  000935  //       : This function should be called with contrast=0 when
000732  000936  //       : powering down the module.
000733  000937  //       :
000734  000938  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
000735  000939  //       : gfx_Set(LINE_PATTERN, value);
000736  000940  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
000737  000941  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
000738  000942  //       : a value of 0 turns the feature off
000739  000943  //       :
000740  000944  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
000741  000945  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
000742  000946  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
000743  000947  //       : NB not implemented, default is COLOUR16
000744  000948  //       :
000745  000949  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
000746  000950  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
000747  000951  //       : sets the button and slider objects bevel width
000748  000952  //       :
000749  000953  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
000750  000954  //       : gfx_Set(BEVEL_SHADOW , 5);
000751  000955  //       : sets the button and slider objects darken and lighten depth for the bevel colour
000752  000956  //       :
000753  000957  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
000754  000958  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
000755  000959  //       : sets the origin of drawn objects to a position other than 0,0
000756  000960  //       :
000757  000961  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
000758  000962  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
000759  000963  //       : sets the origin of drawn objects to a position other than 0,0
000760  000964        
000761  000965        
000762  000966  func gfx_Cls(), 0;                    // clear the screen
000763  000967  // Syntax: gfx_Cls();
000764  000968  // Usage : gfx_Cls();
000765  000969  // Notes : Clears the screen with current background colour
000766  000970        
000767  000971  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
000768  000972  // Syntax: gfx_MoveTo(x, y);
000769  000973  // Usage : gfx_MoveTo(arg1, arg2);
000770  000974  // Notes : Moves the origin to a new x,y position
000771  000975        
000772  000976  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
000773  000977  // Syntax: gfx_MoveRel(x, y);
000774  000978  // Usage : gfx_MoveRel(arg1, arg2);
000775  000979  // Notes : Moves the origin to a new x,y position
000776  000980  //       : relative to the current origing
000777  000981        
000778  000982  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
000779  000983  // Syntax: gfx_LineTo(x1, y1);
000780  000984  // Usage : gfx_LineTo(arg1, arg2);
000781  000985  // Notes : Draws a Line from the origin x,y to x1,y1.
000782  000986  //       : The new origin is then set to x1, y1. Line colour needs
000783  000987  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000784  000988        
000785  000989  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
000786  000990  // Syntax: gfx_LineRel(x1, y1);
000787  000991  // Usage : gfx_LineRel(arg1, arg2);
000788  000992  // Notes : Draws a Line from the origin x,y to x1,y1.
000789  000993  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
000790  000994  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
000791  000995        
000792  000996  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
000793  000997  // Syntax: gfx_Line(x1, x2, y2, colr);
000794  000998  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
000795  000999  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
000796  001000        
000797  001001  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
000798  001002  // Syntax: gfx_Line(x1, x2, y, colr);
000799  001003  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000800  001004  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
000801  001005        
000802  001006  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
000803  001007  // Syntax: gfx_Line(y1, y2, x, colr);
000804  001008  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000805  001009  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
000806  001010        
000807  001011  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
000808  001012  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
000809  001013  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000810  001014  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
000811  001015  //       : bottom corner (x2,y2) on the screen.
000812  001016        
000813  001017  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
000814  001018  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
000815  001019  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000816  001020  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
000817  001021  //       : bottom corner (x2,y2) on the screen.
000818  001022        
000819  001023  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
000820  001024  // Syntax: gfx_Circle(x, y, rad, colr);
000821  001025  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000822  001026  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
000823  001027        
000824  001028  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
000825  001029  // Syntax: gfx_Circle(x, y, rad, colr);
000826  001030  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000827  001031  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
000828  001032        
000829  001033  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
000830  001034  // Syntax: gfx_PutPixel(x, y, colr);
000831  001035  // Usage : gfx_PutPixel(arg1, arg2, arg3);
000832  001036  // Notes : Plots a coloured pixel on the screen at x,y location
000833  001037        
000834  001038  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
000835  001039  // Syntax: gfx_GetPixel(x, y);
000836  001040  // Usage : var := gfx_GetPixel(arg1, arg2);
000837  001041  // Notes : Reads and returns the colour value of a pixel at location x,y
000838  001042        
000839  001043  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
000840  001044  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
000841  001045  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000842  001046  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000843  001047  //       : Vertices must be specified in an anti-clockwise fashion
000844  001048        
000845  001049  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
000846  001050  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
000847  001051  // Usage : gfx_OrbitInit(&arg1, &arg2);
000848  001052  // Notes : Sets up the Orbit function parameters.
000849  001053  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
000850  001054  //       : variables that get updated after calling gfx_Orbit(,,) function.
000851  001055  //       : The coordiantaes are calculated relative to the origin
000852  001056  //       : obtained by using the gfx_MoveTo(x, y) function.
000853  001057        
000854  001058  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
000855  001059  // Syntax: gfx_Orbit(angle, distance);
000856  001060  // Usage : gfx_Orbit(arg1, arg2);
000857  001061  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
000858  001062  //       : only known parameters are the angle and the distance from the current origin.
000859  001063        
000860  001064  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
000861  001065  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
000862  001066  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
000863  001067  // Notes : This function is very similar to the Ploygon function
000864  001068  //       : with the exception of the 1st and the last vertices not joined.
000865  001069        
000866  001070  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
000867  001071  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
000868  001072  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
000869  001073  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000870  001074  //       : Vertices must be minimum of 3 and can be specified in any fashion
000871  001075        
000872  001076  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
000873  001077  // Syntax: gfx_Dot();
000874  001078  // Usage : gfx_Dot();
000875  001079  // Notes : Places a coloured dot at the origin
000876  001080        
000877  001081        
000878  001082  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
000879  001083  // Syntax: gfx_Bullet();
000880  001084  // Usage : gfx_Bullet();
000881  001085  // Notes : Places a coloured circle at the origin
000882  001086  //       : filled or unfilled state is controlled by PenSize
000883  001087        
000884  001088  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
000885  001089  // Syntax: gfx_IncX();
000886  001090  // Usage : var := gfx_IncX();
000887  001091  // Notes : Increments the x coordinate of the origin
000888  001092        
000889  001093  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
000890  001094  // Syntax: gfx_IncY();
000891  001095  // Usage : var := gfx_IncY();
000892  001096  // Notes : Increments the y coordinate of the origin
000893  001097        
000894  001098  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
000895  001099  // Syntax: gfx_BoxTo(x1, y1);
000896  001100  // Usage : gfx_BoxTo(arg1, arg2);
000897  001101  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
000898  001102  //       : The new origin is then set to x1,y1. Rectangle colour needs
000899  001103  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000900  001104  //       : and the PenSize setting determines if Box is solid or outline.
000901  001105        
000902  001106  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
000903  001107  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
000904  001108  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
000905  001109  // Notes : Specifies a clipping window region on the screen such that any objects
000906  001110  //       : and text placed onto the screen will be clipped and displayed only
000907  001111  //       : within that region. For the clipping window to take effect, "Clipping"
000908  001112  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
000909  001113        
000910  001114        
000911  001115  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
000912  001116  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
000913  001117  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
000914  001118  // *Notes:
000915  001119        
000916  001120  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
000917  001121  // Syntax: gfx_SetClipRegion();
000918  001122  // Usage : var := gfx_SetClipRegion();
000919  001123  // *Notes:
000920  001124        
000921  001125  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
000922  001126  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
000923  001127  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
000924  001128  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000925  001129  //       : with xradius = xrad and yradius = yrad.
000926  001130  //       : if PenSize = 0 Ellipse is Solid
000927  001131  //       : if PenSize = 1 Ellipse is Outline
000928  001132        
000929  001133        
000930  001134  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
000931  001135  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
000932  001136  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
000933  001137  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000934  001138  //       : with xradius = xrad and yradius = yrad.
000935  001139        
000936  001140  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 0;
000937  001141  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
000938  001142  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
000939  001143  // Notes : Draws a 3 dimensional Text Button at screen location defined by
000940  001144  //       : x,y arguments (top left corner). The size of the button depends on
000941  001145  //       : the font, width, height and length of the text.
000942  001146  //       : The button appearance will depend on the state parameter setting:
000943  001147  //       :         state = 0 : Button Pressed
000944  001148  //       :         state = 1 : Button Raised
000945  001149        
000946  001150  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
000947  001151  // Syntax: gfx_Panel("style", "x", "y", "width", "height", "colour"), 0;
000948  001152  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
000949  001153  // Notes : Draws a panel (groupbox) at screen location defined by
000950  001154  //       : x, y, width and height with colour "colour".
000951  001155  //       :         state = 0 : recessed
000952  001156  //       :         state = 1 : raised
000953  001157        
000954  001158  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
000955  001159  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
000956  001160  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
000957  001161  // Notes : Draws a 3 dimensional Slider Bar on the screen.
000958  001162  //       : Slider parameters are as follows:
000959  001163  //       :         mode = 0 : Slider recessed
000960  001164  //       :         mode = 1 : Slider raised
000961  001165  //       :         x1, y1 = top left corner
000962  001166  //       :         x2, y2 = bottom right corner
000963  001167  //       :         scale = n : sets the full scale range from 0 to n
000964  001168  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
000965  001169  //       : returns:-
000966  001170        
000967  001171        
000968  001172  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
000969  001173  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
000970  001174  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
000971  001175  // Notes : Copies an area of a screen from xs,ys of size given by width and height
000972  001176  //       : and pastes it to another location determined by xd, yd.
000973  001177        
000974  001178  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
000975  001179  // Syntax: gfx_RGBto565(red, green, blue);
000976  001180  // Usage : gfx_RGBto565(arg1, arg2, arg3);
000977  001181  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
000978  001182        
000979  001183  func gfx_332to565("COLOUR8BIT"), 1;
000980  001184  // Syntax: gfx_332to565(colour);
000981  001185  // Usage : gfx_332to565(arg);
000982  001186  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
000983  001187        
000984  001188  func gfx_Selection("index", "backcolor", "textcolor"), 0;
000985  001189  // Syntax: gfx_Selection("index", "backcolor", "textcolor"), 0;
000986  001190  // Usage : gfx_Selection(1, RED, YELLOW);
000987  001191  // Notes : Called prior to drawing a button, this function
000988  001192  //       : hilites the required text line on a multiline button.
000989  001193        
000990  001194  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
000991  001195  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
000992  001196  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000993  001197  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000994  001198  //       : Vertices must be specified in an anti-clockwise fashion
000995  001199        
000996  001200        
000997  001201  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
000998  001202  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
000999  001203  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001000  001204  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001001  001205  //       : Vertices must be minimum of 3 and can be specified in any fashion
001002  001206        
001003  001207        
001004  001208  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001005  001209  // Syntax: gfx_Offset(x, y);
001006  001210  // Usage : gfx_Offset(arg1, arg2);
001007  001211  // Notes : Set the screen offset
001008  001212        
001009  001213        
001010  001214        
001011  001215  func gfx_Get("mode"), 1;
001012  001216  // Syntax: gfx_Get(mode);
001013  001217  // Usage : arg1 := gfx_Get(arg);
001014  001218  // Notes : Returns various parameters to caller
001015  001219  //       :
001016  001220  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001017  001221  //       : var := gfx_Get(X_MAX);
001018  001222  //       : Returns the maximum horizontal value of the display
001019  001223  //       :
001020  001224  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001021  001225  //       : var := gfx_Get(Y_MAX);
001022  001226  //       : Returns the maximum vertical value of the display
001023  001227  //       :
001024  001228  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001025  001229  //       : var := gfx_Get(LEFT_POS);
001026  001230  //       : Returns the left location of the last drawn object
001027  001231  //       : such as a slider or button or an image/video
001028  001232  //       :
001029  001233  //       : mode = TOP_POS (mode 3) : Top location of Object
001030  001234  //       : var := gfx_Get(TOP_POS);
001031  001235  //       : Returns the top location of the last drawn object
001032  001236  //       : such as a slider or button or an image/video
001033  001237  //       :
001034  001238  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001035  001239  //       : var := gfx_Get(RIGHT_POS);
001036  001240  //       : Returns the right location of the last drawn object
001037  001241  //       : such as a slider or button or an image/video
001038  001242  //       :
001039  001243  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001040  001244  //       : var := gfx_Get(BOTTOM_POS );
001041  001245  //       : Returns the bottom location of the last drawn object
001042  001246  //       : such as a slider or button or an image/video
001043  001247  //       :
001044  001248        
001045  001249        
001046  001250  //==================================================//
001047  001251  // Single parameter short-cuts                      //
001048  001252  // for the gfx_Set functions                        //
001049  001253  // These functions return the existing value before //
001050  001254  // the change is made.                              //
001051  001255  //==================================================//
001052  001256  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001053  001257  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001054  001258  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001055  001259  func gfx_Clipping("mode"), 0;                       // 3  graphics clipping ON/OFF
001056  001260  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001057  001261  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001058  001262  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001059  001263  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001060  001264  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001061  001265  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001062  001266  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001063  001267  func gfx_ColourMode("mode"), 1;                     // 11 graphics colour mode COLOUR8 or COLOUR16 (default colour 16)
001064  001268  func gfx_BevelWidth("mode"), 1;                     // 12 graphics button bevel width
001065  001269  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001066  001270  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001067  001271  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001068  001272        
001069  001273        
001070  001274  //==================================================//
001071  001275  // uSD/FLASH Function Prototypes                    //
001072  001276  //==================================================//
001073  001277  func media_Video("x", "y"), 0;                      // display movie at position x y
001074  001278  // Syntax: media_Video(x, y);
001075  001279  // Usage : media_Video(arg1, arg2);
001076  001280  // Notes : Play a Video/Animation clip from the uSD card at screen location
001077  001281  //       : specified by x,y (top left corner). The location of the clip in the
001078  001282  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001079  001283        
001080  001284  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001081  001285  // Syntax: media_VideoFrame(Frame_number);
001082  001286  // Usage : arg1 := media_VideoFrame();
001083  001287  // Notes : After a pointer to a valid video has been set with media_SetSector,
001084  001288  //       : calling this function shows each fram sequentially, returning
001085  001289  //       : the number of frames remaining. The position of the image is
001086  001290  //     : at the current origin as set with gfx_MoveTo(...);
001087  001291        
001088  001292  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001089  001293  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001090  001294  // Usage : media_SetAdd(arg1, arg2);
001091  001295  // Notes : Set uSD internal Address pointer for bytewise access
001092  001296        
001093  001297  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001094  001298  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001095  001299  // Usage : media_SetSector(arg1, arg2);
001096  001300  // Notes : Set uSD internal Sector pointer for sector block access
001097  001301        
001098  001302  func media_RdSector("*destination"), 1;
001099  001303  // Syntax: media_RdSector(*destination);
001100  001304  // Usage : media_RdSector(rdblock);
001101  001305  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001102  001306  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001103  001307  //       : After the read the Sector pointer is automatically incremented by 1.
001104  001308  //       : Returns TRUE if uSD response was TRUE
001105  001309        
001106  001310  func media_WrSector("*source"), 1;
001107  001311  // Syntax: media_WrSector(*source);
001108  001312  // Usage : media_WrSector(wrblock);
001109  001313  // Notes : Writes 512 bytes (256 words) from a source memory block
001110  001314  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001111  001315  //       : pointer is automatically incremented by 1.
001112  001316  //       : Returns TRUE if uSD response was TRUE
001113  001317        
001114  001318  func media_ReadByte(), 1;                // read a byte at the current stream position
001115  001319  // Syntax: media_RdByte();
001116  001320  // Usage : var := media_RdByte();
001117  001321  // Notes : Reads and Returns a single byte of data from the
001118  001322  //       : uSD card pointed to by the internal Address pointer.
001119  001323  //       : After the read the Address pointer is automatically
001120  001324  //       : incremented by 1.
001121  001325        
001122  001326  func media_ReadWord(), 1;                // read a word at the current stream position
001123  001327  // Syntax: media_ReadWord();
001124  001328  // Usage : var := media_ReadWord();
001125  001329  // *Notes : Reads and Returns a single word of data from the
001126  001330  //       : uSD card pointed to by the internal Address pointer.
001127  001331  //       : After the read the Address pointer is automatically
001128  001332  //       : incremented by 2.
001129  001333        
001130  001334  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
001131  001335  // Syntax: media_WriteByte(arg1);
001132  001336  // Usage : var := media_WriteByte(arg1);
001133  001337  // *Notes : Writes and Returns xxxxx
001134  001338  //       : After the write the Address pointer is automatically
001135  001339  //       : incremented by 1.
001136  001340        
001137  001341  func media_WriteWord("word"), 1;            // write a word to the current stream position
001138  001342  // Syntax: media_WriteWord(arg1);
001139  001343  // Usage : var := media_WriteWord(arg1);
001140  001344  // *Notes : Writes and Returns xxxxx
001141  001345  //       : After the write the Address pointer is automatically
001142  001346  //       : incremented by 2.
001143  001347        
001144  001348  func media_Image("x", "y"), 0;            // display image at position x y
001145  001349  // Syntax: media_Image(x, y);
001146  001350  // Usage : media_Image(arg1, arg2);
001147  001351  // Notes : Display an image from the uSD card at screen location
001148  001352  //       : specified by x,y (top left corner). The location of the
001149  001353  //       : Image in the uSD card must be specified by
001150  001354  //       : media_setSector(Image_Sector_Add) function.
001151  001355        
001152  001356  func media_Flush(), 1;                    // after writing to media, flush the sector and write
001153  001357  // Syntax: media_Flush();
001154  001358  // Usage : var := media_Flush();
001155  001359  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
001156  001360  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
001157  001361        
001158  001362  func media_Init(), 1;                    // initialize uSD card
001159  001363  // Usage : media_Init();
001160  001364  // Notes : Initialise uSD CARD
001161  001365  //       : Response: 0 = No Card
001162  001366  //       :           1 = Card Initialised
001163  001367        
001164  001368        
001165  001369  //==============================================//
001166  001370  // Communications Function Prototypes           //
001167  001371  //==============================================//
001168  001372  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
001169  001373  // Syntax: com_Init(buffer, bufsize, qualifier);
001170  001374  // Usage1: com_Init(mybuf, 20, 0);
001171  001375  // Usage2: com_Init(mybuf, 20, ':');
001172  001376  // Notes : initialize a serial capture buffer for the comms input
001173  001377  //       : The program must declare a var array as a circular buffer.
001174  001378  //       : Usage1 declares a circular buffer which will continually
001175  001379  //       : buffer characters.
001176  001380  //       : Usage2 must receive ':' before any characters will
001177  001381  //       : accumulate in the buffer.
001178  001382        
001179  001383  func com_Reset(), 0;                 // reset the comms receiver
001180  001384  // Syntax: com_Reset();
001181  001385  // Usage : com_Reset();
001182  001386  // Notes : reset comms to default polled mode
001183  001387        
001184  001388  func com_Count(), 1;                // return count of characters in receive buffer
001185  001389  // Syntax: com_Count();
001186  001390  // Usage : arg := com_Count();
001187  001391  // Notes : return count of buffered characters in buffer attachment
001188  001392        
001189  001393  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
001190  001394  // Syntax: com_Full();
001191  001395  // Usage : if (com_Full() ,,,, go read buffer;
001192  001396  // Notes : return true if buffer full (not necessarily an error if
001193  001397  //       : buffer is sized to a packet size)
001194  001398        
001195  001399  func com_Error(), 1;                // return comms errors comms error occurred
001196  001400  // Syntax: com_Error();
001197  001401  // Usage : if (com_Error() ) ...... take recovery action;
001198  001402  // Notes : return non zero if any errors low level comms errors occured
001199  001403  // returns :
001200  001404  // bit0 = Receiver Overflow Error
001201  001405  // bit1 = Receiver Framing Error
001202  001406  // bit2 = Transmit Buffer Overflow
001203  001407        
001204  001408  func com_Sync(), 1;                // returns TRUE if qualifier has been received
001205  001409  // Syntax: com_Sync();
001206  001410  // Usage : com_Sync();
001207  001411  // return true if sync character has been received in com_Init("...") mode
001208  001412        
001209  001413        
001210  001414  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001211  001415  // Syntax: com_TXbuffer("buf", "bufsize", "pin");
001212  001416  // Usage : com_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001213  001417  // Usage : com_TXbuffer(0, 0, 0);              // revert to non buffered service
001214  001418  // Notes : initialize a serial buffer for the COM0 output.
001215  001419  //       : The program must declare a var array as a circular buffer.
001216  001420  //       : When a TX buffer is declared for comms, the transmission
001217  001421  //       : of characters becomes non blocking. The only time
001218  001422  //       : blocking will occur is if the buffer has insufficient space
001219  001423  //       : to accept the next character, in which case the function
001220  001424  //       : will wait for buffer space to become available. If the
001221  001425  //       : TX buffer is no longer required, just set the buffer pointer
001222  001426  //       : to zero, the size in this case doesnt matter and is ignored.
001223  001427  //       : The function can resize or reallocated to another buffer at
001224  001428  //       : any time. The buffer is flushed before any changes are made.
001225  001429  //       : "pin" designates an IO pin to control a bi-directional 
001226  001430  //       : control device for half duplex mode. "pin" will go HI at the
001227  001431  //       : start of a transmission, and will return low after the final
001228  001432  //       : byte is transmitted. If not required, just set "pin" to zero.
001229  001433        
001230  001434        
001231  001435  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
001232  001436  // Syntax: com_TXcount();
001233  001437  // Usage : arg := com_Count();
001234  001438  // Notes : return count of characters remaining in COM0 transmit buffer
001235  001439  //       : that was previously allocated with com_TXbuffer(...);
001236  001440        
001237  001441        
001238  001442  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
001239  001443  // Syntax: com_TXemptyEvent(function);
001240  001444  // Usage : arg := com_TXemptyEvent();
001241  001445  // Notes : If a comms TX buffer that was previously allocated with
001242  001446  //       : com_TXbuffer(...);, this function can be used to set up
001243  001447  //       : a function to be called when the COM0 TX buffer is empty.
001244  001448  //       : This is useful for either reloading the TX buffer, setting
001245  001449  //       : or clearing a pin to change the direction of eg a RS485
001246  001450  //       : line driver, or any other form of traffic control.
001247  001451  //       : The event function must not have any parameters.
001248  001452  //       : To disable the event, simply call com_TXemptyEvent(0).
001249  001453  //       : com_TXbuffer(...); also resets any active event.
001250  001454  //       : com_TXemptyEvent returns any previous event function
001251  001455  //       : address, or zero if there was no previous function.
001252  001456        
001253  001457        
001254  001458  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
001255  001459  // Usage : arg := com_TXbufferHold(ON);  // hold the buffer while we fill it
001256  001460  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
001257  001461  // Notes : Expecting that a comms TX buffer that was previously allocated with
001258  001462  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
001259  001463  //       : the buffer being sent wile it is being loaded. Mormally, when
001260  001464  //       : using buffered comms, the transmit process will begin
001261  001465  //       : immediately. This is often undesirable for 2 reasons,
001262  001466  //       : 1] you may wish to build a packet then send it later
001263  001467  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001264  001468  //       : as the FIFO buffer is constantly trying to empty while
001265  001469  //       : you are busy tring to fill it.
001266  001470  // return -1 if function is called illegally when TX comms is not buffered.
001267  001471  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
001268  001472  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
001269  001473        
001270  001474        
001271  001475  //=============================================================//
001272  001476  // Auxilliary Communications Function Prototypes
001273  001477  //=============================================================//
001274  001478  func com1_Init("buffer", "bufsize", "qualifier"), 0;
001275  001479  // Syntax: com_Init(buffer, bufsize, qualifier);
001276  001480  // Usage1: com_Init(mybuf, 20, 0);
001277  001481  // Usage2: com_Init(mybuf, 20, ':');
001278  001482  // Notes : initialize a serial capture buffer for the comms input
001279  001483  //       : The program must declare a var array as a circular buffer.
001280  001484  //       : Usage1 declares a circular buffer which will continually
001281  001485  //       : buffer characters.
001282  001486  //       : Usage2 must receive ':' before any characters will
001283  001487  //       : accumulate in the buffer.
001284  001488        
001285  001489  func com1_Reset(), 0;
001286  001490  // Syntax: com_Reset();
001287  001491  // Usage : com_Reset();
001288  001492  // Notes : reset comms receiver to default polled mode
001289  001493        
001290  001494  func com1_Count(), 1;
001291  001495  // Syntax: com_Count();
001292  001496  // Usage : arg := com_Count();
001293  001497  // Notes : return count of characters in receive buffer
001294  001498        
001295  001499  func com1_Full(), 1;
001296  001500  // Syntax: com_Full();
001297  001501  // Usage : if (com_Full() ,,,, go read buffer;
001298  001502  // Notes : return true if receive buffer full
001299  001503        
001300  001504  func com1_Error(), 1;
001301  001505  // Syntax: com_Error();
001302  001506  // Usage : if (com_Error() ) ...... take recovery action;
001303  001507  // Notes : return non zero if any level comms errors occured
001304  001508  // returns :
001305  001509  // bit0 = Receiver Overflow Error
001306  001510  // bit1 = Receiver Framing Error
001307  001511  // bit2 = Transmit Buffer Overflow
001308  001512        
001309  001513  func com1_Sync(), 1;
001310  001514  // Syntax: com_Sync();
001311  001515  // Usage : com_Sync();
001312  001516  // Notes : return true if sync character has been received in com_Init("...") mode
001313  001517        
001314  001518        
001315  001519  func com1_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001316  001520  // Syntax: com1_TXbuffer("buf", "bufsize", "pin");
001317  001521  // Usage : com1_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001318  001522  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
001319  001523  // Notes : initialize a serial buffer for the COM1 output.
001320  001524  //       : The program must declare a var array as a circular buffer.
001321  001525  //       : When a TX buffer is declared for comms, the transmission
001322  001526  //       : of characters becomes non blocking. The only time
001323  001527  //       : blocking will occur is if the buffer has insufficient space
001324  001528  //       : to accept the next character, in which case the function
001325  001529  //       : will wait for buffer space to become available. If the
001326  001530  //       : TX buffer is no longer required, just set the buffer pointer
001327  001531  //       : to zero, the size in this case doesnt matter and is ignored.
001328  001532  //       : The function can resize or reallocated to another buffer at
001329  001533  //       : any time. The buffer is flushed before any changes are made.
001330  001534  //       : "pin" designates an IO pin to control a bi-directional 
001331  001535  //       : control device for half duplex mode. "pin" will go HI at the
001332  001536  //       : start of a transmission, and will return low after the final
001333  001537  //       : byte is transmitted. If not required, just set "pin" to zero.
001334  001538        
001335  001539        
001336  001540  func com1_TXcount(), 1;                // return count of characters in COM1 TX buffer
001337  001541  // Syntax: com1_TXcount();
001338  001542  // Usage : arg := com1_Count();
001339  001543  // Notes : return count of characters remaining in COM1 transmit buffer
001340  001544  //       : that was previously allocated with com1_TXbuffer(...);
001341  001545        
001342  001546        
001343  001547  func com1_TXemptyEvent("function"), 1;  // sets a function to be called when COM1 TX buffer empty
001344  001548  // Syntax: com1_TXemptyEvent(function);
001345  001549  // Usage : arg := com1_TXemptyEvent();
001346  001550  // Notes : If a comms TX buffer that was previously allocated with
001347  001551  //       : com1_TXbuffer(...);, this function can be used to set up
001348  001552  //       : a function to be called when the COM1 TX buffer is empty.
001349  001553  //       : This is useful for either reloading the TX buffer, setting
001350  001554  //       : or clearing a pin to change the direction of eg a RS485
001351  001555  //       : line driver, or any other form of traffic control.
001352  001556  //       : The event function must not have any parameters.
001353  001557  //       : To disable the event, simply call com1_TXemptyEvent(0).
001354  001558  //       : com1_TXbuffer(...); also resets any active event.
001355  001559  //       : com1_TXemptyEvent returns any previous event function
001356  001560  //       : address, or zero if there was no previous function.
001357  001561        
001358  001562        
001359  001563  func com1_TXbufferHold("state"), 1; // hold or release a com1_TXbuffer
001360  001564  // Usage : arg := com1_TXbufferHold(ON);  // hold the buffer while we fill it
001361  001565  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
001362  001566  // Notes : Expecting that a comms TX buffer that was previously allocated with
001363  001567  //       : com1_TXbuffer(...);, com1_TXbufferHold(ON) can be used to stop
001364  001568  //       : the buffer being sent wile it is being loaded. Mormally, when
001365  001569  //       : using buffered comms, the transmit process will begin
001366  001570  //       : immediately. This is often undesirable for 2 reasons,
001367  001571  //       : 1] you may wish to build a packet then send it later
001368  001572  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001369  001573  //       : as the FIFO buffer is constantly trying to empty while
001370  001574  //       : you are busy tring to fill it.
001371  001575  // return -1 if function is called illegally when TX comms is not buffered.
001372  001576  // return buffer count when called with argument of 1, eg com1_TXbufferHold(ON)
001373  001577  // return 0 when argument is zero, eg com1_TXbufferHold(OFF)
001374  001578        
001375  001579  func serin1(), 1;
001376  001580  // Syntax: serin1();
001377  001581  // Usage : char := serin1();
001378  001582  // Notes : return the next available character from COM1
001379  001583        
001380  001584  func serout1("char"), 0;
001381  001585  // Syntax: serout1("char");
001382  001586  // Usage : serout1(ch);
001383  001587  // Notes : send character to COM1
001384  001588        
001385  001589  func com_SetBaud("comport","baudrate/10"), 1;
001386  001590  // Syntax: com_SetBaud("comport","baudrate/10");
001387  001591  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
001388  001592  // Notes : sets to any viable baud rate from 160 to 655350
001389  001593  // return true if baud rate was acceptable
001390  001594        
001391  001595        
001392  001596        
001393  001597  //==============================================//
001394  001598  // Display Access                               //
001395  001599  //==============================================//
001396  001600  func disp_Init(), 0;                            // initialize display with required tables
001397  001601  // Syntax: disp_Init();
001398  001602  // Usage : disp_Init();
001399  001603  // Notes : Initialises or reinitialises the display.
001400  001604  //       : Normally used after restoration of peripheral power
001401  001605  //       : and after DeepSleep.
001402  001606        
001403  001607  func disp_SetReg("register", "data"), 0;
001404  001608  // Syntax: display_SetReg(register, data);
001405  001609  // Usage : display_SetReg(arg1, arg2);
001406  001610  // Notes : Sets uLCD specific display driver registers. Refer
001407  001611  //       : to appropriate display driver data sheet.
001408  001612        
001409  001613  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
001410  001614  // Syntax: disp_setGRAM(x1, y1, x2, y2);
001411  001615  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
001412  001616  // Notes : Prepares the GRAM area for user access.
001413  001617  //       : Data can now be written with disp_GRAM.
001414  001618  //       : GRAM will be set accordingly for the correct screen mode.
001415  001619  //       : the LO word of the 32 bit pixel count is returned. This is
001416  001620  //       : usually all that is needed unlse GRAM area exceeds 256^2
001417  001621  //       : A copy of the 32bit value can be found in
001418  001622  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
001419  001623        
001420  001624  func disp_WrGRAM("colour"), 0;
001421  001625  // Syntax: display_WrGRAM(colour);
001422  001626  // Usage : display_WrGRAM(arg);
001423  001627  // Notes : Data can be written to the GRAM consecutively using
001424  001628  //       : this function once the GRAM access window has been setup.
001425  001629        
001426  001630  func disp_WriteControl("value"), 0;             // write a control byte to the display
001427  001631  func disp_WriteWord("value"), 0;                // write a word to the display
001428  001632        
001429  001633        
001430  001634  func disp_ReadWord(), 1;                        // read a word from the display
001431  001635  // Syntax: disp_ReadWord();
001432  001636  // Usage : x:=disp_ReadWord();
001433  001637  // Notes : Read a word from the controller
001434  001638  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
001435  001639  //       : print(disp_ReadWord());        // print ID
001436  001640  //       : (Many displays are write only)
001437  001641        
001438  001642                                                  //
001439  001643  //==============================================//
001440  001644  // unadorned SPI functions                      //
001441  001645  //==============================================//
001442  001646  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
001443  001647  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
001444  001648  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
001445  001649  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
001446  001650                                                  //
001447  001651  //==============================================//
001448  001652  // flash device specific functions              //
001449  001653  //==============================================//
001450  001654  func flash_SIG(), 1;                            // read Jedecsignature from SPI Flash device
001451  001655  func flash_ID(), 1;                             // read ID code from FLASH device
001452  001656  func flash_BulkErase(), 0;                      // erase the entire FLASH device
001453  001657  func flash_BlockErase("block"), 1;              // erase the required 64k flash block
001454  001658                                                  //
001455  001659                                                  //
001456  001660  //==============================================//
001457  001661  // string and character size function           //
001458  001662  //==============================================//
001459  001663  func charwidth("char"), 1;                      // return width of a character in pixel units
001460  001664  func charheight("char"), 1;                     // return height of a character in pixel units
001461  001665  func strwidth("pointer"), 1;                    // return width of a string in pixel units
001462  001666  func strheight(), 1;                            // return height of a string in pixel units
001463  001667        
001464  001668        
001465  001669  //------------------------------------------------------------------//
001466  001670  //        I2C Function Prototypes
001467  001671  //------------------------------------------------------------------//
001468  001672  func I2C_Open("speed"), 0;
001469  001673  // Syntax: I2C_Open(speed),
001470  001674  // Usage : I2C_Open(I2C_MED);
001471  001675  // Notes : configures the I2C module
001472  001676  //       : speed can be I2C_SLOW, I2C_MED, I2C_FAST (100khz, 400khz, 1mhz)
001473  001677        
001474  001678  func I2C_Close(), 0;
001475  001679  // Syntax: I2C_Close();
001476  001680  // Usage : I2C_Close();
001477  001681  // Notes : disables the I2C1 module.
001478  001682        
001479  001683  func I2C_Start(), 1;
001480  001684  // Syntax: I2C_Start();
001481  001685  // Usage : I2C_Start();
001482  001686  // Notes : generates a Start condition.
001483  001687  //       : returns true if successful (usually ignored)
001484  001688        
001485  001689  func I2C_Stop(), 1;
001486  001690  // Syntax: I2C_Stop();
001487  001691  // Usage : I2C_Stop();
001488  001692  // Notes : generates a Stop condition.
001489  001693  //       : returns true if successful (usually ignored)
001490  001694        
001491  001695  func I2C_Restart(), 1;
001492  001696  // Syntax: I2C_Restart();
001493  001697  // Usage : I2C_Restart();
001494  001698  // Notes : generates a Restart condition.
001495  001699  //       : returns true if successful (usually ignored)
001496  001700        
001497  001701  func I2C_Read(), 1;
001498  001702  // Syntax: I2C_Read();
001499  001703  // Usage : ch := I2C_Read();
001500  001704  // Notes : reads a single byte from the I2C Bus.
001501  001705        
001502  001706  func I2C_Write("byte"), 1;
001503  001707  // Syntax: I2C_Write(byte);
001504  001708  // Usage : r := I2C_Write(ch);
001505  001709  // Notes : is used to write a byte to the I2C bus.
001506  001710  //       : Returns 0 if failed, 1 if no ack, 2 if ack
001507  001711        
001508  001712  func I2C_Ack(), 0;
001509  001713  // Syntax: I2C_Ack();
001510  001714  // Usage : I2C_Ack();
001511  001715  // Notes : generates the acknowledge condition.
001512  001716        
001513  001717  func I2C_Nack(), 0;
001514  001718  // Syntax: I2C_Nack();
001515  001719  // Usage : I2C_Nack();
001516  001720  // Notes : generates the negative acknowledge condition.
001517  001721        
001518  001722  func I2C_AckStatus(), 0;
001519  001723  // Syntax: I2C_AckStatus();
001520  001724  // Usage : r := I2C_AckStatus();
001521  001725  // Notes : returns the ACK status from the device.
001522  001726        
001523  001727  func I2C_AckPoll("control"), 1;
001524  001728  // Syntax: I2C_AckPoll();
001525  001729  // Usage : r := I2C_AckPoll(0xA0);
001526  001730  // Notes : waits for a device to return from ACK polling.
001527  001731        
001528  001732  func I2C_Idle(), 0;
001529  001733  // Syntax: I2C_Idle();
001530  001734  // Usage : I2C_Idle();
001531  001735  // Notes : waits until the I2C Bus is Inactive.
001532  001736        
001533  001737  func I2C_Gets("buffer", "size"), 1;
001534  001738  // Syntax: I2C_Gets("buffer", "size");
001535  001739  // Usage : r := I2C_Gets(mybuf, 16);
001536  001740  // Notes : only reads up to "size" characters into "buffer"
001537  001741  //       : Reads up to asciiz terminator including terminator
001538  001742        
001539  001743  func I2C_Getn("buffer", "size"), 1;
001540  001744  // Syntax: I2C_Gets("buffer", "size");
001541  001745  // Usage : r := I2C_Gets(mybuf, 16);
001542  001746  // Notes : reads "size" bytes into "buffer"
001543  001747  //       :
001544  001748        
001545  001749  func I2C_Puts("buffer"), 1;
001546  001750  // Syntax: I2C_Puts("buffer");
001547  001751  // Usage : r := I2C_Puts(mybuf);
001548  001752  // Notes : writes an asciiz string to the I2C device
001549  001753  //       : returns count of characters written
001550  001754        
001551  001755  func I2C_Putn("buffer", "count"), 1;
001552  001756  // Syntax: I2C_Putn("buffer","count");
001553  001757  // Usage : r := I2C_Puts(mybuf,10);
001554  001758  // Notes : writes up to "size" bytes to the I2C device
001555  001759  //       : returns number of bytes written
001556  001760        
001557  001761        
001558  001762  //------------------------------------------------------------------//
001559  001763  //        Image Control Function Prototypes
001560  001764  //------------------------------------------------------------------//
001561  001765  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
001562  001766  // Syntax: img_SetPosition(handle, index, xpos, ypos);
001563  001767  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
001564  001768  // Notes : set the position where the image will be displayed
001565  001769  //       : returns true if index was ok and function was successful.
001566  001770  //       : you may turn off an image so when img_Refresh is called,
001567  001771  //       : the image will not be shown
001568  001772        
001569  001773  func img_Enable("handle", "index"), 1;
001570  001774  // Syntax: img_Enable(handle, index);
001571  001775  // Usage : r := img_Enable(hImageList, imagenum);
001572  001776  // Notes : enable image in a image list
001573  001777  //       : returns true if index was ok and function was successful.
001574  001778  //       : this is the default state so when img_Refresh is called,
001575  001779  //       : all the images in the list will be shown
001576  001780  //       : if index is set to -1, all of the images are enabled
001577  001781        
001578  001782  func img_Disable("handle", "index"), 1;
001579  001783  // Syntax: img_Disable(handle, index);
001580  001784  // Usage : r := img_Disable(hImageList, imagenum);
001581  001785  // Notes : disable image in a image list
001582  001786  //       : returns true if index was ok and function was successful.
001583  001787  //       : you must turn off an image so when img_Refresh is called,
001584  001788  //       : the image will not be shown.
001585  001789  //       : if index is set to -1, all of the images are disabled
001586  001790        
001587  001791        
001588  001792  func img_Darken("handle", "index"), 1;
001589  001793  // Syntax: img_Darken(handle, index);
001590  001794  // Usage : r := img_Darken(hImageList, imagenum);
001591  001795  // Notes : darken image in a image list
001592  001796  //       : returns true if index was ok and function was successful.
001593  001797  //       : if index is set to -1, all of the images are darkened
001594  001798  //       : NB:- this feature will only work for the next refresh, then
001595  001799  //       : the image reverts back to normal when displayed again.
001596  001800        
001597  001801        
001598  001802  func img_Lighten("handle", "index"), 1;
001599  001803  // Syntax: img_Lighten(handle, index);
001600  001804  // Usage : r := img_Lighten(hImageList, imagenum);
001601  001805  // Notes : lighten image in a image list
001602  001806  //       : returns true if index was ok and function was successful.
001603  001807  //       : if index is set to -1, all of the images are lightened
001604  001808  //       : NB:- this feature will only work for the next refresh, then
001605  001809  //       : the image reverts back to normal when displayed again.
001606  001810        
001607  001811  func img_SetWord("handle", "index", "offset", "word"), 1;
001608  001812  // Syntax: img_SetWord(handle, index, offset, word);
001609  001813  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
001610  001814  // Notes : set specified word (0-7) in a image entry
001611  001815  //       : returns TRUE if successful, return value usually ignored.
001612  001816        
001613  001817  func img_GetWord("handle", "index", "offset"), 1;
001614  001818  // Syntax: myvar := img_GetWord("handle", "index", "offset");
001615  001819  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
001616  001820  // Notes : returns specified word (0-14) from an image entry
001617  001821  //       : refer to image control entry offsets.
001618  001822        
001619  001823  func img_Show("handle", "index"), 1;
001620  001824  // Syntax: img_Show(handle, index);
001621  001825  // Usage : display image entry (regardless of enable/disable)
001622  001826  //       : returns TRUE if successful, return value usually ignored.
001623  001827        
001624  001828  func img_SetAttributes("handle", "index","value"), 1;
001625  001829  // Syntax: img_SetAttributes("handle", "index","offset");
001626  001830  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
001627  001831  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
001628  001832  //       : of an image control entry. "value" refers to various bits in
001629  001833  //       : the image control entry (see image attribute flags).
001630  001834  //       : A '1' bit in the "value" field SETS the respective bit
001631  001835  //       : in the IMAGE_FLAGS field of the image control entry.
001632  001836  //       : returns TRUE if successful, return value usually ignored.
001633  001837        
001634  001838  func img_ClearAttributes("handle", "index","value"), 1;
001635  001839  // Syntax: img_ClearAttributes("handle", "index","offset");
001636  001840  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
001637  001841  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
001638  001842  //       : of an image control entry. "value" refers to various bits in
001639  001843  //       : the image control entry (see image attribute flags)
001640  001844  //       : a '1' bit in the "value" field CLEARS the respective bit
001641  001845  //       : in the IMAGE_FLAGS field of the image control entry.
001642  001846  //       : returns TRUE if successful, return value usually ignored.
001643  001847        
001644  001848  func img_Touched("handle", "index"), 1;
001645  001849  // Syntax: r := img_Touched(handle, index);
001646  001850  // Usage : img_Touched(hndl, 17);
001647  001851  //       : returns -1 if image not touched, or returns index
001648  001852  // Notes : if index is passed as -1, function tests all images,
001649  001853  //       : and returns -1 if image not touched, or returns index.
001650  001854        
001651  001855        
001652  001856        
001653  001857        
001654  001858  //------------------------------------------------------------------//
001655  001859  //        Timer Function Prototypes
001656  001860  //------------------------------------------------------------------//
001657  001861  func sys_T(), 1;
001658  001862  // Syntax: sys_T();
001659  001863  // Usage : t := sys_T();
001660  001864  // Notes : return the current value of the rolling system timer (1msec) LO word
001661  001865        
001662  001866  func sys_T_HI(), 1;
001663  001867  // Syntax: sys_T_HI();
001664  001868  // Usage : t := sys_T_HI();
001665  001869  // Notes : return the current value of the rolling system timer (1msec) HI word
001666  001870        
001667  001871  func sys_SetTimer("timernum","value"), 0;
001668  001872  // Syntax: sys_SetTimer("timernum", "value");
001669  001873  // Usage : sys_SetTimer(TIMER5, 10000);
001670  001874  // Notes : set a countdown on the selected timer, or 'top up' if required.
001671  001875  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001672  001876  //       : Maximum timeout period is 65.535 seconds
001673  001877  //       : A timer can be read with the sys_GetTimer("timernum") function
001674  001878        
001675  001879  func sys_GetTimer("timernum"), 1;
001676  001880  // Syntax: t := sys_GetTimer("timernum");
001677  001881  // Usage : t := sys_GetTimer(TIMER3);
001678  001882  // Notes : returns 0 if timer has expired, or the current countdown value.
001679  001883  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001680  001884  //       : Maximum timeout period is 65.535 seconds
001681  001885  //       : A timer must be set with the sys_SetTimer("timernum","value") function
001682  001886        
001683  001887  func sys_SetTimerEvent("timernum","function"), 1;
001684  001888  // Syntax: sys_SetTimerFunction("timernum", "function");
001685  001889  // Usage : sys_SetTimer(TIMER5, myfunc);
001686  001890  // Notes : set a function to be called for selected timer.
001687  001891  //       : When the timer reaches zero, the function is called.
001688  001892  //       : The called function must not have any parameters
001689  001893  //       : sys_SetTimerEvent returns any previous event function
001690  001894  //       : address, or zero if there was no previous function.
001691  001895        
001692  001896  func sys_EventQueue(), 1;
001693  001897  // Syntax: sys_EventQueue();
001694  001898  // Usage : tasks := sys_EventQueue();
001695  001899  // Notes : returns the max number of events that were pending
001696  001900  //       : in the timer queue since the last call to this function.
001697  001901  //       : This can be used to assess timer event overhead burden,
001698  001902  //       : especially after or during a sys_EventsPostpone action.
001699  001903        
001700  001904  func sys_EventsPostpone(), 0;
001701  001905  // Syntax: sys_EventPostpone();
001702  001906  // Usage : sys_EventPostpone();   // postpone the event queue
001703  001907  // Notes : postpone any events until the sys_EventResume function is executed
001704  001908  //       : The timer event queue will continue to queue events, but no action
001705  001909  //       : will take place untill a sys_EventResume function is encountered.
001706  001910  //       : The queue will continue to receive up to 32 events before discarding
001707  001911  //       : any further events. This function is required to allow a sequence of
001708  001912  //       : instructions or functions to occur that would otherwise be corrupted
001709  001913  //       : by an event occuring during the sequence of instructions or functions.
001710  001914  //       : A good example of this is when you set a position to print, if there
001711  001915  //       : was no way of locking the current sequence, an event may occur which
001712  001916  //       : does a similar thing, and a contention would occur - printing to
001713  001917  //       : the wrong position. This function should be used wisely, if any action
001714  001918  //       : that is required would take considerable time, it is better to disable
001715  001919  //       : any conflicting event functions with a bypass flag, then restart the
001716  001920  //       : conflicting event by re-issuing a timer value.
001717  001921        
001718  001922  func sys_EventsResume(), 0;
001719  001923  // Syntax: sys_EventsResume();
001720  001924  // Usage : sys_EventsResume();   // resume the event queue
001721  001925  // Notes : resume any postponed events. The queue will try to execute any timer
001722  001926  //       : events that were incurred during the postponed period.
001723  001927        
001724  001928        
001725  001929  func sys_Sleep("units"), 1;
001726  001930  // Syntax: t := sys_Sleep("units");
001727  001931  // Usage : t := sys_Sleep(10);
001728  001932  // Notes : sets the display into low power mode for a period of time.
001729  001933  //       : Touching the touch screen will also wake from sleep.
001730  001934  //       : Returns remaining sleep units.
001731  001935        
001732  001936  func iterator("offset"), 0;
001733  001937  // Syntax: t :=  iterator("offset");
001734  001938  // Usage : t :=  iterator(10);
001735  001939  // Notes : set the iterator size for ++/--
001736  001940  //       : The next postinc,postdec,preinc of predec will alter
001737  001941  //       : by the specified value.
001738  001942  //       : The offset will return to 1 after the next operation.
001739  001943        
001740  001944        
001741  001945        
001742  001946        
001743  001947  //------------------------------------------------------------------//
001744  001948  //         Touch Screen Function Prototypes
001745  001949  //------------------------------------------------------------------//
001746  001950        
001747  001951  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
001748  001952  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
001749  001953  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
001750  001954  // Notes : Specifies a new touch detect region on the screen
001751  001955  //       : such that only touch activity in that region will
001752  001956  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
001753  001957        
001754  001958  func touch_Set("mode"), 0;
001755  001959  // Syntax: touch_Set(mode);
001756  001960  // Usage : touch_Set(arg);
001757  001961  // Notes : Sets various Touch Screen related parameters
001758  001962  //       :
001759  001963  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
001760  001964  //       : touch_Set(TOUCH_ENABLE);
001761  001965  //       : Enables and initialises Touch Screen hardware
001762  001966  //       :
001763  001967  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
001764  001968  //       : touch_Set(TOUCH_DISABLE );
001765  001969  //       : Disables the Touch Screen
001766  001970  //       : Note: Touch Screen runs in the background and disabling
001767  001971  //       : it when not in use will free up extra resources
001768  001972  //       : such as 4DVM CPU cycles.
001769  001973  //       :
001770  001974  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
001771  001975  //       : touch_Set(TOUCH_REGIONDEFAULT);
001772  001976  //       : This will reset the current active region to default
001773  001977  //       : to the full screen without the application having to
001774  001978  //       : set a new active region for the full screen.
001775  001979  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
001776  001980  //       : that requre to be interfaced with an external pointing
001777  001981  //       : device, values that are poked into TOUCH_DRIVE will be
001778  001982  //       : read with the touch_Get() function)
001779  001983        
001780  001984        
001781  001985  func touch_Get("mode"), 1;
001782  001986  // Syntax: touch_Get(mode);
001783  001987  // Usage : arg1 := touch_Get(arg);
001784  001988  // Notes : Returns various Touch Screen parameters to caller
001785  001989  //       :
001786  001990  //       : mode = TOUCH_STATUS  (mode 0)
001787  001991  //       : var := touch_Get(TOUCH_STATUS);
001788  001992  //       : Returns the various states of the touch screen
001789  001993  //       : 0 = NOTOUCH
001790  001994  //       : 1 = TOUCH_PRESSED
001791  001995  //       : 2 = TOUCH_RELEASED
001792  001996  //       : 3 = TOUCH_MOVING
001793  001997  //       :
001794  001998  //       : mode = TOUCH_GETX   (mode 1)
001795  001999  //       : var := touch_Get(TOUCH_GETX);
001796  002000  //       : Returns the X coordinates of the touch
001797  002001  //       :
001798  002002  //       : mode = TOUCH_GETY   (mode 2)
001799  002003  //       : var := touch_Get(TOUCH_GETY);
001800  002004  //       : Returns the Y coordinates of the touch
001801  002005        
001802  002006  //------------------------------------------------------------------//
001803  002007  //        CTYPE Function Prototypes
001804  002008  //------------------------------------------------------------------//
001805  002009        
001806  002010  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
001807  002011  // Syntax: isdigit("char");
001808  002012  // Usage : Var := isdigit(ch);
001809  002013  // Notes : char specifies the ascii character for the test
001810  002014  //     : 0 : char is not an ascii digit.
001811  002015  //     : 1 : char is an ascii digit..
001812  002016  //     : Valid range is "0123456789"
001813  002017        
001814  002018  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
001815  002019  // Syntax: isxdigit("char");
001816  002020  // Usage : Var := isxdigit(ch);
001817  002021  // Notes : char specifies the ascii character for the test
001818  002022  //     : 0 : char is not an ascii hexadecimal digit.
001819  002023  //     : 1 : char is an ascii hexadecimal digit..
001820  002024  //     : Valid range is "0123456789ABCDEF"
001821  002025        
001822  002026  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
001823  002027  // Syntax: isupper("char");
001824  002028  // Usage : Var := isupper(ch);
001825  002029  // Notes : char specifies the ascii character for the test
001826  002030  //     : 0 : char is not an ascii upper-case letter.
001827  002031  //     : 1 : char is an ascii upper-case letter.
001828  002032  //     : Valid range is "ABCD....WXYZ"
001829  002033        
001830  002034  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
001831  002035  // Syntax: islower("char");
001832  002036  // Usage : Var := islower(ch);
001833  002037  // Notes : char specifies the ascii character for the test
001834  002038  //     : 0 : char is not an ascii lower-case letter.
001835  002039  //     : 1 : char is an ascii lower-case letter.
001836  002040  //     : Valid range is "abcd....wxyz"
001837  002041        
001838  002042  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
001839  002043  // Syntax: isalpha("char");
001840  002044  // Usage : Var := isalpha(ch);
001841  002045  // Notes : char specifies the ascii character for the test
001842  002046  //     : 0 : char is not an ascii lower or upper case letter.
001843  002047  //     : 1 : char is an ascii lower or upper case letter.
001844  002048  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
001845  002049        
001846  002050  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
001847  002051  // Syntax: isalnum("char");
001848  002052  // Usage : Var := isalnum(ch);
001849  002053  // Notes : char specifies the ascii character for the test
001850  002054  //     : 0 : char is not an ascii alphanumeric character.
001851  002055  //     : 1 : char is an ascii alphanumeric character.
001852  002056  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
001853  002057        
001854  002058  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
001855  002059  // Syntax: isprint("char");
001856  002060  // Usage : Var := isprint(ch);
001857  002061  // Notes : char specifies the ascii character for the test
001858  002062  //     : 0 : char is not a printable ascii character.
001859  002063  //     : 1 : char is a printable ascii character.
001860  002064  //     : Valid range is "0x20...0x7F"
001861  002065        
001862  002066  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
001863  002067  // Syntax: isspace("char");
001864  002068  // Usage : Var := isspace(ch);
001865  002069  // Notes : char specifies the ascii character for the test
001866  002070  //     : 0 : char is not a space type character.
001867  002071  //     : 1 : char is a space type character.
001868  002072  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
001869  002073        
001870  002074  //unformatted
001871  002075  func iswhite("char"), 1;    //
001872  002076  // Syntax: iswhite("char");
001873  002077  // Usage : Var := iswhite(ch);
001874  002078  // Notes : char specifies the ascii character for the test
001875  002079  //     : 0 : char is not a space or tab character.
001876  002080  //     : 1 : char is not a space or tab character.
001877  002081  //     : Valid range is space or tab
001878  002082        
001879  002083  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
001880  002084  // Syntax: toupper("char");
001881  002085  // Usage : Var := toupper(ch);
001882  002086  // Notes : char specifies the ascii character for the test
001883  002087  //     : "ABCD....XYZ" : if character is a lower case letter.
001884  002088  //     : char : if character is not a lower case letter.
001885  002089  //     : Valid range is "abcd....wxyz"
001886  002090        
001887  002091  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
001888  002092  // Syntax: tolower("char");
001889  002093  // Usage : Var := tolower(ch);
001890  002094  // Notes : char specifies the ascii character for the test
001891  002095  //     : "abcd....xyz" : if character is an upper case letter.
001892  002096  //     : char : if character is not an upper case letter.
001893  002097  //     : Valid range is "ABCD....WXYZ"
001894  002098        
001895  002099  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
001896  002100  // Syntax: LObyte(var);
001897  002101  // Usage : myVar := LObyte(myvar2);
001898  002102  // Notes : var specifies the user variable
001899  002103  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
001900  002104        
001901  002105  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
001902  002106  // Syntax: HIbyte(var);
001903  002107  // Usage : myVar := HIbyte(myvar2);
001904  002108  // Notes : var specifies the user variable
001905  002109  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
001906  002110        
001907  002111        
001908  002112  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
001909  002113  // Syntax: ByteSwap(var);
001910  002114  // Usage : myVar := ByteSwap(myvar2);
001911  002115  // Notes : var specifies the user variable
001912  002116  //     : Returns the endian swapped value of a 16 bit variable
001913  002117        
001914  002118        
001915  002119  //------------------------------------------------------------------//
001916  002120  //        Memory Allocation Function Prototypes
001917  002121  //------------------------------------------------------------------//
001918  002122        
001919  002123  func mem_Alloc("size"), 1;
001920  002124  // Syntax: mem_Alloc(bytesize);
001921  002125  // Usage : myvar := mem_Alloc(100);
001922  002126  // Notes : Allocate a block of memory to pointer myvar
001923  002127  //       : The allocated memory contains garbage but is a fast allocation.
001924  002128  //       : The block must later be released with mem_Free();
001925  002129  //       : returns 0 if function fails
001926  002130        
001927  002131  func mem_AllocV("size"), 1;
001928  002132  // Syntax: mem_AllocV(bytesize);
001929  002133  // Usage : myvar := mem_AllocV(100);
001930  002134  // Notes : Allocate a block of memory to pointer myvar
001931  002135  //       : The block of memory is filled with signature values
001932  002136  //       : the block starts with A5,5A then fills with incrementing
001933  002137  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
001934  002138  //       : This can be helpful when debugging
001935  002139  //       : The block must later be released with mem_Free();
001936  002140  //       : returns 0 if function fails
001937  002141        
001938  002142  func mem_AllocZ("size"), 1;
001939  002143  // Syntax: mem_AllocZ(bytesize);
001940  002144  // Usage : myvar := mem_AllocC(100);
001941  002145  // Notes : Allocate a zeroed block of memory to pointer myvar
001942  002146  //       : The block of memory is filled with zeroes
001943  002147  //       : The block must later be released with mem_Free();
001944  002148  //       : returns 0 if function fails
001945  002149        
001946  002150  func mem_Realloc("ptr", "size"), 1;
001947  002151  // Syntax: myvar := mem_Realloc("ptr", "size");
001948  002152  // Usage : myvar := mem_Realloc(ptr, size);
001949  002153  // Notes : The function may move the memory block to a new location,
001950  002154  //       : in which case the new location is returned.
001951  002155  //       : The content of the memory block is preserved up to the lesser
001952  002156  //       : of the new and old sizes, even if the block is moved.
001953  002157  //       : If the new size is larger, the value of the newly allocated
001954  002158  //       : portion is indeterminate. In case that ptr is NULL,
001955  002159  //       : the function behaves exactly as mem_Alloc, assigning a new block
001956  002160  //       : of size bytes and returning a pointer to the beginning of it.
001957  002161  //       : In case that the size is 0, the memory previously allocated in
001958  002162  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
001959  002163  //       : pointer is returned.
001960  002164        
001961  002165  func mem_Free("allocation"), 1;
001962  002166  // Syntax: myvar := mem_Free(allocation);
001963  002167  // Usage : myvar := mem_Free(myvar);
001964  002168  // Notes : De-allocate a block of memory previously created with
001965  002169  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
001966  002170  //       : returns 0 if function fails
001967  002171        
001968  002172  func mem_Heap(), 1;
001969  002173  // Syntax: myvar := mem_Heap();
001970  002174  // Usage : myvar := mem_Heap();
001971  002175  // Notes : returns bytecount available in heap
001972  002176  //       :
001973  002177        
001974  002178  func mem_Set("ptr","char","size"), 1;
001975  002179  // Syntax: mem_Set(ptr,char,bytesize);
001976  002180  // Usage : mem_Set(p, 'A', 100);
001977  002181  // Notes : fill a block of memory with a byte value
001978  002182  //       : returns ptr
001979  002183        
001980  002184  func mem_Copy("src", "dest", "bytecount"), 1;
001981  002185  // Syntax: myvar := mem_Copy(src, dest, bytesize);
001982  002186  // Usage : myvar := mem_Copy(p1, p2, 100);
001983  002187  // Notes : copy a word aligned block of memory from src to dest
001984  002188  //       : Note that count is a byte count, this facilitates
001985  002189  //       : copying word aligned byte arrays when using word
001986  002190  //       : aliggned packed strings.
001987  002191  //       : returns src
001988  002192        
001989  002193  func mem_Compare("ptr1","ptr2","count"), 1;
001990  002194  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
001991  002195  // Usage : myvar := mem_Compare(p1, p2, 100);
001992  002196  // Notes : compare blocks of memory at src, dest
001993  002197  //       : returns 0 if we have a match
001994  002198        
001995  002199  //------------------------------------------------------------------//
001996  002200  //        FAT16 Function Prototypes
001997  002201  //------------------------------------------------------------------//
001998  002202        
001999  002203  func file_Error(), 1;
002000  002204  // Syntax: myvar := file_Error();
002001  002205  // Usage : e := file_Error();
002002  002206  // Notes : return the most recent file error.
002003  002207  //       :
002004  002208        
002005  002209  func file_Count("filename"), 1;
002006  002210  // Syntax: count := file_Count("filename");
002007  002211  // Usage : count := file_Count("*.4dg");
002008  002212  // Notes : returns number of files found that match the criteria
002009  002213        
002010  002214  func file_Dir("filename"), 1;
002011  002215  // Syntax: count := file_Dir("filename");
002012  002216  // Usage : count := file_Dir("*.4dg");
002013  002217  // Notes : streams a string of filenames that agree with the search key
002014  002218  //       : returns number of files found that match the criteria
002015  002219        
002016  002220  func file_FindFirst("fname"), 1;
002017  002221  // Syntax: res := file_FindFirst("fname");
002018  002222  // Usage : if (file_FindFirst("*.4xe") ....
002019  002223  // Notes : returns true if at least 1 file exists
002020  002224  //       : that satisfies the file argument.
002021  002225  //       : Wildcards are usually used so if
002022  002226  //       : file_FindFirst returns true, further
002023  002227  //       : tests can be made using file_FindNext();
002024  002228  //       : to find all the files that match the
002025  002229  //       : wildcard class. Note that the stream behaviour
002026  002230  //       : is the same as file_Dir.
002027  002231  //       :
002028  002232        
002029  002233  func file_FindNext(), 1;
002030  002234  // Syntax: res := file_FindNext();
002031  002235  // Usage : while ((file_FindNext()) ....
002032  002236  // Notes : returns true if more file exists
002033  002237  //       : that satisfies the file argument
002034  002238  //       : that was given for  file_FindFirst.
002035  002239  //       : Wildcards must be used for
002036  002240  //       : file_FindFirst, else this function will
002037  002241  //       : always return zero as the only occurence
002038  002242  //       : will have already been found.
002039  002243  //       : Note that the stream behaviour
002040  002244  //       : is the same as file_Dir.
002041  002245  //       :
002042  002246        
002043  002247  func file_Exists("fname"), 1;
002044  002248  // Syntax: res := file_Exists("fname"),
002045  002249  // Usage : if(file_Exists("myfile") ....
002046  002250  // Notes : returns true if file exists
002047  002251  //       :
002048  002252        
002049  002253  func file_Open("fname", "mode"), 1;
002050  002254  // Syntax: handle := file_Open("fname","mode"),
002051  002255  // Usage : handle := file_Open("myfile.txt", 'r');
002052  002256  // Notes : returns handle if file exists
002053  002257  //       :
002054  002258        
002055  002259  func file_Close("handle"), 1;
002056  002260  // Syntax: res := file_Close("handle");
002057  002261  // Usage : res := file_Close(hnd1);
002058  002262  // Notes : returns true if file closed ok
002059  002263  //       :
002060  002264        
002061  002265  func file_Read("*dest", "size", "handle"), 1;
002062  002266  // Syntax: res := file_Read("*dest", "size", "handle"),
002063  002267  // Usage : res := file_Read(memblock,20,hnd1);
002064  002268  // Notes : returns number of characters read
002065  002269  //       : if "dest" is zero, data is read direct to GRAM window
002066  002270  //       :
002067  002271        
002068  002272        
002069  002273  func file_Seek("handle", "HiWord", "LoWord"), 1;
002070  002274  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
002071  002275  // Usage : res := file_Seek(hSource, 0, 0x1234);
002072  002276  // Notes : set file position to 0x00001234 (byte position 4660)
002073  002277  //       : for the file handle so subsequent data may be read
002074  002278  //       : from that position onwards with file_GetC(...),
002075  002279  //       : file_GetW(...) or file_GetS(...), or an image
002076  002280  //       : can be displayed with file_Image(...)
002077  002281  // Notes : returns true if ok, usually ignored
002078  002282        
002079  002283  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002080  002284  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002081  002285  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
002082  002286  // Notes : set file seek position to 123000
002083  002287  //       : for the file handle so subsequent data may be read
002084  002288  //       : from that record position onwards with file_GetC(...),
002085  002289  //       : file_GetW(...) or file_GetS(...), or an image
002086  002290  //       : can be displayed with file_Image(...)
002087  002291  // Notes : returns true if ok, usually ignored
002088  002292        
002089  002293  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
002090  002294  // Syntax: file_Tell("handle", &HiWord, &LoWord);
002091  002295  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
002092  002296  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
002093  002297  //       : returns true if function succeeded
002094  002298        
002095  002299  func file_Write("*source", "size", "handle"), 1;
002096  002300  // Syntax: res := fwrite("*source", "size", "handle"),
002097  002301  // Usage : res := fwrite(memblock, 20, hnd1);
002098  002302  // Notes : returns number of bytes written
002099  002303  //       :
002100  002304        
002101  002305  func file_Size("handle", "&HiWord", "&LoWord"), 1;
002102  002306  // Syntax: file_Size("handle", &HiWord, &LoWord);
002103  002307  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
002104  002308  // Notes : Reads the 32 bit file size and stores it into 2 variables.
002105  002309  //       : returns true if function succeeded
002106  002310        
002107  002311  func file_Image("x", "y", "handle"), 1;
002108  002312  // Syntax: file_Image(x, y, handle);
002109  002313  // Usage : file_Image(10, 10, hnd1);
002110  002314  // Notes : Display an image from a file at the current file position.
002111  002315  //       : The image is displayed at x,y (with respect to top left corner).
002112  002316  //       : If there is more than 1 image in the file, it can be
002113  002317  //       : accessed with file_Seek(...)
002114  002318        
002115  002319  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
002116  002320  // Syntax: file_ScreenCapture(x, y, w, h, handle);
002117  002321  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
002118  002322  // Notes : Save a image from screen to file at the current file position.
002119  002323  //       : The image can later be displayed with file_Image(...);
002120  002324  //       : The file may be opened in append mode to accumulate multiple
002121  002325  //       : images. Later, the images can be accessed with file_Seek(...);
002122  002326  //       : Note that the image will be sector aligned.
002123  002327  //       : All image headers must start on a sector boundary.
002124  002328  //       : The image is saved from x, y (with respect to top left corner)
002125  002329  //       : and the capture area is determined by "width" and "height".
002126  002330  //       : returns 0 if function succeeded
002127  002331        
002128  002332  func file_PutC("char","handle"), 1;
002129  002333  // Syntax: file_PutC("char", "handle");
002130  002334  // Usage : file_PutC('x', hndl);
002131  002335  // Notes : returns true if function succeeded
002132  002336        
002133  002337  func file_GetC("handle"), 1;
002134  002338  // Syntax: file_GetC("handle");
002135  002339  // Usage : mychar := fgetC("handle");
002136  002340  // Notes : returns next char from file
002137  002341        
002138  002342  func file_PutW("word","handle"), 1;
002139  002343  // Syntax: file_PutW("word","handle");
002140  002344  // Usage : file_PutW(0x1234, hndl);
002141  002345  // Notes : returns true if function succeeded
002142  002346        
002143  002347  func file_GetW("handle"), 1;
002144  002348  // Syntax: file_GetW("handle");
002145  002349  // Usage : myword := fgetW("handle");
002146  002350  // Notes : returns next word in file
002147  002351        
002148  002352  func file_PutS("*source", "handle"), 1;
002149  002353  // Syntax: res := file_Puts("*source", "handle"),
002150  002354  // Usage : res := file_Puts(mystring, hnd1);
002151  002355  // Notes : returns number of characters written
002152  002356  //       :
002153  002357        
002154  002358  func file_GetS("*string", "size", "handle"), 1;
002155  002359  // Syntax: res := file_Gets("*string", "size", "handle");
002156  002360  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
002157  002361  // Notes : get a string from a file
002158  002362  //       : returns pointer to string or null if failed.
002159  002363  //       : file_GetS(...) automatically appends a null-terminator to the data read.
002160  002364  //       : NB:- only reads up to "size-1" characters into "string"
002161  002365  //       : file_GetS(...) will stop reading when any of the following conditions are true:
002162  002366  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
002163  002367  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
002164  002368  //       : C] It reaches the end of file
002165  002369  //       : D] A read error occurs.
002166  002370        
002167  002371        
002168  002372  func file_Erase("fname"), 1;
002169  002373  // Syntax: res := file_Erase("fname");
002170  002374  // Usage : res := file_Erase("myfile.txt");
002171  002375  // Notes : returns true if successful
002172  002376  //       :
002173  002377        
002174  002378  func file_Rewind("handle"), 1;
002175  002379  // Syntax: res := file_Rewind("handle");
002176  002380  // Usage : res := file_Rewind(hnd1);
002177  002381  // Notes : returns true if file rewound ok (usually ignored)
002178  002382  //       : resets the file pointer the the beginning of the open file.
002179  002383        
002180  002384  func file_LoadFunction("fname.4xe"), 1;
002181  002385  // Syntax: res := file_LoadFunction("fname.4fn");
002182  002386  // Usage : myfunc := file_LoadFunction(myfuncname);
002183  002387  // Notes : Load a function or program from disk and
002184  002388  //       : return a function pointer to the allocation.
002185  002389  //       : The function can then be invoked just like any other
002186  002390  //       : function would be called via a function pointer.
002187  002391  //       : Parameters may be passed to it in a conventional way.
002188  002392  //       : The function may be discarded at any time when no
002189  002393  //       : longer required, thus freeing its memory resources.
002190  002394  //       : The loaded function can be discarded with mem_Free(..)
002191  002395  //       : eg:
002192  002396  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
002193  002397  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
002194  002398  //       : then elsewhere in your program:-
002195  002399  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
002196  002400  //       : if(res == QUIT_APPLICATION) goto exitApp;
002197  002401  //       : Later in your program, when popupWindow is no longer
002198  002402  //       : required for the application:-
002199  002403  //       : res := mem_Free(popupWindow);
002200  002404  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
002201  002405  //       : The callers stack is shared by the loaded function,
002202  002406  //       : however any global variables in the loaded function
002203  002407  //       : are private to that function.
002204  002408  //
002205  002409        
002206  002410  func file_Run("fname.4xe", "arglistptr"), 1;
002207  002411  // Syntax: res := file_Run("fname.4xe","arglistptr");
002208  002412  // Usage : res := file_Run(fname, argptr);
002209  002413  // Notes : current program releases any allocated memory but
002210  002414  //       : retains the stack and global memory.
002211  002415  //       : If arglistptr is 0, no arguments are passed, else
002212  002416  //       : arglist points to an array, the first element being
002213  002417  //       : the number of elements in the array.
002214  002418  //       : func 'main' in the called program accepts
002215  002419  //       : the arguments, if any. THe arguments can only
002216  002420  //       : be passed by value, no pointers or references can be
002217  002421  //       : used as all memory is cleared before the file
002218  002422  //       : is loaded. Refer to file_Exec and file_LoadFunction
002219  002423  //       : for functions that can pass by reference.
002220  002424        
002221  002425  func file_Exec("fname.4xe", "arglistptr"), 1;
002222  002426  // Syntax: res := file_Exec("fname.4xe","arglistptr");
002223  002427  // Usage : res := file_Exec("fname.4xe","arglistptr");
002224  002428  // Notes : returns like a function, current program
002225  002429  //       : calling program is kept active and control returns to it.
002226  002430  //       : If arglistptr is 0, no arguments are passed, else
002227  002431  //       : arglist points to an array, the first element being
002228  002432  //       : the number of elements in the array.
002229  002433  //       : func 'main' in the called program accepts the arguments.
002230  002434  //       : This function is similar to file_LoadFunction(...), however,
002231  002435  //       : the function argument list is passed by pointer, and
002232  002436  //       : the memory consumed by the function is released as
002233  002437  //       : soon as the function completes.
002234  002438        
002235  002439  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
002236  002440  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
002237  002441  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
002238  002442  // Notes : Reads a control file to create an image list.
002239  002443  //       : Returns NULL if function fails.
002240  002444  //       : Returns a handle (pointer to the memory allocation) to the
002241  002445  //       : image control list that has been created.
002242  002446  //       : "fname1" is the control list filename "*.dat"
002243  002447  //       : "fname2" is the image filename "*.gci"
002244  002448        
002245  002449  // Notes : This function Calculates the size of a chunk of memory required for
002246  002450  //       : a image list and populates it from the image control file ("*.dat")
002247  002451  //       : therefore, when imagelist is no longer required, you must de-allocate
002248  002452  //       : the image list memory by using eg:- mem_Free(hImagelist);
002249  002453  //       : to restore the heap.
002250  002454  //       :
002251  002455  //       : mode 0:- it is assumed that there is a graphics file with the
002252  002456  //       : file extension "fname2.gci". In this case, the images have been stored
002253  002457  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
002254  002458  //       : "fname1.dat" file are saved in the image control so that the image control
002255  002459  //       : can open the file (*.gci) and us file_Seek to get to the position of the
002256  002460  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
002257  002461  //       : mode 0 builds the image control quickly as it only scans the *.dat file
002258  002462  //       : for the file offsets and save them in the relevant entries in the image control.
002259  002463  //       : The penalty is that images take longer to find when displayed due to file_Seek
002260  002464  //       : overheads.
002261  002465  //
002262  002466  //       : mode 1:- it is assumed that there is a graphics file with the
002263  002467  //       : file extension "fname2.gci". In this case, the images have been stored
002264  002468  //       : in a FAT16 file concurrently, and the offset of the images are saved
002265  002469  //       : in the image control so that image file (*.gci) can be mapped to directly.
002266  002470  //       : The absolute cluster/sector is mapped so file seek does not need to be called
002267  002471  //       : internally. This means that there is no seek time penalty, however, the
002268  002472  //       : image list takes a lot longer to build, as all the seeking is done at control
002269  002473  //       : build time.
002270  002474        
002271  002475  //       : mode 2:- the graphics file with the is placed in a partitioned area
002272  002476  //       : In this case, the images have been stored in a in a known raw area of the FAT16
002273  002477  //       : disk, and the absolute address of the images are saved in the DAT file
002274  002478  //       : This is the fastest operation of the image control as there is no seeking
002275  002479  //       : or other disk activity taking place.
002276  002480        
002277  002481  func file_Mount(), 1;
002278  002482  // Syntax: r := file_Mount();
002279  002483  // Usage : r := file_Mount();
002280  002484  // Notes : Create a control block for FAT16 and mount the File System
002281  002485        
002282  002486  func file_Unmount(), 0;
002283  002487  // Syntax: file_Unmount();
002284  002488  // Usage : file_Unmount();
002285  002489  // Notes : release any control block and buffers for FAT16
002286  002490  //       : and unmount the File System
002287  002491        
002288  002492  func file_PlayWAV("fname1"), 1;
002289  002493  // Syntax: file_PlayWAV("fname1");
002290  002494  // Usage : file_PlayWAV("ding.wav");
002291  002495  // Notes : Play a wave file with filename "fname1"
002292  002496  //       : This function automatically grabs a chunk
002293  002497  //       : of memory for a file buffer, and a wave
002294  002498  //       : buffer. The minimum memory requirement is
002295  002499  //       : about 580 bytes for the disk io service and
002296  002500  //       : a minimum wave buffer size of 1024. The siz
002297  002501  //       : of the wave buffer allocation
002298  002502  //       : can be increased by the snd_BufSize function.
002299  002503  //       : The default size 1024 bytes.
002300  002504  //       : NB the memory is only required during the
002301  002505  //       : duration of play, and is automatically
002302  002506  //       : released while not in use.
002303  002507  //       : See the Sound Class services for other associated controls.
002304  002508  //       : If there are no errors, returns number of blocks to play (1 to 32767)
002305  002509  //       : If errors occured, the folling is returned
002306  002510  //       : -7  : Insufficient memory available for WAV buffer and file
002307  002511  //       : -6  : cant play this rate
002308  002512  //       : -5  : no data chunk found in first rsector
002309  002513  //       : -4  : no format data
002310  002514  //       : -3  : no wave chunk signature
002311  002515  //       : -2  : bad wave file format
002312  002516  //       : -1  : file not found
002313  002517        
002314  002518        
002315  002519        
002316  002520  //------------------------------------------------------------------//
002317  002521  //        Sound Class Services
002318  002522  //------------------------------------------------------------------//
002319  002523        
002320  002524  func snd_Volume("var"), 0;
002321  002525  // Syntax: snd_Volume("var");
002322  002526  // Usage : snd_Volume(30);
002323  002527  // Notes : set sound playback volume.  Var must
002324  002528  //       : be in the range from 8 (min volume)
002325  002529  //       : to 127 (max volume). If var is less
002326  002530  //       : than 8 volume is set to 8, and if
002327  002531  //       : var > 127 it is set to 127.
002328  002532        
002329  002533  func snd_Pitch("pitch"), 1;
002330  002534  // func snd_Pitch("freq"), 1;
002331  002535  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
002332  002536  // Notes : sets the samples playback rate to a different frequency
002333  002537  //       : The minimum value is 4khz
002334  002538  //       : Setting the pitch to zero restores the original sample rate
002335  002539  //       : Return value is the samples original sample rate.
002336  002540        
002337  002541  func snd_BufSize("var"), 0;
002338  002542  // Syntax: snd_BufSize("var");
002339  002543  // Usage : snd_BufSize(2);
002340  002544  // Notes : specify the a memory chunk size for the wavefile buffer.
002341  002545  //       : default size 1024 bytes.
002342  002546  //       : 0 = 1024 bytes (default)
002343  002547  //       : 1 = 2048 bytes
002344  002548  //       : 2 = 4096 bytes
002345  002549  //       : 3 = 8192 bytes
002346  002550        
002347  002551  func snd_Stop(), 0;
002348  002552  // Syntax: snd_Stop();
002349  002553  // Usage : snd_Stop();
002350  002554  // Notes : stop any sound that is playing, releasing
002351  002555  //       : buffers and closes any open wav file.
002352  002556        
002353  002557  func snd_Pause(), 0;
002354  002558  // Syntax: snd_Pause();
002355  002559  // Usage : snd_Pause();
002356  002560  // Notes : pauses any sound that is playing, does nothing
002357  002561  //       : until sound is resumed with snd_Continue().
002358  002562  //       : The sample cam be terminated with snd_Stop.
002359  002563  //       : buffers and closes any open wav file.
002360  002564        
002361  002565  func snd_Continue(), 0;
002362  002566  // Syntax: snd_Continue();
002363  002567  // Usage : snd_Continue();
002364  002568  // Notes : resume any sound that is paused by snd_Pause.
002365  002569        
002366  002570  func snd_Playing(), 1;
002367  002571  // Syntax: snd_Playing();
002368  002572  // Usage : r := snd_Playing();
002369  002573  // Notes : returns 0 if sound has finished playing,
002370  002574  //       : else return number of 512 byte blocks to go.
002371  002575        
002372  002576        
002373  002577        
002374  002578  //------------------------------------------------------------------//
002375  002579  //        String Class Services
002376  002580  //------------------------------------------------------------------//
002377  002581        
002378  002582  func str_Ptr("&var"), 1;
002379  002583  // Syntax: str_Ptr(&var);
002380  002584  // Usage : p := str_Ptr(&var);
002381  002585  // Notes : return a byte pointer to a word region
002382  002586        
002383  002587  func str_GetD("&ptr", "&var"), 1;
002384  002588  // Syntax: str_GetD(&ptr, &var);
002385  002589  // Usage : ok := str_GetD(&ptr, &var);
002386  002590  // Notes : convert number in a string to DWORD ( myvar[2] )
002387  002591  //       : returns true if function succeeds, advancing ptr
002388  002592        
002389  002593  func str_GetW("&ptr", "&var"), 1;
002390  002594  // Syntax: str_GetW(&ptr, &var);
002391  002595  // Usage : ok := str_GetW(&ptr, &var);
002392  002596  // Notes : convert number in a string to WORD ( myvar )
002393  002597  //       : returns true if function succeeds, advancing ptr
002394  002598        
002395  002599  func str_GetHexW("&ptr", "&var"), 1;
002396  002600  // Syntax: str_GetHexW(&ptr, &var);
002397  002601  // Usage : ok := str_GetHexW(&ptr, &var);
002398  002602  // Notes : convert HEX number in a string to WORD ( myvar )
002399  002603  //       : returns true if function succeeds, advancing ptr
002400  002604        
002401  002605  func str_GetC("&ptr", "&var"), 1;
002402  002606  // Syntax: str_GetC(&ptr, &var);
002403  002607  // Usage : ok := str_GetC(&ptr, &var);
002404  002608  // Notes : get a valid ascii char in a string to WORD ( myvar )
002405  002609  //       : returns true if function succeeds, advancing ptr
002406  002610        
002407  002611  func str_GetByte("ptr"), 1;
002408  002612  // Syntax: str_GetByte(ptr);
002409  002613  // Usage : myvar := str_GetByte(ptr);
002410  002614  // Notes : get a byte to myvar
002411  002615  //       : returns value
002412  002616        
002413  002617  func str_GetWord("ptr"), 1;
002414  002618  // Syntax: GetWord(ptr);
002415  002619  // Usage : GetWord(ptr);
002416  002620  // Notes : get a word to myvar
002417  002621  //       : returns value
002418  002622        
002419  002623  func str_PutByte("ptr","val"), 0;
002420  002624  // Syntax: str_PutByte(ptr);
002421  002625  // Usage : myvar := str_PutByte(ptr);
002422  002626  // Notes : put a byte at ptr
002423  002627  //       : returns value
002424  002628        
002425  002629  func str_PutWord("ptr","val"), 0;
002426  002630  // Syntax: str_PutWord("ptr","val");
002427  002631  // Usage : str_PutWord(p,100);
002428  002632  // Notes : put word 100 at current pointer location
002429  002633  //       : returns value
002430  002634        
002431  002635  func str_Match("&ptr", "*str"), 1;
002432  002636  // Syntax: str_Match(&ptr, *str);
002433  002637  // Usage : r := str_Match(&p, "hello");
002434  002638  // Notes : Case sensitive match
002435  002639  //       : returns true if function succeded, andvancing pointer to position past
002436  002640  //       : the matched item. Note that any whitespace characters are skipped
002437  002641  //       : in the source string prior to the test.
002438  002642        
002439  002643  func str_MatchI("&ptr", "*str"), 1;
002440  002644  // Syntax: str_MatchI(&ptr, *str);
002441  002645  // Usage : r := str_MatchI(&p, "hello");
002442  002646  // Notes : Case insensitive match
002443  002647  //       : returns true if function succeded, andvancing pointer to position past
002444  002648  //       : the matched item. Note that any whitespace characters are skipped
002445  002649  //       : in the source string prior to the test.
002446  002650        
002447  002651  func str_Find("&ptr", "*str"), 1;
002448  002652  // Syntax: str_Find(&ptr, *str);
002449  002653  // Usage : n := str_Find(&p, "hello");
002450  002654  // Notes : given the address of a pointer to a source string as the
002451  002655  //       : first argument, and a pointer to a test string as the second
002452  002656  //       : argument, attempt to find the position of the matching string
002453  002657  //       : in the source string. The test is performed with case sensitivity.
002454  002658  //       : return 0 if not found, else returns the address of the first
002455  002659  //       : character of the match. NB:- The source pointer is not altered.
002456  002660        
002457  002661  func str_FindI("&ptr", "*str"), 1;
002458  002662  // Syntax: str_Find(&ptr, *str);
002459  002663  // Usage : n := str_Find(&p, "hello");
002460  002664  // Notes : given the address of a pointer to a source string as the
002461  002665  //       : first argument, and a pointer to a test string as the second
002462  002666  //       : argument, attempt to find the position of the matching string
002463  002667  //       : in the source string. The test is performed with no case
002464  002668  //       : sensitivity, eg upper and lower case chars are accepted.
002465  002669  //       : return 0 if not found, else returns the address of the first
002466  002670  //       : character of the match. NB:- The source pointer is not altered.
002467  002671        
002468  002672  func str_Length("ptr"), 1;
002469  002673  // Syntax: str_Length(ptr);
002470  002674  // Usage : len := str_Ptr(mystring);
002471  002675  // Notes : return the length of a byte aligned string excluding terminator
002472  002676        
002473  002677  func str_Printf("&ptr", "*format"), 1;
002474  002678  // Syntax: str_Printf("&ptr", "*format");
002475  002679  // Usage : r := str_Printf(&p, "hello");
002476  002680  // Notes : refer to documentation
002477  002681  //       :
002478  002682        
002479  002683  func str_Cat("dest","src"), 1;
002480  002684  // Syntax: str_Append("&dest","&src");
002481  002685  // Usage : str_Append(&buf,"Hello");
002482  002686  // Notes : Appends a copy of the source string to the destination string.
002483  002687  //       : The terminating null character in destination is overwritten by
002484  002688  //       : the first character of source, and a new null-character is appended
002485  002689  //       : at the end of the new string formed by the concatenation of both in destination.
002486  002690  //       : returns destination.
002487  002691        
002488  002692  func str_CatN("dest","src","count"), 1;
002489  002693  // Syntax: str_Append("&dest","&src","count");
002490  002694  // Usage : str_Append(&buf,"Monday",3);
002491  002695  // Notes : Appends a copy of the source string to the destination string.
002492  002696  //       : The number of characters copied is limited by "count".
002493  002697  //       : The terminating null character in destination is overwritten by
002494  002698  //       : the first character of source, and a new null-character is appended
002495  002699  //       : at the end of the new string formed by the concatenation of both in destination.
002496  002700  //       : returns destination.
002497  002701        
002498  002702        
002499  002703  func sys_StoreTouchCalibration(), 1;
002500  002704  // Syntax: sys_StoreTouchCalibration();
002501  002705  // Usage : r := sys_StoreTouchCalibration();
002502  002706  // Notes : Store the touch calibration values in non-volatile memory.
002503  002707  //       : Returns true if the values have been accepted and stored,
002504  002708  //       : else returns false if write could not be performed, or
002505  002709  //       : touch calibration values are improbable.
002506  002710  //       : The values that are stored are obtained from:-
002507  002711  //     : TOUCH_XMINCAL             78  // touch calibration value
002508  002712  //     : TOUCH_YMINCAL             79  // touch calibration value
002509  002713  //       : TOUCH_XMAXCAL             80  // touch calibration value
002510  002714  //       : TOUCH_YMAXCAL             81  // touch calibration value
002511  002715  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
002512  002716  //       : This function is not supported on uVGA, Capicitive touch
002513  002717  //       : and 4.3" resistive touch modules.
002514  002718        
002515  002719        
002516  002720  func unicode_page("charbeg","charend","charoffset"), 1;
002517  002721  // Syntax: unicode_page("charbeg","charend","charoffset");
002518  002722  // Usage : eg:  F_Traditional_0x20_0xFF
002519  002723  // Notes : After selecting a unicode image control with txt_FontID,
002520  002724  //       : this function is called to set the required font within the
002521  002725  //       : unicode set. The file "Unicode.inc" contains wrappers for
002522  002726  //       : this function, and it is not normally called directly.
002523  002727  //       : Returns count of characters in the set.
002524  002728  //       : Refer to "Unicode.inc" for further information.
002525  002729        
002526  002730        
002527  002731  func EVE_SP(), 1;
002528  002732  // Syntax: EVE_SP();
002529  002733  // Usage : eg:  print(EVE_SP());
002530  002734  // Notes : Used for debugging to assess the current stack level,
002531  002735  //       : mainly for checking stack leaks
002532  002736        
002533  002737  func EVE_SSIZE(), 1;
002534  002738  // Syntax: EVE_SSIZE();
002535  002739  // Usage : eg:  print(EVE_SSIZE());
002536  002740  // Notes : Used to get the stack size,
002537  002741  //       : mainly for debugging purposes
002538  002742        
002539  002743        
002540  002744  // uVGAII extended functions
002541  002745  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
002542  002746  // Syntax: disp_Sync(line);
002543  002747  // Usage : disp_Sync(480);
002544  002748  // Notes : Waits till the hardware gets to a certain line.
002545  002749  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
002546  002750  //       : Some experimentation may be needed to find an optimum line for disp_Sync
002547  002751  //       : depending on the graphics operation. The higher the value, the slower
002548  002752  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
002549  002753  //       : within the vertical retrace period) where it will just 'hang up' stopping the
002550  002754  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
002551  002755  //       : be slowest (as its actually right at the end of the blanking period) and 508
002552  002756  //       : will cause a hangup situation as it is above the highes scanline value.
002553  002757  //       : Currently, this function is only supported on displays with SSD1963 driver.
002554  002758        
002555  002759        
002556  002760  // New functions added to PmmC v2.8
002557  002761  //================================================================
002558  002762  func CY(), 1;
002559  002763  // Syntax: CY();
002560  002764  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
002561  002765  //       : print(myvar," "CY(),"\n");           // carry = 1
002562  002766  // Notes : This function returns the carry status of an
002563  002767  // unsigned overflow from any 16 or 32bit additions or sutractions.
002564  002768  //================================================================
002565  002769        
002566  002770        
002567  002771  //================================================================
002568  002772  func str_ByteMove("src", "dest", "count"), 1;
002569  002773  // func str_ByteMove("src", "dest", "count"), 1;
002570  002774  // Syntax   : str_ByteMove(src, dest, bytecount);
002571  002775  // Input    : STR *source points to byte aligned source.
002572  002776  //          : STR *dest   points to byte aligned destination.
002573  002777  //          : VAR count   number of bytes to transfer.
002574  002778  // Usage    : nextpos := str_ByteMove(s, d, 100);
002575  002779  // Notes    : copy bytes from "src" to "dest", stopping only
002576  002780  //          : when "count" is exhausted.
002577  002781  //          : No terminator is appended, it is purely a
002578  002782  //          : byte copy, and any zeroes encountered will
002579  002783  //          : also be copied.
002580  002784  // Returns  : returns a pointer to the end of the destination
002581  002785  //          : (which is "dest" + "count")
002582  002786  //================================================================
002583  002787        
002584  002788        
002585  002789  //================================================================
002586  002790  func str_Copy("dest", "src"), 1;
002587  002791  // Syntax   : str_Copy(dest, src);
002588  002792  // Input    : STR *dest   points to byte aligned destination.
002589  002793  //          : STR *source points to byte aligned source.
002590  002794  // Usage    : nextplace := str_Copy(d, s);
002591  002795  // Notes    : copy a string from "src" to "dest", stopping only
002592  002796  //          : when the end of source string "src" is encountered
002593  002797  //          : (0x00 terminator).
002594  002798  //          : The terminator is always appended, even if "src" is
002595  002799  //          : an empty string.
002596  002800  // Returns  : returns a pointer to the 0x00 string terminator at
002597  002801  //          : end of "dest" (which is "dest" + str_Length(src); )
002598  002802  //================================================================
002599  002803        
002600  002804  //================================================================
002601  002805  func str_CopyN("dest", "src", "count"), 1;
002602  002806  // Syntax   : str_CopyN(dest, src, bytecount);
002603  002807  // Input    : STR *dest   points to byte aligned destination.
002604  002808  //          : STR *source points to byte aligned source.
002605  002809  //          : VAR count   max number of chars to copy.
002606  002810  // Usage    : nextplace := str_CopyN(d, s, 100);
002607  002811  // Notes    : copy a string from "src" to "dest", stopping only
002608  002812  //          : when "count" is exhausted, or end of source
002609  002813  //          : string "str" is encountered (0x00 string terminator).
002610  002814  //          : The terminator is always appended, even if
002611  002815  //          : "count" is zero, or "src" is a null string.
002612  002816  // Returns  : returns a pointer to the 0x00 string terminator
002613  002817  //          : (which is "dest" + whatever was copied)
002614  002818  //================================================================
002615  002819        
002616  002820  //================================================================
002617  002821  func umul_1616("&res32", "val1", "val2"), 1;
002618  002822  // Syntax   : umul_1616(&res32, varA, varB);
002619  002823  // Input    : DWORD *result   points to 32bit result register.
002620  002824  //          : VAR   val1  16bit register or constant
002621  002825  //          : VAR   val2  16bit register or constant
002622  002826  // Usage    : var res32[2];
002623  002827  //          : umul_1616(&res32, myvar, 50000);
002624  002828  // Notes    : performs an unsigned multiply of 2 x 16bit values
002625  002829  //          : placing the 32bit result in a 2 word array.
002626  002830  // Returns  : the pointer to the 32bit result.
002627  002831  //          : carry and overflow are not affected.
002628  002832  //================================================================
002629  002833        
002630  002834  //================================================================
002631  002835  func uadd_3232("&res32", "&val1", "&val2"), 1;
002632  002836  // Syntax   : cmp_3232(&res32, &varA, &varB);
002633  002837  // Input    : DWORD *res32 points to optional result (or zero for compare)
002634  002838  //          : DWORD *val1 points to 32bit augend
002635  002839  //          : DWORD *val2 points to 32bit addend
002636  002840  // Usage    : var res32[2];
002637  002841  //          : res := cmp_3232(res32, val1, val2);
002638  002842  // Notes    : performs an unsigned addition of 2 x 32bit values
002639  002843  //          : placing the 32bit result in a 2 word array.
002640  002844  // Returns  : returns 1 on 32bit unsigned overflow (carry).
002641  002845  //          ; carry flag is also set on 32bit unsigned overflow
002642  002846  //          ; and can be read with the CY() function.
002643  002847  //================================================================
002644  002848        
002645  002849  //================================================================
002646  002850  func usub_3232("&res32", "&val1", "&val2"), 1;
002647  002851  // Syntax   : cmp_3232(&res32, &varA, &varB);
002648  002852  // Input    : DWORD *res32 points to optional result (or zero for compare)
002649  002853  //          : DWORD *val1 points to first 32bit minuend
002650  002854  //          : DWORD *val2 points to 32bit subtrahend
002651  002855  // Usage    : var res32[2];
002652  002856  //          : res := cmp_3232(res32, val1, val2);
002653  002857  // Notes    : performs an unsigned subtraction of 2 x 32bit values
002654  002858  //          : placing the 32bit result in a 2 word array.
002655  002859  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
002656  002860  //          ; carry flag is also set on 32bit unsigned underflow
002657  002861  //          ; and can be read with the CY() function.
002658  002862  //================================================================
002659  002863        
002660  002864  //================================================================
002661  002865  func ucmp_3232("&val1", "&val2"), 1;
002662  002866  // Syntax   : cmp_3232(&varA, &varB);
002663  002867  // Input    : DWORD *val1 points to 32bit minuend
002664  002868  //          : DWORD *val2 points to 32bit sutrahend
002665  002869  // Usage    : res := cmp_3232(val1, val2);
002666  002870  // Notes    : performs an unsigned comparison of 2 x 32bit values.
002667  002871  //          : The result of the subtraction is returned.
002668  002872  // Returns  : 0  if equal
002669  002873  //          : 1  if val1 > val2
002670  002874  //          : -1 if val1 < val2
002671  002875  //          : This function does not affect the carry flag.
002672  002876  //================================================================
002673  002877        
002674  002878  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v3.8
002675  002879  // Syntax: disp_Disconnect();                  New in v3.8
002676  002880  // Usage : disp_Disconnect();
002677  002881  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
002678  002882  //       : its lowest possible power consumption. Use after disabling peripheral power
002679  002883  //       : to ensure the minimal power usage by the display.
002680  002884  //       : disp_Init() should be used to reinitialise the display.
002681  002885        
002682  002886  func reserved(), 0;                            
002683  002887        
002684  002888  func sys_DeepSleep("units"), 1;
002685  002889  // Syntax: t := sys_DeepSleep("units");       New in v3.8
002686  002890  // Usage : t := sys_DeepSleep(10);
002687  002891  // Notes : sets the display and processor into lowest power mode for a period of time.
002688  002892  //       : When returning from DeepSleep the display should be reinitialised
002689  002893  //       : with disp_Init().
002690  002894  //       : Touching the touch screen will also wake from sleep.
002691  002895  //       : Returns remaining sleep units.
002692  002896        
002693  002897  //------------------------------------------------------------------//
002694  002898  // CONSTANTS
002695  002899  //------------------------------------------------------------------//
002696  002900        
002697  002901  // generic constants
002698  002902  #CONST
002699  002911  #END
002700  002912        
002701  002913  //------------------------------------------------------------------------------
002702  002914  // Pin related constants
002703  002915  //------------------------------------------------------------------------------
002704  002916  #CONST
002705  002934  #END
002706  002935        
002707  002936  //------------------------------------------------------------------------------
002708  002937  //gfx_Set() related constants
002709  002938  //------------------------------------------------------------------------------
002710  002939  #CONST
002711  002956  #END
002712  002957        
002713  002958        
002714  002959  //gfx_Get() related constants
002715  002960  #CONST
002716  002969  #END
002717  002970        
002718  002971        
002719  002972        
002720  002973        
002721  002974  #CONST
002722  002987  #END
002723  002988        
002724  002989        
002725  002990  #CONST
002726  003013  #END
002727  003014        
002728  003015  //------------------------------------------------------------------------------
002729  003016  //txt_Set() related constants
002730  003017  //------------------------------------------------------------------------------
002731  003018  #CONST
002732  003037  #END
002733  003038        
002734  003039        
002735  003040        
002736  003041  //------------------------------------------------------------------------------
002737  003042  //txt_Set() related arguments
002738  003043  // NB:- FONT4 must be inherited if required,
002739  003044  // eg #inherit "FONT4.fnt"
002740  003045  //------------------------------------------------------------------------------
002741  003046  #CONST
002742  003058  #END
002743  003059        
002744  003060        
002745  003061        
002746  003062  //touch_Set() related constants
002747  003063  #CONST
002748  003067  #END
002749  003068        
002750  003069  //touch_Get() related constants
002751  003070  #CONST
002752  003078  #END
002753  003079        
002754  003080  // image control offset related constants
002755  003081  #CONST
002756  003088  #END
002757  003089        
002758  003090  // image attribute flags
002759  003091  // for img_SetAttributes(...) and img_ClearAttributes(...)
002760  003092  #CONST
002761  003106  #END
002762  003107        
002763  003108        
002764  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002765  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002766  003110        
002767  003111  // image control entry offsets
002768  003112  #CONST
002769  003127  #END
002770  003128        
002771  003129  #CONST
002772  003147  #END
002773  003148        
002774  003149        
002775  003150        
002776  003151        
002777  003152  #CONST
002778  003172  #END
002779  003173        
002780  003174        
002781  003175        
002782  003176  // timer control  related constants
002783  003177  #CONST
002784  003186  #END
002785  003187        
002786  003188  // I2C timing related constants
002787  003189  #CONST
002788  003193  #END
002789  003194        
002790  003195        
002791  003196  // spi_Init(...)  mode arguments
002792  003197  #CONST
002793  003207  #END
002794  003208        
002795  003209  //------------------------------------------------------------------------------
002796  003210  // system WORD variables accesible with peekW and pokeW or pointer access
002797  003211  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
002798  003212  // can also be accessed with peekW and pokeW
002799  003213  //------------------------------------------------------------------------------
002800  003214        
002801  003215  #CONST
002802  003309  #END
002803  003310        
002804  003311  //------------------------------------------------------------------------------
002805  003312  // FILEIO Error Code Constants
002806  003313  //------------------------------------------------------------------------------
002807  003314  #CONST
002808  003340  #END
002809  003341        
002810  003342  //==================================================================================================
002811  003343        
002812  003344        
002813  003345        
002814  000013      #ENDIF
002815  000014        
002816  000015        
002817  000016      #CONST
002818  000072      #END
002819  000073        
002820  000074        
002821  000075  //===========================================================================================
002822  000076        
002823  000077        
002824  000002        
002825  000003  // generated 10/02/2015 12:25:08
002826  000004        
002827  000005  #MODE RUNFLASH
002828  000006        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

002829  000007  #inherit "4DGL_16bitColours.fnc"
002830  000007  #inherit "4DGL_16bitColours.fnc"
002831  000004  */
002832  000005        
002833  000006        
002834  000007        
002835  000008  #CONST
002836  000149  #END
002837  000150        
002838  000008        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

002839  000009  #inherit "VisualConst.inc"
002840  000009  #inherit "VisualConst.inc"
002841  000001  // Line Patterns
002842  000002  #constant  LPCOARSE    0xF0F0
002843  000002  #constant  LPCOARSE    0xF0F0
002844  000003  #constant  LPMEDIUM    0x3333
002845  000003  #constant  LPMEDIUM    0x3333
002846  000004  #constant  LPFINE      0xAAAA
002847  000004  #constant  LPFINE      0xAAAA
002848  000005  #constant  LPDASHDOT   0x03CF
002849  000005  #constant  LPDASHDOT   0x03CF
002850  000006  #constant  LPDASHDOTDOT 0x0333
002851  000006  #constant  LPDASHDOTDOT 0x0333
002852  000007  #constant  LPSOLID     0x0000
002853  000007  #constant  LPSOLID     0x0000
002854  000010        
002855  000011        
file F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

002856  000012  #inherit "RepRap_Touchv1Const.inc"
002857  000012  #inherit "RepRap_Touchv1Const.inc"
002858  000001  // File generated 10/02/2015 12:24:52
002859  000002  // Warning! This is a generated file, any manual changes will be
002860  000003  // lost during the next generation.
002861  000004        
002862  000005  #constant  Strings0Count    1
002863  000005  #constant  Strings0Count    1
002864  000006  #constant  Strings0Size     28
002865  000006  #constant  Strings0Size     28
002866  000007  #constant  Strings1Count    0
002867  000007  #constant  Strings1Count    0
002868  000008  #constant  Strings1Size     1
002869  000008  #constant  Strings1Size     1
002870  000009  #constant  Strings3Count    1
002871  000009  #constant  Strings3Count    1
002872  000010  #constant  Strings3Size     18
002873  000010  #constant  Strings3Size     18
002874  000011  #constant  Strings13Count    1
002875  000011  #constant  Strings13Count    1
002876  000012  #constant  Strings13Size     25
002877  000012  #constant  Strings13Size     25
002878  000013  #constant  Strings9Count    1
002879  000013  #constant  Strings9Count    1
002880  000014  #constant  Strings9Size     25
002881  000014  #constant  Strings9Size     25
002882  000015  #constant  Strings20Count    1
002883  000015  #constant  Strings20Count    1
002884  000016  #constant  Strings20Size     25
002885  000016  #constant  Strings20Size     25
002886  000017  #constant  Strings4Count    1
002887  000017  #constant  Strings4Count    1
002888  000018  #constant  Strings4Size     25
002889  000018  #constant  Strings4Size     25
002890  000019  #constant  Strings6Count    1
002891  000019  #constant  Strings6Count    1
002892  000020  #constant  Strings6Size     26
002893  000020  #constant  Strings6Size     26
002894  000021  #constant  Strings2Count    0
002895  000021  #constant  Strings2Count    0
002896  000022  #constant  Strings2Size     1
002897  000022  #constant  Strings2Size     1
002898  000023  #constant  Strings7Count    0
002899  000023  #constant  Strings7Count    0
002900  000024  #constant  Strings7Size     1
002901  000024  #constant  Strings7Size     1
002902  000025  #constant  Strings8Count    1
002903  000025  #constant  Strings8Count    1
002904  000026  #constant  Strings8Size     25
002905  000026  #constant  Strings8Size     25
002906  000027  #constant  Strings12Count    1
002907  000027  #constant  Strings12Count    1
002908  000028  #constant  Strings12Size     19
002909  000028  #constant  Strings12Size     19
002910  000029  #constant  Strings14Count    1
002911  000029  #constant  Strings14Count    1
002912  000030  #constant  Strings14Size     23
002913  000030  #constant  Strings14Size     23
002914  000031  #constant  Strings16Count    1
002915  000031  #constant  Strings16Count    1
002916  000032  #constant  Strings16Size     31
002917  000032  #constant  Strings16Size     31
002918  000033  #constant  Strings15Count    1
002919  000033  #constant  Strings15Count    1
002920  000034  #constant  Strings15Size     24
002921  000034  #constant  Strings15Size     24
002922  000035  #constant  Strings17Count    1
002923  000035  #constant  Strings17Count    1
002924  000036  #constant  Strings17Size     33
002925  000036  #constant  Strings17Size     33
002926  000037  #constant  Strings18Count    1
002927  000037  #constant  Strings18Count    1
002928  000038  #constant  Strings18Size     32
002929  000038  #constant  Strings18Size     32
002930  000039  #constant  Strings19Count    1
002931  000039  #constant  Strings19Count    1
002932  000040  #constant  Strings19Size     29
002933  000040  #constant  Strings19Size     29
002934  000041  #constant  Strings21Count    1
002935  000041  #constant  Strings21Count    1
002936  000042  #constant  Strings21Size     25
002937  000042  #constant  Strings21Size     25
002938  000043  #constant  Strings11Count    1
002939  000043  #constant  Strings11Count    1
002940  000044  #constant  Strings11Size     33
002941  000044  #constant  Strings11Size     33
002942  000045  #constant  Strings22Count    1
002943  000045  #constant  Strings22Count    1
002944  000046  #constant  Strings22Size     20
002945  000046  #constant  Strings22Size     20
002946  000047  #constant  Strings23Count    1
002947  000047  #constant  Strings23Count    1
002948  000048  #constant  Strings23Size     16
002949  000048  #constant  Strings23Size     16
002950  000049  #constant  Strings24Count    1
002951  000049  #constant  Strings24Count    1
002952  000050  #constant  Strings24Size     26
002953  000050  #constant  Strings24Size     26
002954  000051  #constant  Strings25Count    1
002955  000051  #constant  Strings25Count    1
002956  000052  #constant  Strings25Size     10
002957  000052  #constant  Strings25Size     10
002958  000053  #constant  Strings26Count    1
002959  000053  #constant  Strings26Count    1
002960  000054  #constant  Strings26Size     10
002961  000054  #constant  Strings26Size     10
002962  000055  #constant  Strings27Count    1
002963  000055  #constant  Strings27Count    1
002964  000056  #constant  Strings27Size     11
002965  000056  #constant  Strings27Size     11
002966  000057  #constant  Strings5Count    1
002967  000057  #constant  Strings5Count    1
002968  000058  #constant  Strings5Size     27
002969  000058  #constant  Strings5Size     27
002970  000059  #constant  Strings28Count    1
002971  000059  #constant  Strings28Count    1
002972  000060  #constant  Strings28Size     32
002973  000060  #constant  Strings28Size     32
002974  000061  #constant  Strings29Count    1
002975  000061  #constant  Strings29Count    1
002976  000062  #constant  Strings29Size     32
002977  000062  #constant  Strings29Size     32
002978  000063  #constant  Strings30Count    0
002979  000063  #constant  Strings30Count    0
002980  000064  #constant  Strings30Size     1
002981  000064  #constant  Strings30Size     1
002982  000065  #constant  Strings31Count    0
002983  000065  #constant  Strings31Count    0
002984  000066  #constant  Strings31Size     1
002985  000066  #constant  Strings31Size     1
002986  000067  #constant  Strings32Count    0
002987  000067  #constant  Strings32Count    0
002988  000068  #constant  Strings32Size     1
002989  000068  #constant  Strings32Size     1
002990  000069  #constant  Strings33Count    1
002991  000069  #constant  Strings33Count    1
002992  000070  #constant  Strings33Size     10
002993  000070  #constant  Strings33Size     10
002994  000071  #constant  Strings35Count    1
002995  000071  #constant  Strings35Count    1
002996  000072  #constant  Strings35Size     26
002997  000072  #constant  Strings35Size     26
002998  000073  #constant  Strings10Count    1
002999  000073  #constant  Strings10Count    1
003000  000074  #constant  Strings10Size     15
003001  000074  #constant  Strings10Size     15
003002  000075  // object indexes into ImageControl
003003  000076  #CONST
003004  000221  #END
003005  000222        
003006  000223  #constant  Strings34Size     0
003007  000223  #constant  Strings34Size     0
003008  000224  #constant  Strings34StartH   0
003009  000224  #constant  Strings34StartH   0
003010  000225  #constant  Strings34StartL   0
003011  000225  #constant  Strings34StartL   0
003012  000226  #constant  Strings0StartH   0x0
003013  000226  #constant  Strings0StartH   0x0
003014  000227  #constant  Strings0StartL   0x0
003015  000227  #constant  Strings0StartL   0x0
003016  000228  #constant  Strings1StartH   0x0
003017  000228  #constant  Strings1StartH   0x0
003018  000229  #constant  Strings1StartL   0x200
003019  000229  #constant  Strings1StartL   0x200
003020  000230  #constant  Strings3StartH   0x0
003021  000230  #constant  Strings3StartH   0x0
003022  000231  #constant  Strings3StartL   0x400
003023  000231  #constant  Strings3StartL   0x400
003024  000232  #constant  Strings13StartH   0x0
003025  000232  #constant  Strings13StartH   0x0
003026  000233  #constant  Strings13StartL   0x600
003027  000233  #constant  Strings13StartL   0x600
003028  000234  #constant  Strings9StartH   0x0
003029  000234  #constant  Strings9StartH   0x0
003030  000235  #constant  Strings9StartL   0x800
003031  000235  #constant  Strings9StartL   0x800
003032  000236  #constant  Strings20StartH   0x0
003033  000236  #constant  Strings20StartH   0x0
003034  000237  #constant  Strings20StartL   0xA00
003035  000237  #constant  Strings20StartL   0xA00
003036  000238  #constant  Strings4StartH   0x0
003037  000238  #constant  Strings4StartH   0x0
003038  000239  #constant  Strings4StartL   0xC00
003039  000239  #constant  Strings4StartL   0xC00
003040  000240  #constant  Strings6StartH   0x0
003041  000240  #constant  Strings6StartH   0x0
003042  000241  #constant  Strings6StartL   0xE00
003043  000241  #constant  Strings6StartL   0xE00
003044  000242  #constant  Strings2StartH   0x0
003045  000242  #constant  Strings2StartH   0x0
003046  000243  #constant  Strings2StartL   0x1000
003047  000243  #constant  Strings2StartL   0x1000
003048  000244  #constant  Strings7StartH   0x0
003049  000244  #constant  Strings7StartH   0x0
003050  000245  #constant  Strings7StartL   0x1200
003051  000245  #constant  Strings7StartL   0x1200
003052  000246  #constant  Strings8StartH   0x0
003053  000246  #constant  Strings8StartH   0x0
003054  000247  #constant  Strings8StartL   0x1400
003055  000247  #constant  Strings8StartL   0x1400
003056  000248  #constant  Strings12StartH   0x0
003057  000248  #constant  Strings12StartH   0x0
003058  000249  #constant  Strings12StartL   0x1600
003059  000249  #constant  Strings12StartL   0x1600
003060  000250  #constant  Strings14StartH   0x0
003061  000250  #constant  Strings14StartH   0x0
003062  000251  #constant  Strings14StartL   0x1800
003063  000251  #constant  Strings14StartL   0x1800
003064  000252  #constant  Strings16StartH   0x0
003065  000252  #constant  Strings16StartH   0x0
003066  000253  #constant  Strings16StartL   0x1A00
003067  000253  #constant  Strings16StartL   0x1A00
003068  000254  #constant  Strings15StartH   0x0
003069  000254  #constant  Strings15StartH   0x0
003070  000255  #constant  Strings15StartL   0x1C00
003071  000255  #constant  Strings15StartL   0x1C00
003072  000256  #constant  Strings17StartH   0x0
003073  000256  #constant  Strings17StartH   0x0
003074  000257  #constant  Strings17StartL   0x1E00
003075  000257  #constant  Strings17StartL   0x1E00
003076  000258  #constant  Strings18StartH   0x0
003077  000258  #constant  Strings18StartH   0x0
003078  000259  #constant  Strings18StartL   0x2000
003079  000259  #constant  Strings18StartL   0x2000
003080  000260  #constant  Strings19StartH   0x0
003081  000260  #constant  Strings19StartH   0x0
003082  000261  #constant  Strings19StartL   0x2200
003083  000261  #constant  Strings19StartL   0x2200
003084  000262  #constant  Strings21StartH   0x0
003085  000262  #constant  Strings21StartH   0x0
003086  000263  #constant  Strings21StartL   0x2400
003087  000263  #constant  Strings21StartL   0x2400
003088  000264  #constant  Strings11StartH   0x0
003089  000264  #constant  Strings11StartH   0x0
003090  000265  #constant  Strings11StartL   0x2600
003091  000265  #constant  Strings11StartL   0x2600
003092  000266  #constant  Strings22StartH   0x0
003093  000266  #constant  Strings22StartH   0x0
003094  000267  #constant  Strings22StartL   0x2800
003095  000267  #constant  Strings22StartL   0x2800
003096  000268  #constant  Strings23StartH   0x0
003097  000268  #constant  Strings23StartH   0x0
003098  000269  #constant  Strings23StartL   0x2A00
003099  000269  #constant  Strings23StartL   0x2A00
003100  000270  #constant  Strings24StartH   0x0
003101  000270  #constant  Strings24StartH   0x0
003102  000271  #constant  Strings24StartL   0x2C00
003103  000271  #constant  Strings24StartL   0x2C00
003104  000272  #constant  Strings25StartH   0x0
003105  000272  #constant  Strings25StartH   0x0
003106  000273  #constant  Strings25StartL   0x2E00
003107  000273  #constant  Strings25StartL   0x2E00
003108  000274  #constant  Strings26StartH   0x0
003109  000274  #constant  Strings26StartH   0x0
003110  000275  #constant  Strings26StartL   0x3000
003111  000275  #constant  Strings26StartL   0x3000
003112  000276  #constant  Strings27StartH   0x0
003113  000276  #constant  Strings27StartH   0x0
003114  000277  #constant  Strings27StartL   0x3200
003115  000277  #constant  Strings27StartL   0x3200
003116  000278  #constant  Strings5StartH   0x0
003117  000278  #constant  Strings5StartH   0x0
003118  000279  #constant  Strings5StartL   0x3400
003119  000279  #constant  Strings5StartL   0x3400
003120  000280  #constant  Strings28StartH   0x0
003121  000280  #constant  Strings28StartH   0x0
003122  000281  #constant  Strings28StartL   0x3600
003123  000281  #constant  Strings28StartL   0x3600
003124  000282  #constant  Strings29StartH   0x0
003125  000282  #constant  Strings29StartH   0x0
003126  000283  #constant  Strings29StartL   0x3800
003127  000283  #constant  Strings29StartL   0x3800
003128  000284  #constant  Strings30StartH   0x0
003129  000284  #constant  Strings30StartH   0x0
003130  000285  #constant  Strings30StartL   0x3A00
003131  000285  #constant  Strings30StartL   0x3A00
003132  000286  #constant  Strings31StartH   0x0
003133  000286  #constant  Strings31StartH   0x0
003134  000287  #constant  Strings31StartL   0x3C00
003135  000287  #constant  Strings31StartL   0x3C00
003136  000288  #constant  Strings32StartH   0x0
003137  000288  #constant  Strings32StartH   0x0
003138  000289  #constant  Strings32StartL   0x3E00
003139  000289  #constant  Strings32StartL   0x3E00
003140  000290  #constant  Strings33StartH   0x0
003141  000290  #constant  Strings33StartH   0x0
003142  000291  #constant  Strings33StartL   0x4000
003143  000291  #constant  Strings33StartL   0x4000
003144  000292  #constant  Strings35StartH   0x0
003145  000292  #constant  Strings35StartH   0x0
003146  000293  #constant  Strings35StartL   0x4200
003147  000293  #constant  Strings35StartL   0x4200
003148  000294  #constant  Strings10StartH   0x0
003149  000294  #constant  Strings10StartH   0x0
003150  000295  #constant  Strings10StartL   0x4400
003151  000295  #constant  Strings10StartL   0x4400
003152  000296  #IFNOT EXISTS NOGLOBALS
003153  000297  var disk, hndl ;
003154  000298  #ENDIF
003155  000013        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

003156  000014  #inherit "CLPrintStrings.inc"
003157  000014  #inherit "CLPrintStrings.inc"
003158  000001  func PrintStrings(var ID, var *msgid, var String)
003159  000002      var StringID, i, ch, offs32[2], res32[2];
003160  000003      StringID := oStringss[1+ID] ;
003161  000004      if (String)
003162  000005          stringsCV[ID] := -1 ;
003163  000006      else
003164  000007          stringsCV[ID] := msgid ;
003165  000008      endif
003166  000009      if ((StringID == -1) || (*(StringID + STForm) != curform)) return ;
003167  000010      txt_FontID(hFonts[ID]) ;
003168  000011      txt_Attributes(*(StringID + STFontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
003169  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
003170  000013        
003171  000014      if (*(StringID + STTransparent))
003172  000015          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), *(StringID + STBGColor));
003173  000016      else if (formBGcol[curform] != BGIMAGE)
003174  000017          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), formBGcol[curform]);
003175  000018      else
003176  000019          gfx_ClipWindow(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2)) ;
003177  000020          gfx_Clipping(ON) ;
003178  000021          img_Show(hndl,formstidx[curform]) ;
003179  000022          gfx_Clipping(OFF) ;
003180  000023        
003181  000024      endif
003182  000025        
003183  000026      txt_FGcolour(*(StringID + STFGColor)) ;
003184  000027      txt_BGcolour(*(StringID + STBGColor)) ;
003185  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
003186  000029        
003187  000030      gfx_MoveTo(*(StringID + STx1) , *(StringID + STy1)) ;
003188  000031        
003189  000032      if (String)
003190  000033          i := 0 ;
003191  000034          ch := msgid[i++] ;
003192  000035          while (ch != 0)
003193  000036              putch(ch) ;
003194  000037              ch := msgid[i++] ;
003195  000038          wend
003196  000039      else
003197  000040          umul_1616(offs32, *(StringID + STSize), msgid);
003198  000041          res32[1] := *(StringID + STStartH) ;
003199  000042          res32[0] := *(StringID + STStartL) ;
003200  000043          uadd_3232(res32,res32,offs32) ;
003201  000044          file_Seek(hstrings, res32[1], res32[0]);
003202  000045          repeat
003203  000046              if (*(StringID + STAnsi))
003204  000047                  ch := file_GetC(hstrings) ;
003205  000048              else
003206  000049                  ch := file_GetW(hstrings) ;
003207  000050              endif
003208  000051              putch(ch) ;
003209  000052          until (ch == 0) ;
003210  000053      endif
003211  000054        
003212  000055  endfunc
003213  000056        
003214  000015        
003215  000016  #constant IPDatasize 22
003216  000016  #constant IPDatasize 22
003217  000017        
003218  000018  #CONST
003219  000020  #END
003220  000021        
003221  000022  #CONST
003222  000122  #END
003223  000123        
003224  000396  #END
3225  1708
3226  1709
3227  170A
3228  170B
3229  170C
3230  170D
3231  170E
3232  170F
3233  1710
3234  1711
3235  1712
3236  1713
3237  1714
3238  1715
3239  1716
3240  1717
3241  1718
3242  1719
3243  171A
3244  171B
3245  171C
3246  171D
3247  171E
3248  171F
3249  1720
3250  1721
3251  1722
3252  1723
3253  1724
3254  1725
3255  1726
3256  1727
3257  1728
3258  1729
3259  172A
3260  172B
3261  172C
3262  172D
3263  172E
3264  172F
3265  1730
3266  1731
3267  1732
3268  1733
3269  1734
3270  1735
3271  1736
3272  1737
3273  1738
3274  1739
3275  173A
3276  173B
3277  173C
3278  173D
3279  173E
3280  173F
3281  1740
3282  1741
3283  1742
3284  1743
3285  1744
3286  1745
3287  1746
3288  1747
3289  1748
3290  1749
3291  174A
3292  174B
3293  174C
3294  174D
3295  174E
3296  174F
3297  1750
3298  1751
3299  1752
3300  1753
3301  1754
3302  1755
3303  1756
3304  1757
3305  1758
3306  1759
3307  175A
3308  175B
3309  175C
3310  175D
3311  175E
3312  175F
3313  1760
3314  1761
3315  1762
3316  1763
3317  1764
3318  1765
3319  1766
3320  1767
3321  1768
3322  1769
3323  176A
3324  176B
3325  176C
3326  176D
3327  176E
3328  176F
3329  1770
3330  1771
3331  1772
3332  1773
3333  1774
3334  1775
3335  1776
3336  1777
3337  1778
3338  1779
3339  177A
3340  177B
3341  177C
3342  177D
3343  177E
3344  177F
3345  1780
3346  1781
3347  1782
3348  1783
3349  1784
3350  1785
3351  1786
3352  1787
3353  1788
3354  1789
3355  178A
3356  178B
3357  178C
3358  178D
3359  178E
3360  178F
3361  1790
3362  1791
3363  1792
3364  1793
3365  1794
3366  1795
3367  1796
3368  1797
3369  1798
3370  1799
3371  179A
3372  179B
3373  179C
3374  179D
3375  179E
3376  179F
3377  17A0
3378  17A1
3379  17A2
3380  17A3
3381  17A4
3382  17A5
3383  17A6
3384  17A7
3385  17A8
3386  17A9
3387  17AA
3388  17AB
3389  17AC
3390  17AD
3391  17AE
3392  17AF
3393  17B0
3394  17B1
3395  17B2
3396  17B3
3397  17B4
3398  17B5
3399  17B6
3400  17B7
3401  17B8
3402  17B9
3403  17BA
3404  17BB
3405  17BC
3406  17BD
3407  17BE
3408  17BF
3409  17C0
3410  17C1
3411  17C2
3412  17C3
3413  17C4
3414  17C5
3415  17C6
3416  17C7
3417  17C8
3418  17C9
3419  17CA
3420  17CB
3421  17CC
3422  17CD
3423  17CE
3424  17CF
3425  17D0
3426  17D1
3427  17D2
3428  17D3
3429  17D4
3430  17D5
3431  17D6
3432  17D7
3433  17D8
3434  17D9
3435  17DA
3436  17DB
3437  17DC
3438  17DD
3439  17DE
3440  17DF
3441  17E0
3442  17E1
3443  17E2
3444  17E3
3445  17E4
3446  17E5
3447  17E6
3448  17E7
3449  17E8
3450  17E9
3451  17EA
3452  17EB
3453  17EC
3454  17ED
3455  17EE
3456  17EF
3457  17F0
3458  17F1
3459  17F2
3460  17F3
3461  17F4
3462  17F5
3463  17F6
3464  17F7
3465  17F8
3466  17F9
3467  17FA
3468  17FB
3469  17FC
3470  17FD
3471  17FE
3472  17FF
3473  1800
3474  1801
3475  1802
3476  1803
3477  1804
3478  1805
3479  1806
3480  1807
3481  1808
3482  1809
3483  180A
3484  180B
3485  180C
3486  180D
3487  180E
3488  180F
3489  1810
3490  1811
3491  1812
3492  1813
3493  1814
3494  1815
3495  1816
3496  1817
3497  1818
3498  1819
3499  181A
3500  181B
3501  181C
3502  181D
3503  181E
3504  181F
3505  1820
3506  1821
3507  1822
3508  1823
3509  1824
3510  1825
3511  1826
3512  1827
3513  1828
3514  1829
3515  182A
3516  182B
3517  182C
3518  182D
3519  182E
3520  182F
3521  1830
3522  1831
3523  1832
3524  1833
3525  1834
3526  1835
3527  1836
3528  1837
3529  1838
3530  1839
3531  183A
3532  183B
3533  183C
3534  183D
3535  183E
3536  183F
3537  1840
3538  1841
3539  1842
3540  1843
3541  1844
3542  1845
3543  1846
3544  1847
3545  1848
3546  1849
3547  184A
3548  184B
3549  184C
3550  184D
3551  184E
3552  184F
3553  1850
3554  1851
3555  1852
3556  1853
3557  1854
3558  1855
3559  1856
3560  1857
3561  1858
3562  1859
3563  185A
3564  185B
3565  185C
3566  185D
3567  185E
3568  185F
3569  1860
3570  1861
3571  1862
3572  1863
3573  1864
3574  1865
3575  1866
3576  1867
3577  1868
3578  1869
3579  186A
3580  186B
3581  186C
3582  186D
3583  186E
3584  186F
3585  1870
3586  1871
3587  1872
3588  1873
3589  1874
3590  1875
3591  1876
3592  1877
3593  1878
3594  1879
3595  187A
3596  187B
3597  187C
3598  187D
3599  187E
3600  187F
3601  1880
3602  1881
3603  1882
3604  1883
3605  1884
3606  1885
3607  1886
3608  1887
3609  1888
3610  1889
3611  188A
3612  188B
3613  188C
3614  188D
3615  188E
3616  188F
3617  1890
3618  1891
3619  1892
3620  1893
3621  1894
3622  1895
3623  1896
3624  1897
3625  1898
3626  1899
3627  189A
3628  189B
3629  189C
3630  189D
3631  189E
3632  189F
3633  18A0
3634  18A1
3635  18A2
3636  18A3
3637  18A4
3638  18A5
3639  18A6
3640  18A7
3641  18A8
3642  18A9
3643  18AA
3644  18AB
3645  18AC
3646  18AD
3647  18AE
3648  18AF
3649  18B0
3650  18B1
3651  18B2
3652  18B3
3653  18B4
3654  18B5
3655  18B6
3656  18B7
3657  18B8
3658  18B9
3659  18BA
3660  18BB
3661  18BC
3662  18BD
3663  18BE
3664  18BF
3665  18C0
3666  18C1
3667  18C2
3668  18C3
3669  18C4
3670  18C5
3671  18C6
3672  18C7
3673  18C8
3674  18C9
3675  18CA
3676  18CB
3677  18CC
3678  18CD
3679  18CE
3680  18CF
3681  18D0
3682  18D1
3683  18D2
3684  18D3
3685  18D4
3686  18D5
3687  18D6
3688  18D7
3689  18D8
3690  18D9
3691  18DA
3692  18DB
3693  18DC
3694  18DD
3695  18DE
3696  18DF
3697  18E0
3698  18E1
3699  18E2
3700  18E3
3701  18E4
3702  18E5
3703  18E6
3704  18E7
3705  18E8
3706  18E9
3707  18EA
3708  18EB
3709  18EC
3710  18ED
3711  18EE
3712  18EF
3713  18F0
3714  18F1
3715  18F2
3716  18F3
3717  18F4
3718  18F5
3719  18F6
3720  18F7
3721  18F8
3722  18F9
3723  18FA
3724  18FB
3725  18FC
3726  18FD
3727  18FE
3728  18FF
3729  1900
3730  1901
3731  1902
3732  1903
3733  1904
3734  1905
3735  1906
3736  1907
3737  1908
3738  1909
3739  190A
3740  190B
3741  190C
3742  190D
3743  190E
3744  190F
3745  1910
3746  1911
3747  1912
3748  1913
3749  1914
3750  1915
3751  1916
3752  1917
3753  1918
3754  1919
3755  191A
3756  191B
3757  191C
3758  191D
3759  191E
3760  191F
3761  1920
3762  1921
3763  1922
3764  1923
3765  1924
3766  1925
3767  1926
3768  1927
3769  1928
3770  1929
3771  192A
3772  192B
3773  192C
3774  192D
3775  192E
3776  192F
3777  1930
3778  1931
3779  1932
3780  1933
3781  1934
3782  1935
3783  1936
3784  1937
3785  1938
3786  1939
3787  193A
3788  193B
3789  193C
3790  193D
3791  193E
3792  193F
3793  1940
3794  1941
3795  1942
3796  1943
3797  1944
3798  1945
3799  1946
3800  1947
3801  1948
3802  1949
3803  194A
3804  194B
3805  194C
3806  194D
3807  194E
3808  194F
3809  1950
3810  1951
3811  1952
3812  1953
3813  1954
3814  1955
3815  1956
3816  1957
3817  1958
3818  1959
3819  195A
3820  195B
3821  195C
3822  195D
3823  195E
3824  195F
3825  1960
3826  1961
3827  1962
3828  1963
3829  1964
3830  1965
3831  1966
3832  1967
3833  1968
3834  1969
3835  196A
3836  196B
3837  196C
3838  196D
3839  196E
3840  196F
3841  1970
3842  1971
3843  1972
3844  1973
3845  1974
3846  1975
3847  1976
3848  1977
3849  1978
3850  1979
3851  197A
3852  197B
3853  197C
3854  197D
3855  197E
3856  197F
3857  1980
3858  1981
3859  1982
3860  1983
3861  1984
3862  1985
3863  1986
3864  1987
3865  1988
3866  1989
3867  198A
3868  198B
3869  198C
3870  198D
3871  198E
3872  198F
3873  1990
3874  1991
3875  1992
3876  1993
3877  1994
3878  1995
3879  1996
3880  1997
3881  1998
3882  1999
3883  199A
3884  199B
3885  199C
3886  199D
3887  199E
3888  199F
3889  19A0
3890  19A1
3891  19A2
3892  19A3
3893  19A4
3894  19A5
3895  19A6
3896  19A7
3897  19A8
3898  19A9
3899  19AA
3900  19AB
3901  19AC
3902  19AD
3903  19AE
3904  19AF
3905  19B0
3906  19B1
3907  19B2
3908  19B3
3909  19B4
3910  19B5
3911  19B6
3912  19B7
3913  19B8
3914  19B9
3915  19BA
3916  19BB
3917  19BC
3918  19BD
3919  19BE
3920  19BF
3921  19C0
3922  19C1
3923  19C2
3924  19C3
3925  19C4
3926  19C5
3927  19C6
3928  19C7
3929  19C8
3930  19C9
3931  19CA
3932  19CB
3933  19CC
3934  19CD
3935  19CE
3936  19CF
3937  19D0
3938  19D1
3939  19D2
3940  19D3
3941  19D4
3942  19D5
3943  19D6
3944  19D7
3945  19D8
3946  19D9
3947  19DA
3948  19DB
3949  19DC
3950  19DD
3951  19DE
3952  19DF
3953  19E0
3954  19E1
3955  19E2
3956  19E3
3957  19E4
3958  19E5
3959  19E6
3960  19E7
3961  19E8
3962  19E9
3963  19EA
3964  19EB
3965  19EC
3966  19ED
3967  19EE
3968  19EF
3969  19F0
3970  19F1
3971  19F2
3972  19F3
3973  19F4
3974  19F5
3975  19F6
3976  19F7
3977  19F8
3978  19F9
3979  19FA
3980  19FB
3981  19FC
3982  19FD
3983  19FE
3984  19FF
3985  1A00
3986  1A01
3987  1A02
3988  1A03
3989  1A04
3990  1A05
3991  1A06
3992  1A07
3993  1A08
3994  1A09
3995  1A0A
3996  1A0B
3997  1A0C
3998  1A0D
3999  1A0E
4000  1A0F
4001  1A10
4002  1A11
4003  1A12
4004  1A13
4005  1A14
4006  1A15
4007  1A16
4008  1A17
4009  1A18
4010  1A19
4011  1A1A
4012  1A1B
4013  1A1C
4014  1A1D
4015  1A1E
4016  1A1F
4017  1A20
4018  1A21
4019  1A22
4020  1A23
4021  1A24
4022  1A25
4023  1A26
4024  1A27
4025  1A28
4026  1A29
4027  1A2A
4028  1A2B
4029  1A2C
4030  1A2D
4031  1A2E
4032  1A2F
4033  1A30
4034  1A31
4035  1A32
4036  1A33
4037  1A34
4038  1A35
4039  1A36
4040  1A37
4041  1A38
4042  1A39
4043  1A3A
4044  1A3B
4045  1A3C
4046  1A3D
4047  1A3E
4048  1A3F
4049  1A40
4050  1A41
4051  1A42
4052  1A43
4053  1A44
4054  1A45
4055  1A46
4056  1A47
4057  1A48
4058  1A49
4059  1A4A
4060  1A4B
4061  1A4C
4062  1A4D
4063  1A4E
4064  1A4F
4065  1A50
4066  1A51
4067  1A52
4068  1A53
4069  1A54
4070  1A55
4071  1A56
4072  1A57
4073  1A58
4074  1A59
4075  1A5A
4076  1A5B
4077  1A5C
4078  1A5D
4079  1A5E
4080  1A5F
4081  1A60
4082  1A61
4083  1A62
4084  1A63
4085  1A64
4086  1A65
4087  1A66
4088  1A67
4089  1A68
4090  1A69
4091  1A6A
4092  1A6B
4093  1A6C
4094  1A6D
4095  1A6E
4096  1A6F
4097  1A70
4098  1A71
4099  1A72
4100  1A73
4101  1A74
4102  1A75
4103  1A76
4104  1A77
4105  1A78
4106  1A79
4107  1A7A
4108  1A7B
4109  1A7C
4110  1A7D
4111  1A7E
4112  1A7F
4113  1A80
4114  1A81
4115  1A82
4116  1A83
4117  1A84
4118  1A85
4119  1A86
4120  1A87
4121  1A88
4122  1A89
4123  1A8A
4124  1A8B
4125  1A8C
4126  1A8D
4127  1A8E
4128  1A8F
4129  1A90
4130  1A91
4131  1A92
4132  1A93
4133  1A94
4134  1A95
4135  1A96
4136  1A97
4137  1A98
4138  1A99
4139  1A9A
4140  1A9B
4141  1A9C
4142  1A9D
4143  1A9E
4144  1A9F
4145  1AA0
4146  1AA1
4147  1AA2
4148  1AA3
4149  1AA4
4150  1AA5
4151  1AA6
4152  1AA7
4153  1AA8
4154  1AA9
4155  1AAA
4156  1AAB
4157  1AAC
4158  1AAD
4159  1AAE
4160  1AAF
4161  1AB0
4162  1AB1
4163  1AB2
4164  1AB3
4165  1AB4
4166  1AB5
4167  1AB6
4168  1AB7
4169  1AB8
4170  1AB9
4171  1ABA
4172  1ABB
4173  1ABC
4174  1ABD
4175  1ABE
4176  1ABF
4177  1AC0
4178  1AC1
4179  1AC2
4180  1AC3
4181  1AC4
4182  1AC5
4183  1AC6
4184  1AC7
4185  1AC8
4186  1AC9
4187  1ACA
4188  1ACB
4189  1ACC
4190  1ACD
4191  1ACE
4192  1ACF
4193  1AD0
4194  1AD1
4195  1AD2
4196  1AD3
4197  1AD4
4198  1AD5
4199  1AD6
4200  1AD7
4201  1AD8
4202  1AD9
4203  1ADA
4204  1ADB
4205  1ADC
4206  1ADD
4207  1ADE
4208  1ADF
4209  1AE0
4210  1AE1
4211  1AE2
4212  1AE3
4213  1AE4
4214  1AE5
4215  1AE6
4216  1AE7
4217  1AE8
4218  1AE9
4219  1AEA
4220  1AEB
4221  1AEC
4222  1AED
4223  1AEE
4224  1AEF
4225  1AF0
4226  1AF1
4227  1AF2
4228  1AF3
4229  1AF4
4230  1AF5
4231  1AF6
4232  1AF7
4233  1AF8
4234  1AF9
4235  1AFA
4236  1AFB
4237  1AFC
4238  1AFD
4239  1AFE
4240  1AFF
4241  1B00
4242  1B01
4243  1B02
4244  1B03
4245  1B04
4246  1B05
4247  1B06
4248  1B07
4249  1B08
4250  1B09
4251  1B0A
4252  1B0B
4253  1B0C
4254  1B0D
4255  1B0E
4256  1B0F
4257  1B10
4258  1B11
4259  1B12
4260  1B13
4261  1B14
4262  1B15
4263  1B16
4264  1B17
4265  1B18
4266  1B19
4267  1B1A
4268  1B1B
4269  1B1C
4270  1B1D
4271  1B1E
4272  1B1F
4273  1B20
4274  1B21
4275  1B22
4276  1B23
4277  1B24
4278  1B25
4279  1B26
4280  1B27
4281  1B28
4282  1B29
4283  1B2A
4284  1B2B
4285  1B2C
4286  1B2D
4287  1B2E
4288  1B2F
4289  1B30
4290  1B31
4291  1B32
4292  1B33
4293  1B34
4294  1B35
4295  1B36
4296  1B37
4297  1B38
4298  1B39
4299  1B3A
4300  1B3B
4301  1B3C
4302  1B3D
4303  1B3E
4304  1B3F
4305  1B40
4306  1B41
4307  1B42
4308  1B43
4309  1B44
4310  1B45
4311  1B46
4312  1B47
4313  1B48
4314  1B49
4315  1B4A
4316  1B4B
4317  1B4C
4318  1B4D
4319  1B4E
4320  1B4F
4321  1B50
4322  1B51
4323  1B52
4324  1B53
4325  1B54
4326  1B55
4327  1B56
4328  1B57
4329  1B58
4330  1B59
4331  1B5A
4332  1B5B
4333  1B5C
4334  1B5D
4335  1B5E
4336  1B5F
4337  1B60
4338  1B61
4339  1B62
4340  1B63
4341  1B64
4342  1B65
4343  1B66
4344  1B67
4345  1B68
4346  1B69
4347  1B6A
4348  1B6B
4349  1B6C
4350  1B6D
4351  1B6E
4352  1B6F
4353  1B70
4354  1B71
4355  1B72
4356  1B73
4357  1B74
4358  1B75
4359  1B76
4360  1B77
4361  1B78
4362  1B79
4363  1B7A
4364  1B7B
4365  1B7C
4366  1B7D
4367  1B7E
4368  1B7F
4369  1B80
4370  1B81
4371  1B82
4372  1B83
4373  1B84
4374  1B85
4375  1B86
4376  1B87
4377  1B88
4378  1B89
4379  1B8A
4380  1B8B
4381  1B8C
4382  1B8D
4383  1B8E
4384  1B8F
4385  1B90
4386  1B91
4387  1B92
4388  1B93
4389  1B94
4390  1B95
4391  1B96
4392  1B97
4393  1B98
4394  1B99
4395  1B9A
4396  1B9B
4397  1B9C
4398  1B9D
4399  1B9E
4400  1B9F
4401  1BA0
4402  1BA1
4403  1BA2
4404  1BA3
4405  1BA4
4406  1BA5
4407  1BA6
4408  1BA7
4409  1BA8
4410  1BA9
4411  1BAA
4412  1BAB
4413  1BAC
4414  1BAD
4415  1BAE
4416  1BAF
4417  1BB0
4418  1BB1
4419  1BB2
4420  1BB3
4421  1BB4
4422  1BB5
4423  1BB6
4424  1BB7
4425  1BB8
4426  1BB9
4427  1BBA
4428  1BBB
4429  1BBC
4430  1BBD
4431  1BBE
4432  1BBF
4433  1BC0
4434  1BC1
4435  1BC2
4436  1BC3
4437  1BC4
4438  1BC5
4439  1BC6
4440  1BC7
4441  1BC8
4442  1BC9
4443  1BCA
4444  1BCB
4445  1BCC
4446  1BCD
4447  1BCE
4448  1BCF
4449  1BD0
4450  1BD1
4451  1BD2
4452  1BD3
4453  1BD4
4454  1BD5
4455  1BD6
4456  1BD7
4457  1BD8
4458  1BD9
4459  1BDA
4460  1BDB
4461  1BDC
4462  1BDD
4463  1BDE
4464  1BDF
4465  1BE0
4466  1BE1
4467  1BE2
4468  1BE3
4469  1BE4
4470  1BE5
4471  1BE6
4472  1BE7
4473  1BE8
4474  1BE9
4475  1BEA
4476  1BEB
4477  1BEC
4478  1BED
4479  1BEE
4480  1BEF
4481  1BF0
4482  1BF1
4483  1BF2
4484  1BF3
4485  1BF4
4486  1BF5
4487  1BF6
4488  1BF7
4489  1BF8
4490  1BF9
4491  1BFA
4492  1BFB
4493  1BFC
4494  1BFD
4495  1BFE
4496  1BFF
4497  1C00
4498  1C01
4499  1C02
4500  1C03
4501  1C04
4502  1C05
4503  1C06
4504  1C07
4505  1C08
4506  1C09
4507  1C0A
4508  1C0B
4509  1C0C
4510  1C0D
4511  1C0E
4512  1C0F
4513  1C10
4514  1C11
4515  1C12
4516  1C13
4517  1C14
4518  1C15
4519  1C16
4520  1C17
4521  1C18
4522  1C19
4523  1C1A
4524  1C1B
4525  1C1C
4526  1C1D
4527  1C1E
4528  1C1F
4529  1C20
4530  1C21
4531  1C22
4532  1C23
4533  1C24
4534  1C25
4535  1C26
4536  1C27
4537  1C28
4538  1C29
4539  1C2A
4540  1C2B
4541  1C2C
4542  1C2D
4543  1C2E
4544  1C2F
4545  1C30
4546  1C31
4547  1C32
4548  1C33
4549  1C34
4550  1C35
4551  1C36
4552  1C37
4553  1C38
4554  1C39
4555  1C3A
4556  1C3B
4557  1C3C
4558  1C3D
4559  1C3E
4560  1C3F
4561  1C40
4562  1C41
4563  1C42
4564  1C43
4565  1C44
4566  1C45
4567  1C46
4568  1C47
4569  1C48
4570  1C49
4571  1C4A
4572  1C4B
4573  1C4C
4574  1C4D
4575  1C4E
4576  1C4F
4577  1C50
4578  1C51
4579  1C52
4580  1C53
4581  1C54
4582  1C55
4583  1C56
4584  1C57
4585  1C58
4586  1C59
4587  1C5A
4588  1C5B
4589  1C5C
4590  1C5D
4591  1C5E
4592  1C5F
4593  1C60
4594  1C61
4595  1C62
4596  1C63
4597  1C64
4598  1C65
4599  1C66
4600  1C67
4601  1C68
4602  1C69
4603  1C6A
4604  1C6B
4605  1C6C
4606  1C6D
4607  1C6E
4608  1C6F
4609  1C70
4610  1C71
4611  1C72
4612  1C73
4613  1C74
4614  1C75
4615  1C76
4616  1C77
4617  1C78
4618  1C79
4619  1C7A
4620  1C7B
4621  1C7C
4622  1C7D
4623  1C7E
4624  1C7F
4625  1C80
4626  1C81
4627  1C82
4628  1C83
4629  1C84
4630  1C85
4631  1C86
4632  1C87
4633  1C88
4634  1C89
4635  1C8A
4636  1C8B
4637  1C8C
4638  1C8D
4639  1C8E
4640  1C8F
4641  1C90
4642  1C91
4643  1C92
4644  1C93
4645  1C94
4646  1C95
4647  1C96
4648  1C97
4649  1C98
4650  1C99
4651  1C9A
4652  1C9B
4653  1C9C
4654  1C9D
4655  1C9E
4656  1C9F
4657  1CA0
4658  1CA1
4659  1CA2
4660  1CA3
4661  1CA4
4662  1CA5
4663  1CA6
4664  1CA7
4665  1CA8
4666  1CA9
4667  1CAA
4668  1CAB
4669  1CAC
4670  1CAD
4671  1CAE
4672  1CAF
4673  1CB0
4674  1CB1
4675  1CB2
4676  1CB3
4677  1CB4
4678  1CB5
4679  1CB6
4680  1CB7
4681  1CB8
4682  1CB9
4683  1CBA
4684  1CBB
4685  1CBC
4686  1CBD
4687  1CBE
4688  1CBF
4689  1CC0
4690  1CC1
4691  1CC2
4692  1CC3
4693  1CC4
4694  1CC5
4695  1CC6
4696  1CC7
4697  1CC8
4698  1CC9
4699  1CCA
4700  1CCB
4701  1CCC
4702  1CCD
4703  1CCE
4704  1CCF
4705  1CD0
4706  1CD1
4707  1CD2
4708  1CD3
4709  1CD4
4710  1CD5
4711  1CD6
4712  1CD7
4713  1CD8
4714  1CD9
4715  1CDA
4716  1CDB
4717  1CDC
4718  1CDD
4719  1CDE
4720  1CDF
4721  1CE0
4722  1CE1
4723  1CE2
4724  1CE3
4725  1CE4
4726  1CE5
4727  1CE6
4728  1CE7
4729  1CE8
4730  1CE9
4731  1CEA
4732  1CEB
4733  1CEC
4734  1CED
4735  1CEE
4736  1CEF
4737  1CF0
4738  1CF1
4739  1CF2
4740  1CF3
4741  1CF4
4742  1CF5
4743  1CF6
4744  1CF7
4745  1CF8
4746  1CF9
4747  1CFA
4748  1CFB
4749  1CFC
4750  1CFD
4751  1CFE
4752  1CFF
4753  1D00
4754  1D01
4755  1D02
4756  1D03
4757  1D04
4758  1D05
4759  1D06
4760  1D07
4761  1D08
4762  1D09
4763  1D0A
4764  1D0B
4765  1D0C
4766  1D0D
4767  1D0E
4768  1D0F
4769  1D10
4770  1D11
4771  1D12
4772  1D13
4773  1D14
4774  1D15
4775  1D16
4776  1D17
4777  1D18
4778  1D19
4779  1D1A
4780  1D1B
4781  1D1C
4782  1D1D
4783  1D1E
4784  1D1F
4785  1D20
4786  1D21
4787  1D22
4788  1D23
4789  1D24
4790  1D25
4791  1D26
4792  1D27
4793  1D28
4794  1D29
4795  1D2A
4796  1D2B
4797  1D2C
4798  1D2D
4799  1D2E
4800  1D2F
4801  1D30
4802  1D31
4803  1D32
4804  1D33
4805  1D34
4806  1D35
4807  1D36
4808  1D37
4809  1D38
4810  1D39
4811  1D3A
4812  1D3B
4813  1D3C
4814  1D3D
4815  1D3E
4816  1D3F
4817  1D40
4818  1D41
4819  1D42
4820  1D43
4821  1D44
4822  1D45
4823  1D46
4824  1D47
4825  1D48
4826  1D49
4827  1D4A
4828  1D4B
4829  1D4C
4830  1D4D
4831  1D4E
4832  1D4F
4833  1D50
4834  1D51
4835  1D52
4836  1D53
4837  1D54
4838  1D55
4839  1D56
4840  1D57
4841  1D58
4842  1D59
4843  1D5A
4844  1D5B
4845  1D5C
4846  1D5D
4847  1D5E
4848  1D5F
4849  1D60
4850  1D61
4851  1D62
4852  1D63
4853  1D64
4854  1D65
4855  1D66
4856  1D67
4857  1D68
4858  1D69
4859  1D6A
4860  1D6B
4861  1D6C
4862  1D6D
4863  1D6E
4864  1D6F
4865  1D70
4866  1D71
4867  1D72
4868  1D73
4869  1D74
4870  1D75
4871  1D76
4872  1D77
4873  1D78
4874  1D79
4875  1D7A
4876  1D7B
4877  1D7C
4878  1D7D
4879  1D7E
4880  1D7F
4881  1D80
4882  1D81
4883  1D82
4884  1D83
4885  1D84
4886  1D85
4887  1D86
4888  1D87
4889  1D88
4890  1D89
4891  1D8A
4892  1D8B
4893  1D8C
4894  1D8D
4895  1D8E
4896  1D8F
4897  1D90
4898  1D91
4899  1D92
4900  1D93
4901  1D94
4902  1D95
4903  1D96
4904  1D97
4905  1D98
4906  1D99
4907  1D9A
4908  1D9B
4909  1D9C
4910  1D9D
4911  1D9E
4912  1D9F
4913  1DA0
4914  1DA1
4915  1DA2
4916  1DA3
4917  1DA4
4918  1DA5
4919  1DA6
4920  1DA7
4921  1DA8
4922  1DA9
4923  1DAA
4924  1DAB
4925  1DAC
4926  1DAD
4927  1DAE
4928  1DAF
4929  1DB0
4930  1DB1
4931  1DB2
4932  1DB3
4933  1DB4
4934  1DB5
4935  1DB6
4936  1DB7
4937  1DB8
4938  1DB9
4939  1DBA
4940  1DBB
4941  1DBC
4942  1DBD
4943  1DBE
4944  1DBF
4945  1DC0
4946  1DC1
4947  1DC2
4948  1DC3
4949  1DC4
4950  1DC5
4951  1DC6
4952  1DC7
4953  1DC8
4954  1DC9
4955  1DCA
4956  1DCB
4957  1DCC
4958  1DCD
4959  1DCE
4960  1DCF
4961  1DD0
4962  1DD1
4963  1DD2
4964  1DD3
4965  1DD4
4966  1DD5
4967  1DD6
4968  1DD7
4969  1DD8
4970  1DD9
4971  1DDA
4972  1DDB
4973  1DDC
4974  1DDD
4975  1DDE
4976  1DDF
4977  1DE0
4978  1DE1
4979  1DE2
4980  1DE3
4981  1DE4
4982  1DE5
4983  1DE6
4984  1DE7
4985  1DE8
4986  1DE9
4987  1DEA
4988  1DEB
4989  1DEC
4990  1DED
4991  1DEE
4992  1DEF
4993  1DF0
4994  1DF1
4995  1DF2
4996  1DF3
4997  1DF4
4998  1DF5
4999  1DF6
5000  1DF7
5001  1DF8
5002  1DF9
5003  1DFA
5004  1DFB
5005  1DFC
5006  1DFD
5007  1DFE
5008  1DFF
5009  1E00
5010  1E01
5011  1E02
5012  1E03
5013  1E04
5014  1E05
5015  1E06
5016  1E07
5017  1E08
5018  1E09
5019  1E0A
5020  1E0B
5021  1E0C
5022  1E0D
5023  1E0E
5024  1E0F
5025  1E10
5026  1E11
5027  1E12
5028  1E13
5029  1E14
5030  1E15
5031  1E16
5032  1E17
5033  1E18
5034  1E19
5035  1E1A
5036  1E1B
5037  1E1C
5038  1E1D
5039  1E1E
5040  1E1F
5041  1E20
5042  1E21
5043  1E22
5044  1E23
5045  1E24
5046  1E25
5047  1E26
5048  1E27
5049  1E28
5050  1E29
5051  1E2A
5052  1E2B
5053  1E2C
5054  1E2D
5055  1E2E
5056  1E2F
5057  1E30
5058  1E31
5059  1E32
5060  1E33
5061  1E34
5062  1E35
5063  1E36
5064  1E37
5065  1E38
5066  1E39
5067  1E3A
5068  1E3B
5069  1E3C
5070  1E3D
5071  1E3E
5072  1E3F
5073  1E40
5074  1E41
5075  1E42
5076  1E43
5077  1E44
5078  1E45
5079  1E46
5080  1E47
5081  1E48
5082  1E49
5083  1E4A
5084  1E4B
5085  1E4C
5086  1E4D
5087  1E4E
5088  1E4F
5089  1E50
5090  1E51
5091  1E52
5092  1E53
5093  1E54
5094  1E55
5095  1E56
5096  1E57
5097  1E58
5098  1E59
5099  1E5A
5100  1E5B
5101  1E5C
5102  1E5D
5103  1E5E
5104  1E5F
5105  1E60
5106  1E61
5107  1E62
5108  1E63
5109  1E64
5110  1E65
5111  1E66
5112  1E67
5113  1E68
5114  1E69
5115  1E6A
5116  1E6B
5117  1E6C
5118  1E6D
5119  1E6E
5120  1E6F
5121  1E70
5122  1E71
5123  1E72
5124  1E73
5125  1E74
5126  1E75
5127  1E76
5128  1E77
5129  1E78
5130  1E79
5131  1E7A
5132  1E7B
5133  1E7C
5134  1E7D
5135  1E7E
5136  1E7F
5137  1E80
5138  1E81
5139  1E82
5140  1E83
5141  1E84
5142  1E85
5143  1E86
5144  1E87
5145  1E88
5146  1E89
5147  1E8A
5148  1E8B
5149  1E8C
5150  1E8D
5151  1E8E
5152  1E8F
5153  1E90
5154  1E91
5155  1E92
5156  1E93
5157  1E94
5158  1E95
5159  1E96
5160  1E97
5161  1E98
5162  1E99
5163  1E9A
5164  1E9B
5165  1E9C
5166  1E9D
5167  1E9E
5168  1E9F
5169  1EA0
5170  1EA1
5171  1EA2
5172  1EA3
5173  1EA4
5174  1EA5
5175  1EA6
5176  1EA7
5177  1EA8
5178  1EA9
5179  1EAA
5180  1EAB
5181  1EAC
5182  1EAD
5183  1EAE
5184  1EAF
5185  1EB0
5186  1EB1
5187  1EB2
5188  1EB3
5189  1EB4
5190  1EB5
5191  1EB6
5192  1EB7
5193  1EB8
5194  1EB9
5195  1EBA
5196  1EBB
5197  1EBC
5198  1EBD
5199  1EBE
5200  1EBF
5201  1EC0
5202  1EC1
5203  1EC2
5204  1EC3
5205  1EC4
5206  1EC5
5207  1EC6
5208  1EC7
5209  1EC8
5210  1EC9
5211  1ECA
5212  1ECB
5213  1ECC
5214  1ECD
5215  1ECE
5216  1ECF
5217  1ED0
5218  1ED1
5219  1ED2
5220  1ED3
5221  1ED4
5222  1ED5
5223  1ED6
5224  1ED7
5225  1ED8
5226  1ED9
5227  1EDA
5228  1EDB
5229  1EDC
5230  1EDD
5231  1EDE
5232  1EDF
5233  1EE0
5234  1EE1
5235  1EE2
5236  1EE3
5237  1EE4
5238  1EE5
5239  1EE6
5240  1EE7
5241  1EE8
5242  1EE9
5243  1EEA
5244  1EEB
5245  1EEC
5246  1EED
5247  1EEE
5248  1EEF
5249  1EF0
5250  1EF1
5251  1EF2
5252  1EF3
5253  1EF4
5254  1EF5
5255  1EF6
5256  1EF7
5257  1EF8
5258  1EF9
5259  1EFA
5260  1EFB
5261  1EFC
5262  1EFD
5263  1EFE
5264  1EFF
5265  1F00
5266  1F01
5267  1F02
5268  1F03
5269  1F04
5270  1F05
5271  1F06
5272  1F07
5273  1F08
5274  1F09
5275  1F0A
5276  1F0B
5277  1F0C
5278  1F0D
5279  1F0E
5280  1F0F
5281  1F10
5282  1F11
5283  1F12
5284  1F13
5285  1F14
5286  1F15
5287  1F16
5288  1F17
5289  1F18
5290  1F19
5291  1F1A
5292  1F1B
5293  1F1C
5294  1F1D
5295  1F1E
5296  1F1F
5297  1F20
5298  1F21
5299  1F22
5300  1F23
5301  1F24
5302  1F25
5303  1F26
5304  1F27
5305  1F28
5306  1F29
5307  1F2A
5308  1F2B
5309  1F2C
5310  1F2D
5311  1F2E
5312  1F2F
5313  1F30
5314  1F31
5315  1F32
5316  1F33
5317  1F34
5318  1F35
5319  1F36
5320  1F37
5321  1F38
5322  1F39
5323  1F3A
5324  1F3B
5325  1F3C
5326  1F3D
5327  1F3E
5328  1F3F
5329  1F40
5330  1F41
5331  1F42
5332  1F43
5333  1F44
5334  1F45
5335  1F46
5336  1F47
5337  1F48
5338  1F49
5339  1F4A
5340  1F4B
5341  1F4C
5342  1F4D
5343  1F4E
5344  1F4F
5345  1F50
5346  1F51
5347  1F52
5348  1F53
5349  1F54
5350  1F55
5351  1F56
5352  1F57
5353  1F58
5354  1F59
5355  1F5A
5356  1F5B
5357  1F5C
5358  1F5D
5359  1F5E
5360  1F5F
5361  1F60
5362  1F61
5363  1F62
5364  1F63
5365  1F64
5366  1F65
5367  1F66
5368  1F67
5369  1F68
5370  1F69
5371  1F6A
5372  1F6B
5373  1F6C
5374  1F6D
5375  1F6E
5376  1F6F
5377  1F70
5378  1F71
5379  1F72
5380  1F73
5381  1F74
5382  1F75
5383  1F76
5384  1F77
5385  1F78
5386  1F79
5387  1F7A
5388  1F7B
5389  1F7C
5390  1F7D
5391  1F7E
5392  1F7F
5393  1F80
5394  1F81
5395  1F82
5396  1F83
5397  1F84
5398  1F85
5399  1F86
5400  1F87
5401  1F88
5402  1F89
5403  1F8A
5404  1F8B
5405  1F8C
5406  1F8D
5407  1F8E
5408  1F8F
5409  1F90
5410  1F91
5411  1F92
5412  1F93
5413  1F94
5414  1F95
5415  1F96
5416  1F97
5417  1F98
5418  1F99
5419  1F9A
5420  1F9B
5421  1F9C
5422  1F9D
5423  1F9E
5424  1F9F
5425  1FA0
5426  1FA1
5427  1FA2
5428  1FA3
5429  1FA4
5430  1FA5
5431  1FA6
5432  1FA7
5433  1FA8
5434  1FA9
5435  1FAA
5436  1FAB
5437  1FAC
5438  1FAD
5439  1FAE
5440  1FAF
5441  1FB0
5442  1FB1
5443  1FB2
5444  1FB3
5445  1FB4
5446  1FB5
5447  1FB6
5448  1FB7
5449  1FB8
5450  1FB9
5451  1FBA
5452  1FBB
5453  1FBC
5454  1FBD
5455  1FBE
5456  1FBF
5457  1FC0
5458  1FC1
5459  1FC2
5460  1FC3
5461  1FC4
5462  1FC5
5463  1FC6
5464  1FC7
5465  1FC8
5466  1FC9
5467  1FCA
5468  1FCB
5469  1FCC
5470  1FCD
5471  1FCE
5472  1FCF
5473  1FD0
5474  1FD1
5475  1FD2
5476  1FD3
5477  1FD4
5478  1FD5
5479  1FD6
5480  1FD7
5481  1FD8
5482  1FD9
5483  1FDA
5484  1FDB
5485  1FDC
5486  1FDD
5487  1FDE
5488  1FDF
5489  1FE0
5490  1FE1
5491  1FE2
5492  1FE3
5493  1FE4
5494  1FE5
5495  1FE6
5496  1FE7
5497  1FE8
5498  1FE9
5499  1FEA
5500  1FEB
5501  1FEC
5502  1FED
5503  1FEE
5504  1FEF
5505  1FF0
5506  1FF1
5507  1FF2
5508  1FF3
5509  1FF4
5510  1FF5
5511  1FF6
5512  1FF7
5513  1FF8
5514  1FF9
5515  1FFA
5516  1FFB
5517  1FFC
5518  1FFD
5519  1FFE
5520  1FFF
5521  2000
5522  2001
5523  2002
5524  2003
5525  2004
5526  2005
5527  2006
5528  2007
5529  2008
5530  2009
5531  200A
5532  200B
5533  200C
5534  200D
5535  200E
5536  200F
5537  2010
5538  2011
5539  2012
5540  2013
5541  2014
5542  2015
5543  2016
5544  2017
5545  2018
5546  2019
5547  201A
5548  201B
5549  201C
5550  201D
5551  201E
5552  201F
5553  2020
5554  2021
5555  2022
5556  2023
5557  2024
5558  2025
5559  2026
5560  2027
5561  2028
5562  2029
5563  202A
5564  202B
5565  202C
5566  202D
5567  202E
5568  202F
5569  2030
5570  2031
5571  2032
5572  2033
5573  2034
5574  2035
5575  2036
5576  2037
5577  2038
5578  2039
5579  203A
5580  203B
5581  203C
5582  203D
5583  203E
5584  203F
5585  2040
5586  2041
5587  2042
5588  2043
5589  2044
5590  2045
5591  2046
5592  2047
5593  2048
5594  2049
5595  204A
5596  204B
5597  204C
5598  204D
5599  204E
5600  204F
5601  2050
5602  2051
5603  2052
5604  2053
5605  2054
5606  2055
5607  2056
5608  2057
5609  2058
5610  2059
5611  205A
5612  205B
5613  205C
5614  205D
5615  205E
5616  205F
5617  2060
5618  2061
5619  2062
5620  2063
5621  2064
5622  2065
5623  2066
5624  2067
5625  2068
5626  2069
5627  206A
5628  206B
5629  206C
5630  206D
5631  206E
5632  206F
5633  2070
5634  2071
5635  2072
5636  2073
5637  2074
5638  2075
5639  2076
5640  2077
5641  2078
5642  2079
5643  207A
5644  207B
5645  207C
5646  207D
5647  207E
5648  207F
5649  2080
5650  2081
5651  2082
5652  2083
5653  2084
5654  2085
5655  2086
5656  2087
5657  2088
5658  2089
5659  208A
5660  208B
5661  208C
5662  208D
5663  208E
5664  208F
5665  2090
5666  2091
5667  2092
5668  2093
5669  2094
5670  2095
5671  2096
5672  2097
5673  2098
5674  2099
5675  209A
5676  209B
5677  209C
5678  209D
5679  209E
5680  209F
5681  20A0
5682  20A1
5683  20A2
5684  20A3
5685  20A4
5686  20A5
5687  20A6
5688  20A7
5689  20A8
5690  20A9
5691  20AA
5692  20AB
5693  20AC
5694  20AD
5695  20AE
5696  20AF
5697  20B0
5698  20B1
5699  20B2
5700  20B3
5701  20B4
5702  20B5
5703  20B6
5704  20B7
5705  20B8
5706  20B9
5707  20BA
5708  20BB
5709  20BC
5710  20BD
5711  20BE
5712  20BF
5713  20C0
5714  20C1
5715  20C2
5716  20C3
5717  20C4
5718  20C5
5719  20C6
5720  20C7
5721  20C8
5722  20C9
5723  20CA
5724  20CB
5725  20CC
5726  20CD
5727  20CE
5728  20CF
5729  20D0
5730  20D1
5731  20D2
5732  20D3
5733  20D4
5734  20D5
5735  20D6
5736  20D7
5737  20D8
5738  20D9
5739  20DA
5740  20DB
5741  20DC
5742  20DD
5743  20DE
5744  20DF
5745  20E0
5746  20E1
5747  20E2
5748  20E3
5749  20E4
5750  20E5
5751  20E6
5752  20E7
5753  20E8
5754  20E9
5755  20EA
5756  20EB
5757  20EC
5758  20ED
5759  20EE
5760  20EF
5761  20F0
5762  20F1
5763  20F2
5764  20F3
5765  20F4
5766  20F5
5767  20F6
5768  20F7
5769  20F8
5770  20F9
5771  20FA
5772  20FB
5773  20FC
5774  20FD
5775  20FE
5776  20FF
5777  2100
5778  2101
5779  2102
5780  2103
5781  2104
5782  2105
5783  2106
5784  2107
5785  2108
5786  2109
5787  210A
5788  210B
5789  210C
5790  210D
5791  210E
5792  210F
5793  2110
5794  2111
5795  2112
5796  2113
5797  2114
5798  2115
5799  2116
5800  2117
5801  2118
5802  2119
5803  211A
5804  211B
5805  211C
5806  211D
5807  211E
5808  211F
5809  2120
5810  2121
5811  2122
5812  2123
5813  2124
5814  2125
5815  2126
5816  2127
5817  2128
5818  2129
5819  212A
5820  212B
5821  212C
5822  212D
5823  212E
5824  212F
5825  2130
5826  2131
5827  2132
5828  2133
5829  2134
5830  2135
5831  2136
5832  2137
5833  2138
5834  2139
5835  213A
5836  213B
5837  213C
5838  213D
5839  213E
5840  213F
5841  2140
5842  2141
5843  2142
5844  2143
5845  2144
5846  2145
5847  2146
5848  2147
5849  2148
5850  2149
5851  214A
5852  214B
5853  214C
5854  214D
5855  214E
5856  214F
5857  2150
5858  2151
5859  2152
5860  2153
5861  2154
5862  2155
5863  2156
5864  2157
5865  2158
5866  2159
5867  215A
5868  215B
5869  215C
5870  215D
5871  215E
5872  215F
5873  2160
5874  2161
5875  2162
5876  2163
5877  2164
5878  2165
5879  2166
5880  2167
5881  2168
5882  2169
5883  216A
5884  216B
5885  216C
5886  216D
5887  216E
5888  216F
5889  2170
5890  2171
5891  2172
5892  2173
5893  2174
5894  2175
5895  2176
5896  2177
5897  2178
5898  2179
5899  217A
5900  217B
5901  217C
5902  217D
5903  217E
5904  217F
5905  2180
5906  2181
5907  2182
5908  2183
5909  2184
5910  2185
5911  2186
5912  2187
5913  2188
5914  2189
5915  218A
5916  218B
5917  218C
5918  218D
5919  218E
5920  218F
5921  2190
5922  2191
5923  2192
5924  2193
5925  2194
5926  2195
5927  2196
5928  2197
5929  2198
5930  2199
5931  219A
5932  219B
5933  219C
5934  219D
5935  219E
5936  219F
5937  21A0
5938  21A1
5939  21A2
5940  21A3
5941  21A4
5942  21A5
5943  21A6
5944  21A7
5945  21A8
5946  21A9
5947  21AA
5948  21AB
5949  21AC
5950  21AD
5951  21AE
5952  21AF
5953  21B0
5954  21B1
5955  21B2
5956  21B3
5957  21B4
5958  21B5
5959  21B6
5960  21B7
5961  21B8
5962  21B9
5963  21BA
5964  21BB
5965  21BC
5966  21BD
5967  21BE
5968  21BF
5969  21C0
5970  21C1
5971  21C2
5972  21C3
5973  21C4
5974  21C5
5975  21C6
5976  21C7
5977  21C8
5978  21C9
5979  21CA
5980  21CB
5981  21CC
5982  21CD
5983  21CE
5984  21CF
5985  21D0
5986  21D1
5987  21D2
5988  21D3
5989  21D4
5990  21D5
5991  21D6
5992  21D7
5993  21D8
5994  21D9
5995  21DA
5996  21DB
5997  21DC
5998  21DD
5999  21DE
6000  21DF
6001  21E0
6002  21E1
6003  21E2
6004  21E3
6005  21E4
6006  21E5
6007  21E6
6008  21E7
6009  21E8
6010  21E9
6011  21EA
6012  21EB
6013  21EC
6014  21ED
6015  21EE
6016  21EF
6017  21F0
6018  21F1
6019  21F2
6020  21F3
6021  21F4
6022  21F5
6023  21F6
6024  21F7
6025  21F8
6026  21F9
6027  21FA
6028  21FB
6029  21FC
6030  21FD
6031  21FE
6032  21FF
6033  2200
6034  2201
6035  2202
6036  2203
6037  2204
6038  2205
6039  2206
6040  2207
6041  2208
6042  2209
6043  220A
6044  220B
6045  220C
6046  220D
6047  220E
6048  220F
6049  2210
6050  2211
6051  2212
6052  2213
6053  2214
6054  2215
6055  2216
6056  2217
6057  2218
6058  2219
6059  221A
6060  221B
6061  221C
6062  221D
6063  221E
6064  221F
6065  2220
6066  2221
6067  2222
6068  2223
6069  2224
6070  2225
6071  2226
6072  2227
6073  2228
6074  2229
6075  222A
6076  222B
6077  222C
6078  222D
6079  222E
6080  222F
6081  2230
6082  2231
6083  2232
6084  2233
6085  2234
6086  2235
6087  2236
6088  2237
6089  2238
6090  2239
6091  223A
6092  223B
6093  223C
6094  223D
6095  223E
6096  223F
6097  2240
6098  2241
6099  2242
6100  2243
6101  2244
6102  2245
6103  2246
6104  2247
6105  2248
6106  2249
6107  224A
6108  224B
6109  224C
6110  224D
6111  224E
6112  224F
6113  2250
6114  2251
6115  2252
6116  2253
6117  2254
6118  2255
6119  2256
6120  2257
6121  2258
6122  2259
6123  225A
6124  225B
6125  225C
6126  225D
6127  225E
6128  225F
6129  2260
6130  2261
6131  2262
6132  2263
6133  2264
6134  2265
6135  2266
6136  2267
6137  2268
6138  2269
6139  226A
6140  226B
6141  226C
6142  226D
6143  226E
6144  226F
6145  2270
6146  2271
6147  2272
6148  2273
6149  2274
6150  2275
6151  2276
6152  2277
6153  2278
6154  2279
6155  227A
6156  227B
6157  227C
6158  227D
6159  227E
6160  227F
6161  2280
6162  2281
6163  2282
6164  2283
6165  2284
6166  2285
6167  2286
6168  2287
6169  2288
6170  2289
6171  228A
6172  228B
6173  228C
6174  228D
6175  228E
6176  228F
6177  2290
6178  2291
6179  2292
6180  2293
6181  2294
6182  2295
6183  2296
6184  2297
6185  2298
6186  2299
6187  229A
6188  229B
6189  229C
6190  229D
6191  229E
6192  229F
6193  22A0
6194  22A1
6195  22A2
6196  22A3
6197  22A4
6198  22A5
6199  22A6
6200  22A7
6201  22A8
6202  22A9
6203  22AA
6204  22AB
6205  22AC
6206  22AD
6207  22AE
6208  22AF
6209  22B0
6210  22B1
6211  22B2
6212  22B3
6213  22B4
6214  22B5
6215  22B6
6216  22B7
6217  22B8
6218  22B9
6219  22BA
6220  22BB
6221  22BC
6222  22BD
6223  22BE
6224  22BF
6225  22C0
6226  22C1
6227  22C2
6228  22C3
6229  22C4
6230  22C5
6231  22C6
6232  22C7
6233  22C8
6234  22C9
6235  22CA
6236  22CB
6237  22CC
6238  22CD
6239  22CE
6240  22CF
6241  22D0
6242  22D1
6243  22D2
6244  22D3
6245  22D4
6246  22D5
6247  22D6
6248  22D7
6249  22D8
6250  22D9
6251  22DA
6252  22DB
6253  22DC
6254  22DD
6255  22DE
6256  22DF
6257  22E0
6258  22E1
6259  22E2
6260  22E3
6261  22E4
6262  22E5
6263  22E6
6264  22E7
6265  22E8
6266  22E9
6267  22EA
6268  22EB
6269  22EC
6270  22ED
6271  22EE
6272  22EF
6273  22F0
6274  22F1
6275  22F2
6276  22F3
6277  22F4
6278  22F5
6279  22F6
6280  22F7
6281  22F8
6282  22F9
6283  22FA
6284  22FB
6285  22FC
6286  22FD
6287  22FE
6288  22FF
6289  2300
6290  2301
6291  2302
6292  2303
6293  2304
6294  2305
6295  2306
6296  2307
6297  2308
6298  2309
6299  230A
6300  230B
6301  230C
6302  230D
6303  230E
6304  230F
6305  2310
6306  2311
6307  2312
6308  2313
6309  2314
6310  2315
6311  2316
6312  2317
6313  2318
6314  2319
6315  231A
6316  231B
6317  231C
6318  231D
6319  231E
6320  231F
6321  2320
6322  2321
6323  2322
6324  2323
6325  2324
6326  2325
6327  2326
6328  2327
6329  2328
6330  2329
6331  232A
6332  232B
6333  232C
6334  232D
6335  232E
6336  232F
6337  2330
6338  2331
6339  2332
6340  2333
6341  2334
6342  2335
6343  2336
6344  2337
6345  2338
6346  2339
6347  233A
6348  233B
6349  233C
6350  233D
6351  233E
6352  233F
6353  2340
6354  2341
6355  2342
6356  2343
6357  2344
6358  2345
6359  2346
6360  2347
6361  2348
6362  2349
6363  234A
6364  234B
6365  234C
6366  234D
6367  234E
6368  234F
6369  2350
6370  2351
6371  2352
6372  2353
6373  2354
6374  2355
6375  2356
6376  2357
6377  2358
6378  2359
6379  235A
6380  235B
6381  235C
6382  235D
6383  235E
6384  235F
6385  2360
6386  2361
6387  2362
6388  2363
6389  2364
6390  2365
6391  2366
6392  2367
6393  2368
6394  2369
6395  236A
6396  236B
6397  236C
6398  236D
6399  236E
6400  236F
6401  2370
6402  2371
6403  2372
6404  2373
6405  2374
6406  2375
6407  2376
6408  2377
6409  2378
6410  2379
6411  237A
6412  237B
6413  237C
6414  237D
6415  237E
6416  237F
6417  2380
6418  2381
6419  2382
6420  2383
6421  2384
6422  2385
6423  2386
6424  2387
6425  2388
6426  2389
6427  238A
6428  238B
6429  238C
6430  238D
6431  238E
6432  238F
6433  2390
6434  2391
6435  2392
6436  2393
6437  2394
6438  2395
6439  2396
6440  2397
6441  2398
6442  2399
6443  239A
6444  239B
6445  239C
6446  239D
6447  239E
6448  239F
6449  23A0
6450  23A1
6451  23A2
6452  23A3
6453  23A4
6454  23A5
6455  23A6
6456  23A7
6457  23A8
6458  23A9
6459  23AA
6460  23AB
6461  23AC
6462  23AD
6463  23AE
6464  23AF
6465  23B0
6466  23B1
6467  23B2
6468  23B3
6469  23B4
6470  23B5
6471  23B6
6472  23B7
6473  23B8
6474  23B9
6475  23BA
6476  23BB
6477  23BC
6478  23BD
6479  23BE
6480  23BF
6481  23C0
6482  23C1
6483  23C2
6484  23C3
6485  23C4
6486  23C5
6487  23C6
6488  23C7
6489  23C8
6490  23C9
6491  23CA
6492  23CB
6493  23CC
6494  23CD
6495  23CE
6496  23CF
6497  23D0
6498  23D1
6499  23D2
6500  23D3
6501  23D4
6502  23D5
6503  23D6
6504  23D7
6505  23D8
6506  23D9
6507  23DA
6508  23DB
6509  23DC
6510  23DD
6511  23DE
6512  23DF
6513  23E0
6514  23E1
6515  23E2
6516  23E3
6517  23E4
6518  23E5
6519  23E6
6520  23E7
6521  23E8
6522  23E9
6523  23EA
6524  23EB
6525  23EC
6526  23ED
6527  23EE
6528  23EF
6529  23F0
6530  23F1
6531  23F2
6532  23F3
6533  23F4
6534  23F5
6535  23F6
6536  23F7
6537  23F8
6538  23F9
6539  23FA
6540  23FB
6541  23FC
6542  23FD
6543  23FE
6544  23FF
6545  2400
6546  2401
6547  2402
6548  2403
6549  2404
6550  2405
6551  2406
6552  2407
6553  2408
6554  2409
6555  240A
6556  240B
6557  240C
6558  240D
6559  240E
6560  240F
6561  2410
6562  2411
6563  2412
6564  2413
6565  2414
6566  2415
6567  2416
6568  2417
6569  2418
6570  2419
6571  241A
6572  241B
6573  241C
6574  241D
6575  241E
6576  241F
6577  2420
6578  2421
6579  2422
6580  2423
6581  2424
6582  2425
6583  2426
6584  2427
6585  2428
6586  2429
6587  242A
6588  242B
6589  242C
6590  242D
6591  242E
6592  242F
6593  2430
6594  2431
6595  2432
6596  2433
6597  2434
6598  2435
6599  2436
6600  2437
6601  2438
6602  2439
6603  243A
6604  243B
6605  243C
6606  243D
6607  243E
6608  243F
6609  2440
6610  2441
6611  2442
6612  2443
6613  2444
6614  2445
6615  2446
6616  2447
6617  2448
6618  2449
6619  244A
6620  244B
6621  244C
6622  244D
6623  244E
6624  244F
6625  2450
6626  2451
6627  2452
6628  2453
6629  2454
6630  2455
6631  2456
6632  2457
6633  2458
6634  2459
6635  245A
6636  245B
6637  245C
6638  245D
6639  245E
6640  245F
6641  2460
6642  2461
6643  2462
6644  2463
6645  2464
6646  2465
6647  2466
6648  2467
6649  2468
6650  2469
6651  246A
6652  246B
6653  246C
6654  246D
6655  246E
6656  246F
6657  2470
6658  2471
6659  2472
6660  2473
6661  2474
6662  2475
6663  2476
6664  2477
6665  2478
6666  2479
6667  247A
6668  247B
6669  247C
6670  247D
6671  247E
6672  247F
6673  2480
6674  2481
6675  2482
6676  2483
6677  2484
6678  2485
6679  2486
6680  2487
6681  2488
6682  2489
6683  248A
6684  248B
6685  248C
6686  248D
6687  248E
6688  248F
6689  2490
6690  2491
6691  2492
6692  2493
6693  2494
6694  2495
6695  2496
6696  2497
6697  2498
6698  2499
6699  249A
6700  249B
6701  249C
6702  249D
6703  249E
6704  249F
6705  24A0
6706  24A1
6707  24A2
6708  24A3
6709  24A4
6710  24A5
6711  24A6
6712  24A7
6713  24A8
6714  24A9
6715  24AA
6716  24AB
6717  24AC
6718  24AD
6719  24AE
6720  24AF
6721  24B0
6722  24B1
6723  24B2
6724  24B3
6725  24B4
6726  24B5
6727  24B6
6728  24B7
6729  24B8
6730  24B9
6731  24BA
6732  24BB
6733  24BC
6734  24BD
6735  24BE
6736  24BF
6737  24C0
6738  24C1
6739  24C2
6740  24C3
6741  24C4
6742  24C5
6743  24C6
6744  24C7
6745  24C8
6746  24C9
6747  24CA
6748  24CB
6749  24CC
6750  24CD
6751  24CE
6752  24CF
6753  24D0
6754  24D1
6755  24D2
6756  24D3
6757  24D4
6758  24D5
6759  24D6
6760  24D7
6761  24D8
6762  24D9
6763  24DA
6764  24DB
6765  24DC
6766  24DD
6767  24DE
6768  24DF
6769  24E0
6770  24E1
6771  24E2
6772  24E3
6773  24E4
6774  24E5
6775  24E6
6776  24E7
6777  24E8
6778  24E9
6779  24EA
6780  24EB
6781  24EC
6782  24ED
6783  24EE
6784  24EF
6785  24F0
6786  24F1
6787  24F2
6788  24F3
6789  24F4
6790  24F5
6791  24F6
6792  24F7
6793  24F8
6794  24F9
6795  24FA
6796  24FB
6797  24FC
6798  24FD
6799  24FE
6800  24FF
6801  2500
6802  2501
6803  2502
6804  2503
6805  2504
6806  2505
6807  2506
6808  2507
6809  2508
6810  2509
6811  250A
6812  250B
6813  250C
6814  250D
6815  250E
6816  250F
6817  2510
6818  2511
6819  2512
6820  2513
6821  2514
6822  2515
6823  2516
6824  2517
6825  2518
6826  2519
6827  251A
6828  251B
6829  251C
6830  251D
6831  251E
6832  251F
6833  2520
6834  2521
6835  2522
6836  2523
6837  2524
6838  2525
6839  2526
6840  2527
6841  2528
6842  2529
6843  252A
6844  252B
6845  252C
6846  252D
6847  252E
6848  252F
6849  2530
6850  2531
6851  2532
6852  2533
6853  2534
6854  2535
6855  2536
6856  2537
6857  2538
6858  2539
6859  253A
6860  253B
6861  253C
6862  253D
6863  253E
6864  253F
6865  2540
6866  2541
6867  2542
6868  2543
6869  2544
6870  2545
6871  2546
6872  2547
6873  2548
6874  2549
6875  254A
6876  254B
6877  254C
6878  254D
6879  254E
6880  254F
6881  2550
6882  2551
6883  2552
6884  2553
6885  2554
6886  2555
6887  2556
6888  2557
6889  2558
6890  2559
6891  255A
6892  255B
6893  255C
6894  255D
6895  255E
6896  255F
6897  2560
6898  2561
6899  2562
6900  2563
6901  2564
6902  2565
6903  2566
6904  2567
6905  2568
6906  2569
6907  256A
6908  256B
6909  256C
6910  256D
6911  256E
6912  256F
6913  2570
6914  2571
6915  2572
6916  2573
6917  2574
6918  2575
6919  2576
6920  2577
6921  2578
6922  2579
6923  257A
6924  257B
6925  257C
6926  257D
6927  257E
6928  257F
6929  2580
6930  2581
6931  2582
6932  2583
6933  2584
6934  2585
6935  2586
6936  2587
6937  2588
6938  2589
6939  258A
6940  258B
6941  258C
6942  258D
6943  258E
6944  258F
6945  2590
6946  2591
6947  2592
6948  2593
6949  2594
6950  2595
6951  2596
6952  2597
6953  2598
6954  2599
6955  259A
6956  259B
6957  259C
6958  259D
6959  259E
6960  259F
6961  25A0
6962  25A1
6963  25A2
6964  25A3
6965  25A4
6966  25A5
6967  25A6
6968  25A7
6969  25A8
6970  25A9
6971  25AA
6972  25AB
6973  25AC
6974  25AD
6975  25AE
6976  25AF
6977  25B0
6978  25B1
6979  25B2
6980  25B3
6981  25B4
6982  25B5
6983  25B6
6984  25B7
6985  25B8
6986  25B9
6987  25BA
6988  25BB
6989  25BC
6990  25BD
6991  25BE
6992  25BF
6993  25C0
6994  25C1
6995  25C2
6996  25C3
6997  25C4
6998  25C5
6999  25C6
7000  25C7
7001  25C8
7002  25C9
7003  25CA
7004  25CB
7005  25CC
7006  25CD
7007  25CE
7008  25CF
7009  25D0
7010  25D1
7011  25D2
7012  25D3
7013  25D4
7014  25D5
7015  25D6
7016  25D7
7017  25D8
7018  25D9
7019  25DA
7020  25DB
7021  25DC
7022  25DD
7023  25DE
7024  25DF
7025  25E0
7026  25E1
7027  25E2
7028  25E3
7029  25E4
7030  25E5
7031  25E6
7032  25E7
7033  25E8
7034  25E9
7035  25EA
7036  25EB
7037  25EC
7038  25ED
7039  25EE
7040  25EF
7041  25F0
7042  25F1
7043  25F2
7044  25F3
7045  25F4
7046  25F5
7047  25F6
7048  25F7
7049  25F8
7050  25F9
7051  25FA
7052  25FB
7053  25FC
7054  25FD
7055  25FE
7056  25FF
7057  2600
7058  2601
7059  2602
7060  2603
7061  2604
7062  2605
7063  2606
7064  2607
7065  2608
7066  2609
7067  260A
7068  260B
7069  260C
7070  260D
7071  260E
7072  260F
7073  2610
7074  2611
7075  2612
7076  2613
7077  2614
7078  2615
7079  2616
7080  2617
7081  2618
7082  2619
7083  261A
7084  261B
7085  261C
7086  261D
7087  261E
7088  261F
7089  2620
7090  2621
7091  2622
7092  2623
7093  2624
7094  2625
7095  2626
7096  2627
7097  2628
7098  2629
7099  262A
7100  262B
7101  262C
7102  262D
7103  262E
7104  262F
7105  2630
7106  2631
7107  2632
7108  2633
7109  2634
7110  2635
7111  2636
7112  2637
7113  2638
7114  2639
7115  263A
7116  263B
7117  263C
7118  263D
7119  263E
7120  263F
7121  2640
7122  2641
7123  2642
7124  2643
7125  2644
7126  2645
7127  2646
7128  2647
7129  2648
7130  2649
7131  264A
7132  264B
7133  264C
7134  264D
7135  264E
7136  264F
7137  2650
7138  2651
7139  2652
7140  2653
7141  2654
7142  2655
7143  2656
7144  2657
7145  2658
7146  2659
7147  265A
7148  265B
7149  265C
7150  265D
7151  265E
7152  265F
7153  2660
7154  2661
7155  2662
7156  2663
7157  2664
7158  2665
7159  2666
7160  2667
7161  2668
7162  2669
7163  266A
7164  266B
7165  266C
7166  266D
7167  266E
7168  266F
7169  2670
7170  2671
7171  2672
7172  2673
7173  2674
7174  2675
7175  2676
7176  2677
7177  2678
7178  2679
7179  267A
7180  267B
7181  267C
7182  267D
7183  267E
7184  267F
7185  2680
7186  2681
7187  2682
7188  2683
7189  2684
7190  2685
7191  2686
7192  2687
7193  2688
7194  2689
7195  268A
7196  268B
7197  268C
7198  268D
7199  268E
7200  268F
7201  2690
7202  2691
7203  2692
7204  2693
7205  2694
7206  2695
7207  2696
7208  2697
7209  2698
7210  2699
7211  269A
7212  269B
7213  269C
7214  269D
7215  269E
7216  269F
7217  26A0
7218  26A1
7219  26A2
7220  26A3
7221  26A4
7222  26A5
7223  26A6
7224  26A7
7225  26A8
7226  26A9
7227  26AA
7228  26AB
7229  26AC
7230  26AD
7231  26AE
7232  26AF
7233  26B0
7234  26B1
7235  26B2
7236  26B3
7237  26B4
7238  26B5
7239  26B6
7240  26B7
7241  26B8
7242  26B9
7243  26BA
7244  26BB
7245  26BC
7246  26BD
7247  26BE
7248  26BF
7249  26C0
7250  26C1
7251  26C2
7252  26C3
7253  26C4
7254  26C5
7255  26C6
7256  26C7
7257  26C8
7258  26C9
7259  26CA
7260  26CB
7261  26CC
7262  26CD
7263  26CE
7264  26CF
7265  26D0
7266  26D1
7267  26D2
7268  26D3
7269  26D4
7270  26D5
7271  26D6
7272  26D7
7273  26D8
7274  26D9
7275  26DA
7276  26DB
7277  26DC
7278  26DD
7279  26DE
7280  26DF
7281  26E0
7282  26E1
7283  26E2
7284  26E3
7285  26E4
7286  26E5
7287  26E6
7288  26E7
7289  26E8
7290  26E9
7291  26EA
7292  26EB
7293  26EC
7294  26ED
7295  26EE
7296  26EF
7297  26F0
7298  26F1
7299  26F2
7300  26F3
7301  26F4
7302  26F5
7303  26F6
7304  26F7
7305  26F8
7306  26F9
7307  26FA
7308  26FB
7309  26FC
7310  26FD
7311  26FE
7312  26FF
7313  2700
7314  2701
7315  2702
7316  2703
7317  2704
7318  2705
7319  2706
7320  2707
7321  2708
7322  2709
7323  270A
7324  270B
7325  270C
7326  270D
7327  270E
7328  270F
7329  2710
7330  2711
7331  2712
7332  2713
7333  2714
7334  2715
7335  2716
7336  2717
7337  2718
7338  2719
7339  271A
7340  271B
7341  271C
7342  271D
7343  271E
7344  271F
7345  2720
7346  2721
7347  2722
7348  2723
7349  2724
7350  2725
7351  2726
7352  2727
7353  2728
7354  2729
7355  272A
7356  272B
7357  272C
7358  272D
7359  272E
7360  272F
7361  2730
7362  2731
7363  2732
7364  2733
7365  2734
7366  2735
7367  2736
7368  2737
7369  2738
7370  2739
7371  273A
7372  273B
7373  273C
7374  273D
7375  273E
7376  273F
7377  2740
7378  2741
7379  2742
7380  2743
7381  2744
7382  2745
7383  2746
7384  2747
7385  2748
7386  2749
7387  274A
7388  274B
7389  274C
7390  274D
7391  274E
7392  274F
7393  2750
7394  2751
7395  2752
7396  2753
7397  2754
7398  2755
7399  2756
7400  2757
7401  2758
7402  2759
7403  275A
7404  275B
7405  275C
7406  275D
7407  275E
7408  275F
7409  2760
7410  2761
7411  2762
7412  2763
7413  2764
7414  2765
7415  2766
7416  2767
7417  2768
7418  2769
7419  276A
7420  276B
7421  276C
7422  276D
7423  276E
7424  276F
7425  2770
7426  2771
7427  2772
7428  2773
7429  2774
7430  2775
7431  2776
7432  2777
7433  2778
7434  2779
7435  277A
7436  277B
7437  277C
7438  277D
7439  277E
7440  277F
7441  2780
7442  2781
7443  2782
7444  2783
7445  2784
7446  2785
7447  2786
7448  2787
7449  2788
7450  2789
7451  278A
7452  278B
7453  278C
7454  278D
7455  278E
7456  278F
7457  2790
7458  2791
7459  2792
7460  2793
7461  2794
7462  2795
7463  2796
7464  2797
7465  2798
7466  2799
7467  279A
7468  279B
7469  279C
7470  279D
7471  279E
7472  279F
7473  27A0
7474  27A1
7475  27A2
7476  27A3
7477  27A4
7478  27A5
7479  27A6
7480  27A7
7481  27A8
7482  27A9
7483  27AA
7484  27AB
7485  27AC
7486  27AD
7487  27AE
7488  27AF
7489  27B0
7490  27B1
7491  27B2
7492  27B3
7493  27B4
7494  27B5
7495  27B6
7496  27B7
7497  27B8
7498  27B9
7499  27BA
7500  27BB
7501  27BC
7502  27BD
7503  27BE
7504  27BF
7505  27C0
7506  27C1
7507  27C2
7508  27C3
7509  27C4
7510  27C5
7511  27C6
7512  27C7
7513  27C8
7514  27C9
7515  27CA
7516  27CB
7517  27CC
7518  27CD
7519  27CE
7520  27CF
7521  27D0
7522  27D1
7523  27D2
7524  27D3
7525  27D4
7526  27D5
7527  27D6
7528  27D7
7529  27D8
7530  27D9
7531  27DA
7532  27DB
7533  27DC
7534  27DD
7535  27DE
7536  27DF
7537  27E0
7538  27E1
7539  27E2
7540  27E3
7541  27E4
7542  27E5
7543  27E6
7544  27E7
7545  27E8
7546  27E9
7547  27EA
7548  27EB
7549  27EC
7550  27ED
7551  27EE
7552  27EF
7553  27F0
7554  27F1
7555  27F2
7556  27F3
7557  27F4
7558  27F5
7559  27F6
7560  27F7
7561  27F8
7562  27F9
7563  27FA
7564  27FB
7565  27FC
7566  27FD
7567  27FE
7568  27FF
7569  2800
7570  2801
7571  2802
7572  2803
7573  2804
7574  2805
7575  2806
7576  2807
7577  2808
7578  2809
7579  280A
7580  280B
7581  280C
7582  280D
7583  280E
7584  280F
7585  2810
7586  2811
7587  2812
7588  2813
7589  2814
7590  2815
7591  2816
7592  2817
7593  2818
7594  2819
7595  281A
7596  281B
7597  281C
7598  281D
7599  281E
7600  281F
7601  2820
7602  2821
7603  2822
7604  2823
7605  2824
7606  2825
7607  2826
7608  2827
7609  2828
7610  2829
7611  282A
7612  282B
7613  282C
7614  282D
7615  282E
7616  282F
7617  2830
7618  2831
7619  2832
7620  2833
7621  2834
7622  2835
7623  2836
7624  2837
7625  2838
7626  2839
7627  283A
7628  283B
7629  283C
7630  283D
7631  283E
7632  283F
7633  2840
7634  2841
7635  2842
7636  2843
7637  2844
7638  2845
7639  2846
7640  2847
7641  2848
7642  2849
7643  284A
7644  284B
7645  284C
7646  284D
7647  284E
7648  284F
7649  2850
7650  2851
7651  2852
7652  2853
7653  2854
7654  2855
7655  2856
7656  2857
7657  2858
7658  2859
7659  285A
7660  285B
7661  285C
7662  285D
7663  285E
7664  285F
7665  2860
7666  2861
7667  2862
7668  2863
7669  2864
7670  2865
7671  2866
7672  2867
7673  2868
7674  2869
7675  286A
7676  286B
7677  286C
7678  286D
7679  286E
7680  286F
7681  2870
7682  2871
7683  2872
7684  2873
7685  2874
7686  2875
7687  2876
7688  2877
7689  2878
7690  2879
7691  287A
7692  287B
7693  287C
7694  287D
7695  287E
7696  287F
7697  2880
7698  2881
7699  2882
7700  2883
7701  2884
7702  2885
7703  2886
7704  2887
7705  2888
7706  2889
7707  288A
7708  288B
7709  288C
7710  288D
7711  288E
7712  288F
7713  2890
7714  2891
7715  2892
7716  2893
7717  2894
7718  2895
7719  2896
7720  2897
7721  2898
7722  2899
7723  289A
7724  289B
7725  289C
7726  289D
7727  289E
7728  289F
7729  28A0
7730  28A1
7731  28A2
7732  28A3
7733  28A4
7734  28A5
7735  28A6
7736  28A7
7737  28A8
7738  28A9
7739  28AA
7740  28AB
7741  28AC
7742  28AD
7743  28AE
7744  28AF
7745  28B0
7746  28B1
7747  28B2
7748  28B3
7749  28B4
7750  28B5
7751  28B6
7752  28B7
7753  28B8
7754  28B9
7755  28BA
7756  28BB
7757  28BC
7758  28BD
7759  28BE
7760  28BF
7761  28C0
7762  28C1
7763  28C2
7764  28C3
7765  28C4
7766  28C5
7767  28C6
7768  28C7
7769  28C8
7770  28C9
7771  28CA
7772  28CB
7773  28CC
7774  28CD
7775  28CE
7776  28CF
7777  28D0
7778  28D1
7779  28D2
7780  28D3
7781  28D4
7782  28D5
7783  28D6
7784  28D7
7785  28D8
7786  28D9
7787  28DA
7788  28DB
7789  28DC
7790  28DD
7791  28DE
7792  28DF
7793  28E0
7794  28E1
7795  28E2
7796  28E3
7797  28E4
7798  28E5
7799  28E6
7800  28E7
7801  28E8
7802  28E9
7803  28EA
7804  28EB
7805  28EC
7806  28ED
7807  28EE
7808  28EF
7809  28F0
7810  28F1
7811  28F2
7812  28F3
7813  28F4
7814  28F5
7815  28F6
7816  28F7
7817  28F8
7818  28F9
7819  28FA
7820  28FB
7821  28FC
7822  28FD
7823  28FE
7824  28FF
7825  2900
7826  2901
7827  2902
7828  2903
7829  2904
7830  2905
7831  2906
7832  2907
7833  2908
7834  2909
7835  290A
7836  290B
7837  290C
7838  290D
7839  290E
7840  290F
7841  2910
7842  2911
7843  2912
7844  2913
7845  2914
7846  2915
7847  2916
7848  2917
7849  2918
7850  2919
7851  291A
7852  291B
7853  291C
7854  291D
7855  291E
7856  291F
7857  2920
7858  2921
7859  2922
7860  2923
7861  2924
7862  2925
7863  2926
7864  2927
7865  2928
7866  2929
7867  292A
7868  292B
7869  292C
7870  292D
7871  292E
7872  292F
7873  2930
7874  2931
7875  2932
7876  2933
7877  2934
7878  2935
7879  2936
7880  2937
7881  2938
7882  2939
7883  293A
7884  293B
7885  293C
7886  293D
7887  293E
7888  293F
7889  2940
7890  2941
7891  2942
7892  2943
7893  2944
7894  2945
7895  2946
7896  2947
7897  2948
7898  2949
7899  294A
7900  294B
7901  294C
7902  294D
7903  294E
7904  294F
7905  2950
7906  2951
7907  2952
7908  2953
7909  2954
7910  2955
7911  2956
7912  2957
7913  2958
7914  2959
7915  295A
7916  295B
7917  295C
7918  295D
7919  295E
7920  295F
7921  2960
7922  2961
7923  2962
7924  2963
7925  2964
7926  2965
7927  2966
7928  2967
7929  2968
7930  2969
7931  296A
7932  296B
7933  296C
7934  296D
7935  296E
7936  296F
7937  2970
7938  2971
7939  2972
7940  2973
7941  2974
7942  2975
7943  2976
7944  2977
7945  2978
7946  2979
7947  297A
7948  297B
7949  297C
7950  297D
7951  297E
7952  297F
7953  2980
7954  2981
7955  2982
7956  2983
7957  2984
7958  2985
7959  2986
7960  2987
7961  2988
7962  2989
7963  298A
7964  298B
7965  298C
7966  298D
7967  298E
7968  298F
7969  2990
7970  2991
7971  2992
7972  2993
7973  2994
7974  2995
7975  2996
7976  2997
7977  2998
7978  2999
7979  299A
7980  299B
7981  299C
7982  299D
7983  299E
7984  299F
7985  29A0
7986  29A1
7987  29A2
7988  29A3
7989  29A4
7990  29A5
7991  29A6
7992  29A7
7993  29A8
7994  29A9
7995  29AA
7996  29AB
7997  29AC
7998  29AD
7999  29AE
8000  29AF
8001  29B0
8002  29B1
8003  29B2
8004  29B3
8005  29B4
8006  29B5
8007  29B6
8008  29B7
8009  29B8
8010  29B9
8011  29BA
8012  29BB
8013  29BC
8014  29BD
8015  29BE
8016  29BF
8017  29C0
8018  29C1
8019  29C2
8020  29C3
8021  29C4
8022  29C5
8023  29C6
8024  29C7
8025  29C8
8026  29C9
8027  29CA
8028  29CB
8029  29CC
8030  29CD
8031  29CE
8032  29CF
8033  29D0
8034  29D1
8035  29D2
8036  29D3
8037  29D4
8038  29D5
8039  29D6
8040  29D7
8041  29D8
8042  29D9
8043  29DA
8044  29DB
8045  29DC
8046  29DD
8047  29DE
8048  29DF
8049  29E0
8050  29E1
8051  29E2
8052  29E3
8053  29E4
8054  29E5
8055  29E6
8056  29E7
8057  29E8
8058  29E9
8059  29EA
8060  29EB
8061  29EC
8062  29ED
8063  29EE
8064  29EF
8065  29F0
8066  29F1
8067  29F2
8068  29F3
8069  29F4
8070  29F5
8071  29F6
8072  29F7
8073  29F8
8074  29F9
8075  29FA
8076  29FB
8077  29FC
8078  29FD
8079  29FE
8080  29FF
8081  2A00
8082  2A01
8083  2A02
8084  2A03
8085  2A04
8086  2A05
8087  2A06
8088  2A07
8089  2A08
8090  2A09
8091  2A0A
8092  2A0B
8093  2A0C
8094  2A0D
8095  2A0E
8096  2A0F
8097  2A10
8098  2A11
8099  2A12
8100  2A13
8101  2A14
8102  2A15
8103  2A16
8104  2A17
8105  2A18
8106  2A19
8107  2A1A
8108  2A1B
8109  2A1C
8110  2A1D
8111  2A1E
8112  2A1F
8113  2A20
8114  2A21
8115  2A22
8116  2A23
8117  2A24
8118  2A25
8119  2A26
8120  2A27
8121  2A28
8122  2A29
8123  2A2A
8124  2A2B
8125  2A2C
8126  2A2D
8127  2A2E
8128  2A2F
8129  2A30
8130  2A31
8131  2A32
8132  2A33
8133  2A34
8134  2A35
8135  2A36
8136  2A37
8137  2A38
8138  2A39
8139  2A3A
8140  2A3B
8141  2A3C
8142  2A3D
8143  2A3E
8144  2A3F
8145  2A40
8146  2A41
8147  2A42
8148  2A43
8149  2A44
8150  2A45
8151  2A46
8152  2A47
8153  2A48
8154  2A49
8155  2A4A
8156  2A4B
8157  2A4C
8158  2A4D
8159  2A4E
8160  2A4F
8161  2A50
8162  2A51
8163  2A52
8164  2A53
8165  2A54
8166  2A55
8167  2A56
8168  2A57
8169  2A58
8170  2A59
8171  2A5A
8172  2A5B
8173  2A5C
8174  2A5D
8175  2A5E
8176  2A5F
8177  2A60
8178  2A61
8179  2A62
8180  2A63
8181  2A64
8182  2A65
8183  2A66
8184  2A67
8185  2A68
8186  2A69
8187  2A6A
8188  2A6B
8189  2A6C
8190  2A6D
8191  2A6E
8192  2A6F
8193  2A70
8194  2A71
8195  2A72
8196  2A73
8197  2A74
8198  2A75
8199  2A76
8200  2A77
8201  2A78
8202  2A79
8203  2A7A
8204  2A7B
8205  2A7C
8206  2A7D
8207  2A7E
8208  2A7F
8209  2A80
8210  2A81
8211  2A82
8212  2A83
8213  2A84
8214  2A85
8215  2A86
8216  2A87
8217  2A88
8218  2A89
8219  2A8A
8220  2A8B
8221  2A8C
8222  2A8D
8223  2A8E
8224  2A8F
8225  2A90
8226  2A91
8227  2A92
8228  2A93
8229  2A94
8230  2A95
8231  2A96
8232  2A97
8233  2A98
8234  2A99
8235  2A9A
8236  2A9B
8237  2A9C
8238  2A9D
8239  2A9E
8240  2A9F
8241  2AA0
8242  2AA1
8243  2AA2
8244  2AA3
8245  2AA4
8246  2AA5
8247  2AA6
8248  2AA7
8249  2AA8
8250  2AA9
8251  2AAA
8252  2AAB
8253  2AAC
8254  2AAD
8255  2AAE
8256  2AAF
8257  2AB0
8258  2AB1
8259  2AB2
8260  2AB3
8261  2AB4
8262  2AB5
8263  2AB6
8264  2AB7
8265  2AB8
8266  2AB9
8267  2ABA
8268  2ABB
8269  2ABC
8270  2ABD
8271  2ABE
8272  2ABF
8273  2AC0
8274  2AC1
8275  2AC2
8276  2AC3
8277  2AC4
8278  2AC5
8279  2AC6
8280  2AC7
8281  2AC8
8282  2AC9
8283  2ACA
8284  2ACB
8285  2ACC
8286  2ACD
8287  2ACE
8288  2ACF
8289  2AD0
8290  2AD1
8291  2AD2
8292  2AD3
8293  2AD4
8294  2AD5
8295  2AD6
8296  2AD7
8297  2AD8
8298  2AD9
8299  2ADA
8300  2ADB
8301  2ADC
8302  2ADD
8303  2ADE
8304  2ADF
8305  2AE0
8306  2AE1
8307  2AE2
8308  2AE3
8309  2AE4
8310  2AE5
8311  2AE6
8312  2AE7
8313  2AE8
8314  2AE9
8315  2AEA
8316  2AEB
8317  2AEC
8318  2AED
8319  2AEE
8320  2AEF
8321  2AF0
8322  2AF1
8323  2AF2
8324  2AF3
8325  2AF4
8326  2AF5
8327  2AF6
8328  2AF7
8329  2AF8
8330  2AF9
8331  2AFA
8332  2AFB
8333  2AFC
8334  2AFD
8335  2AFE
8336  2AFF
8337  2B00
8338  2B01
8339  2B02
8340  2B03
8341  2B04
8342  2B05
8343  2B06
8344  2B07
8345  2B08
8346  2B09
8347  2B0A
8348  2B0B
8349  2B0C
8350  2B0D
8351  2B0E
8352  2B0F
8353  2B10
8354  2B11
8355  2B12
8356  2B13
8357  2B14
8358  2B15
8359  2B16
8360  2B17
8361  2B18
8362  2B19
8363  2B1A
8364  2B1B
8365  2B1C
8366  2B1D
8367  2B1E
8368  2B1F
8369  2B20
8370  2B21
8371  2B22
8372  2B23
8373  2B24
8374  2B25
8375  2B26
8376  2B27
8377  2B28
8378  2B29
8379  2B2A
8380  2B2B
8381  2B2C
8382  2B2D
8383  2B2E
8384  2B2F
8385  2B30
8386  2B31
8387  2B32
8388  2B33
8389  2B34
8390  2B35
8391  2B36
8392  2B37
8393  2B38
8394  2B39
8395  2B3A
8396  2B3B
8397  2B3C
8398  2B3D
8399  2B3E
8400  2B3F
8401  2B40
8402  2B41
8403  2B42
8404  2B43
8405  2B44
8406  2B45
8407  2B46
8408  2B47
8409  2B48
8410  2B49
8411  2B4A
8412  2B4B
8413  2B4C
8414  2B4D
8415  2B4E
8416  2B4F
8417  2B50
8418  2B51
8419  2B52
8420  2B53
8421  2B54
8422  2B55
8423  2B56
8424  2B57
8425  2B58
8426  2B59
8427  2B5A
8428  2B5B
8429  2B5C
8430  2B5D
8431  2B5E
8432  2B5F
8433  2B60
8434  2B61
8435  2B62
8436  2B63
8437  2B64
8438  2B65
8439  2B66
8440  2B67
8441  2B68
8442  2B69
8443  2B6A
8444  2B6B
8445  2B6C
8446  2B6D
8447  2B6E
8448  2B6F
8449  2B70
8450  2B71
8451  2B72
8452  2B73
8453  2B74
8454  2B75
8455  2B76
8456  2B77
8457  2B78
8458  2B79
8459  2B7A
8460  2B7B
8461  2B7C
8462  2B7D
8463  2B7E
8464  2B7F
8465  2B80
8466  2B81
8467  2B82
8468  2B83
8469  2B84
8470  2B85
8471  2B86
8472  2B87
8473  2B88
8474  2B89
8475  2B8A
8476  2B8B
8477  2B8C
8478  2B8D
8479  2B8E
8480  2B8F
8481  2B90
8482  2B91
8483  2B92
8484  2B93
8485  2B94
8486  2B95
8487  2B96
8488  2B97
8489  2B98
8490  2B99
8491  2B9A
8492  2B9B
8493  2B9C
8494  2B9D
8495  2B9E
8496  2B9F
8497  2BA0
8498  2BA1
8499  2BA2
8500  2BA3
8501  2BA4
8502  2BA5
8503  2BA6
8504  2BA7
8505  2BA8
8506  2BA9
8507  2BAA
8508  2BAB
8509  2BAC
8510  2BAD
8511  2BAE
8512  2BAF
8513  2BB0
8514  2BB1
8515  2BB2
8516  2BB3
8517  2BB4
8518  2BB5
8519  2BB6
8520  2BB7
8521  2BB8
8522  2BB9
8523  2BBA
8524  2BBB
8525  2BBC
8526  2BBD
8527  2BBE
8528  2BBF
8529  2BC0
8530  2BC1
8531  2BC2
8532  2BC3
8533  2BC4
8534  2BC5
8535  2BC6
8536  2BC7
8537  2BC8
8538  2BC9
8539  2BCA
8540  2BCB
8541  2BCC
8542  2BCD
8543  2BCE
8544  2BCF
8545  2BD0
8546  2BD1
8547  2BD2
8548  2BD3
8549  2BD4
8550  2BD5
8551  2BD6
8552  2BD7
8553  2BD8
8554  2BD9
8555  2BDA
8556  2BDB
8557  2BDC
8558  2BDD
8559  2BDE
8560  2BDF
8561  2BE0
8562  2BE1
8563  2BE2
8564  2BE3
8565  2BE4
8566  2BE5
8567  2BE6
8568  2BE7
8569  2BE8
8570  2BE9
8571  2BEA
8572  2BEB
8573  2BEC
8574  2BED
8575  2BEE
8576  2BEF
8577  2BF0
8578  2BF1
8579  2BF2
8580  2BF3
8581  2BF4
8582  2BF5
8583  2BF6
8584  2BF7
8585  2BF8
8586  2BF9
8587  2BFA
8588  2BFB
8589  2BFC
8590  2BFD
8591  2BFE
8592  2BFF
8593  2C00
8594  2C01
8595  2C02
8596  2C03
8597  2C04
8598  2C05
8599  2C06
8600  2C07
8601  2C08
8602  2C09
8603  2C0A
8604  2C0B
8605  2C0C
8606  2C0D
8607  2C0E
8608  2C0F
8609  2C10
8610  2C11
8611  2C12
8612  2C13
8613  2C14
8614  2C15
8615  2C16
8616  2C17
8617  2C18
8618  2C19
8619  2C1A
8620  2C1B
8621  2C1C
8622  2C1D
8623  2C1E
8624  2C1F
8625  2C20
8626  2C21
8627  2C22
8628  2C23
8629  2C24
8630  2C25
8631  2C26
8632  2C27
8633  2C28
8634  2C29
8635  2C2A
8636  2C2B
8637  2C2C
8638  2C2D
8639  2C2E
8640  2C2F
8641  2C30
8642  2C31
8643  2C32
8644  2C33
8645  2C34
8646  2C35
8647  2C36
8648  2C37
8649  2C38
8650  2C39
8651  2C3A
8652  2C3B
8653  2C3C
8654  2C3D
8655  2C3E
8656  2C3F
8657  2C40
8658  2C41
8659  2C42
8660  2C43
8661  2C44
8662  2C45
8663  2C46
8664  2C47
8665  2C48
8666  2C49
8667  2C4A
8668  2C4B
8669  2C4C
8670  2C4D
8671  2C4E
8672  2C4F
8673  2C50
8674  2C51
8675  2C52
8676  2C53
8677  2C54
8678  2C55
8679  2C56
8680  2C57
8681  2C58
8682  2C59
8683  2C5A
8684  2C5B
8685  2C5C
8686  2C5D
8687  2C5E
8688  2C5F
8689  2C60
8690  2C61
8691  2C62
8692  2C63
8693  2C64
8694  2C65
8695  2C66
8696  2C67
8697  2C68
8698  2C69
8699  2C6A
8700  2C6B
8701  2C6C
8702  2C6D
8703  2C6E
8704  2C6F
8705  2C70
8706  2C71
8707  2C72
8708  2C73
8709  2C74
8710  2C75
8711  2C76
8712  2C77
8713  2C78
8714  2C79
8715  2C7A
8716  2C7B
8717  2C7C
8718  2C7D
8719  2C7E
8720  2C7F
8721  2C80
8722  2C81
8723  2C82
8724  2C83
8725  2C84
8726  2C85
8727  2C86
8728  2C87
8729  2C88
8730  2C89
8731  2C8A
8732  2C8B
8733  2C8C
8734  2C8D
8735  2C8E
8736  2C8F
8737  2C90
8738  2C91
8739  2C92
8740  2C93
8741  2C94
8742  2C95
8743  2C96
8744  2C97
8745  2C98
8746  2C99
8747  2C9A
8748  2C9B
8749  2C9C
8750  2C9D
8751  2C9E
8752  2C9F
8753  2CA0
8754  2CA1
8755  2CA2
8756  2CA3
8757  2CA4
8758  2CA5
8759  2CA6
8760  2CA7
8761  2CA8
8762  2CA9
8763  2CAA
8764  2CAB
8765  2CAC
8766  2CAD
8767  2CAE
8768  2CAF
8769  2CB0
8770  2CB1
8771  2CB2
8772  2CB3
8773  2CB4
8774  2CB5
8775  2CB6
8776  2CB7
8777  2CB8
8778  2CB9
8779  2CBA
8780  2CBB
8781  2CBC
8782  2CBD
8783  2CBE
8784  2CBF
8785  2CC0
8786  2CC1
8787  2CC2
8788  2CC3
8789  2CC4
8790  2CC5
8791  2CC6
8792  2CC7
8793  2CC8
8794  2CC9
8795  2CCA
8796  2CCB
8797  2CCC
8798  2CCD
8799  2CCE
8800  2CCF
8801  2CD0
8802  2CD1
8803  2CD2
8804  2CD3
8805  2CD4
8806  2CD5
8807  2CD6
8808  2CD7
8809  2CD8
8810  2CD9
8811  2CDA
8812  2CDB
8813  2CDC
8814  2CDD
8815  2CDE
8816  2CDF
8817  2CE0
8818  2CE1
8819  2CE2
8820  2CE3
8821  2CE4
8822  2CE5
8823  2CE6
8824  2CE7
8825  2CE8
8826  2CE9
8827  2CEA
8828  2CEB
8829  2CEC
8830  2CED
8831  2CEE
8832  2CEF
8833  2CF0
8834  2CF1
8835  2CF2
8836  2CF3
8837  2CF4
8838  2CF5
8839  2CF6
8840  2CF7
8841  2CF8
8842  2CF9
8843  2CFA
8844  2CFB
8845  2CFC
8846  2CFD
8847  2CFE
8848  2CFF
8849  2D00
8850  2D01
8851  2D02
8852  2D03
8853  2D04
8854  2D05
8855  2D06
8856  2D07
8857  2D08
8858  2D09
8859  2D0A
8860  2D0B
8861  2D0C
8862  2D0D
8863  2D0E
8864  2D0F
8865  2D10
8866  2D11
8867  2D12
8868  2D13
8869  2D14
8870  2D15
8871  2D16
8872  2D17
8873  2D18
8874  2D19
8875  2D1A
8876  2D1B
8877  2D1C
8878  2D1D
8879  2D1E
8880  2D1F
8881  2D20
8882  2D21
8883  2D22
8884  2D23
8885  2D24
8886  2D25
8887  2D26
8888  2D27
8889  2D28
8890  2D29
8891  2D2A
8892  2D2B
8893  2D2C
8894  2D2D
8895  2D2E
8896  2D2F
8897  2D30
8898  2D31
8899  2D32
8900  2D33
8901  2D34
8902  2D35
8903  2D36
8904  2D37
8905  2D38
8906  2D39
8907  2D3A
8908  2D3B
8909  2D3C
8910  2D3D
8911  2D3E
8912  2D3F
8913  2D40
8914  2D41
8915  2D42
8916  2D43
8917  2D44
8918  2D45
8919  2D46
8920  2D47
8921  2D48
8922  2D49
8923  2D4A
8924  2D4B
8925  2D4C
8926  2D4D
8927  2D4E
8928  2D4F
8929  2D50
8930  2D51
8931  2D52
8932  2D53
8933  2D54
8934  2D55
8935  2D56
8936  2D57
8937  2D58
8938  2D59
8939  2D5A
8940  2D5B
8941  2D5C
8942  2D5D
8943  2D5E
8944  2D5F
8945  2D60
8946  2D61
8947  2D62
8948  2D63
8949  2D64
8950  2D65
8951  2D66
8952  2D67
8953  2D68
8954  2D69
8955  2D6A
8956  2D6B
8957  2D6C
8958  2D6D
8959  2D6E
8960  2D6F
8961  2D70
8962  2D71
8963  2D72
8964  2D73
8965  2D74
8966  2D75
8967  2D76
8968  2D77
8969  2D78
8970  2D79
8971  2D7A
8972  2D7B
8973  2D7C
8974  2D7D
8975  2D7E
8976  2D7F
8977  2D80
8978  2D81
8979  2D82
8980  2D83
8981  2D84
8982  2D85
8983  2D86
8984  2D87
8985  2D88
8986  2D89
8987  2D8A
8988  2D8B
8989  2D8C
8990  2D8D
8991  2D8E
8992  2D8F
8993  2D90
8994  2D91
8995  2D92
8996  2D93
8997  2D94
8998  2D95
8999  2D96
9000  2D97
9001  2D98
9002  2D99
9003  2D9A
9004  2D9B
9005  2D9C
9006  2D9D
9007  2D9E
9008  2D9F
9009  2DA0
9010  2DA1
9011  2DA2
9012  2DA3
9013  2DA4
9014  2DA5
9015  2DA6
9016  2DA7
9017  2DA8
9018  2DA9
9019  2DAA
9020  2DAB
9021  2DAC
9022  2DAD
9023  2DAE
9024  2DAF
9025  2DB0
9026  2DB1
9027  2DB2
9028  2DB3
9029  2DB4
9030  2DB5
9031  2DB6
9032  2DB7
9033  2DB8
9034  2DB9
9035  2DBA
9036  2DBB
9037  2DBC
9038  2DBD
9039  2DBE
9040  2DBF
9041  2DC0
9042  2DC1
9043  2DC2
9044  2DC3
9045  2DC4
9046  2DC5
9047  2DC6
9048  2DC7
9049  2DC8
9050  2DC9
9051  2DCA
9052  2DCB
9053  2DCC
9054  2DCD
9055  2DCE
9056  2DCF
9057  2DD0
9058  2DD1
9059  2DD2
9060  2DD3
9061  2DD4
9062  2DD5
9063  2DD6
9064  2DD7
9065  2DD8
9066  2DD9
9067  2DDA
9068  2DDB
9069  2DDC
9070  2DDD
9071  2DDE
9072  2DDF
9073  2DE0
9074  2DE1
9075  2DE2
9076  2DE3
9077  2DE4
9078  2DE5
9079  2DE6
9080  2DE7
9081  2DE8
9082  2DE9
9083  2DEA
9084  2DEB
9085  2DEC
9086  2DED
9087  2DEE
9088  2DEF
9089  2DF0
9090  2DF1
9091  2DF2
9092  2DF3
9093  2DF4
9094  2DF5
9095  2DF6
9096  2DF7
9097  2DF8
9098  2DF9
9099  2DFA
9100  2DFB
9101  2DFC
9102  2DFD
9103  2DFE
9104  2DFF
9105  2E00
9106  2E01
9107  2E02
9108  2E03
9109  2E04
9110  2E05
9111  2E06
9112  2E07
9113  2E08
9114  2E09
009115  000397        
009116  000398  var hFonts[36] ;
009117  000399  var stringsCV[36] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
9118  1750
9119  1751
9120  1752
9121  1753
9122  1754
9123  1755
9124  1756
9125  1757
9126  1758
9127  1759
9128  175A
9129  175B
9130  175C
9131  175D
9132  175E
9133  175F
9134  1760
9135  1761
9136  1762
9137  1763
9138  1764
9139  1765
9140  1766
9141  1767
9142  1768
9143  1769
9144  176A
9145  176B
9146  176C
9147  176D
9148  176E
9149  176F
9150  1770
9151  1771
9152  1772
9153  1773
9154  1774
9155  1775
9156  1776
9157  1777
9158  1778
9159  1779
9160  177A
9161  177B
9162  177C
9163  177D
9164  177E
9165  177F
9166  1780
9167  1781
9168  1782
9169  1783
9170  1784
9171  1785
9172  1786
9173  1787
9174  1788
9175  1789
9176  178A
9177  178B
9178  178C
9179  178D
9180  178E
9181  178F
9182  1790
9183  1791
9184  1792
9185  1793
9186  1794
9187  1795
9188  1796
9189  1797
009190  000400  // Start P2.inc
009191  000401  var oObjects[MaxTotObjects+1] ;                 // address of objects
009192  000402  var curform ;
009193  000403  var x, y ;
009194  000404  var inputtype, TState, input, object ;
009195  000405  var comRX[40], cmd[CMDLenMAX] ;
009196  000406        
009197  000407  var cs, Ocs ;
009198  000408        
009199  000409  func seroutCS(var op)
009200  000410      serout(op) ;
009201  000411      Ocs ^= op ;
009202  000412  endfunc
009203  000413        
009204  000414  func seroutOcs()
009205  000415      serout(Ocs) ;
009206  000416      Ocs := 0 ;
009207  000417  endfunc
009208  000418        
009209  000419        
009210  000420  func ReadObject(var ObjectType, var ObjectIdx)
009211  000421      var j, k, Objects ;
009212  000422      Objects := *(oObjects+ObjectType) ;
009213  000423        
009214  000424      seroutCS(REPORT_OBJ) ;
009215  000425      seroutCS(ObjectType) ;
009216  000426      seroutCS(ObjectIdx) ;
009217  000427      j := 2 + ObjectIdx * 2 + Objects ;
009218  000428       if (ObjectType == tForm)
009219  000429          k := curform ;
009220  000430      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
009221  000431          k := img_GetWord(hndl, *j, IMAGE_TAG2);
009222  000432      else if (ObjectType == tStrings)
009223  000433          k := stringsCV[ObjectIdx];
009224  000434          else
009225  000435          k := img_GetWord(hndl, *j, IMAGE_INDEX);
009226  000436          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot 
009227  000437                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
009228  000438      endif
009229  000439      seroutCS(k >> 8) ; // first 8 bits
009230  000440      seroutCS(k) ;
009231  000441      seroutOcs() ;
009232  000442  endfunc
009233  000443        
009234  000444        
009235  000445  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
009236  000446      var i, j, k, Objects ;
009237  000447      ObjectType &= 0x3f ;
009238  000448      if (ObjectType == tForm)
009239  000449          ActivateForm(ObjectIdx) ;
009240  000450      else
009241  000451          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
009242  000452          i := *(Objects) ;
009243  000453          switch (ObjectType)
009244  000454              case tWinButton :
009245  000455                  j := IPControls[oWinButtons[ObjectIdx+1]] ;
009246  000456                  break ;
009247  000457              case tUserButton :
009248  000458                  j := IPControls[oUserButtons[ObjectIdx+1]] ;
009249  000459                  break ;
009250  000460              default : j := -1 ;
009251  000461          endswitch
009252  000462          if (j != -1) 
009253  000463              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
009254  000464              NewVal := NewVal << 1 ;  
009255  000465              if (OVF())      // button group index change
009256  000466                  if (*(j+IPData+IPD_P1))   
009257  000467                      k &= 1 ;    // mask off old group index for momentary
009258  000468                  else
009259  000469                      k &= 3 ;    // mask off old group index for toggle
009260  000470                  endif
009261  000471              else            // normal set
009262  000472                  if (*(j+IPData+IPD_P2) != -1) TurnOffButtons(*(j+IPData+IPD_P2)) ;
009263  000473                  k &= 0xfffc ;    // retain only group index for state set
009264  000474              endif
009265  000475              NewVal |= k ;
009266  000476          endif
009267  000477           if (ObjectType == tLeddigits)
009268  000478              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
009269  000479              ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
009270  000480          else if (ObjectType == tStrings)
009271  000481              PrintStrings(ObjectIdx, NewVal, 0);
009272  000482          else
009273  000483              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
009274  000484              img_Show(hndl, i) ; // will only display if form is current
009275  000485          endif
009276  000486      endif
009277  000487  endfunc
009278  000488        
009279  000489  func TurnOffButtons(var group)
009280  000490      var j, k, l;
009281  000491      for (j := 0; j < nInputs; j++)
009282  000492          k := j*IPDatasize ;
009283  000493          if (*(IPData+k+IPD_P2) == group)
009284  000494              l := -1 ;
009285  000495               if (*(IPData+k) == tWinButton)
009286  000496                  l := oWinButtons[*(IPData+k+IPD_OBJVidx)/2] ;
009287  000497                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
009288  000498                  img_Show(hndl, l);      // only shows on current form
009289  000499              else if (*(IPData+k) == tUserButton)
009290  000500                  l := oUserButtons[*(IPData+k+IPD_OBJVidx)/2] ;
009291  000501                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
009292  000502                  img_Show(hndl, l);      // only shows on current form
009293  000503              endif
009294  000504          endif
009295  000505      next
009296  000506  endfunc
009297  000507        
009298  000508        
009299  000509  // WARNING, this code will crash if newval exceeds maximum displayable number
009300  000510  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
009301  000511      var i, j, k, l, lb, newval ;
009302  000512      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
009303  000513      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
009304  000514      i := -1 ;
009305  000515      j := *(typeptr) ;
009306  000516      repeat
009307  000517          typeptr += 2 ;
009308  000518          i++ ;
009309  000519          until (*(typeptr) == imgidx);
009310  000520      j := setptr + i*10 ;
009311  000521        
009312  000522      imgidx++ ;
009313  000523      l := 1 ;
009314  000524      for (i := 1; i < *(j+iDigits); i++)
009315  000525          l *= 10 ;
009316  000526      next
009317  000527      lb := *(j+iLeadingBlanks) ;
009318  000528      for (i := 0; i < *(j+iDigits); i++)
009319  000529          k := newval / l ;
009320  000530          newval -= k * l ;
009321  000531          if ( lb && (i < *(j+iDigits) - *(j+iMinDigits)) )
009322  000532              if (k == 0)
009323  000533                  k := 10 ;
009324  000534              else
009325  000535                  lb := 0 ;
009326  000536              endif
009327  000537          endif
009328  000538          l /= 10 ;
009329  000539          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
009330  000540          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+ileft)+i* *(j+iWidthDigit)) ;
009331  000541          img_Show(hndl, imgidx);
009332  000542      next
009333  000543  endfunc
009334  000544        
009335  000545        
009336  000546  func ActivateForm(var newform)
009337  000547      var i, j, *p ;
009338  000548      if (curform != -1) // deactivate old form, by disabling all inputs
009339  000549          for (i := formstidx[curform]; i <= formenidx[curform]; i++)
009340  000550              if (img_GetWord(hndl, i, IMAGE_TAG))
009341  000551                  img_Disable(hndl,i) ;
009342  000552              endif
009343  000553          next
009344  000554      endif
009345  000555      curform := newform ;
009346  000556      // display newform image or clear to image color
009347  000557      if (formBGcol[curform] != BGIMAGE)
009348  000558          gfx_Set(BACKGROUND_COLOUR,formBGcol[curform]);
009349  000559          gfx_Cls() ;
009350  000560          DoGFXObjects() ;                                    // display GFX 'widgets'
009351  000561      endif
009352  000562        
009353  000563      // enable inputs
009354  000564      for (i := formstidx[curform]; i < formenidx[curform]; i++)
009355  000565          j := img_GetWord(hndl, i, IMAGE_TAG) ;
009356  000566          if (j)
009357  000567              j-- ;
009358  000568              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
009359  000569              //if (j != tKeyboard)
009360  000570              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
009361  000571                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
009362  000572              endif
009363  000573              img_Show(hndl,i) ; // show initialy, if required
009364  000574              if (j == tForm)
009365  000575                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
009366  000576              else if (j == tLeddigits)
009367  000577                  ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
009368  000578              endif
009369  000579          endif
009370  000580      next
009371  000581      for (i := 0; i < oStringss[0]; i++)
009372  000582          if (stringsCV[i] != -1)
009373  000583              WriteObject(tStrings, i, stringsCV[i]) ;
009374  000584          endif
009375  000585      next
009376  000586  endfunc
009377  000587        
009378  000588  func UpdateObjects(var newval)
009379  000589      var IPidx, otherOBJ ;
009380  000590      if ( ( img_GetWord(hndl, *(object), IMAGE_INDEX) != newval) || (TState == IPD_RELEASE) ) // only bother if values changed, or release
009381  000591        
009382  000592          img_SetWord(hndl, *(object), IMAGE_INDEX, newval);
009383  000593  // temp for **User??       if ((inputtype != tUserButton) || (!*(input+IPD_P1)))
009384  000594              img_Show(hndl, *(object));      // only shows on current form
009385  000595  //        endif
009386  000596          if ((inputtype == t4Dbutton) || (inputtype == tUserButton) || (inputtype == tWinButton)) 
009387  000597              if (*(input+IPD_P1))
009388  000598                  newval &= 1;
009389  000599              else
009390  000600                  newval &= 3;
009391  000601              endif
009392  000602              if (newval > 1) newval := 1;
009393  000603          endif
009394  000604          IPidx := *(input+TState) ;
009395  000605          while(IPidx != 0)
009396  000606              otherOBJ := IPidx + IPData;
009397  000607              if (*(otherOBJ) == OT_REPORT)
009398  000608                  seroutCS(REPORT_EVENT) ;
009399  000609                  seroutCS(inputtype) ;
009400  000610                  seroutCS(*(otherOBJ+IPD_OBJVidx)) ;
009401  000611                  seroutCS(newval >> 8) ;
009402  000612                  seroutCS(newval) ;
009403  000613                  seroutOcs() ;
009404  000614              else if (TState == *(otherOBJ+IPD_P4))
009405  000615                  if (*(otherOBJ) == OT_ACTIVATE)
009406  000616                      ActivateForm(*(otherOBJ+IPD_P2) ) ;
009407  000617                      inputtype := tForm ;
009408  000618                  else if (*(otherOBJ) == OT_SETCONST)
009409  000619                      newval := *(otherOBJ+IPD_P3) ;
009410  000620                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
009411  000621                  else if (*(otherOBJ) == OT_SETANOTHER)
009412  000622                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
009413  000623                  else if (*(otherOBJ) == OT_PREVFRAME)
009414  000624                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX))
009415  000625                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)-1) ;
009416  000626                      endif
009417  000627                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
009418  000628                  else if (*(otherOBJ) == OT_NEXTFRAME)
009419  000629                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) < *(otherOBJ+IPD_P3)) 
009420  000630                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)+1) ;
009421  000631                      endif
009422  000632                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
009423  000633                  else if (*(otherOBJ) == OT_PREVSTRING)
009424  000634                      if (stringsCV[*(otherOBJ+IPD_P2)])
009425  000635                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]-1) ;
009426  000636                      endif
009427  000637                  else if (*(otherOBJ) == OT_NEXTSTRING)
009428  000638                      if (stringsCV[*(otherOBJ+IPD_P2)] < *(otherOBJ+IPD_P3)) // fix IPD_P2 not filled in yet
009429  000639                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]+1) ;
009430  000640                      endif
009431  000641                  endif
009432  000642              endif
009433  000643              IPidx := *(otherOBJ+TState) ;
009434  000644          wend
009435  000645      endif
009436  000646  endfunc
009437  000647        
009438  000648  // End P2.inc
009439  000649  func DoGFXObjects()
009440  000650      switch (curform)
009441  000651          case 2:
009442  000652              gfx_Panel(PANEL_RAISED, 80, 44, 162, 135, WHEAT) ;
009443  000653          break ;
009444  000654      endswitch
009445  000655  endfunc
009446  000656        
009447  000657  // Start P3.inc
009448  000658  func main()
009449  000659      var comTX[50], cmdi, i, j, n, state, oldn ;
009450  000660      //putstr("Mounting...\n");
009451  000661      if (!(disk:=file_Mount()))
009452  000662          while(!(disk :=file_Mount()))
009453  000663              putstr("Drive not mounted...");
009454  000664              pause(200);
009455  000665              gfx_Cls();
009456  000666              pause(200);
009457  000667          wend
009458  000668      endif
009459  000669  //    gfx_MoveTo(0, 0);
009460  000670  //    print(mem_Heap()," ") ;
009461  000671  //    gfx_TransparentColour(0x0020);
009462  000672  //    gfx_Transparency(ON);
009463  000673        
009464  000674      gfx_ScreenMode(LANDSCAPE) ;
009465  000675        
009466  000676      // open image control
009467  000677      hndl := file_LoadImageControl("REPRAP~1.dat", "REPRAP~1.gci", 1);
009468  000678        
009469  000679      // init 'constants'
009470  000680  // End P3.inc
009471  000681        
009472  000682      oObjects[tDipSwitch] := oDipSwitchs ;
009473  000683      oObjects[tKnob] := oKnobs ;
009474  000684      oObjects[tRockerSwitch] := oRockerSwitchs ;
009475  000685      oObjects[tRotarySwitch] := oRotarySwitchs ;
009476  000686      oObjects[tGSlider] := oGSliders ;
009477  000687      oObjects[tTrackbar] := oTrackbars ;
009478  000688      oObjects[tWinButton] := oWinButtons ;
009479  000689      oObjects[tAngularmeter] := oAngularmeters ;
009480  000690      oObjects[tCoolgauge] := oCoolgauges ;
009481  000691      oObjects[tCustomdigits] := oCustomdigitss ;
009482  000692      oObjects[tForm] := oForms ;
009483  000693      oObjects[tGauge] := oGauges ;
009484  000694      oObjects[tImage] := oImages ;
009485  000695      oObjects[tKeyboard] := oKeyboards ;
009486  000696      oObjects[tLed] := oLeds ;
009487  000697      oObjects[tLeddigits] := oLeddigitss ;
009488  000698      oObjects[tMeter] := oMeters ;
009489  000699      oObjects[tStrings] := oStringss ;
009490  000700      oObjects[tThermometer] := oThermometers ;
009491  000701      oObjects[tUserled] := oUserleds ;
009492  000702      oObjects[tVideo] := oVideos ;
009493  000703      oObjects[tStaticText] := oStaticTexts ;
009494  000704      oObjects[tSounds] := oSoundss ;
009495  000705      oObjects[tTimer] := oTimers ;
009496  000706      oObjects[tSpectrum] := oSpectrums ;
009497  000707      oObjects[tTank] := oTanks ;
009498  000708      oObjects[tUserImages] := oUserImagess ;
009499  000709      oObjects[tPinOutput] := oPinOutputs ;
009500  000710      oObjects[tPinInput] := oPinInputs ;
009501  000711      oObjects[t4Dbutton] := o4Dbuttons ;
009502  000712      oObjects[tAniButton] := oAniButtons ;
009503  000713      oObjects[tColorPicker] := oColorPickers ;
009504  000714      oObjects[tUserButton] := oUserButtons ;
009505  000715      hFonts[0] := FONT3 ;
009506  000716      hFonts[1] := FONT3 ;
009507  000717      hFonts[2] := FONT3 ;
009508  000718      hFonts[3] := FONT3 ;
009509  000719      hFonts[4] := FONT3 ;
009510  000720      hFonts[5] := FONT3 ;
009511  000721      hFonts[6] := FONT3 ;
009512  000722      hFonts[7] := FONT3 ;
009513  000723      hFonts[8] := FONT3 ;
009514  000724      hFonts[9] := FONT3 ;
009515  000725      hFonts[11] := file_LoadImageControl("REPRAP~1.da1", "REPRAP~1.gc1", 1)  ;
009516  000726      hFonts[12] := FONT3 ;
009517  000727      hFonts[13] := FONT3 ;
009518  000728      hFonts[14] := FONT3 ;
009519  000729      hFonts[15] := FONT3 ;
009520  000730      hFonts[16] := FONT3 ;
009521  000731      hFonts[17] := FONT3 ;
009522  000732      hFonts[18] := FONT3 ;
009523  000733      hFonts[19] := FONT3 ;
009524  000734      hFonts[20] := FONT3 ;
009525  000735      hFonts[21] := FONT3 ;
009526  000736      hFonts[22] := FONT3 ;
009527  000737      hFonts[23] := FONT3 ;
009528  000738      hFonts[24] := FONT3 ;
009529  000739      hFonts[28] := FONT3 ;
009530  000740      hFonts[29] := FONT3 ;
009531  000741      hFonts[30] := FONT3 ;
009532  000742      hFonts[31] := FONT3 ;
009533  000743      hFonts[32] := FONT3 ;
009534  000744      hFonts[35] := FONT3 ;
009535  000745      hFonts[10] := hFonts[11] ;
009536  000746      hFonts[25] := hFonts[11] ;
009537  000747      hFonts[26] := hFonts[11] ;
009538  000748      hFonts[27] := hFonts[11] ;
009539  000749      hFonts[33] := hFonts[11] ;
009540  000750  // Start P4.inc
009541  000751      hstrings := file_Open("REPRAP~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
009542  000752      // init comms
009543  000753      com_Init(comRX,CMDLenMAX,0);
009544  000754      com_SetBaud(COM0,20000);
009545  000755      com_TXbuffer(comTX, 100, 0);
009546  000756      snd_BufSize(2) ;
009547  000757      // tag 'real' objects
009548  000758      for (i := 0; i <= MaxTotObjects; i++)
009549  000759          if (   (i != tSounds)
009550  000760              && (i != tTimer)
009551  000761              && (i != tPinOutput)
009552  000762              && (i != tPinInput) )
009553  000763              x := oObjects[i] ;
009554  000764              y := *(x) ;
009555  000765              for (n := 1; n <= y; n++)
009556  000766                  oldn := *(x+n*2) ;
009557  000767                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
009558  000768                  if (oldn != -1)
009559  000769                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
009560  000770                      img_Disable(hndl, oldn) ;
009561  000771                  endif
009562  000772              next
009563  000773          endif
009564  000774      next
009565  000775        
009566  000776      // display initial form
009567  000777      curform := -1 ;
009568  000778      ActivateForm(0) ; // need to change this according to first actual form
009569  000779  // End P4.inc
009570  000780  // Start P5.inc
009571  000781      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
009572  000782      oldn := -1 ;
009573  000783      repeat
009574  000784          // check comms for command, how to NAK invalid command
009575  000785          if (com_Count() != 0)
009576  000786              i := serin() ;
009577  000787              cs ^= i ;               // update checksum
009578  000788              if (   (cmdi > 2)
009579  000789                  && (cmd[0] == WRITE_STRU) )
009580  000790                  j := (cmdi-1) >> 1 + 2 ;
009581  000791                  if (j == CMDLenMAX)    // max length exceeded
009582  000792                      serout(NAK) ;
009583  000793                      cs := 0 ;
009584  000794                      cmdi := -1 ;
009585  000795                  else if (cmdi & 1)
009586  000796                      cmd[j] := i ;
009587  000797                      if (cmd[2] == 0)    // if string complete
009588  000798                          if (cs)
009589  000799                              serout(NAK) ;
009590  000800                              cs := 0 ;
009591  000801                          else
009592  000802                              cmd[j] := 0 ;                     // terminate it
009593  000803                              PrintStrings(cmd[1], &cmd[3], 1) ;
009594  000804                              serout(ACK) ;
009595  000805                          endif
009596  000806                          cmdi := -1 ;
009597  000807                      endif
009598  000808                  else
009599  000809                      cmd[j] := cmd[j] << 8 + i ;
009600  000810                      cmd[2]-- ;          // dec length
009601  000811                  endif
009602  000812                  cmdi++ ;
009603  000813              else // not unicode string
009604  000814                  cmd[cmdi++] := i ;
009605  000815                   if (cmd[0] == WRITE_STR)        // ansi string
009606  000816                      if (cmdi == CMDLenMAX)      // max length exceeded
009607  000817                          serout(NAK) ;
009608  000818                          cs := 0 ;
009609  000819                          cmdi := 0 ;
009610  000820                      else if (cmdi > 2)
009611  000821                          if (cmd[2] == -1)
009612  000822                              if (cs)
009613  000823                                  serout(NAK) ;
009614  000824                                  cs := 0 ;
009615  000825                              else
009616  000826                                  cmd[cmdi-1] := 0 ;                     // terminate it
009617  000827                                  PrintStrings(cmd[1], &cmd[3], 1) ;
009618  000828                                  serout(ACK) ;
009619  000829                              endif
009620  000830                              cmdi := 0 ;
009621  000831                          else
009622  000832                              cmd[2]-- ;          // dec length
009623  000833                          endif
009624  000834                      endif
009625  000835                  else if (   (cmd[0] == READ_OBJ)
009626  000836                           && (cmdi == 4)         )
009627  000837                      if (cs)
009628  000838                          serout(NAK) ;
009629  000839                          cs := 0 ;
009630  000840                      else
009631  000841                          ReadObject(cmd[1], cmd[2]) ;
009632  000842                      endif
009633  000843                      cmdi := 0 ;
009634  000844                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
009635  000845                           && (cmdi == 6)          )
009636  000846                      if (cs)
009637  000847                          serout(NAK) ;
009638  000848                          cs := 0 ;
009639  000849                      else
009640  000850                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
009641  000851                          serout(ACK) ;
009642  000852                      endif
009643  000853                      cmdi := 0 ;
009644  000854                  else if (   (cmd[0] == WRITE_CONTRAST)
009645  000855                           && (cmdi == 3)         )
009646  000856                      if (cs)
009647  000857                          serout(NAK) ;
009648  000858                          cs := 0 ;
009649  000859                      else
009650  000860                          gfx_Contrast(cmd[1]) ;
009651  000861                          serout(ACK) ;
009652  000862                      endif
009653  000863                      cmdi := 0 ;
009654  000864                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
009655  000865                      serout(NAK) ;
009656  000866                      cs := 0 ;
009657  000867                      cmdi := 0 ;
009658  000868                  endif
009659  000869              endif   // not unicode string
009660  000870          endif   // a character is available
009661  000871        
009662  000872        
009663  000873      // touch code processing
009664  000874        
009665  000875          state := touch_Get(TOUCH_STATUS);               // get touchscreen status
009666  000876          n := img_Touched(hndl,-1) ;
009667  000877          if ((state == TOUCH_PRESSED) || (state == TOUCH_RELEASED) || (state == TOUCH_MOVING))
009668  000878              if ((state != TOUCH_RELEASED) && (n != oldn) && (oldn != -1)) 
009669  000879                  state := TOUCH_RELEASED ;       // simulate release if we move off object
009670  000880              endif
009671  000881              if (state != TOUCH_RELEASED)        // if not released
009672  000882                  if (oldn != -1) 
009673  000883                      n := oldn ;
009674  000884                  else 
009675  000885                      oldn := n ;
009676  000886                      state := TOUCH_PRESSED ;
009677  000887                  endif
009678  000888                  x  := touch_Get(TOUCH_GETX);
009679  000889                  y  := touch_Get(TOUCH_GETY);
009680  000890                  TState := IPD_DOWN ;
009681  000891              else
009682  000892                  n := oldn ;                     // simulate release of what we touched
009683  000893                  oldn := -1 ;                    // prevent double release
009684  000894                  TState := IPD_RELEASE ;
009685  000895              endif
009686  000896              if (n != -1)
009687  000897                          input := IPControls[n] + IPData;
009688  000898                          inputtype := *(input) ;
009689  000899                          i := inputtype ;
009690  000900                          if (inputtype >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
009691  000901                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
009692  000902              endif
009693  000903          endif
009694  000904   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
009695  000905        
009696  000906          sys_EventsResume() ;
009697  000907      forever
009698  000908        
009699  000909  cDipswitch:
009700  000910        
009701  000911  cKnob:
009702  000912        
009703  000913  cRockerswitch:
009704  000914        
009705  000915  cRotaryswitch:
009706  000916        
009707  000917  cSlider:
009708  000918  cTrackbar:
009709  000919        
009710  000920  c4DButton:
009711  000921  cUserButton:
009712  000922      object := oUserButtons + *(input+IPD_OBJVidx) ;
009713  000923      goto gbutton ;
009714  000924  cWinbutton:
009715  000925      object := oWinButtons + *(input+IPD_OBJVidx) ;
009716  000926  gbutton:
009717  000927      i := img_GetWord(hndl, *(object), IMAGE_INDEX) ; // current state
009718  000928      if (*(input+IPD_P1))                                 // momentary, reports 0, but should report 1
009719  000929          if (state == TOUCH_RELEASED)
009720  000930              i &= 0xfffe ;
009721  000931              TState == IPD_DOWN ;
009722  000932          else
009723  000933              i |= 1 ;
009724  000934              TState == IPD_RELEASE ;
009725  000935          endif
009726  000936      else if (*(input+IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
009727  000937          if (state == TOUCH_RELEASED)                     // only truly change on release
009728  000938              if ((i & 3) == 3)
009729  000939                  i &= 0xfffc ;
009730  000940              else
009731  000941                  i++ ;
009732  000942              endif
009733  000943          else
009734  000944              i |= 1 ;                                      // make down regardless of current state
009735  000945          endif
009736  000946      else                        // group action, up all other buttons on touch press, reports 0 for button down
009737  000947          if (state == TOUCH_PRESSED)                     // only truly change on release
009738  000948              TurnOffButtons(*(input+IPD_P2)) ;
009739  000949          endif
009740  000950          i := (i & 0xfffc) | 2 ;
009741  000951      endif
009742  000952        
009743  000953      UpdateObjects(i) ;
009744  000954  endsub ;
009745  000955        
009746  000956  cAniButton:
009747  000957        
009748  000958  cColorPicker:
009749  000959        
009750  000960  endfunc
009751  000961  // End P5.inc
Notice: local var 'p' in func 'ActivateForm' is never used (line 547 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                 decimal    hex
_1F                                  -40  0xffffffd8 (PmmC func) args[0] r=0  (not used)
__MAXMEM                           14400  0x00003840 (const dword)  (usage 1)
__MAXPROG                          14400  0x00003840 (const dword)  (usage 1)
__PLATFORM                             1  0x00000001 (const dword)  (not used)
ABS                                  -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                        8639  0x000021bf (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ANITIMERS                              0  0x00000000 (const dword)  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                           7  0x00000007 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BACKLITE                               6  0x00000006 (const dword)  (not used)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BGIMAGE                               32  0x00000020 (const dword)  (usage 6)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 96)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 6)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
BUS_0                                  8  0x00000008 (const dword)  (not used)
BUS_1                                  9  0x00000009 (const dword)  (not used)
BUS_2                                 10  0x0000000a (const dword)  (not used)
BUS_3                                 11  0x0000000b (const dword)  (not used)
BUS_4                                 12  0x0000000c (const dword)  (not used)
BUS_5                                 13  0x0000000d (const dword)  (not used)
BUS_6                                 14  0x0000000e (const dword)  (not used)
BUS_7                                 15  0x0000000f (const dword)  (not used)
bus_In                               -45  0xffffffd3 (PmmC func) args[0] r=1  (not used)
bus_Out                              -46  0xffffffd2 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                             -49  0xffffffcf (PmmC func) args[0] r=1  (not used)
bus_Set                              -47  0xffffffd1 (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             5  0x00000005 (const dword)  (not used)
bus_Write                            -48  0xffffffd0 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                            -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                          -159  0xffffff61 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                           -158  0xffffff62 (PmmC func) args[1] r=1  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
CKMODE_0                               0  0x00000000 (const dword)  (not used)
CKMODE_1                               1  0x00000001 (const dword)  (not used)
CKMODE_2                               2  0x00000002 (const dword)  (not used)
CKMODE_3                               3  0x00000003 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  312  0x00000138 (mem) word[80] (global)  (usage 78)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COLOUR_MODE                           27  0x0000001b (const dword)  (not used)
COLUMN_ADDRESS_END1                    5  0x00000005 (const dword)  (not used)
COLUMN_ADDRESS_END2                    4  0x00000004 (const dword)  (not used)
COLUMN_ADDRESS_START1                  3  0x00000003 (const dword)  (not used)
COLUMN_ADDRESS_START2                  2  0x00000002 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63496  0x0000f808 (const dword)  (not used)
com1_Count                          -132  0xffffff7c (PmmC func) args[0] r=1  (not used)
com1_Error                          -134  0xffffff7a (PmmC func) args[0] r=1  (not used)
com1_Full                           -133  0xffffff7b (PmmC func) args[0] r=1  (not used)
com1_Init                           -130  0xffffff7e (PmmC func) args[3] r=0  (not used)
com1_Reset                          -131  0xffffff7d (PmmC func) args[0] r=0  (not used)
com1_Sync                           -135  0xffffff79 (PmmC func) args[0] r=1  (not used)
com1_TXbuffer                       -136  0xffffff78 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -139  0xffffff75 (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -137  0xffffff77 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -138  0xffffff76 (PmmC func) args[1] r=1  (not used)
com_Count                           -122  0xffffff86 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -124  0xffffff84 (PmmC func) args[0] r=1  (not used)
com_Full                            -123  0xffffff85 (PmmC func) args[0] r=1  (not used)
com_Init                            -120  0xffffff88 (PmmC func) args[3] r=0  (usage 3)
com_Reset                           -121  0xffffff87 (PmmC func) args[0] r=0  (not used)
com_SetBaud                         -142  0xffffff72 (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -125  0xffffff83 (PmmC func) args[0] r=1  (not used)
com_TXbuffer                        -126  0xffffff82 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -129  0xffffff7f (PmmC func) args[1] r=1  (not used)
com_TXcount                         -127  0xffffff81 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -128  0xffffff80 (PmmC func) args[1] r=1  (not used)
comRX                                232  0x000000e8 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -18  0xffffffee (PmmC func) args[1] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cs                                   472  0x000001d8 (mem) word (global)  (usage 42)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
curform                              218  0x000000da (mem) word (global)  (usage 45)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                  -285  0xfffffee3 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
CYCLE_CONTROL_1                       58  0x0000003a (const dword)  (not used)
CYCLE_CONTROL_2                       59  0x0000003b (const dword)  (not used)
CYCLE_CONTROL_3                       60  0x0000003c (const dword)  (not used)
CYCLE_CONTROL_4                       61  0x0000003d (const dword)  (not used)
CYCLE_CONTROL_5                       62  0x0000003e (const dword)  (not used)
CYCLE_CONTROL_6                       64  0x00000040 (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 6)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
disk                                   0  0x00000000 (mem) word (global)  (usage 6)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_Disconnect                     -293  0xfffffedb (PmmC func) args[0] r=0  (not used)
disp_Init                           -143  0xffffff71 (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -149  0xffffff6b (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -145  0xffffff6f (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -144  0xffffff70 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -284  0xfffffee4 (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -147  0xffffff6d (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -148  0xffffff6c (PmmC func) args[1] r=0  (not used)
DISPLAY_CONTROL_1                     38  0x00000026 (const dword)  (not used)
DISPLAY_CONTROL_10                    54  0x00000036 (const dword)  (not used)
DISPLAY_CONTROL_14                    65  0x00000041 (const dword)  (not used)
DISPLAY_CONTROL_2                     39  0x00000027 (const dword)  (not used)
DISPLAY_CONTROL_3                     40  0x00000028 (const dword)  (not used)
DISPLAY_CONTROL_4                     41  0x00000029 (const dword)  (not used)
DISPLAY_CONTROL_5                     42  0x0000002a (const dword)  (not used)
DISPLAY_CONTROL_6                     44  0x0000002c (const dword)  (not used)
DISPLAY_CONTROL_7                     45  0x0000002d (const dword)  (not used)
DISPLAY_CONTROL_8                    144  0x00000090 (const dword)  (not used)
DISPLAY_CONTROL_9                     53  0x00000035 (const dword)  (not used)
DISPLAY_MODE_CONTROL                   1  0x00000001 (const dword)  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        7949  0x00001f0d (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                              -282  0xfffffee6 (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                           -283  0xfffffee5 (PmmC func) args[0] r=1  (not used)
F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2710  0x00000a96 (const ??? 0)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -232  0xffffff18 (PmmC func) args[1] r=1  (not used)
file_Count                          -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -247  0xffffff09 (PmmC func) args[1] r=1  (not used)
file_Error                          -225  0xffffff1f (PmmC func) args[0] r=1  (not used)
file_Exec                           -251  0xffffff05 (PmmC func) args[2] r=1  (not used)
file_Exists                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
file_FindNext                       -229  0xffffff1b (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -242  0xffffff0e (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -246  0xffffff0a (PmmC func) args[3] r=1  (not used)
file_GetW                           -244  0xffffff0c (PmmC func) args[1] r=1  (usage 3)
file_Image                          -239  0xffffff11 (PmmC func) args[3] r=1  (not used)
file_Index                          -235  0xffffff15 (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -249  0xffffff07 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -252  0xffffff04 (PmmC func) args[3] r=1  (usage 6)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -253  0xffffff03 (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -231  0xffffff19 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -255  0xffffff01 (PmmC func) args[1] r=1  (not used)
file_PutC                           -241  0xffffff0f (PmmC func) args[2] r=1  (not used)
file_PutS                           -245  0xffffff0b (PmmC func) args[2] r=1  (not used)
file_PutW                           -243  0xffffff0d (PmmC func) args[2] r=1  (not used)
file_Read                           -233  0xffffff17 (PmmC func) args[3] r=1  (not used)
file_Rewind                         -248  0xffffff08 (PmmC func) args[1] r=1  (not used)
file_Run                            -250  0xffffff06 (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -240  0xffffff10 (PmmC func) args[5] r=1  (not used)
file_Seek                           -234  0xffffff16 (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_Size                           -238  0xffffff12 (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -236  0xffffff14 (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -254  0xffffff02 (PmmC func) args[0] r=0  (not used)
file_Write                          -237  0xffffff13 (PmmC func) args[3] r=1  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_BlockErase                    -157  0xffffff63 (PmmC func) args[1] r=1  (not used)
flash_BulkErase                     -156  0xffffff64 (PmmC func) args[0] r=0  (not used)
flash_ID                            -155  0xffffff65 (PmmC func) args[0] r=1  (not used)
flash_SIG                           -154  0xffffff66 (PmmC func) args[0] r=1  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
FONT1                                  0  0x00000000 (const dword)  (not used)
FONT2                                  1  0x00000001 (const dword)  (not used)
FONT3                                  2  0x00000002 (const dword)  (usage 87)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
formBGcol                           5621  0x000015f5formBGcol                           5621  0x000015f5 (mem) word[27] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
formBGcol                         UNRESOLVED  (usage 4)
formenidx                             61  0x0000003dformenidx                             61  0x0000003d (mem) word[27] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
formstidx                              7  0x00000007formstidx                              7  0x00000007 (mem) word[27] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
formstidx                         UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
GAMMA_CONTROL_1                       70  0x00000046 (const dword)  (not used)
GAMMA_CONTROL_10                      79  0x0000004f (const dword)  (not used)
GAMMA_CONTROL_11                      80  0x00000050 (const dword)  (not used)
GAMMA_CONTROL_12                      81  0x00000051 (const dword)  (not used)
GAMMA_CONTROL_2                       71  0x00000047 (const dword)  (not used)
GAMMA_CONTROL_3                       72  0x00000048 (const dword)  (not used)
GAMMA_CONTROL_4                       73  0x00000049 (const dword)  (not used)
GAMMA_CONTROL_5                       74  0x0000004a (const dword)  (not used)
GAMMA_CONTROL_6                       75  0x0000004b (const dword)  (not used)
GAMMA_CONTROL_7                       76  0x0000004c (const dword)  (not used)
GAMMA_CONTROL_8                       77  0x0000004d (const dword)  (not used)
GAMMA_CONTROL_9                       78  0x0000004e (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                         -85  0xffffffab (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -104  0xffffff98 (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -103  0xffffff99 (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                         -92  0xffffffa4 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                            -74  0xffffffb6 (PmmC func) args[2] r=0  (not used)
gfx_Bullet                           -71  0xffffffb9 (PmmC func) args[1] r=0  (not used)
gfx_Button                           -80  0xffffffb0 (PmmC func) args[9] r=0  (not used)
GFX_BUTTON_BACKGROUND                 64  0x00000040 (const dword)  (not used)
GFX_BUTTON_FOREGROUND                 63  0x0000003f (const dword)  (not used)
GFX_BUTTON_MODE                       65  0x00000041 (const dword)  (not used)
gfx_ChangeColour                     -76  0xffffffb4 (PmmC func) args[2] r=0  (not used)
gfx_Circle                           -61  0xffffffc3 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                     -62  0xffffffc2 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                         -94  0xffffffa2 (PmmC func) args[1] r=0  (usage 6)
gfx_ClipWindow                       -75  0xffffffb5 (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                              -51  0xffffffcd (PmmC func) args[0] r=0  (usage 6)
gfx_ColourMode                      -102  0xffffff9a (PmmC func) args[1] r=1  (not used)
gfx_Contrast                        -100  0xffffff9c (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                              -70  0xffffffba (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                          -78  0xffffffb2 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                    -79  0xffffffb1 (PmmC func) args[5] r=0  (not used)
gfx_FrameDelay                       -97  0xffffff9f (PmmC func) args[1] r=1  (not used)
gfx_Get                              -90  0xffffffa6 (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                         -64  0xffffffc0 (PmmC func) args[2] r=1  (not used)
GFX_HILIGHT_BACKGROUND                61  0x0000003d (const dword)  (not used)
GFX_HILIGHT_FOREGROUND                62  0x0000003e (const dword)  (not used)
GFX_HILITE_LINE                       58  0x0000003a (const dword)  (not used)
gfx_Hline                            -57  0xffffffc7 (PmmC func) args[4] r=1  (not used)
gfx_IncX                             -72  0xffffffb8 (PmmC func) args[0] r=1  (not used)
gfx_IncY                             -73  0xffffffb7 (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_SELECTION                    60  0x0000003c (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
GFX_LEFT_GUTTER_WIDTH                 68  0x00000044 (const dword)  (not used)
gfx_Line                             -56  0xffffffc8 (PmmC func) args[5] r=0  (not used)
GFX_LINE_COUNT                        59  0x0000003b (const dword)  (not used)
gfx_LinePattern                     -101  0xffffff9b (PmmC func) args[1] r=1  (not used)
gfx_LineRel                          -55  0xffffffc9 (PmmC func) args[2] r=0  (not used)
gfx_LineTo                           -54  0xffffffca (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                          -53  0xffffffcb (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                           -52  0xffffffcc (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                     -93  0xffffffa3 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                            -67  0xffffffbd (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                        -66  0xffffffbe (PmmC func) args[2] r=0  (not used)
gfx_Origin                           -89  0xffffffa7 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                    -99  0xffffff9d (PmmC func) args[1] r=1  (not used)
gfx_Panel                            -81  0xffffffaf (PmmC func) args[6] r=0  (usage 3)
gfx_PenSize                          -91  0xffffffa5 (PmmC func) args[1] r=1  (not used)
GFX_PIXEL_SHIFT                       70  0x00000046 (const dword)  (not used)
gfx_Polygon                          -69  0xffffffbb (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                    -88  0xffffffa8 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                         -68  0xffffffbc (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                         -63  0xffffffc1 (PmmC func) args[3] r=0  (not used)
GFX_RECT_X1                           71  0x00000047 (const dword)  (not used)
GFX_RECT_X2                           73  0x00000049 (const dword)  (not used)
GFX_RECT_Y1                           72  0x00000048 (const dword)  (not used)
GFX_RECT_Y2                           74  0x0000004a (const dword)  (not used)
gfx_Rectangle                        -59  0xffffffc5 (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                  -60  0xffffffc4 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                         -84  0xffffffac (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
GFX_RIGHT_GUTTER_WIDTH                69  0x00000045 (const dword)  (not used)
gfx_ScreenCopyPaste                  -83  0xffffffad (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                       -98  0xffffff9e (PmmC func) args[1] r=1  (usage 3)
gfx_Selection                        -86  0xffffffaa (PmmC func) args[3] r=0  (not used)
gfx_Set                              -50  0xffffffce (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                    -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
gfx_Slider                           -82  0xffffffae (PmmC func) args[8] r=1  (not used)
GFX_STATUSBAR_HEIGHT                  67  0x00000043 (const dword)  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOOLBAR_HEIGHT                    66  0x00000042 (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                     -96  0xffffffa0 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour                -95  0xffffffa1 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                         -65  0xffffffbf (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                   -87  0xffffffa9 (PmmC func) args[7] r=0  (not used)
gfx_Vline                            -58  0xffffffc6 (PmmC func) args[4] r=1  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -105  0xffffff97 (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -106  0xffffff96 (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 4  0x00000004 (mem) word[36] (global)  (usage 123)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                              -214  0xffffff2a (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   2  0x00000002 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             148  0x00000094 (mem) word (global)  (usage 12)
I2C                                63520  0x0000f820 (const dword)  (not used)
I2C_Ack                             -169  0xffffff57 (PmmC func) args[0] r=0  (not used)
I2C_AckPoll                         -172  0xffffff54 (PmmC func) args[1] r=1  (not used)
I2C_AckStatus                       -171  0xffffff55 (PmmC func) args[0] r=0  (not used)
I2C_Close                           -163  0xffffff5d (PmmC func) args[0] r=0  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_Getn                            -175  0xffffff51 (PmmC func) args[2] r=1  (not used)
I2C_Gets                            -174  0xffffff52 (PmmC func) args[2] r=1  (not used)
I2C_Idle                            -173  0xffffff53 (PmmC func) args[0] r=0  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_Nack                            -170  0xffffff56 (PmmC func) args[0] r=0  (not used)
I2C_Open                            -162  0xffffff5e (PmmC func) args[1] r=0  (not used)
I2C_Putn                            -177  0xffffff4f (PmmC func) args[2] r=1  (not used)
I2C_Puts                            -176  0xffffff50 (PmmC func) args[1] r=1  (not used)
I2C_Read                            -167  0xffffff59 (PmmC func) args[0] r=1  (not used)
I2C_Restart                         -166  0xffffff5a (PmmC func) args[0] r=1  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I2C_Start                           -164  0xffffff5c (PmmC func) args[0] r=1  (not used)
I2C_Stop                            -165  0xffffff5b (PmmC func) args[0] r=1  (not used)
I2C_Write                           -168  0xffffff58 (PmmC func) args[1] r=1  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iDigits                                2  0x00000002 (const dword)  (usage 9)
iiLeddigits0                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits1                          38  0x00000026 (const ??? 0)  (not used)
iiLeddigits10                         70  0x00000046 (const ??? 0)  (not used)
iiLeddigits11                         76  0x0000004c (const ??? 0)  (not used)
iiLeddigits12                         78  0x0000004e (const ??? 0)  (not used)
iiLeddigits18                         90  0x0000005a (const ??? 0)  (not used)
iiLeddigits19                        102  0x00000066 (const ??? 0)  (not used)
iiLeddigits2                          40  0x00000028 (const ??? 0)  (not used)
iiLeddigits20                        110  0x0000006e (const ??? 0)  (not used)
iiLeddigits21                        116  0x00000074 (const ??? 0)  (not used)
iiLeddigits3                          60  0x0000003c (const ??? 0)  (not used)
iiLeddigits4                          51  0x00000033 (const ??? 0)  (not used)
iiLeddigits5                          53  0x00000035 (const ??? 0)  (not used)
iiLeddigits6                          62  0x0000003e (const ??? 0)  (not used)
iiLeddigits7                          64  0x00000040 (const ??? 0)  (not used)
iiLeddigits8                          66  0x00000042 (const ??? 0)  (not used)
iiLeddigits9                          68  0x00000044 (const ??? 0)  (not used)
iImage0                                0  0x00000000 (const ??? 0)  (usage 3)
iImage1                               16  0x00000010 (const ??? 0)  (usage 3)
iLeadingBlanks                         8  0x00000008 (const dword)  (usage 3)
iLeddigits0                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits1                           37  0x00000025 (const ??? 0)  (usage 3)
iLeddigits10                          69  0x00000045 (const ??? 0)  (usage 3)
iLeddigits11                          75  0x0000004b (const ??? 0)  (usage 3)
iLeddigits12                          77  0x0000004d (const ??? 0)  (usage 3)
iLeddigits18                          89  0x00000059 (const ??? 0)  (usage 3)
iLeddigits19                         101  0x00000065 (const ??? 0)  (usage 3)
iLeddigits2                           39  0x00000027 (const ??? 0)  (usage 3)
iLeddigits20                         109  0x0000006d (const ??? 0)  (usage 3)
iLeddigits21                         115  0x00000073 (const ??? 0)  (usage 3)
iLeddigits3                           59  0x0000003b (const ??? 0)  (usage 3)
iLeddigits4                           50  0x00000032 (const ??? 0)  (usage 3)
iLeddigits5                           52  0x00000034 (const ??? 0)  (usage 3)
iLeddigits6                           61  0x0000003d (const ??? 0)  (usage 3)
iLeddigits7                           63  0x0000003f (const ??? 0)  (usage 3)
iLeddigits8                           65  0x00000041 (const ??? 0)  (usage 3)
iLeddigits9                           67  0x00000043 (const ??? 0)  (usage 3)
ileft                                  0  0x00000000 (const dword)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -187  0xffffff45 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -181  0xffffff4b (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -180  0xffffff4c (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -179  0xffffff4d (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -184  0xffffff48 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -182  0xffffff4a (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SetAttributes                   -186  0xffffff46 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -178  0xffffff4e (PmmC func) args[4] r=1  (not used)
img_SetWord                         -183  0xffffff49 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -185  0xffffff47 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -188  0xffffff44 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
iMinDigits                             4  0x00000004 (const dword)  (usage 3)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
input                                228  0x000000e4 (mem) word (global)  (usage 27)
INPUT                                  1  0x00000001 (const dword)  (not used)
inputtype                            224  0x000000e0 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IO1_PIN                                1  0x00000001 (const dword)  (not used)
IO2_PIN                                2  0x00000002 (const dword)  (not used)
IO3_PIN                                3  0x00000003 (const dword)  (not used)
IO4_PIN                                4  0x00000004 (const dword)  (not used)
IO5_PIN                                5  0x00000005 (const dword)  (not used)
IPControls                           115  0x00000073IPControls                           115  0x00000073 (mem) word[144] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
IPD_DOWN                              16  0x00000010 (const dword)  (usage 6)
IPD_OBJVidx                           20  0x00000014 (const dword)  (usage 15)
IPD_P1                                 2  0x00000002 (const dword)  (usage 15)
IPD_P2                                 4  0x00000004 (const dword)  (usage 48)
IPD_P3                                 6  0x00000006 (const dword)  (usage 9)
IPD_P4                                 8  0x00000008 (const dword)  (usage 3)
IPD_P5                                10  0x0000000a (const dword)  (usage 6)
IPD_P6                                12  0x0000000c (const dword)  (usage 18)
IPD_P7                                14  0x0000000e (const dword)  (not used)
IPD_RELEASE                           18  0x00000012 (const dword)  (usage 9)
IPData                               403  0x00000193IPData                               403  0x00000193 (mem) word[1914] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                             -207  0xffffff31 (PmmC func) args[1] r=1  (not used)
isalpha                             -206  0xffffff32 (PmmC func) args[1] r=1  (not used)
isdigit                             -202  0xffffff36 (PmmC func) args[1] r=1  (not used)
islower                             -205  0xffffff33 (PmmC func) args[1] r=1  (not used)
isprint                             -208  0xffffff30 (PmmC func) args[1] r=1  (not used)
isspace                             -209  0xffffff2f (PmmC func) args[1] r=1  (not used)
iStatictext0                         134  0x00000086 (const ??? 0)  (usage 3)
iStatictext1                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext10                         71  0x00000047 (const ??? 0)  (usage 3)
iStatictext11                         72  0x00000048 (const ??? 0)  (usage 3)
iStatictext12                         73  0x00000049 (const ??? 0)  (usage 3)
iStatictext13                         74  0x0000004a (const ??? 0)  (usage 3)
iStatictext14                         79  0x0000004f (const ??? 0)  (usage 3)
iStatictext2                          42  0x0000002a (const ??? 0)  (usage 3)
iStatictext20                         94  0x0000005e (const ??? 0)  (usage 3)
iStatictext21                        103  0x00000067 (const ??? 0)  (usage 3)
iStatictext22                        111  0x0000006f (const ??? 0)  (usage 3)
iStatictext24                        136  0x00000088 (const ??? 0)  (usage 3)
iStatictext25                        137  0x00000089 (const ??? 0)  (usage 3)
iStatictext26                        138  0x0000008a (const ??? 0)  (usage 3)
iStatictext27                        139  0x0000008b (const ??? 0)  (usage 3)
iStatictext3                           1  0x00000001 (const ??? 0)  (usage 3)
iStatictext4                          43  0x0000002b (const ??? 0)  (usage 3)
iStatictext5                          56  0x00000038 (const ??? 0)  (usage 3)
iStatictext6                          49  0x00000031 (const ??? 0)  (usage 3)
iStatictext7                          54  0x00000036 (const ??? 0)  (usage 3)
iStatictext8                          57  0x00000039 (const ??? 0)  (usage 3)
iStatictext9                          58  0x0000003a (const ??? 0)  (usage 3)
iStrings0                           4231  0x00001087iStrings0                           4231  0x00001087 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           4257  0x000010a1iStrings1                           4257  0x000010a1 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          4491  0x0000118biStrings10                          4491  0x0000118b (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          4517  0x000011a5iStrings11                          4517  0x000011a5 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          4543  0x000011bfiStrings12                          4543  0x000011bf (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          4569  0x000011d9iStrings13                          4569  0x000011d9 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          4595  0x000011f3iStrings14                          4595  0x000011f3 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          4621  0x0000120diStrings15                          4621  0x0000120d (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          4647  0x00001227iStrings16                          4647  0x00001227 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          4673  0x00001241iStrings17                          4673  0x00001241 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          4699  0x0000125biStrings18                          4699  0x0000125b (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          4725  0x00001275iStrings19                          4725  0x00001275 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           4283  0x000010bbiStrings2                           4283  0x000010bb (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          4751  0x0000128fiStrings20                          4751  0x0000128f (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          4777  0x000012a9iStrings21                          4777  0x000012a9 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          4803  0x000012c3iStrings22                          4803  0x000012c3 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          4829  0x000012ddiStrings23                          4829  0x000012dd (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          4855  0x000012f7iStrings24                          4855  0x000012f7 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          4881  0x00001311iStrings25                          4881  0x00001311 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          4907  0x0000132biStrings26                          4907  0x0000132b (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          4933  0x00001345iStrings27                          4933  0x00001345 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          4959  0x0000135fiStrings28                          4959  0x0000135f (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          4985  0x00001379iStrings29                          4985  0x00001379 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           4309  0x000010d5iStrings3                           4309  0x000010d5 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          5011  0x00001393iStrings30                          5011  0x00001393 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          5037  0x000013adiStrings31                          5037  0x000013ad (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          5063  0x000013c7iStrings32                          5063  0x000013c7 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          5089  0x000013e1iStrings33                          5089  0x000013e1 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          5115  0x000013fbiStrings35                          5115  0x000013fb (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           4335  0x000010efiStrings4                           4335  0x000010ef (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           4361  0x00001109iStrings5                           4361  0x00001109 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           4387  0x00001123iStrings6                           4387  0x00001123 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           4413  0x0000113diStrings7                           4413  0x0000113d (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           4439  0x00001157iStrings8                           4439  0x00001157 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           4465  0x00001171iStrings9                           4465  0x00001171 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                             -204  0xffffff34 (PmmC func) args[1] r=1  (not used)
iswhite                             -210  0xffffff2e (PmmC func) args[1] r=1  (not used)
isxdigit                            -203  0xffffff35 (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -198  0xffffff3a (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton11                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton14                          6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton16                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton17                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton18                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton19                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                        143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton23                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton24                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton25                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton26                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton27                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton28                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton29                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton3                          34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton30                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton31                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton32                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton33                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton34                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton35                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton36                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton37                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton38                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton39                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton4                           4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton40                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton41                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton42                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton43                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton44                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton45                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton46                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton47                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton48                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton49                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton5                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton52                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton53                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton54                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton55                        125  0x0000007d (const ??? 0)  (usage 3)
iUserbutton56                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton57                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton58                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton59                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton6                          10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton60                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton63                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton64                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton65                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton66                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton67                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton68                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton69                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton7                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton70                        140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton71                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton74                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton75                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton76                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton77                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton8                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton9                          13  0x0000000d (const ??? 0)  (usage 3)
iUserimages0                           7  0x00000007 (const ??? 0)  (usage 3)
iUserimages1                         118  0x00000076 (const ??? 0)  (usage 3)
iUserimages2                         124  0x0000007c (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWidthDigit                            6  0x00000006 (const dword)  (usage 3)
iWinbutton0                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton1                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton2                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton3                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton4                           31  0x0000001f (const ??? 0)  (usage 3)
iWinbutton5                           45  0x0000002d (const ??? 0)  (usage 3)
iWinbutton6                           46  0x0000002e (const ??? 0)  (usage 3)
iWinbutton7                           32  0x00000020 (const ??? 0)  (usage 3)
iWinbutton8                           33  0x00000021 (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 5675  0x0000162bkKeyboardKeystrokes                 5675  0x0000162b (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                    8991  0x0000231f (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                              -213  0xffffff2b (PmmC func) args[1] r=1  (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                6098  0x000017d2 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -15  0xfffffff1 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
MEDIA_ADDRESS_MW                      92  0x0000005c (const dword)  (not used)
MEDIA_ADDRESS_UW                      93  0x0000005d (const dword)  (not used)
media_Flush                         -118  0xffffff8a (PmmC func) args[0] r=1  (not used)
media_Image                         -117  0xffffff8b (PmmC func) args[2] r=0  (not used)
media_Init                          -119  0xffffff89 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -111  0xffffff91 (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -113  0xffffff8f (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -114  0xffffff8e (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                      124  0x0000007c (const dword)  (not used)
MEDIA_SECTOR_LO                      123  0x0000007b (const dword)  (not used)
media_SetAdd                        -109  0xffffff93 (PmmC func) args[2] r=0  (not used)
media_SetSector                     -110  0xffffff92 (PmmC func) args[2] r=0  (not used)
media_Video                         -107  0xffffff95 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -108  0xffffff94 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -115  0xffffff8d (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
media_WrSector                      -112  0xffffff90 (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -217  0xffffff27 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -218  0xffffff26 (PmmC func) args[1] r=1  (not used)
mem_Compare                         -224  0xffffff20 (PmmC func) args[3] r=1  (not used)
mem_Copy                            -223  0xffffff21 (PmmC func) args[3] r=1  (not used)
mem_Free                            -220  0xffffff24 (PmmC func) args[1] r=1  (not used)
mem_Heap                            -221  0xffffff23 (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -219  0xffffff25 (PmmC func) args[2] r=1  (not used)
mem_Set                             -222  0xffffff22 (PmmC func) args[3] r=1  (not used)
MEMORY_ACCESS_CONTROL                 22  0x00000016 (const dword)  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -14  0xfffffff2 (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 24)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              174  0x000000ae (const dword)  (usage 3)
nObjects                             144  0x00000090 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
o4Dbuttons                          5451  0x0000154bo4Dbuttons                          5451  0x0000154b (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      5173  0x00001435oAngularmeters                      5173  0x00001435 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         5453  0x0000154doAniButtons                         5453  0x0000154d (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
object                               230  0x000000e6 (mem) word (global)  (usage 18)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       5455  0x0000154foColorPickers                       5455  0x0000154f (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         5175  0x00001437oCoolgauges                         5175  0x00001437 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ocs                                  474  0x000001da (mem) word (global)  (usage 9)
oCustomdigitss                      5177  0x00001439oCustomdigitss                      5177  0x00001439 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         5141  0x00001415oDipSwitchs                         5141  0x00001415 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              5179  0x0000143boForms                              5179  0x0000143b (mem) word[28] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGauges                             5235  0x00001473oGauges                             5235  0x00001473 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           5149  0x0000141doGSliders                           5149  0x0000141d (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             5237  0x00001475oImages                             5237  0x00001475 (mem) word[3] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          5243  0x0000147boKeyboards                          5243  0x0000147b (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              5143  0x00001417oKnobs                              5143  0x00001417 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                         5247  0x0000147foLeddigitss                         5247  0x0000147f (mem) word[23] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               5245  0x0000147doLeds                               5245  0x0000147d (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             5293  0x000014adoMeters                             5293  0x000014ad (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             150  0x00000096 (mem) word[34] (global)  (usage 108)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
OPDataL                             5677  0x0000162dOPDataL                             5677  0x0000162d (mem) word[110] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oPinInputs                          5449  0x00001549oPinInputs                          5449  0x00001549 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         5619  0x000015f3oPinOutputs                         5619  0x000015f3 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      5145  0x00001419oRockerSwitchs                      5145  0x00001419 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      5147  0x0000141boRotarySwitchs                      5147  0x0000141b (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OSC_CONTROL_1                         25  0x00000019 (const dword)  (not used)
OSC_CONTROL_3                        147  0x00000093 (const dword)  (not used)
oScopes                             5437  0x0000153doScopes                             5437  0x0000153d (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            5617  0x000015f1oSoundss                            5617  0x000015f1 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          5435  0x0000153boSpectrums                          5435  0x0000153b (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        5377  0x00001501oStaticTexts                        5377  0x00001501 (mem) word[29] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           5295  0x000014afoStringss                           5295  0x000014af (mem) word[37] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 93)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 189)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              5439  0x0000153foTanks                              5439  0x0000153f (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       5369  0x000014f9oThermometers                       5369  0x000014f9 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             5615  0x000015efoTimers                             5615  0x000015ef (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          5151  0x0000141foTrackbars                          5151  0x0000141f (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        5457  0x00001551oUserButtons                        5457  0x00001551 (mem) word[79] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        5441  0x00001541oUserImagess                        5441  0x00001541 (mem) word[4] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           5371  0x000014fboUserleds                           5371  0x000014fb (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OUTPUT                                 0  0x00000000 (const dword)  (not used)
OVF                                  -21  0xffffffeb (PmmC func) args[0] r=1  (usage 3)
oVideos                             5373  0x000014fdoVideos                             5373  0x000014fd (mem) word[2] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oWinButtons                         5153  0x00001421oWinButtons                         5153  0x00001421 (mem) word[10] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (usage 3)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PICASO                                 1  0x00000001 (const dword)  (usage 3)
PICASO_FUNCTIONS                       0  0x00000000 (const ??? 0)  (not used)
pin_HI                               -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
pin_LO                               -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
pin_Read                             -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
pin_Set                              -41  0xffffffd7 (PmmC func) args[2] r=1  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -12  0xfffffff4 (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
POWER_CONTROL_1                       27  0x0000001b (const dword)  (not used)
POWER_CONTROL_2                       28  0x0000001c (const dword)  (not used)
POWER_CONTROL_3                       29  0x0000001d (const dword)  (not used)
POWER_CONTROL_4                       30  0x0000001e (const dword)  (not used)
POWER_CONTROL_5                       31  0x0000001f (const dword)  (not used)
POWER_CONTROL_6                       32  0x00000020 (const dword)  (not used)
PrintStrings                       10113  0x00002781 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 3)
RAND                                 -19  0xffffffed (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
READ_WRITE_DATA                       34  0x00000022 (const dword)  (not used)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                          9859  0x00002683 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
reserved                            -294  0xfffffeda (PmmC func) args[0] r=0  (not used)
RGBINT_CONTROL_1                      56  0x00000038 (const dword)  (not used)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROW_ADDRESS_END1                       9  0x00000009 (const dword)  (not used)
ROW_ADDRESS_END2                       8  0x00000008 (const dword)  (not used)
ROW_ADDRESS_START1                     7  0x00000007 (const dword)  (not used)
ROW_ADDRESS_START2                     6  0x00000006 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (usage 3)
RXMODE_0                               0  0x00000000 (const dword)  (not used)
RXMODE_1                               1  0x00000001 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -20  0xffffffec (PmmC func) args[1] r=0  (not used)
SELECT                                 3  0x00000003 (const dword)  (not used)
SELECT_MULTIPLE                        4  0x00000004 (const dword)  (not used)
serin                                 -1  0xffffffff (PmmC func) args[0] r=1  (usage 3)
serin1                              -140  0xffffff74 (PmmC func) args[0] r=1  (not used)
serout                                -3  0xfffffffd (PmmC func) args[1] r=0  (usage 42)
serout1                             -141  0xffffff73 (PmmC func) args[1] r=0  (not used)
seroutCS                           10095  0x0000276f (User func) args[1] r=0  (usage 30)
seroutOcs                          10080  0x00002760 (User func) args[0] r=0  (usage 6)
setbaud                               -4  0xfffffffc (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -17  0xffffffef (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -258  0xfffffefe (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -261  0xfffffefb (PmmC func) args[0] r=0  (not used)
snd_Pause                           -260  0xfffffefc (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -257  0xfffffeff (PmmC func) args[1] r=1  (not used)
snd_Playing                         -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
snd_Stop                            -259  0xfffffefd (PmmC func) args[0] r=0  (not used)
snd_Volume                          -256  0xffffff00 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
spi_Disable                         -153  0xffffff67 (PmmC func) args[0] r=0  (not used)
SPI_FAST                               0  0x00000000 (const dword)  (not used)
spi_Init                            -150  0xffffff6a (PmmC func) args[3] r=0  (not used)
SPI_MED                                1  0x00000001 (const dword)  (not used)
spi_Read                            -151  0xffffff69 (PmmC func) args[0] r=1  (not used)
SPI_SLOW                               2  0x00000002 (const dword)  (not used)
spi_Write                           -152  0xffffff68 (PmmC func) args[1] r=0  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -22  0xffffffea (PmmC func) args[1] r=1  (not used)
STAnsi                                22  0x00000016 (const dword)  (usage 3)
STBGColor                             16  0x00000010 (const dword)  (usage 6)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STFGColor                             14  0x0000000e (const dword)  (usage 3)
STFontAttribs                         18  0x00000012 (const dword)  (usage 3)
STForm                                24  0x00000018 (const dword)  (usage 3)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
str_Cat                             -278  0xfffffeea (PmmC func) args[2] r=1  (not used)
str_CatN                            -279  0xfffffee9 (PmmC func) args[3] r=1  (not used)
str_Copy                            -287  0xfffffee1 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -288  0xfffffee0 (PmmC func) args[3] r=1  (not used)
str_Find                            -274  0xfffffeee (PmmC func) args[2] r=1  (not used)
str_FindI                           -275  0xfffffeed (PmmC func) args[2] r=1  (not used)
str_GetByte                         -268  0xfffffef4 (PmmC func) args[1] r=1  (not used)
str_GetC                            -267  0xfffffef5 (PmmC func) args[2] r=1  (not used)
str_GetD                            -264  0xfffffef8 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -266  0xfffffef6 (PmmC func) args[2] r=1  (not used)
str_GetW                            -265  0xfffffef7 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -269  0xfffffef3 (PmmC func) args[1] r=1  (not used)
str_Length                          -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
str_Match                           -272  0xfffffef0 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -273  0xfffffeef (PmmC func) args[2] r=1  (not used)
str_Printf                          -277  0xfffffeeb (PmmC func) args[2] r=1  (not used)
str_Ptr                             -263  0xfffffef9 (PmmC func) args[1] r=1  (not used)
str_PutByte                         -270  0xfffffef2 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -271  0xfffffef1 (PmmC func) args[2] r=0  (not used)
strheight                           -161  0xffffff5f (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                          28  0x0000001c (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                         0  0x00000000 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         15  0x0000000f (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         19  0x00000013 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                         25  0x00000019 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                     1536  0x00000600 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings16Count                         1  0x00000001 (const dword)  (not used)
Strings16Size                         31  0x0000001f (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         33  0x00000021 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         32  0x00000020 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         29  0x0000001d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         25  0x00000019 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         25  0x00000019 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         16  0x00000010 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         32  0x00000020 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         32  0x00000020 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      4096  0x00001000 (const dword)  (usage 3)
Strings30Count                         0  0x00000000 (const dword)  (not used)
Strings30Size                          1  0x00000001 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings31Count                         0  0x00000000 (const dword)  (not used)
Strings31Size                          1  0x00000001 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings32Count                         0  0x00000000 (const dword)  (not used)
Strings32Size                          1  0x00000001 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         10  0x0000000a (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings34Size                          0  0x00000000 (const dword)  (not used)
Strings34StartH                        0  0x00000000 (const dword)  (not used)
Strings34StartL                        0  0x00000000 (const dword)  (not used)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         26  0x0000001a (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          27  0x0000001b (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     13312  0x00003400 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          26  0x0000001a (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      3584  0x00000e00 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      4608  0x00001200 (const dword)  (usage 3)
Strings8Count                          1  0x00000001 (const dword)  (not used)
Strings8Size                          25  0x00000019 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      5120  0x00001400 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                          25  0x00000019 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      2048  0x00000800 (const dword)  (usage 3)
stringsCV                             76  0x0000004c (mem) word[36] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                            -160  0xffffff60 (PmmC func) args[1] r=1  (not used)
STSize                                 4  0x00000004 (const dword)  (usage 3)
STStartH                               0  0x00000000 (const dword)  (usage 3)
STStartL                               2  0x00000002 (const dword)  (usage 3)
STTransparent                         20  0x00000014 (const dword)  (usage 3)
STx1                                   6  0x00000006 (const dword)  (usage 12)
STx2                                  10  0x0000000a (const dword)  (usage 9)
STy1                                   8  0x00000008 (const dword)  (usage 12)
STy2                                  12  0x0000000c (const dword)  (usage 9)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -295  0xfffffed9 (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -194  0xffffff3e (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -195  0xffffff3d (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -196  0xffffff3c (PmmC func) args[0] r=0  (usage 3)
sys_GetTimer                        -192  0xffffff40 (PmmC func) args[1] r=1  (not used)
sys_SetTimer                        -191  0xffffff41 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -193  0xffffff3f (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -280  0xfffffee8 (PmmC func) args[0] r=1  (not used)
sys_T                               -189  0xffffff43 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -190  0xffffff42 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -5  0xfffffffb (PmmC func) args[1] r=1  (not used)
tolower                             -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -199  0xffffff39 (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -201  0xffffff37 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -200  0xffffff38 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
toupper                             -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
translate                             -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
TState                               226  0x000000e2 (mem) word (global)  (usage 24)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                      9305  0x00002459 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 234)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Attributes                       -38  0xffffffda (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -34  0xffffffde (PmmC func) args[1] r=1  (not used)
txt_Delay                            -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -25  0xffffffe7 (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontID                           -27  0xffffffe5 (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
txt_Italic                           -35  0xffffffdd (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -23  0xffffffe9 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -33  0xffffffdf (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -24  0xffffffe8 (PmmC func) args[2] r=0  (not used)
txt_Underline                        -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
txt_Width                            -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
uadd_3232                           -290  0xfffffede (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                           -292  0xfffffedc (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
ULCD_32PT_GFX                          0  0x00000000 (const ??? 0)  (not used)
umul_1616                           -289  0xfffffedf (PmmC func) args[3] r=1  (usage 3)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                        -281  0xfffffee7 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                       8002  0x00001f42 (User func) args[1] r=0  (usage 3)
USER_INITIALIZED_DISPLAY              32  0x00000020 (const dword)  (not used)
usub_3232                           -291  0xfffffedd (PmmC func) args[3] r=1  (not used)
VCOM_CONTROL_1                        67  0x00000043 (const dword)  (not used)
VCOM_CONTROL_2                        68  0x00000044 (const dword)  (not used)
VCOM_CONTROL_3                        69  0x00000045 (const dword)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (usage 3)
WHITE                              65535  0x0000ffff (const dword)  (usage 99)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 3)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 3)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                         9504  0x00002520 (User func) args[3] r=0  (usage 24)
x                                    220  0x000000dc (mem) word (global)  (usage 12)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
y                                    222  0x000000de (mem) word (global)  (usage 9)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
