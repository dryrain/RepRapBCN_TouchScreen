file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS

file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\uLCD-32PTU.fnc

000001  000001  #platform "uLCD-32PTU"
000002  000001  #platform "uLCD-32PTU"
000003  000008  */
000004  000009      #constant ULCD_32PT_GFX
000005  000009      #constant ULCD_32PT_GFX
000006  000010        
000007  000011      #IFNOT EXISTS PICASO_FUNCTIONS
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\PicasoFunctions.fnc

000008  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000009  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for PicasoGFX2 platforms
000012  000003        
000013  000004  #constant PICASO_FUNCTIONS
000014  000004  #constant PICASO_FUNCTIONS
000015  000005        
000016  000006        
000017  000007  #CONST
000018  000017  #END
000019  000018        
000020  000019  #CONST
000021  000025  #END
000022  000026        
000023  000027        
000024  000028  #CONST
000025  000040  #END
000026  000041        
000027  000042        
000028  000043  #CONST
000029  000208  #END
000030  000209        
000031  000210        
000032  000211  // baud divisor rates for setbaud(n);
000033  000212  #CONST
000034  000234  #END
000035  000235        
000036  000236        
000037  000237        
000038  000238        
000039  000243  */
000040  000244        
000041  000245        
000042  000246  //==============================================//
000043  000247  // EVE bios functions                           //
000044  000248  //==============================================//
000045  000249                                                  //
000046  000250  func serin(), 1;                // read a byte from COM0
000047  000251  // Syntax: serin();
000048  000252  // Usage : char := serin();
000049  000253  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
000050  000254  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000051  000255  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000052  000256  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000053  000257  //     : Returns: -1 if no character is available
000054  000258  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
000055  000259  //     : Returns: positive value 0 to 255 for a valid character received
000056  000260        
000057  000261  func putch("char"), 0;                // write single char to current output device
000058  000262  // Syntax: putch("char");
000059  000263  // Usage : putch("A");
000060  000264  // Notes : Transmits a single byte from the Serial Port COM0. The transmission format is:
000061  000265  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000062  000266  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000063  000267  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000064  000268  //     : The arguments can be a variable, array element, expression or constant
000065  000269        
000066  000270  func serout("char"), 0;                // write a byte to COM0
000067  000271  // Syntax: serout1("char");
000068  000272  // Usage : serout1(ch);
000069  000273  // Notes : send character to COM1
000070  000274        
000071  000275  func setbaud("baudnum"), 0;            // set baud rate of COM0
000072  000276  // Syntax: setbaud(baud_number);
000073  000277  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
000074  000278  // *Notes : argument specifies the baud rate using pre-defined constant.
000075  000279  //       : The pre-defined constant is a value of 0-19 , and internally
000076  000280  //       : this is used as a table pointer to get the baud rate divisor
000077  000281  //       : value for one of the 20 selected baud rates, control is then
000078  000282  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
000079  000283  //       : The pre-defined constants equate to a value of 0-19.
000080  000284  //       : If a value other than 0-19 is used, a run time error (eror 25)
000081  000285  //       : will occur.
000082  000286        
000083  000287  func to("device"), 1;                // output device redirection
000084  000288  // Syntax: to(outstream);
000085  000289  // Usage : to(APPEND); putstr("TWO ");
000086  000290  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000087  000291  //     :
000088  000292  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000089  000293  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000090  000294  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000091  000295  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000092  000296  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000093  000297  //     : completed its action. The APPEND argument is used to send the printed output to the same
000094  000298  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000095  000299  //     : sequential data to a media stream.
000096  000300  //     :
000097  000301  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000098  000302  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000099  000303  //     :                            appended to user memory if previous redirection was to an array.
000100  000304  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000101  000305  //     : TEXT           0xFF08      Output is directed to the screen (default).
000102  000306  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000103  000307  //     : I2C            0xF820      Output is directed to the I2C port.
000104  000308  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000105  000309        
000106  000310        
000107  000311  func pause("milliseconds"), 0;            // blocking delay
000108  000312  // Syntax: pause(milliseconds);
000109  000313  // Usage : pause(1000);                //pause for 1 second
000110  000314  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000111  000315        
000112  000316  func putnum("arg1","arg2"), 1;            // print number to current output device
000113  000317  // Syntax: putnum(format, value);
000114  000318  // Usage : var := putnum(HEX, val);
000115  000319  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000116  000320  //     : Format: A constant that specifies the number format
000117  000321  //     : Value : The number to be printed
000118  000322  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000119  000323  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000120  000324  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000121  000325  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000122  000326  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000123  000327  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000124  000328  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000125  000329  //     :                                     BIN6     BIN6Z     BIN6ZB
000126  000330  //     :                                     BIN7     BIN7Z     BIN7ZB
000127  000331  //     :                                     BIN8     BIN8Z     BIN8ZB
000128  000332  //     :                                     BIN9     BIN9Z     BIN9ZB
000129  000333  //     :                                     BIN10     BIN10Z     BIN10ZB
000130  000334  //     :                                     BIN11     BIN11Z     BIN11ZB
000131  000335  //     :                                     BIN12     BIN12Z     BIN12ZB
000132  000336  //     :                                     BIN13     BIN13Z     BIN13ZB
000133  000337  //     :                                     BIN14     BIN14Z     BIN14ZB
000134  000338  //     :                                     BIN15     BIN15Z     BIN15ZB
000135  000339  //     :                                     BIN16     BIN16Z     BIN16ZB
000136  000340  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000137  000341  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000138  000342  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000139  000343  //     : | | | | V V V
000140  000344  //     : | | | | | | |
000141  000345  //     : | | | | | |
000142  000346  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000143  000347  //     : | | | | digit count |
000144  000348  //     : | | | | |___reserved (not used on GOLDELOX)
000145  000349  //     : | | | |
000146  000350  //     : | | | |
000147  000351  //     : | | | |
000148  000352  //     : | | | |
000149  000353  //     : | | | |
000150  000354  //     : | | | |______ 1 = leading zeros included
000151  000355  //     : | | | 0 = leading zeros suppressed
000152  000356  //     : | | |
000153  000357  //     : | | |
000154  000358  //     : | | |_______ 1 = leading zero blanking
000155  000359  //     : | |
000156  000360  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000157  000361  //     : |
000158  000362  //     : |______ 1 = space before unsigned number
000159  000363        
000160  000364        
000161  000365  func translate("arg1","arg2","arg3","arg4"), 1; // list translator (internal use only, not usable)
000162  000366        
000163  000367  func putstr("string"), 1;                       // print string to current output device
000164  000368  // Syntax: putstr(pointer);
000165  000369  // Usage : putstr("HELLO\n");
000166  000370  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000167  000371  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000168  000372  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000169  000373  //       : The output of putstr can be redirected to the communications port, the media, or memory
000170  000374  //       : using the to(...); function.
000171  000375  //       : A string constant is automatically terminated with a zero.
000172  000376  //       : A string in a data statement is not automatically terminated with a zero.
000173  000377  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000174  000378  //       : element packs 1 or 2 characters.
000175  000379        
000176  000380        
000177  000381  func strlen("varAddress"), 1;                   // return length of a var packed string in character units
000178  000382  // Syntax: strlen("varAddress);
000179  000383  // Usage : strlen("HELLO\n");
000180  000384  // Notes : gives the length of a string that is packed into regular var array
000181  000385  //       : Use str_Length(ptr)  for string pointer mode
000182  000386        
000183  000387        
000184  000388  //==============================================//
000185  000389  // Memory Access Function Prototypes            //
000186  000390  //==============================================//
000187  000391                                                  //
000188  000392  func peekW("address"), 1;                       // read a word from system memory
000189  000393  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000190  000394  // refer to address map of internal variables   //
000191  000395  //==============================================//
000192  000396  // Math Functions                               //
000193  000397  //==============================================//
000194  000398                                                  //
000195  000399  func ABS("value"), 1;                           // return a positive number
000196  000400  // Syntax: ABS(value);
000197  000401  // Usage : var := ABS(arg);
000198  000402  // Notes : Returns the absolute value of an argument
000199  000403        
000200  000404  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000201  000405  // Syntax: MIN(value1, value2);
000202  000406  // Usage : var := MIN(arg1, arg2);
000203  000407  // Notes : Returns the minimum of 2 arguments
000204  000408        
000205  000409  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000206  000410  // Syntax: MAX(value1, value2);
000207  000411  // Usage : var := MAX(arg1, arg2);
000208  000412  // Notes : Returns the maximum of 2 arguments
000209  000413        
000210  000414  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000211  000415  // Syntax: SWAP(&var1, &var2);
000212  000416  // Usage : SWAP(&var1, &var2);
000213  000417  // Notes : Swaps the contents of 2 variables or memory locations
000214  000418        
000215  000419  func SIN("angle"), 1;                           // return SIN of angle
000216  000420  // Syntax: SIN(angle);
000217  000421  // Usage : var := SIN(arg);
000218  000422  // Notes : Returns the sine in radians of an argument in degrees
000219  000423  //       : the returned value range is from 127 to -127. The real
000220  000424  //       : cosine values vary from 1.0 to -1.0 so appropriate
000221  000425  //       : scaling must be done in user code.
000222  000426        
000223  000427  func COS("angle"), 1;                           // return COS of angle
000224  000428  // Syntax: COS(angle);
000225  000429  // Usage : var := COS(arg);
000226  000430  // Notes : Returns the cosine in radians of an argument in degrees
000227  000431  //       : the returned value range is from 127 to -127. The real
000228  000432  //       : cosine values vary from 1.0 to -1.0 so appropriate
000229  000433  //       : scaling must be done in user code.
000230  000434        
000231  000435  func RAND(), 1;                                 // return a pseudo random number
000232  000436  // Syntax: RAND();
000233  000437  // Usage : var := RAND();
000234  000438  // Notes : Returns a random number between 0 and 0xFFFF.
000235  000439  //       : The random number generator must first be seeded
000236  000440  //       : by using the SEED(number) function.
000237  000441        
000238  000442  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000239  000443  // Syntax: SEED(number);
000240  000444  // Usage : SEED(arg);
000241  000445  // Notes : Seeds the random number generator.
000242  000446        
000243  000447  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000244  000448  // Syntax: OVF();
000245  000449  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000246  000450  //       : hiWord := OVF();
000247  000451  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000248  000452        
000249  000453  func SQRT("number"), 1;                         // return square root of a number
000250  000454  // Syntax: SQRT(number);
000251  000455  // Usage : SQRT(arg);
000252  000456  // Notes : Returns the integer square root of a number.
000253  000457  //------------------------------------------------------------------//
000254  000458  //          Text Related Function Prototypes
000255  000459  //------------------------------------------------------------------//
000256  000460        
000257  000461  func txt_MoveCursor("line", "column"), 0;
000258  000462  // Syntax: txt_SetCursor(line, column);
000259  000463  // Usage : txt_SetCursor(arg1, arg2);
000260  000464  // Notes : Moves the text Cursor to a new screen position set by
000261  000465  //       : line,column parameters.
000262  000466        
000263  000467  func txt_Set("mode", "value"), 0;
000264  000468  // Syntax: txt_Set(mode, value);
000265  000469  // Usage : txt_Set(arg1, arg2);
000266  000470  // Returns : Original value before the change
000267  000471  // Notes : Sets various text related parameters used by other functions
000268  000472  //       : This allows the features to be set programatically with a
000269  000473  //       : single function call.It is strongly recommended to use the
000270  000474  //       : pre-defined constants rather than the mode numbers.
000271  000475  //       : NB:- Although it is often required to be able to set text
000272  000476  //       : functions with a single function call for graphics engine
000273  000477  //       : related functions, there is a complete set of single parameter
000274  000478  //       : shortcut functions that have exactly the same function as
000275  000479  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000276  000480  //       :
000277  000481  //       : mode = TEXT_COLOUR (mode 0)
000278  000482  //       : txt_Set(TEXT_COLOUR, value);
000279  000483  //       : value = 0 to 0xFFFF, Black to White
000280  000484  //       : Sets the Text colour for the display
000281  000485  //       : Default = LIME.
000282  000486  //       :
000283  000487  //       : mode = TEXT_HIGHLIGHT (mode 1)
000284  000488  //       : txt_Set(TEXT_HIGHLIGHT, value);
000285  000489  //       : value = 0 to 0xFFFF, Black to White
000286  000490  //       : Sets the Text background colour for the display. Effective
000287  000491  //       : when text mode is Opaque.
000288  000492  //       : Default = BLACK.
000289  000493  //       :
000290  000494  //       : mode = FONT_ID (mode 2)
000291  000495  //       : txt_Set(FONT_ID, value);
000292  000496  //       : value = FONT1, FONT2 or FONT3 for internal fonts
000293  000497  //       : else this value is the name of a font included
000294  000498  //       : in a users program in a data statement.
000295  000499  //       : Default = FONT SIZE 3.
000296  000500  //       :
000297  000501  //       : mode = TEXT_WIDTH  (mode 3)
000298  000502  //       : txt_Set(TEXT_WIDTH, value);
000299  000503  //       : value = 1 to 16
000300  000504  //       : Sets the Text Width multiplier
000301  000505  //       : text will be printed magnified horizontally
000302  000506  //       : by this factor, Default = 1.
000303  000507  //       :
000304  000508  //       : mode = TEXT_HEIGHT  (mode 4)
000305  000509  //       : txt_Set(TEXT_HEIGHT, value);
000306  000510  //       : value = 1 to 16
000307  000511  //       : Sets the Text Height multiplier
000308  000512  //       : text will be printed magnified vertically
000309  000513  //       : by this factor, Default = 1.
000310  000514  //       :
000311  000515  //       : mode = TEXT_XGAP  (mode 5)
000312  000516  //       : txt_Set(TEXT_XGAP, value);
000313  000517  //       : value = 1 to 32
000314  000518  //       : Sets the horizontal gap between characters
000315  000519  //       : The gap is in pixel units, Default = 0
000316  000520  //       :
000317  000521  //       : mode = TEXT_YGAP  (mode 6)
000318  000522  //       : txt_Set(TEXT_YGAP, value);
000319  000523  //       : value = 1 to 32
000320  000524  //       : Sets the vertical gap below characters
000321  000525  //       : The gap is in pixel units, Default = 0
000322  000526  //       :
000323  000527  //       : mode = TEXT_PRINTDELAY  (mode 7) DEPRECATED
000324  000528  //       : txt_Set(TEXT_PRINTDELAY, value);
000325  000529  //       : value = 0 to 255
000326  000530  //       : Sets the delay time (in ms) during character
000327  000531  //       : printing to give a 'teletype' like effect.
000328  000532  //       : Often used to attract attention to a string
000329  000533  //       : being printed which can often be missed if
000330  000534  //       : just suddenly appearing or changing.
000331  000535  //       : Default = 0 ms.
000332  000536  //       :
000333  000537  //       : mode = TEXT_OPACITY (mode 8)
000334  000538  //       : txt_Set(TEXT_OPACITY, value);
000335  000539  //       : value = TRANSPARENT (0) = Text Trasparent
000336  000540  //       : value = OPAQUE (1) = Text Opaque
000337  000541  //       : Sets the Opacity/Transparency of the text
000338  000542  //       : Default = 0 or TRANSPARENT
000339  000543  //       :
000340  000544  //       : mode = TEXT_BOLD (mode 9)
000341  000545  //       : txt_Set(TEXT_BOLD, value);
000342  000546  //       : value = dont care
000343  000547  //       : Sets Bold Text mode for the next string or char
000344  000548  //       : The feature automatically resets after printing
000345  000549  //       : using putstr or print has completed
000346  000550  //       :
000347  000551  //       : mode = TEXT_ITALIC (mode 10)
000348  000552  //       : txt_Set(TEXT_ITALIC, value);
000349  000553  //       : value = dont care
000350  000554  //       : Sets Italic Text mode for the next string or char
000351  000555  //       : The feature automatically resets after printing
000352  000556  //       : using putstr or print has completed
000353  000557        
000354  000558  //       : mode = TEXT_INVERSE (mode 11)
000355  000559  //       : txt_Set(TEXT_INVERSE, value);
000356  000560  //       : value = dont care
000357  000561  //       : Sets Inverse Text mode for the next string or char
000358  000562  //       : The feature automatically resets after printing
000359  000563  //       : using putstr or print has completed
000360  000564  //       :
000361  000565  //       : mode = TEXT_UNDERLINED (mode 12)
000362  000566  //       : txt_Set(TEXT_UNDERLINED, value);
000363  000567  //       : value = dont care
000364  000568  //       : Sets Underlined Text mode for the next string or char
000365  000569  //       : The feature automatically resets after printing
000366  000570  //       : using putstr or print has completed
000367  000571  //       :
000368  000572  //       : mode = TEXT_ATTRIBUTES (mode 13)
000369  000573  //       : txt_Set(TEXT_ATTRIBUTES, value);
000370  000574  //       : value = bits are defined as:
000371  000575  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000372  000576  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000373  000577  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000374  000578  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000375  000579  //       : Allows a combination of text attributes to be defined together
000376  000580  //       : by 'or'ing the bits together.
000377  000581  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000378  000582  //       : The feature automatically resets after printing
000379  000583  //       : using putstr or print has completed.
000380  000584  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000381  000585  //       :
000382  000586  //       : mode = TEXT_WRAP (mode 14)
000383  000587  //       : txt_Set(TEXT_WRAP , value);
000384  000588  //       : Sets the position where text wrap will occur
000385  000589  //       : The feature automatically resets when screen
000386  000590  //       : mode is changed. If the value is set to 0,
000387  000591  //       : text wrap is turned off.
000388  000592  //       : of the current screen. Default value is 0
000389  000593  // Notes : The value is in pixel units.
000390  000594  //       :
000391  000595        
000392  000596  //       : txt_Set mode 15 reserved for future use
000393  000597  //       :
000394  000598        
000395  000599        
000396  000600        
000397  000601  //=====================================================//
000398  000602  // Single parameter short-cuts                         //
000399  000603  // for the txt_Set functions                           //
000400  000604  // These functions return the existing value before    //
000401  000605  // the change is made.                                 //
000402  000606  //=====================================================//
000403  000607  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000404  000608  func txt_BGcolour("colour"), 1;             // 1  text background colour
000405  000609  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000406  000610  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000407  000611  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000408  000612  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000409  000613  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000410  000614  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000411  000615  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000412  000616  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000413  000617  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000414  000618  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000415  000619  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000416  000620  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000417  000621  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000418  000622  func _1F(), 0;                              // 15 text (reserved DO NOT REMOVE)
000419  000623        
000420  000624        
000421  000625  //------------------------------------------------------------------//
000422  000626  //                 Hardware Function Prototypes
000423  000627  //------------------------------------------------------------------//
000424  000628        
000425  000629  // I/O Pin reference:-
000426  000630  //
000427  000631  //    IO1_PIN           is pin 2 of J1
000428  000632  //    IO2_PIN           is pin 1 of J1
000429  000633  //    IO3_PIN           is pin 3 of J1
000430  000634  //    IO4_PIN           is pin 5 of J1 (also used for BUS_RD)
000431  000635  //    IO5_PIN           is pin 9 of J2 (also used for BUS_WR)
000432  000636  //    BUS_RD_PIN        is pin 5 of J1 (alias IO4_PIN)
000433  000637  //    BUS_WR_PIN        is pin 9 of J2 (alias IO5_PIN)
000434  000638  //    BUS_0             is pin 27 of J1
000435  000639  //    BUS_1             is pin 25 of J1
000436  000640  //    BUS_2             is pin 23 of J1
000437  000641  //    BUS_3             is pin 21 of J1
000438  000642  //    BUS_4             is pin 19 of J1
000439  000643  //    BUS_5             is pin 17 of J1
000440  000644  //    BUS_6             is pin 13 of J2
000441  000645  //    BUS_7             is pin 11 of J2
000442  000646  //    BACKLITE          is backlite control pin
000443  000647  //    AUDIO_ENABLE      is amplifier chip control pin
000444  000648        
000445  000649  func pin_Set("mode", "pin"), 1;            // set pin to required mode
000446  000650  // Syntax: pin_Set(mode, pin);
000447  000651  // Usage : pin_Set(arg1, arg2);
000448  000652  // Notes : Sets the appropriate pins to Inputs or Outputs
000449  000653  //       : returns true if the pin number is legal (usually ignored)
000450  000654  //       :
000451  000655  //       : mode = 0 : Set Pin to Output
000452  000656  //       : pin_Set(0, pin);
000453  000657  //       : pin_Set(OUTPUT, pin);
000454  000658  //       : pin = 1  : set IO1_PIN to output (pin 2 J1)
000455  000659  //       : pin = 2  : set IO2_PIN to output (pin 1 J1)
000456  000660  //       : pin = 3  : set IO3_PIN to output (pin 3 J1)
000457  000661  //       : pin = 4  : set IO4_PIN to output (pin 5 J1, also used for BUS_RD)
000458  000662  //       : pin = 5  : set IO5_PIN to output (pin 9 J2, also used for BUS_WR)
000459  000663  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000460  000664  //       : pin = 8  : set BUS_0   to output (pin 27 of J1)
000461  000665  //       : pin = 9  : set BUS_1   to output (pin 25 of J1)
000462  000666  //       : pin = 10 : set BUS_2   to output (pin 23 of J1)
000463  000667  //       : pin = 11 : set BUS_3   to output (pin 21 of J1)
000464  000668  //       : pin = 12 : set BUS_4   to output (pin 19 of J1)
000465  000669  //       : pin = 13 : set BUS_5   to output (pin 17 of J1)
000466  000670  //       : pin = 14 : set BUS_6   to output (pin 13 of J2)
000467  000671  //       : pin = 15 : set BUS_7   to output (pin 11 of J2)
000468  000672  //       : Sets the desired pin to be used as an Output.
000469  000673  //       :
000470  000674  //       : mode = 1 : Set Pin to Input
000471  000675  //       : pin_Set(1, pin);
000472  000676  //       : pin_Set(INPUT, pin);
000473  000677  //       : pin = 1  : set IO1_PIN to input (pin 2 J1)
000474  000678  //       : pin = 2  : set IO2_PIN to input (pin 1 J1)
000475  000679  //       : pin = 3  : set IO3_PIN to input (pin 3 J1)
000476  000680  //       : pin = 4  : set IO4_PIN to input (pin 5 J1, also used for BUS_RD)
000477  000681  //       : pin = 5  : set IO5_PIN to input (pin 9 J2, also used for BUS_WR)
000478  000682  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000479  000683  //       : pin = 8  : set BUS_0   to input (pin 27 of J1)
000480  000684  //       : pin = 9  : set BUS_1   to input (pin 25 of J1)
000481  000685  //       : pin = 10 : set BUS_2   to input (pin 23 of J1)
000482  000686  //       : pin = 11 : set BUS_3   to input (pin 21 of J1)
000483  000687  //       : pin = 12 : set BUS_4   to input (pin 19 of J1)
000484  000688  //       : pin = 13 : set BUS_5   to input (pin 17 of J1)
000485  000689  //       : pin = 14 : set BUS_6   to input (pin 13 of J2)
000486  000690  //       : pin = 15 : set BUS_7   to input (pin 11 of J2)
000487  000691  //       : Sets the desired pin to be used as an Input.
000488  000692        
000489  000693  func pin_HI("pin"), 1;                    // set pin to logic '1'
000490  000694  // Syntax: pin_HI(pin);
000491  000695  // Usage : pin_HI(arg);
000492  000696  // Notes : Outputs a logic "High" (3.3V) on the appropriate
000493  000697  //       : pin that was previously selected as an Output.
000494  000698  //       : returns true if the pin number is legal (usually ignored)
000495  000699  //       :
000496  000700  //       : pin = 1  : set IO1_PIN to "High" level (pin 2 of J1)
000497  000701  //       : pin = 2  : set IO2_PIN to "High" level (pin 1 of J1)
000498  000702  //       : pin = 3  : set IO3_PIN to "High" level (pin 3 of J1)
000499  000703  //       : pin = 4  : set IO4_PIN to "High" level (pin 5 of J1, also used for BUS_RD)
000500  000704  //       : pin = 5  : set IO5_PIN to "High" level (pin 9 of J2, also used for BUS_WR)
000501  000705  //       : pin = 6  : set DCENB pin to "High" level (BACKLITE ON)
000502  000706  //       : pin = 7  : set AUDIO_ENABL pin to "High" level (AMP OFF)
000503  000707  //       : pin = 8  : set BUS_0   to "High" level (pin 27 of J1)
000504  000708  //       : pin = 9  : set BUS_1   to "High" level (pin 25 of J1)
000505  000709  //       : pin = 10 : set BUS_2   to "High" level (pin 23 of J1)
000506  000710  //       : pin = 11 : set BUS_3   to "High" level (pin 21 of J1)
000507  000711  //       : pin = 12 : set BUS_4   to "High" level (pin 19 of J1)
000508  000712  //       : pin = 13 : set BUS_5   to "High" level (pin 17 of J1)
000509  000713  //       : pin = 14 : set BUS_6   to "High" level (pin 13 of J2)
000510  000714  //       : pin = 15 : set BUS_7   to "High" level (pin 11 of J2)
000511  000715        
000512  000716  func pin_LO("pin"), 1;                    // set pin to logic '0'
000513  000717  // Syntax: pin_LO(pin);
000514  000718  // Usage : pin_LO(arg);
000515  000719  // Notes : Outputs a logic "Low" (0V) on the appropriate
000516  000720  //       : pin that was previously selected as an Output.
000517  000721  //       : returns true if the pin number is legal (usually ignored)
000518  000722  //       :
000519  000723  //       : pin = 1 : set IO1_PIN to "Low" level (pin 2 of J1)
000520  000724  //       : pin = 2 : set IO2_PIN to "Low" level (pin 1 of J1)
000521  000725  //       : pin = 3 : set IO3_PIN to "Low" level (pin 3 of J1)
000522  000726  //       : pin = 4 : set IO4_PIN to "Low" level (pin 5 of J1, also used for BUS_RD)
000523  000727  //       : pin = 5 : set IO5_PIN to "Low" level (pin 9 of J2, also used for BUS_WR)
000524  000728  //       : pin = 6 : set DCENB pin to "Low" level (BACKLITE)
000525  000729  //       : pin = 7 : set AUDIO_ENABL pin to "Low" level (AMP ON)
000526  000730  //       : pin = 8  : set BUS_0  to "Low" level (pin 27 of J1)
000527  000731  //       : pin = 9  : set BUS_1  to "Low" level (pin 25 of J1)
000528  000732  //       : pin = 10 : set BUS_2  to "Low" level (pin 23 of J1)
000529  000733  //       : pin = 11 : set BUS_3  to "Low" level (pin 21 of J1)
000530  000734  //       : pin = 12 : set BUS_4  to "Low" level (pin 19 of J1)
000531  000735  //       : pin = 13 : set BUS_5  to "Low" level (pin 17 of J1)
000532  000736  //       : pin = 14 : set BUS_6  to "Low" level (pin 13 of J2)
000533  000737  //       : pin = 15 : set BUS_7  to "Low" level (pin 11 of J2)
000534  000738        
000535  000739  func pin_Read("pin"), 1;                // read pin, logic or analogue
000536  000740  // Syntax: pin_Read(pin);
000537  000741  // Usage : arg1 := pin_Read(arg2);
000538  000742  // Notes : Reads the logic state of the appropriate
000539  000743  //       : pin that was previously selected as an Input.
000540  000744  //       :
000541  000745  //       : pin = 1  : Read the state of IO1_PIN (pin 2 of J1)
000542  000746  //       : pin = 2  : Read the state of IO2_PIN (pin 1 of J1)
000543  000747  //       : pin = 3  : Read the state of IO3_PIN (pin 3 of J1)
000544  000748  //       : pin = 4  : Read the state of IO4_PIN (pin 5 of J1, also used for BUS_RD)
000545  000749  //       : pin = 5  : Read the state of IO5_PIN (pin 9 of J2, also used for BUS_WR)
000546  000750  //       : pin = 6  : Read the state of DCENB pin to "Low" level (BACKLITE)
000547  000751  //       : pin = 7  : Read the state of AUDIO_ENABL pin to "Low" level (AMP ON)
000548  000752  //       : pin = 8  : Read the state of BUS_0   (pin 27 of J1)
000549  000753  //       : pin = 9  : Read the state of BUS_1   (pin 25 of J1)
000550  000754  //       : pin = 10 : Read the state of BUS_2   (pin 23 of J1)
000551  000755  //       : pin = 11 : Read the state of BUS_3   (pin 21 of J1)
000552  000756  //       : pin = 12 : Read the state of BUS_4   (pin 19 of J1)
000553  000757  //       : pin = 13 : Read the state of BUS_5   (pin 17 of J1)
000554  000758  //       : pin = 14 : Read the state of BUS_6   (pin 13 of J2)
000555  000759  //       : pin = 15 : Read the state of BUS_7   (pin 11 of J2)
000556  000760  //       : Returns a 0 (logic low) or 1 (logic high).
000557  000761        
000558  000762        
000559  000763  //------------------------------------------------------------------//
000560  000764  //                 P1 module BUS I/O control
000561  000765  //------------------------------------------------------------------//
000562  000766        
000563  000767  func bus_In(), 1;
000564  000768  // Syntax: bus_In();
000565  000769  // Usage : arg1 := bus_In();
000566  000770  // Notes : Read the 8bit wide bus into the lower 8 bits of arg1.
000567  000771  //       : The upper 8 bits of arg1 are set to 0.
000568  000772  //       : the BUS_RD and BUS_WR pins are not affected.
000569  000773  //       :
000570  000774  //       : BUS_0 is pin 27 of J1
000571  000775  //       : BUS_1 is pin 25 of J1
000572  000776  //       : BUS_2 is pin 23 of J1
000573  000777  //       : BUS_3 is pin 21 of J1
000574  000778  //       : BUS_4 is pin 19 of J1
000575  000779  //       : BUS_5 is pin 17 of J1
000576  000780  //       : BUS_6 is pin 13 of J2
000577  000781  //       : BUS_7 is pin 11 of J2
000578  000782        
000579  000783  func bus_Out("var"), 0;
000580  000784  // Syntax: bus_Out(var);
000581  000785  // Usage : bus_Out(arg1);
000582  000786  // Notes : The lower 8 bits of arg1 are placed on the 8bit wide bus.
000583  000787  //       : The upper 8 bits of arg1 are ignored.
000584  000788  //       : the BUS_RD and BUS_WR pins are not affected.
000585  000789  //       : NB:- any BUS pins that are set to inputs are not affected.
000586  000790  //       :
000587  000791  //       : BUS_0 is pin 27 of J1
000588  000792  //       : BUS_1 is pin 25 of J1
000589  000793  //       : BUS_2 is pin 23 of J1
000590  000794  //       : BUS_3 is pin 21 of J1
000591  000795  //       : BUS_4 is pin 19 of J1
000592  000796  //       : BUS_5 is pin 17 of J1
000593  000797  //       : BUS_6 is pin 13 of J2
000594  000798  //       : BUS_7 is pin 11 of J2
000595  000799        
000596  000800  func bus_Set("var"), 0;
000597  000801  // Syntax: bus_Set(var);
000598  000802  // Usage : bus_Set(arg1);
000599  000803  // Notes : The lower 8 bits of arg1 are placed in the BUS direction register.
000600  000804  //       : a '1' sets a pin to be an input, a '0' sets a pin to be output.
000601  000805  //       : The upper 8 bits of arg1 are ignored.
000602  000806  //       : the BUS_RD and BUS_WR pins are not affected.
000603  000807  //       :
000604  000808  //       : BUS_0 is pin 27 of J1
000605  000809  //       : BUS_1 is pin 25 of J1
000606  000810  //       : BUS_2 is pin 23 of J1
000607  000811  //       : BUS_3 is pin 21 of J1
000608  000812  //       : BUS_4 is pin 19 of J1
000609  000813  //       : BUS_5 is pin 17 of J1
000610  000814  //       : BUS_6 is pin 13 of J2
000611  000815  //       : BUS_7 is pin 11 of J2
000612  000816        
000613  000817  func bus_Write("var"), 0;
000614  000818  // Syntax: bus_Write(var);
000615  000819  // Usage : bus_Write(arg1);
000616  000820  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
000617  000821  //       : a settling delay of approx 50nsec, the BUS_WR pin is strobed
000618  000822  //       : LO for approx 50nsec then set back HI.
000619  000823  //       : The upper 8 bits of arg1 are ignored.
000620  000824  //       : NB:- the BUS_WR pin is automatically pre-set to an output to
000621  000825  //       : ensure BUS write integrity.
000622  000826  //       :
000623  000827  //       : BUS_0 is pin 27 of J1
000624  000828  //       : BUS_1 is pin 25 of J1
000625  000829  //       : BUS_2 is pin 23 of J1
000626  000830  //       : BUS_3 is pin 21 of J1
000627  000831  //       : BUS_4 is pin 19 of J1
000628  000832  //       : BUS_5 is pin 17 of J1
000629  000833  //       : BUS_6 is pin 13 of J2
000630  000834  //       : BUS_7 is pin 11 of J2
000631  000835        
000632  000836  func bus_Read(), 1;
000633  000837  // Syntax: bus_Read();
000634  000838  // Usage : arg1 := bus_Read();
000635  000839  // Notes : The BUS_RD pin set to LO, then, after a settling delay
000636  000840  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
000637  000841  //       : (the upper 8 bits being set to 0)
000638  000842  //       : the BUS_RD pin is then set back to a HI level.
000639  000843  //       : NB:- the BUS_RD pin is automatically pre-set to an output to
000640  000844  //       : ensure BUS write integrity.
000641  000845  //       :
000642  000846  //       : BUS_0 is pin 27 of J1
000643  000847  //       : BUS_1 is pin 25 of J1
000644  000848  //       : BUS_2 is pin 23 of J1
000645  000849  //       : BUS_3 is pin 21 of J1
000646  000850  //       : BUS_4 is pin 19 of J1
000647  000851  //       : BUS_5 is pin 17 of J1
000648  000852  //       : BUS_6 is pin 13 of J2
000649  000853  //       : BUS_7 is pin 11 of J2
000650  000854        
000651  000855        
000652  000856  //------------------------------------------------------------------//
000653  000857  //   Graphics Functions
000654  000858  //------------------------------------------------------------------//
000655  000859  func gfx_Set("mode", "value"), 0;            // set various graphics functions
000656  000860  // Syntax: gfx_Set(mode, value);
000657  000861  // Usage : gfx_Set(arg1, arg2);
000658  000862  // Notes : Sets various graphics parameters used by other functions
000659  000863  //       : This allows the features to be set programatically with a
000660  000864  //       : single function call.It is strongly recommended to use the
000661  000865  //       : pre-defined constants rather than the mode numbers.
000662  000866  //       : NB:- Although it is often required to be able to set graphics
000663  000867  //       : functions with a single function call for graphics engine
000664  000868  //       : related functions, there is a complete set of single parameter
000665  000869  //       : shortcut functions that have exactly the same function as
000666  000870  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
000667  000871  //       :
000668  000872  //       : mode = PEN_SIZE (mode 16)
000669  000873  //       : gfx_Set(PEN_SIZE, value);
000670  000874  //       : value = SOLID (value 0) rectangle and circle objects are solid
000671  000875  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
000672  000876  //       : Sets the mode of the Pen used by most graphics objects
000673  000877  //       :
000674  000878  //       : mode = BACKGROUND_COLOUR (mode 17)
000675  000879  //       : gfx_Set(BACKGROUND_COLOUR, value);
000676  000880  //       : value = 0 to 0xFFFF, Black to White
000677  000881  //       : Sets the Background colour of the screen
000678  000882  //       :
000679  000883  //       : mode = OBJECT_COLOUR (mode 18)
000680  000884  //       : gfx_Set(OBJECT_COLOUR, value);
000681  000885  //       : value = 0 to 0xFFFF, Black to White
000682  000886  //       : Sets the Object colour used in various functions
000683  000887  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
000684  000888  //       :
000685  000889  //       : mode = CLIPPING (mode 19)
000686  000890  //       : gfx_Set(CLIPPING, value);
000687  000891  //       : value = OFF (value 0) Clipping disabled
000688  000892  //       : value = ON (value 1) Clipping enabled
000689  000893  //       : Enables/Disables the Clipping feature
000690  000894  //       :
000691  000895  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
000692  000896  //       : gfx_Set(TRANSPARENT_COLOUR, value);
000693  000897  //       : value = 0 to 0xFFFF Black to White
000694  000898  //       : Sets Bitmap, Image or Animation Transparency Colour.
000695  000899  //       : NB not implemented
000696  000900  //       :
000697  000901  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
000698  000902  //       : gfx_Set(5, value);
000699  000903  //       : value = OFF (value 0) Transparency disabled
000700  000904  //       : value = ON (value 1) Transparency enabled
000701  000905  //       : Enables/Disables the Transparency feature
000702  000906  //       : NB not implemented
000703  000907  //       :
000704  000908  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
000705  000909  //       : gfx_Set(FRAME_DELAY, value);
000706  000910  //       : value = 0 to 65535 ms
000707  000911  //       : Sets the Video/Animation clip inter-frame delay. This setting will
000708  000912  //       : over-ride the embedded frame delay of the clip. After the event,
000709  000913  //       : the setting will auto disable and if further inter-frame delays need
000710  000914  //       : overriding the setting must be re-issued.
000711  000915  //       :
000712  000916  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
000713  000917  //       : gfx_Set(SCREEN_MODE, value);
000714  000918  //       : value = LANDSCAPE   (value 0)
000715  000919  //       : value = LANDSCAPE_R (value 1)
000716  000920  //       : value = PORTRAIT    (value 2)
000717  000921  //       : value = PORTRAIT_R  (value 3)
000718  000922  //       :
000719  000923  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
000720  000924  //       : gfx_Set(OUTLINE_COLOUR, value);
000721  000925  //       : value = 1 to 0xFFFF, if 0, featre is OFF
000722  000926  //       : Sets the filled Rectangle or Circle objects outline colour
000723  000927  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
000724  000928  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
000725  000929  //       :
000726  000930  //       : Only supports variable contrast for uOLED Modules
000727  000931  //       : mode = CONTRAST (mode 25) : Contrast
000728  000932  //       : gfx_Set(CONTRAST, value);
000729  000933  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
000730  000934  //       : when contrast=0, display is placed in low power mode.
000731  000935  //       : This function should be called with contrast=0 when
000732  000936  //       : powering down the module.
000733  000937  //       :
000734  000938  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
000735  000939  //       : gfx_Set(LINE_PATTERN, value);
000736  000940  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
000737  000941  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
000738  000942  //       : a value of 0 turns the feature off
000739  000943  //       :
000740  000944  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
000741  000945  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
000742  000946  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
000743  000947  //       : NB not implemented, default is COLOUR16
000744  000948  //       :
000745  000949  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
000746  000950  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
000747  000951  //       : sets the button and slider objects bevel width
000748  000952  //       :
000749  000953  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
000750  000954  //       : gfx_Set(BEVEL_SHADOW , 5);
000751  000955  //       : sets the button and slider objects darken and lighten depth for the bevel colour
000752  000956  //       :
000753  000957  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
000754  000958  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
000755  000959  //       : sets the origin of drawn objects to a position other than 0,0
000756  000960  //       :
000757  000961  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
000758  000962  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
000759  000963  //       : sets the origin of drawn objects to a position other than 0,0
000760  000964        
000761  000965        
000762  000966  func gfx_Cls(), 0;                    // clear the screen
000763  000967  // Syntax: gfx_Cls();
000764  000968  // Usage : gfx_Cls();
000765  000969  // Notes : Clears the screen with current background colour
000766  000970        
000767  000971  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
000768  000972  // Syntax: gfx_MoveTo(x, y);
000769  000973  // Usage : gfx_MoveTo(arg1, arg2);
000770  000974  // Notes : Moves the origin to a new x,y position
000771  000975        
000772  000976  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
000773  000977  // Syntax: gfx_MoveRel(x, y);
000774  000978  // Usage : gfx_MoveRel(arg1, arg2);
000775  000979  // Notes : Moves the origin to a new x,y position
000776  000980  //       : relative to the current origing
000777  000981        
000778  000982  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
000779  000983  // Syntax: gfx_LineTo(x1, y1);
000780  000984  // Usage : gfx_LineTo(arg1, arg2);
000781  000985  // Notes : Draws a Line from the origin x,y to x1,y1.
000782  000986  //       : The new origin is then set to x1, y1. Line colour needs
000783  000987  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000784  000988        
000785  000989  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
000786  000990  // Syntax: gfx_LineRel(x1, y1);
000787  000991  // Usage : gfx_LineRel(arg1, arg2);
000788  000992  // Notes : Draws a Line from the origin x,y to x1,y1.
000789  000993  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
000790  000994  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
000791  000995        
000792  000996  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
000793  000997  // Syntax: gfx_Line(x1, x2, y2, colr);
000794  000998  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
000795  000999  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
000796  001000        
000797  001001  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
000798  001002  // Syntax: gfx_Line(x1, x2, y, colr);
000799  001003  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000800  001004  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
000801  001005        
000802  001006  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
000803  001007  // Syntax: gfx_Line(y1, y2, x, colr);
000804  001008  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000805  001009  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
000806  001010        
000807  001011  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
000808  001012  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
000809  001013  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000810  001014  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
000811  001015  //       : bottom corner (x2,y2) on the screen.
000812  001016        
000813  001017  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
000814  001018  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
000815  001019  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000816  001020  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
000817  001021  //       : bottom corner (x2,y2) on the screen.
000818  001022        
000819  001023  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
000820  001024  // Syntax: gfx_Circle(x, y, rad, colr);
000821  001025  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000822  001026  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
000823  001027        
000824  001028  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
000825  001029  // Syntax: gfx_Circle(x, y, rad, colr);
000826  001030  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000827  001031  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
000828  001032        
000829  001033  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
000830  001034  // Syntax: gfx_PutPixel(x, y, colr);
000831  001035  // Usage : gfx_PutPixel(arg1, arg2, arg3);
000832  001036  // Notes : Plots a coloured pixel on the screen at x,y location
000833  001037        
000834  001038  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
000835  001039  // Syntax: gfx_GetPixel(x, y);
000836  001040  // Usage : var := gfx_GetPixel(arg1, arg2);
000837  001041  // Notes : Reads and returns the colour value of a pixel at location x,y
000838  001042        
000839  001043  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
000840  001044  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
000841  001045  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000842  001046  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000843  001047  //       : Vertices must be specified in an anti-clockwise fashion
000844  001048        
000845  001049  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
000846  001050  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
000847  001051  // Usage : gfx_OrbitInit(&arg1, &arg2);
000848  001052  // Notes : Sets up the Orbit function parameters.
000849  001053  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
000850  001054  //       : variables that get updated after calling gfx_Orbit(,,) function.
000851  001055  //       : The coordiantaes are calculated relative to the origin
000852  001056  //       : obtained by using the gfx_MoveTo(x, y) function.
000853  001057        
000854  001058  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
000855  001059  // Syntax: gfx_Orbit(angle, distance);
000856  001060  // Usage : gfx_Orbit(arg1, arg2);
000857  001061  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
000858  001062  //       : only known parameters are the angle and the distance from the current origin.
000859  001063        
000860  001064  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
000861  001065  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
000862  001066  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
000863  001067  // Notes : This function is very similar to the Ploygon function
000864  001068  //       : with the exception of the 1st and the last vertices not joined.
000865  001069        
000866  001070  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
000867  001071  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
000868  001072  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
000869  001073  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000870  001074  //       : Vertices must be minimum of 3 and can be specified in any fashion
000871  001075        
000872  001076  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
000873  001077  // Syntax: gfx_Dot();
000874  001078  // Usage : gfx_Dot();
000875  001079  // Notes : Places a coloured dot at the origin
000876  001080        
000877  001081        
000878  001082  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
000879  001083  // Syntax: gfx_Bullet();
000880  001084  // Usage : gfx_Bullet();
000881  001085  // Notes : Places a coloured circle at the origin
000882  001086  //       : filled or unfilled state is controlled by PenSize
000883  001087        
000884  001088  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
000885  001089  // Syntax: gfx_IncX();
000886  001090  // Usage : var := gfx_IncX();
000887  001091  // Notes : Increments the x coordinate of the origin
000888  001092        
000889  001093  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
000890  001094  // Syntax: gfx_IncY();
000891  001095  // Usage : var := gfx_IncY();
000892  001096  // Notes : Increments the y coordinate of the origin
000893  001097        
000894  001098  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
000895  001099  // Syntax: gfx_BoxTo(x1, y1);
000896  001100  // Usage : gfx_BoxTo(arg1, arg2);
000897  001101  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
000898  001102  //       : The new origin is then set to x1,y1. Rectangle colour needs
000899  001103  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000900  001104  //       : and the PenSize setting determines if Box is solid or outline.
000901  001105        
000902  001106  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
000903  001107  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
000904  001108  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
000905  001109  // Notes : Specifies a clipping window region on the screen such that any objects
000906  001110  //       : and text placed onto the screen will be clipped and displayed only
000907  001111  //       : within that region. For the clipping window to take effect, "Clipping"
000908  001112  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
000909  001113        
000910  001114        
000911  001115  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
000912  001116  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
000913  001117  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
000914  001118  // *Notes:
000915  001119        
000916  001120  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
000917  001121  // Syntax: gfx_SetClipRegion();
000918  001122  // Usage : var := gfx_SetClipRegion();
000919  001123  // *Notes:
000920  001124        
000921  001125  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
000922  001126  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
000923  001127  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
000924  001128  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000925  001129  //       : with xradius = xrad and yradius = yrad.
000926  001130  //       : if PenSize = 0 Ellipse is Solid
000927  001131  //       : if PenSize = 1 Ellipse is Outline
000928  001132        
000929  001133        
000930  001134  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
000931  001135  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
000932  001136  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
000933  001137  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000934  001138  //       : with xradius = xrad and yradius = yrad.
000935  001139        
000936  001140  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 0;
000937  001141  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
000938  001142  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
000939  001143  // Notes : Draws a 3 dimensional Text Button at screen location defined by
000940  001144  //       : x,y arguments (top left corner). The size of the button depends on
000941  001145  //       : the font, width, height and length of the text.
000942  001146  //       : The button appearance will depend on the state parameter setting:
000943  001147  //       :         state = 0 : Button Pressed
000944  001148  //       :         state = 1 : Button Raised
000945  001149        
000946  001150  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
000947  001151  // Syntax: gfx_Panel("style", "x", "y", "width", "height", "colour"), 0;
000948  001152  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
000949  001153  // Notes : Draws a panel (groupbox) at screen location defined by
000950  001154  //       : x, y, width and height with colour "colour".
000951  001155  //       :         state = 0 : recessed
000952  001156  //       :         state = 1 : raised
000953  001157        
000954  001158  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
000955  001159  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
000956  001160  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
000957  001161  // Notes : Draws a 3 dimensional Slider Bar on the screen.
000958  001162  //       : Slider parameters are as follows:
000959  001163  //       :         mode = 0 : Slider recessed
000960  001164  //       :         mode = 1 : Slider raised
000961  001165  //       :         x1, y1 = top left corner
000962  001166  //       :         x2, y2 = bottom right corner
000963  001167  //       :         scale = n : sets the full scale range from 0 to n
000964  001168  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
000965  001169  //       : returns:-
000966  001170        
000967  001171        
000968  001172  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
000969  001173  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
000970  001174  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
000971  001175  // Notes : Copies an area of a screen from xs,ys of size given by width and height
000972  001176  //       : and pastes it to another location determined by xd, yd.
000973  001177        
000974  001178  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
000975  001179  // Syntax: gfx_RGBto565(red, green, blue);
000976  001180  // Usage : gfx_RGBto565(arg1, arg2, arg3);
000977  001181  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
000978  001182        
000979  001183  func gfx_332to565("COLOUR8BIT"), 1;
000980  001184  // Syntax: gfx_332to565(colour);
000981  001185  // Usage : gfx_332to565(arg);
000982  001186  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
000983  001187        
000984  001188  func gfx_Selection("index", "backcolor", "textcolor"), 0;
000985  001189  // Syntax: gfx_Selection("index", "backcolor", "textcolor"), 0;
000986  001190  // Usage : gfx_Selection(1, RED, YELLOW);
000987  001191  // Notes : Called prior to drawing a button, this function
000988  001192  //       : hilites the required text line on a multiline button.
000989  001193        
000990  001194  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
000991  001195  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
000992  001196  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000993  001197  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000994  001198  //       : Vertices must be specified in an anti-clockwise fashion
000995  001199        
000996  001200        
000997  001201  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
000998  001202  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
000999  001203  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001000  001204  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001001  001205  //       : Vertices must be minimum of 3 and can be specified in any fashion
001002  001206        
001003  001207        
001004  001208  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001005  001209  // Syntax: gfx_Offset(x, y);
001006  001210  // Usage : gfx_Offset(arg1, arg2);
001007  001211  // Notes : Set the screen offset
001008  001212        
001009  001213        
001010  001214        
001011  001215  func gfx_Get("mode"), 1;
001012  001216  // Syntax: gfx_Get(mode);
001013  001217  // Usage : arg1 := gfx_Get(arg);
001014  001218  // Notes : Returns various parameters to caller
001015  001219  //       :
001016  001220  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001017  001221  //       : var := gfx_Get(X_MAX);
001018  001222  //       : Returns the maximum horizontal value of the display
001019  001223  //       :
001020  001224  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001021  001225  //       : var := gfx_Get(Y_MAX);
001022  001226  //       : Returns the maximum vertical value of the display
001023  001227  //       :
001024  001228  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001025  001229  //       : var := gfx_Get(LEFT_POS);
001026  001230  //       : Returns the left location of the last drawn object
001027  001231  //       : such as a slider or button or an image/video
001028  001232  //       :
001029  001233  //       : mode = TOP_POS (mode 3) : Top location of Object
001030  001234  //       : var := gfx_Get(TOP_POS);
001031  001235  //       : Returns the top location of the last drawn object
001032  001236  //       : such as a slider or button or an image/video
001033  001237  //       :
001034  001238  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001035  001239  //       : var := gfx_Get(RIGHT_POS);
001036  001240  //       : Returns the right location of the last drawn object
001037  001241  //       : such as a slider or button or an image/video
001038  001242  //       :
001039  001243  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001040  001244  //       : var := gfx_Get(BOTTOM_POS );
001041  001245  //       : Returns the bottom location of the last drawn object
001042  001246  //       : such as a slider or button or an image/video
001043  001247  //       :
001044  001248        
001045  001249        
001046  001250  //==================================================//
001047  001251  // Single parameter short-cuts                      //
001048  001252  // for the gfx_Set functions                        //
001049  001253  // These functions return the existing value before //
001050  001254  // the change is made.                              //
001051  001255  //==================================================//
001052  001256  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001053  001257  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001054  001258  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001055  001259  func gfx_Clipping("mode"), 0;                       // 3  graphics clipping ON/OFF
001056  001260  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001057  001261  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001058  001262  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001059  001263  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001060  001264  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001061  001265  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001062  001266  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001063  001267  func gfx_ColourMode("mode"), 1;                     // 11 graphics colour mode COLOUR8 or COLOUR16 (default colour 16)
001064  001268  func gfx_BevelWidth("mode"), 1;                     // 12 graphics button bevel width
001065  001269  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001066  001270  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001067  001271  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001068  001272        
001069  001273        
001070  001274  //==================================================//
001071  001275  // uSD/FLASH Function Prototypes                    //
001072  001276  //==================================================//
001073  001277  func media_Video("x", "y"), 0;                      // display movie at position x y
001074  001278  // Syntax: media_Video(x, y);
001075  001279  // Usage : media_Video(arg1, arg2);
001076  001280  // Notes : Play a Video/Animation clip from the uSD card at screen location
001077  001281  //       : specified by x,y (top left corner). The location of the clip in the
001078  001282  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001079  001283        
001080  001284  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001081  001285  // Syntax: media_VideoFrame(Frame_number);
001082  001286  // Usage : arg1 := media_VideoFrame();
001083  001287  // Notes : After a pointer to a valid video has been set with media_SetSector,
001084  001288  //       : calling this function shows each fram sequentially, returning
001085  001289  //       : the number of frames remaining. The position of the image is
001086  001290  //     : at the current origin as set with gfx_MoveTo(...);
001087  001291        
001088  001292  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001089  001293  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001090  001294  // Usage : media_SetAdd(arg1, arg2);
001091  001295  // Notes : Set uSD internal Address pointer for bytewise access
001092  001296        
001093  001297  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001094  001298  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001095  001299  // Usage : media_SetSector(arg1, arg2);
001096  001300  // Notes : Set uSD internal Sector pointer for sector block access
001097  001301        
001098  001302  func media_RdSector("*destination"), 1;
001099  001303  // Syntax: media_RdSector(*destination);
001100  001304  // Usage : media_RdSector(rdblock);
001101  001305  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001102  001306  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001103  001307  //       : After the read the Sector pointer is automatically incremented by 1.
001104  001308  //       : Returns TRUE if uSD response was TRUE
001105  001309        
001106  001310  func media_WrSector("*source"), 1;
001107  001311  // Syntax: media_WrSector(*source);
001108  001312  // Usage : media_WrSector(wrblock);
001109  001313  // Notes : Writes 512 bytes (256 words) from a source memory block
001110  001314  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001111  001315  //       : pointer is automatically incremented by 1.
001112  001316  //       : Returns TRUE if uSD response was TRUE
001113  001317        
001114  001318  func media_ReadByte(), 1;                // read a byte at the current stream position
001115  001319  // Syntax: media_RdByte();
001116  001320  // Usage : var := media_RdByte();
001117  001321  // Notes : Reads and Returns a single byte of data from the
001118  001322  //       : uSD card pointed to by the internal Address pointer.
001119  001323  //       : After the read the Address pointer is automatically
001120  001324  //       : incremented by 1.
001121  001325        
001122  001326  func media_ReadWord(), 1;                // read a word at the current stream position
001123  001327  // Syntax: media_ReadWord();
001124  001328  // Usage : var := media_ReadWord();
001125  001329  // *Notes : Reads and Returns a single word of data from the
001126  001330  //       : uSD card pointed to by the internal Address pointer.
001127  001331  //       : After the read the Address pointer is automatically
001128  001332  //       : incremented by 2.
001129  001333        
001130  001334  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
001131  001335  // Syntax: media_WriteByte(arg1);
001132  001336  // Usage : var := media_WriteByte(arg1);
001133  001337  // *Notes : Writes and Returns xxxxx
001134  001338  //       : After the write the Address pointer is automatically
001135  001339  //       : incremented by 1.
001136  001340        
001137  001341  func media_WriteWord("word"), 1;            // write a word to the current stream position
001138  001342  // Syntax: media_WriteWord(arg1);
001139  001343  // Usage : var := media_WriteWord(arg1);
001140  001344  // *Notes : Writes and Returns xxxxx
001141  001345  //       : After the write the Address pointer is automatically
001142  001346  //       : incremented by 2.
001143  001347        
001144  001348  func media_Image("x", "y"), 0;            // display image at position x y
001145  001349  // Syntax: media_Image(x, y);
001146  001350  // Usage : media_Image(arg1, arg2);
001147  001351  // Notes : Display an image from the uSD card at screen location
001148  001352  //       : specified by x,y (top left corner). The location of the
001149  001353  //       : Image in the uSD card must be specified by
001150  001354  //       : media_setSector(Image_Sector_Add) function.
001151  001355        
001152  001356  func media_Flush(), 1;                    // after writing to media, flush the sector and write
001153  001357  // Syntax: media_Flush();
001154  001358  // Usage : var := media_Flush();
001155  001359  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
001156  001360  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
001157  001361        
001158  001362  func media_Init(), 1;                    // initialize uSD card
001159  001363  // Usage : media_Init();
001160  001364  // Notes : Initialise uSD CARD
001161  001365  //       : Response: 0 = No Card
001162  001366  //       :           1 = Card Initialised
001163  001367        
001164  001368        
001165  001369  //==============================================//
001166  001370  // Communications Function Prototypes           //
001167  001371  //==============================================//
001168  001372  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
001169  001373  // Syntax: com_Init(buffer, bufsize, qualifier);
001170  001374  // Usage1: com_Init(mybuf, 20, 0);
001171  001375  // Usage2: com_Init(mybuf, 20, ':');
001172  001376  // Notes : initialize a serial capture buffer for the comms input
001173  001377  //       : The program must declare a var array as a circular buffer.
001174  001378  //       : Usage1 declares a circular buffer which will continually
001175  001379  //       : buffer characters.
001176  001380  //       : Usage2 must receive ':' before any characters will
001177  001381  //       : accumulate in the buffer.
001178  001382        
001179  001383  func com_Reset(), 0;                 // reset the comms receiver
001180  001384  // Syntax: com_Reset();
001181  001385  // Usage : com_Reset();
001182  001386  // Notes : reset comms to default polled mode
001183  001387        
001184  001388  func com_Count(), 1;                // return count of characters in receive buffer
001185  001389  // Syntax: com_Count();
001186  001390  // Usage : arg := com_Count();
001187  001391  // Notes : return count of buffered characters in buffer attachment
001188  001392        
001189  001393  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
001190  001394  // Syntax: com_Full();
001191  001395  // Usage : if (com_Full() ,,,, go read buffer;
001192  001396  // Notes : return true if buffer full (not necessarily an error if
001193  001397  //       : buffer is sized to a packet size)
001194  001398        
001195  001399  func com_Error(), 1;                // return comms errors comms error occurred
001196  001400  // Syntax: com_Error();
001197  001401  // Usage : if (com_Error() ) ...... take recovery action;
001198  001402  // Notes : return non zero if any errors low level comms errors occured
001199  001403  // returns :
001200  001404  // bit0 = Receiver Overflow Error
001201  001405  // bit1 = Receiver Framing Error
001202  001406  // bit2 = Transmit Buffer Overflow
001203  001407        
001204  001408  func com_Sync(), 1;                // returns TRUE if qualifier has been received
001205  001409  // Syntax: com_Sync();
001206  001410  // Usage : com_Sync();
001207  001411  // return true if sync character has been received in com_Init("...") mode
001208  001412        
001209  001413        
001210  001414  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001211  001415  // Syntax: com_TXbuffer("buf", "bufsize", "pin");
001212  001416  // Usage : com_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001213  001417  // Usage : com_TXbuffer(0, 0, 0);              // revert to non buffered service
001214  001418  // Notes : initialize a serial buffer for the COM0 output.
001215  001419  //       : The program must declare a var array as a circular buffer.
001216  001420  //       : When a TX buffer is declared for comms, the transmission
001217  001421  //       : of characters becomes non blocking. The only time
001218  001422  //       : blocking will occur is if the buffer has insufficient space
001219  001423  //       : to accept the next character, in which case the function
001220  001424  //       : will wait for buffer space to become available. If the
001221  001425  //       : TX buffer is no longer required, just set the buffer pointer
001222  001426  //       : to zero, the size in this case doesnt matter and is ignored.
001223  001427  //       : The function can resize or reallocated to another buffer at
001224  001428  //       : any time. The buffer is flushed before any changes are made.
001225  001429  //       : "pin" designates an IO pin to control a bi-directional 
001226  001430  //       : control device for half duplex mode. "pin" will go HI at the
001227  001431  //       : start of a transmission, and will return low after the final
001228  001432  //       : byte is transmitted. If not required, just set "pin" to zero.
001229  001433        
001230  001434        
001231  001435  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
001232  001436  // Syntax: com_TXcount();
001233  001437  // Usage : arg := com_Count();
001234  001438  // Notes : return count of characters remaining in COM0 transmit buffer
001235  001439  //       : that was previously allocated with com_TXbuffer(...);
001236  001440        
001237  001441        
001238  001442  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
001239  001443  // Syntax: com_TXemptyEvent(function);
001240  001444  // Usage : arg := com_TXemptyEvent();
001241  001445  // Notes : If a comms TX buffer that was previously allocated with
001242  001446  //       : com_TXbuffer(...);, this function can be used to set up
001243  001447  //       : a function to be called when the COM0 TX buffer is empty.
001244  001448  //       : This is useful for either reloading the TX buffer, setting
001245  001449  //       : or clearing a pin to change the direction of eg a RS485
001246  001450  //       : line driver, or any other form of traffic control.
001247  001451  //       : The event function must not have any parameters.
001248  001452  //       : To disable the event, simply call com_TXemptyEvent(0).
001249  001453  //       : com_TXbuffer(...); also resets any active event.
001250  001454  //       : com_TXemptyEvent returns any previous event function
001251  001455  //       : address, or zero if there was no previous function.
001252  001456        
001253  001457        
001254  001458  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
001255  001459  // Usage : arg := com_TXbufferHold(ON);  // hold the buffer while we fill it
001256  001460  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
001257  001461  // Notes : Expecting that a comms TX buffer that was previously allocated with
001258  001462  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
001259  001463  //       : the buffer being sent wile it is being loaded. Mormally, when
001260  001464  //       : using buffered comms, the transmit process will begin
001261  001465  //       : immediately. This is often undesirable for 2 reasons,
001262  001466  //       : 1] you may wish to build a packet then send it later
001263  001467  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001264  001468  //       : as the FIFO buffer is constantly trying to empty while
001265  001469  //       : you are busy tring to fill it.
001266  001470  // return -1 if function is called illegally when TX comms is not buffered.
001267  001471  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
001268  001472  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
001269  001473        
001270  001474        
001271  001475  //=============================================================//
001272  001476  // Auxilliary Communications Function Prototypes
001273  001477  //=============================================================//
001274  001478  func com1_Init("buffer", "bufsize", "qualifier"), 0;
001275  001479  // Syntax: com_Init(buffer, bufsize, qualifier);
001276  001480  // Usage1: com_Init(mybuf, 20, 0);
001277  001481  // Usage2: com_Init(mybuf, 20, ':');
001278  001482  // Notes : initialize a serial capture buffer for the comms input
001279  001483  //       : The program must declare a var array as a circular buffer.
001280  001484  //       : Usage1 declares a circular buffer which will continually
001281  001485  //       : buffer characters.
001282  001486  //       : Usage2 must receive ':' before any characters will
001283  001487  //       : accumulate in the buffer.
001284  001488        
001285  001489  func com1_Reset(), 0;
001286  001490  // Syntax: com_Reset();
001287  001491  // Usage : com_Reset();
001288  001492  // Notes : reset comms receiver to default polled mode
001289  001493        
001290  001494  func com1_Count(), 1;
001291  001495  // Syntax: com_Count();
001292  001496  // Usage : arg := com_Count();
001293  001497  // Notes : return count of characters in receive buffer
001294  001498        
001295  001499  func com1_Full(), 1;
001296  001500  // Syntax: com_Full();
001297  001501  // Usage : if (com_Full() ,,,, go read buffer;
001298  001502  // Notes : return true if receive buffer full
001299  001503        
001300  001504  func com1_Error(), 1;
001301  001505  // Syntax: com_Error();
001302  001506  // Usage : if (com_Error() ) ...... take recovery action;
001303  001507  // Notes : return non zero if any level comms errors occured
001304  001508  // returns :
001305  001509  // bit0 = Receiver Overflow Error
001306  001510  // bit1 = Receiver Framing Error
001307  001511  // bit2 = Transmit Buffer Overflow
001308  001512        
001309  001513  func com1_Sync(), 1;
001310  001514  // Syntax: com_Sync();
001311  001515  // Usage : com_Sync();
001312  001516  // Notes : return true if sync character has been received in com_Init("...") mode
001313  001517        
001314  001518        
001315  001519  func com1_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001316  001520  // Syntax: com1_TXbuffer("buf", "bufsize", "pin");
001317  001521  // Usage : com1_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001318  001522  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
001319  001523  // Notes : initialize a serial buffer for the COM1 output.
001320  001524  //       : The program must declare a var array as a circular buffer.
001321  001525  //       : When a TX buffer is declared for comms, the transmission
001322  001526  //       : of characters becomes non blocking. The only time
001323  001527  //       : blocking will occur is if the buffer has insufficient space
001324  001528  //       : to accept the next character, in which case the function
001325  001529  //       : will wait for buffer space to become available. If the
001326  001530  //       : TX buffer is no longer required, just set the buffer pointer
001327  001531  //       : to zero, the size in this case doesnt matter and is ignored.
001328  001532  //       : The function can resize or reallocated to another buffer at
001329  001533  //       : any time. The buffer is flushed before any changes are made.
001330  001534  //       : "pin" designates an IO pin to control a bi-directional 
001331  001535  //       : control device for half duplex mode. "pin" will go HI at the
001332  001536  //       : start of a transmission, and will return low after the final
001333  001537  //       : byte is transmitted. If not required, just set "pin" to zero.
001334  001538        
001335  001539        
001336  001540  func com1_TXcount(), 1;                // return count of characters in COM1 TX buffer
001337  001541  // Syntax: com1_TXcount();
001338  001542  // Usage : arg := com1_Count();
001339  001543  // Notes : return count of characters remaining in COM1 transmit buffer
001340  001544  //       : that was previously allocated with com1_TXbuffer(...);
001341  001545        
001342  001546        
001343  001547  func com1_TXemptyEvent("function"), 1;  // sets a function to be called when COM1 TX buffer empty
001344  001548  // Syntax: com1_TXemptyEvent(function);
001345  001549  // Usage : arg := com1_TXemptyEvent();
001346  001550  // Notes : If a comms TX buffer that was previously allocated with
001347  001551  //       : com1_TXbuffer(...);, this function can be used to set up
001348  001552  //       : a function to be called when the COM1 TX buffer is empty.
001349  001553  //       : This is useful for either reloading the TX buffer, setting
001350  001554  //       : or clearing a pin to change the direction of eg a RS485
001351  001555  //       : line driver, or any other form of traffic control.
001352  001556  //       : The event function must not have any parameters.
001353  001557  //       : To disable the event, simply call com1_TXemptyEvent(0).
001354  001558  //       : com1_TXbuffer(...); also resets any active event.
001355  001559  //       : com1_TXemptyEvent returns any previous event function
001356  001560  //       : address, or zero if there was no previous function.
001357  001561        
001358  001562        
001359  001563  func com1_TXbufferHold("state"), 1; // hold or release a com1_TXbuffer
001360  001564  // Usage : arg := com1_TXbufferHold(ON);  // hold the buffer while we fill it
001361  001565  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
001362  001566  // Notes : Expecting that a comms TX buffer that was previously allocated with
001363  001567  //       : com1_TXbuffer(...);, com1_TXbufferHold(ON) can be used to stop
001364  001568  //       : the buffer being sent wile it is being loaded. Mormally, when
001365  001569  //       : using buffered comms, the transmit process will begin
001366  001570  //       : immediately. This is often undesirable for 2 reasons,
001367  001571  //       : 1] you may wish to build a packet then send it later
001368  001572  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001369  001573  //       : as the FIFO buffer is constantly trying to empty while
001370  001574  //       : you are busy tring to fill it.
001371  001575  // return -1 if function is called illegally when TX comms is not buffered.
001372  001576  // return buffer count when called with argument of 1, eg com1_TXbufferHold(ON)
001373  001577  // return 0 when argument is zero, eg com1_TXbufferHold(OFF)
001374  001578        
001375  001579  func serin1(), 1;
001376  001580  // Syntax: serin1();
001377  001581  // Usage : char := serin1();
001378  001582  // Notes : return the next available character from COM1
001379  001583        
001380  001584  func serout1("char"), 0;
001381  001585  // Syntax: serout1("char");
001382  001586  // Usage : serout1(ch);
001383  001587  // Notes : send character to COM1
001384  001588        
001385  001589  func com_SetBaud("comport","baudrate/10"), 1;
001386  001590  // Syntax: com_SetBaud("comport","baudrate/10");
001387  001591  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
001388  001592  // Notes : sets to any viable baud rate from 160 to 655350
001389  001593  // return true if baud rate was acceptable
001390  001594        
001391  001595        
001392  001596        
001393  001597  //==============================================//
001394  001598  // Display Access                               //
001395  001599  //==============================================//
001396  001600  func disp_Init(), 0;                            // initialize display with required tables
001397  001601  // Syntax: disp_Init();
001398  001602  // Usage : disp_Init();
001399  001603  // Notes : Initialises or reinitialises the display.
001400  001604  //       : Normally used after restoration of peripheral power
001401  001605  //       : and after DeepSleep.
001402  001606        
001403  001607  func disp_SetReg("register", "data"), 0;
001404  001608  // Syntax: display_SetReg(register, data);
001405  001609  // Usage : display_SetReg(arg1, arg2);
001406  001610  // Notes : Sets uLCD specific display driver registers. Refer
001407  001611  //       : to appropriate display driver data sheet.
001408  001612        
001409  001613  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
001410  001614  // Syntax: disp_setGRAM(x1, y1, x2, y2);
001411  001615  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
001412  001616  // Notes : Prepares the GRAM area for user access.
001413  001617  //       : Data can now be written with disp_GRAM.
001414  001618  //       : GRAM will be set accordingly for the correct screen mode.
001415  001619  //       : the LO word of the 32 bit pixel count is returned. This is
001416  001620  //       : usually all that is needed unlse GRAM area exceeds 256^2
001417  001621  //       : A copy of the 32bit value can be found in
001418  001622  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
001419  001623        
001420  001624  func disp_WrGRAM("colour"), 0;
001421  001625  // Syntax: display_WrGRAM(colour);
001422  001626  // Usage : display_WrGRAM(arg);
001423  001627  // Notes : Data can be written to the GRAM consecutively using
001424  001628  //       : this function once the GRAM access window has been setup.
001425  001629        
001426  001630  func disp_WriteControl("value"), 0;             // write a control byte to the display
001427  001631  func disp_WriteWord("value"), 0;                // write a word to the display
001428  001632        
001429  001633        
001430  001634  func disp_ReadWord(), 1;                        // read a word from the display
001431  001635  // Syntax: disp_ReadWord();
001432  001636  // Usage : x:=disp_ReadWord();
001433  001637  // Notes : Read a word from the controller
001434  001638  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
001435  001639  //       : print(disp_ReadWord());        // print ID
001436  001640  //       : (Many displays are write only)
001437  001641        
001438  001642                                                  //
001439  001643  //==============================================//
001440  001644  // unadorned SPI functions                      //
001441  001645  //==============================================//
001442  001646  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
001443  001647  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
001444  001648  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
001445  001649  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
001446  001650                                                  //
001447  001651  //==============================================//
001448  001652  // flash device specific functions              //
001449  001653  //==============================================//
001450  001654  func flash_SIG(), 1;                            // read Jedecsignature from SPI Flash device
001451  001655  func flash_ID(), 1;                             // read ID code from FLASH device
001452  001656  func flash_BulkErase(), 0;                      // erase the entire FLASH device
001453  001657  func flash_BlockErase("block"), 1;              // erase the required 64k flash block
001454  001658                                                  //
001455  001659                                                  //
001456  001660  //==============================================//
001457  001661  // string and character size function           //
001458  001662  //==============================================//
001459  001663  func charwidth("char"), 1;                      // return width of a character in pixel units
001460  001664  func charheight("char"), 1;                     // return height of a character in pixel units
001461  001665  func strwidth("pointer"), 1;                    // return width of a string in pixel units
001462  001666  func strheight(), 1;                            // return height of a string in pixel units
001463  001667        
001464  001668        
001465  001669  //------------------------------------------------------------------//
001466  001670  //        I2C Function Prototypes
001467  001671  //------------------------------------------------------------------//
001468  001672  func I2C_Open("speed"), 0;
001469  001673  // Syntax: I2C_Open(speed),
001470  001674  // Usage : I2C_Open(I2C_MED);
001471  001675  // Notes : configures the I2C module
001472  001676  //       : speed can be I2C_SLOW, I2C_MED, I2C_FAST (100khz, 400khz, 1mhz)
001473  001677        
001474  001678  func I2C_Close(), 0;
001475  001679  // Syntax: I2C_Close();
001476  001680  // Usage : I2C_Close();
001477  001681  // Notes : disables the I2C1 module.
001478  001682        
001479  001683  func I2C_Start(), 1;
001480  001684  // Syntax: I2C_Start();
001481  001685  // Usage : I2C_Start();
001482  001686  // Notes : generates a Start condition.
001483  001687  //       : returns true if successful (usually ignored)
001484  001688        
001485  001689  func I2C_Stop(), 1;
001486  001690  // Syntax: I2C_Stop();
001487  001691  // Usage : I2C_Stop();
001488  001692  // Notes : generates a Stop condition.
001489  001693  //       : returns true if successful (usually ignored)
001490  001694        
001491  001695  func I2C_Restart(), 1;
001492  001696  // Syntax: I2C_Restart();
001493  001697  // Usage : I2C_Restart();
001494  001698  // Notes : generates a Restart condition.
001495  001699  //       : returns true if successful (usually ignored)
001496  001700        
001497  001701  func I2C_Read(), 1;
001498  001702  // Syntax: I2C_Read();
001499  001703  // Usage : ch := I2C_Read();
001500  001704  // Notes : reads a single byte from the I2C Bus.
001501  001705        
001502  001706  func I2C_Write("byte"), 1;
001503  001707  // Syntax: I2C_Write(byte);
001504  001708  // Usage : r := I2C_Write(ch);
001505  001709  // Notes : is used to write a byte to the I2C bus.
001506  001710  //       : Returns 0 if failed, 1 if no ack, 2 if ack
001507  001711        
001508  001712  func I2C_Ack(), 0;
001509  001713  // Syntax: I2C_Ack();
001510  001714  // Usage : I2C_Ack();
001511  001715  // Notes : generates the acknowledge condition.
001512  001716        
001513  001717  func I2C_Nack(), 0;
001514  001718  // Syntax: I2C_Nack();
001515  001719  // Usage : I2C_Nack();
001516  001720  // Notes : generates the negative acknowledge condition.
001517  001721        
001518  001722  func I2C_AckStatus(), 0;
001519  001723  // Syntax: I2C_AckStatus();
001520  001724  // Usage : r := I2C_AckStatus();
001521  001725  // Notes : returns the ACK status from the device.
001522  001726        
001523  001727  func I2C_AckPoll("control"), 1;
001524  001728  // Syntax: I2C_AckPoll();
001525  001729  // Usage : r := I2C_AckPoll(0xA0);
001526  001730  // Notes : waits for a device to return from ACK polling.
001527  001731        
001528  001732  func I2C_Idle(), 0;
001529  001733  // Syntax: I2C_Idle();
001530  001734  // Usage : I2C_Idle();
001531  001735  // Notes : waits until the I2C Bus is Inactive.
001532  001736        
001533  001737  func I2C_Gets("buffer", "size"), 1;
001534  001738  // Syntax: I2C_Gets("buffer", "size");
001535  001739  // Usage : r := I2C_Gets(mybuf, 16);
001536  001740  // Notes : only reads up to "size" characters into "buffer"
001537  001741  //       : Reads up to asciiz terminator including terminator
001538  001742        
001539  001743  func I2C_Getn("buffer", "size"), 1;
001540  001744  // Syntax: I2C_Gets("buffer", "size");
001541  001745  // Usage : r := I2C_Gets(mybuf, 16);
001542  001746  // Notes : reads "size" bytes into "buffer"
001543  001747  //       :
001544  001748        
001545  001749  func I2C_Puts("buffer"), 1;
001546  001750  // Syntax: I2C_Puts("buffer");
001547  001751  // Usage : r := I2C_Puts(mybuf);
001548  001752  // Notes : writes an asciiz string to the I2C device
001549  001753  //       : returns count of characters written
001550  001754        
001551  001755  func I2C_Putn("buffer", "count"), 1;
001552  001756  // Syntax: I2C_Putn("buffer","count");
001553  001757  // Usage : r := I2C_Puts(mybuf,10);
001554  001758  // Notes : writes up to "size" bytes to the I2C device
001555  001759  //       : returns number of bytes written
001556  001760        
001557  001761        
001558  001762  //------------------------------------------------------------------//
001559  001763  //        Image Control Function Prototypes
001560  001764  //------------------------------------------------------------------//
001561  001765  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
001562  001766  // Syntax: img_SetPosition(handle, index, xpos, ypos);
001563  001767  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
001564  001768  // Notes : set the position where the image will be displayed
001565  001769  //       : returns true if index was ok and function was successful.
001566  001770  //       : you may turn off an image so when img_Refresh is called,
001567  001771  //       : the image will not be shown
001568  001772        
001569  001773  func img_Enable("handle", "index"), 1;
001570  001774  // Syntax: img_Enable(handle, index);
001571  001775  // Usage : r := img_Enable(hImageList, imagenum);
001572  001776  // Notes : enable image in a image list
001573  001777  //       : returns true if index was ok and function was successful.
001574  001778  //       : this is the default state so when img_Refresh is called,
001575  001779  //       : all the images in the list will be shown
001576  001780  //       : if index is set to -1, all of the images are enabled
001577  001781        
001578  001782  func img_Disable("handle", "index"), 1;
001579  001783  // Syntax: img_Disable(handle, index);
001580  001784  // Usage : r := img_Disable(hImageList, imagenum);
001581  001785  // Notes : disable image in a image list
001582  001786  //       : returns true if index was ok and function was successful.
001583  001787  //       : you must turn off an image so when img_Refresh is called,
001584  001788  //       : the image will not be shown.
001585  001789  //       : if index is set to -1, all of the images are disabled
001586  001790        
001587  001791        
001588  001792  func img_Darken("handle", "index"), 1;
001589  001793  // Syntax: img_Darken(handle, index);
001590  001794  // Usage : r := img_Darken(hImageList, imagenum);
001591  001795  // Notes : darken image in a image list
001592  001796  //       : returns true if index was ok and function was successful.
001593  001797  //       : if index is set to -1, all of the images are darkened
001594  001798  //       : NB:- this feature will only work for the next refresh, then
001595  001799  //       : the image reverts back to normal when displayed again.
001596  001800        
001597  001801        
001598  001802  func img_Lighten("handle", "index"), 1;
001599  001803  // Syntax: img_Lighten(handle, index);
001600  001804  // Usage : r := img_Lighten(hImageList, imagenum);
001601  001805  // Notes : lighten image in a image list
001602  001806  //       : returns true if index was ok and function was successful.
001603  001807  //       : if index is set to -1, all of the images are lightened
001604  001808  //       : NB:- this feature will only work for the next refresh, then
001605  001809  //       : the image reverts back to normal when displayed again.
001606  001810        
001607  001811  func img_SetWord("handle", "index", "offset", "word"), 1;
001608  001812  // Syntax: img_SetWord(handle, index, offset, word);
001609  001813  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
001610  001814  // Notes : set specified word (0-7) in a image entry
001611  001815  //       : returns TRUE if successful, return value usually ignored.
001612  001816        
001613  001817  func img_GetWord("handle", "index", "offset"), 1;
001614  001818  // Syntax: myvar := img_GetWord("handle", "index", "offset");
001615  001819  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
001616  001820  // Notes : returns specified word (0-14) from an image entry
001617  001821  //       : refer to image control entry offsets.
001618  001822        
001619  001823  func img_Show("handle", "index"), 1;
001620  001824  // Syntax: img_Show(handle, index);
001621  001825  // Usage : display image entry (regardless of enable/disable)
001622  001826  //       : returns TRUE if successful, return value usually ignored.
001623  001827        
001624  001828  func img_SetAttributes("handle", "index","value"), 1;
001625  001829  // Syntax: img_SetAttributes("handle", "index","offset");
001626  001830  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
001627  001831  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
001628  001832  //       : of an image control entry. "value" refers to various bits in
001629  001833  //       : the image control entry (see image attribute flags).
001630  001834  //       : A '1' bit in the "value" field SETS the respective bit
001631  001835  //       : in the IMAGE_FLAGS field of the image control entry.
001632  001836  //       : returns TRUE if successful, return value usually ignored.
001633  001837        
001634  001838  func img_ClearAttributes("handle", "index","value"), 1;
001635  001839  // Syntax: img_ClearAttributes("handle", "index","offset");
001636  001840  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
001637  001841  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
001638  001842  //       : of an image control entry. "value" refers to various bits in
001639  001843  //       : the image control entry (see image attribute flags)
001640  001844  //       : a '1' bit in the "value" field CLEARS the respective bit
001641  001845  //       : in the IMAGE_FLAGS field of the image control entry.
001642  001846  //       : returns TRUE if successful, return value usually ignored.
001643  001847        
001644  001848  func img_Touched("handle", "index"), 1;
001645  001849  // Syntax: r := img_Touched(handle, index);
001646  001850  // Usage : img_Touched(hndl, 17);
001647  001851  //       : returns -1 if image not touched, or returns index
001648  001852  // Notes : if index is passed as -1, function tests all images,
001649  001853  //       : and returns -1 if image not touched, or returns index.
001650  001854        
001651  001855        
001652  001856        
001653  001857        
001654  001858  //------------------------------------------------------------------//
001655  001859  //        Timer Function Prototypes
001656  001860  //------------------------------------------------------------------//
001657  001861  func sys_T(), 1;
001658  001862  // Syntax: sys_T();
001659  001863  // Usage : t := sys_T();
001660  001864  // Notes : return the current value of the rolling system timer (1msec) LO word
001661  001865        
001662  001866  func sys_T_HI(), 1;
001663  001867  // Syntax: sys_T_HI();
001664  001868  // Usage : t := sys_T_HI();
001665  001869  // Notes : return the current value of the rolling system timer (1msec) HI word
001666  001870        
001667  001871  func sys_SetTimer("timernum","value"), 0;
001668  001872  // Syntax: sys_SetTimer("timernum", "value");
001669  001873  // Usage : sys_SetTimer(TIMER5, 10000);
001670  001874  // Notes : set a countdown on the selected timer, or 'top up' if required.
001671  001875  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001672  001876  //       : Maximum timeout period is 65.535 seconds
001673  001877  //       : A timer can be read with the sys_GetTimer("timernum") function
001674  001878        
001675  001879  func sys_GetTimer("timernum"), 1;
001676  001880  // Syntax: t := sys_GetTimer("timernum");
001677  001881  // Usage : t := sys_GetTimer(TIMER3);
001678  001882  // Notes : returns 0 if timer has expired, or the current countdown value.
001679  001883  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001680  001884  //       : Maximum timeout period is 65.535 seconds
001681  001885  //       : A timer must be set with the sys_SetTimer("timernum","value") function
001682  001886        
001683  001887  func sys_SetTimerEvent("timernum","function"), 1;
001684  001888  // Syntax: sys_SetTimerFunction("timernum", "function");
001685  001889  // Usage : sys_SetTimer(TIMER5, myfunc);
001686  001890  // Notes : set a function to be called for selected timer.
001687  001891  //       : When the timer reaches zero, the function is called.
001688  001892  //       : The called function must not have any parameters
001689  001893  //       : sys_SetTimerEvent returns any previous event function
001690  001894  //       : address, or zero if there was no previous function.
001691  001895        
001692  001896  func sys_EventQueue(), 1;
001693  001897  // Syntax: sys_EventQueue();
001694  001898  // Usage : tasks := sys_EventQueue();
001695  001899  // Notes : returns the max number of events that were pending
001696  001900  //       : in the timer queue since the last call to this function.
001697  001901  //       : This can be used to assess timer event overhead burden,
001698  001902  //       : especially after or during a sys_EventsPostpone action.
001699  001903        
001700  001904  func sys_EventsPostpone(), 0;
001701  001905  // Syntax: sys_EventPostpone();
001702  001906  // Usage : sys_EventPostpone();   // postpone the event queue
001703  001907  // Notes : postpone any events until the sys_EventResume function is executed
001704  001908  //       : The timer event queue will continue to queue events, but no action
001705  001909  //       : will take place untill a sys_EventResume function is encountered.
001706  001910  //       : The queue will continue to receive up to 32 events before discarding
001707  001911  //       : any further events. This function is required to allow a sequence of
001708  001912  //       : instructions or functions to occur that would otherwise be corrupted
001709  001913  //       : by an event occuring during the sequence of instructions or functions.
001710  001914  //       : A good example of this is when you set a position to print, if there
001711  001915  //       : was no way of locking the current sequence, an event may occur which
001712  001916  //       : does a similar thing, and a contention would occur - printing to
001713  001917  //       : the wrong position. This function should be used wisely, if any action
001714  001918  //       : that is required would take considerable time, it is better to disable
001715  001919  //       : any conflicting event functions with a bypass flag, then restart the
001716  001920  //       : conflicting event by re-issuing a timer value.
001717  001921        
001718  001922  func sys_EventsResume(), 0;
001719  001923  // Syntax: sys_EventsResume();
001720  001924  // Usage : sys_EventsResume();   // resume the event queue
001721  001925  // Notes : resume any postponed events. The queue will try to execute any timer
001722  001926  //       : events that were incurred during the postponed period.
001723  001927        
001724  001928        
001725  001929  func sys_Sleep("units"), 1;
001726  001930  // Syntax: t := sys_Sleep("units");
001727  001931  // Usage : t := sys_Sleep(10);
001728  001932  // Notes : sets the display into low power mode for a period of time.
001729  001933  //       : Touching the touch screen will also wake from sleep.
001730  001934  //       : Returns remaining sleep units.
001731  001935        
001732  001936  func iterator("offset"), 0;
001733  001937  // Syntax: t :=  iterator("offset");
001734  001938  // Usage : t :=  iterator(10);
001735  001939  // Notes : set the iterator size for ++/--
001736  001940  //       : The next postinc,postdec,preinc of predec will alter
001737  001941  //       : by the specified value.
001738  001942  //       : The offset will return to 1 after the next operation.
001739  001943        
001740  001944        
001741  001945        
001742  001946        
001743  001947  //------------------------------------------------------------------//
001744  001948  //         Touch Screen Function Prototypes
001745  001949  //------------------------------------------------------------------//
001746  001950        
001747  001951  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
001748  001952  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
001749  001953  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
001750  001954  // Notes : Specifies a new touch detect region on the screen
001751  001955  //       : such that only touch activity in that region will
001752  001956  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
001753  001957        
001754  001958  func touch_Set("mode"), 0;
001755  001959  // Syntax: touch_Set(mode);
001756  001960  // Usage : touch_Set(arg);
001757  001961  // Notes : Sets various Touch Screen related parameters
001758  001962  //       :
001759  001963  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
001760  001964  //       : touch_Set(TOUCH_ENABLE);
001761  001965  //       : Enables and initialises Touch Screen hardware
001762  001966  //       :
001763  001967  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
001764  001968  //       : touch_Set(TOUCH_DISABLE );
001765  001969  //       : Disables the Touch Screen
001766  001970  //       : Note: Touch Screen runs in the background and disabling
001767  001971  //       : it when not in use will free up extra resources
001768  001972  //       : such as 4DVM CPU cycles.
001769  001973  //       :
001770  001974  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
001771  001975  //       : touch_Set(TOUCH_REGIONDEFAULT);
001772  001976  //       : This will reset the current active region to default
001773  001977  //       : to the full screen without the application having to
001774  001978  //       : set a new active region for the full screen.
001775  001979  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
001776  001980  //       : that requre to be interfaced with an external pointing
001777  001981  //       : device, values that are poked into TOUCH_DRIVE will be
001778  001982  //       : read with the touch_Get() function)
001779  001983        
001780  001984        
001781  001985  func touch_Get("mode"), 1;
001782  001986  // Syntax: touch_Get(mode);
001783  001987  // Usage : arg1 := touch_Get(arg);
001784  001988  // Notes : Returns various Touch Screen parameters to caller
001785  001989  //       :
001786  001990  //       : mode = TOUCH_STATUS  (mode 0)
001787  001991  //       : var := touch_Get(TOUCH_STATUS);
001788  001992  //       : Returns the various states of the touch screen
001789  001993  //       : 0 = NOTOUCH
001790  001994  //       : 1 = TOUCH_PRESSED
001791  001995  //       : 2 = TOUCH_RELEASED
001792  001996  //       : 3 = TOUCH_MOVING
001793  001997  //       :
001794  001998  //       : mode = TOUCH_GETX   (mode 1)
001795  001999  //       : var := touch_Get(TOUCH_GETX);
001796  002000  //       : Returns the X coordinates of the touch
001797  002001  //       :
001798  002002  //       : mode = TOUCH_GETY   (mode 2)
001799  002003  //       : var := touch_Get(TOUCH_GETY);
001800  002004  //       : Returns the Y coordinates of the touch
001801  002005        
001802  002006  //------------------------------------------------------------------//
001803  002007  //        CTYPE Function Prototypes
001804  002008  //------------------------------------------------------------------//
001805  002009        
001806  002010  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
001807  002011  // Syntax: isdigit("char");
001808  002012  // Usage : Var := isdigit(ch);
001809  002013  // Notes : char specifies the ascii character for the test
001810  002014  //     : 0 : char is not an ascii digit.
001811  002015  //     : 1 : char is an ascii digit..
001812  002016  //     : Valid range is "0123456789"
001813  002017        
001814  002018  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
001815  002019  // Syntax: isxdigit("char");
001816  002020  // Usage : Var := isxdigit(ch);
001817  002021  // Notes : char specifies the ascii character for the test
001818  002022  //     : 0 : char is not an ascii hexadecimal digit.
001819  002023  //     : 1 : char is an ascii hexadecimal digit..
001820  002024  //     : Valid range is "0123456789ABCDEF"
001821  002025        
001822  002026  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
001823  002027  // Syntax: isupper("char");
001824  002028  // Usage : Var := isupper(ch);
001825  002029  // Notes : char specifies the ascii character for the test
001826  002030  //     : 0 : char is not an ascii upper-case letter.
001827  002031  //     : 1 : char is an ascii upper-case letter.
001828  002032  //     : Valid range is "ABCD....WXYZ"
001829  002033        
001830  002034  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
001831  002035  // Syntax: islower("char");
001832  002036  // Usage : Var := islower(ch);
001833  002037  // Notes : char specifies the ascii character for the test
001834  002038  //     : 0 : char is not an ascii lower-case letter.
001835  002039  //     : 1 : char is an ascii lower-case letter.
001836  002040  //     : Valid range is "abcd....wxyz"
001837  002041        
001838  002042  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
001839  002043  // Syntax: isalpha("char");
001840  002044  // Usage : Var := isalpha(ch);
001841  002045  // Notes : char specifies the ascii character for the test
001842  002046  //     : 0 : char is not an ascii lower or upper case letter.
001843  002047  //     : 1 : char is an ascii lower or upper case letter.
001844  002048  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
001845  002049        
001846  002050  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
001847  002051  // Syntax: isalnum("char");
001848  002052  // Usage : Var := isalnum(ch);
001849  002053  // Notes : char specifies the ascii character for the test
001850  002054  //     : 0 : char is not an ascii alphanumeric character.
001851  002055  //     : 1 : char is an ascii alphanumeric character.
001852  002056  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
001853  002057        
001854  002058  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
001855  002059  // Syntax: isprint("char");
001856  002060  // Usage : Var := isprint(ch);
001857  002061  // Notes : char specifies the ascii character for the test
001858  002062  //     : 0 : char is not a printable ascii character.
001859  002063  //     : 1 : char is a printable ascii character.
001860  002064  //     : Valid range is "0x20...0x7F"
001861  002065        
001862  002066  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
001863  002067  // Syntax: isspace("char");
001864  002068  // Usage : Var := isspace(ch);
001865  002069  // Notes : char specifies the ascii character for the test
001866  002070  //     : 0 : char is not a space type character.
001867  002071  //     : 1 : char is a space type character.
001868  002072  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
001869  002073        
001870  002074  //unformatted
001871  002075  func iswhite("char"), 1;    //
001872  002076  // Syntax: iswhite("char");
001873  002077  // Usage : Var := iswhite(ch);
001874  002078  // Notes : char specifies the ascii character for the test
001875  002079  //     : 0 : char is not a space or tab character.
001876  002080  //     : 1 : char is not a space or tab character.
001877  002081  //     : Valid range is space or tab
001878  002082        
001879  002083  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
001880  002084  // Syntax: toupper("char");
001881  002085  // Usage : Var := toupper(ch);
001882  002086  // Notes : char specifies the ascii character for the test
001883  002087  //     : "ABCD....XYZ" : if character is a lower case letter.
001884  002088  //     : char : if character is not a lower case letter.
001885  002089  //     : Valid range is "abcd....wxyz"
001886  002090        
001887  002091  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
001888  002092  // Syntax: tolower("char");
001889  002093  // Usage : Var := tolower(ch);
001890  002094  // Notes : char specifies the ascii character for the test
001891  002095  //     : "abcd....xyz" : if character is an upper case letter.
001892  002096  //     : char : if character is not an upper case letter.
001893  002097  //     : Valid range is "ABCD....WXYZ"
001894  002098        
001895  002099  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
001896  002100  // Syntax: LObyte(var);
001897  002101  // Usage : myVar := LObyte(myvar2);
001898  002102  // Notes : var specifies the user variable
001899  002103  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
001900  002104        
001901  002105  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
001902  002106  // Syntax: HIbyte(var);
001903  002107  // Usage : myVar := HIbyte(myvar2);
001904  002108  // Notes : var specifies the user variable
001905  002109  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
001906  002110        
001907  002111        
001908  002112  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
001909  002113  // Syntax: ByteSwap(var);
001910  002114  // Usage : myVar := ByteSwap(myvar2);
001911  002115  // Notes : var specifies the user variable
001912  002116  //     : Returns the endian swapped value of a 16 bit variable
001913  002117        
001914  002118        
001915  002119  //------------------------------------------------------------------//
001916  002120  //        Memory Allocation Function Prototypes
001917  002121  //------------------------------------------------------------------//
001918  002122        
001919  002123  func mem_Alloc("size"), 1;
001920  002124  // Syntax: mem_Alloc(bytesize);
001921  002125  // Usage : myvar := mem_Alloc(100);
001922  002126  // Notes : Allocate a block of memory to pointer myvar
001923  002127  //       : The allocated memory contains garbage but is a fast allocation.
001924  002128  //       : The block must later be released with mem_Free();
001925  002129  //       : returns 0 if function fails
001926  002130        
001927  002131  func mem_AllocV("size"), 1;
001928  002132  // Syntax: mem_AllocV(bytesize);
001929  002133  // Usage : myvar := mem_AllocV(100);
001930  002134  // Notes : Allocate a block of memory to pointer myvar
001931  002135  //       : The block of memory is filled with signature values
001932  002136  //       : the block starts with A5,5A then fills with incrementing
001933  002137  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
001934  002138  //       : This can be helpful when debugging
001935  002139  //       : The block must later be released with mem_Free();
001936  002140  //       : returns 0 if function fails
001937  002141        
001938  002142  func mem_AllocZ("size"), 1;
001939  002143  // Syntax: mem_AllocZ(bytesize);
001940  002144  // Usage : myvar := mem_AllocC(100);
001941  002145  // Notes : Allocate a zeroed block of memory to pointer myvar
001942  002146  //       : The block of memory is filled with zeroes
001943  002147  //       : The block must later be released with mem_Free();
001944  002148  //       : returns 0 if function fails
001945  002149        
001946  002150  func mem_Realloc("ptr", "size"), 1;
001947  002151  // Syntax: myvar := mem_Realloc("ptr", "size");
001948  002152  // Usage : myvar := mem_Realloc(ptr, size);
001949  002153  // Notes : The function may move the memory block to a new location,
001950  002154  //       : in which case the new location is returned.
001951  002155  //       : The content of the memory block is preserved up to the lesser
001952  002156  //       : of the new and old sizes, even if the block is moved.
001953  002157  //       : If the new size is larger, the value of the newly allocated
001954  002158  //       : portion is indeterminate. In case that ptr is NULL,
001955  002159  //       : the function behaves exactly as mem_Alloc, assigning a new block
001956  002160  //       : of size bytes and returning a pointer to the beginning of it.
001957  002161  //       : In case that the size is 0, the memory previously allocated in
001958  002162  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
001959  002163  //       : pointer is returned.
001960  002164        
001961  002165  func mem_Free("allocation"), 1;
001962  002166  // Syntax: myvar := mem_Free(allocation);
001963  002167  // Usage : myvar := mem_Free(myvar);
001964  002168  // Notes : De-allocate a block of memory previously created with
001965  002169  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
001966  002170  //       : returns 0 if function fails
001967  002171        
001968  002172  func mem_Heap(), 1;
001969  002173  // Syntax: myvar := mem_Heap();
001970  002174  // Usage : myvar := mem_Heap();
001971  002175  // Notes : returns bytecount available in heap
001972  002176  //       :
001973  002177        
001974  002178  func mem_Set("ptr","char","size"), 1;
001975  002179  // Syntax: mem_Set(ptr,char,bytesize);
001976  002180  // Usage : mem_Set(p, 'A', 100);
001977  002181  // Notes : fill a block of memory with a byte value
001978  002182  //       : returns ptr
001979  002183        
001980  002184  func mem_Copy("src", "dest", "bytecount"), 1;
001981  002185  // Syntax: myvar := mem_Copy(src, dest, bytesize);
001982  002186  // Usage : myvar := mem_Copy(p1, p2, 100);
001983  002187  // Notes : copy a word aligned block of memory from src to dest
001984  002188  //       : Note that count is a byte count, this facilitates
001985  002189  //       : copying word aligned byte arrays when using word
001986  002190  //       : aliggned packed strings.
001987  002191  //       : returns src
001988  002192        
001989  002193  func mem_Compare("ptr1","ptr2","count"), 1;
001990  002194  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
001991  002195  // Usage : myvar := mem_Compare(p1, p2, 100);
001992  002196  // Notes : compare blocks of memory at src, dest
001993  002197  //       : returns 0 if we have a match
001994  002198        
001995  002199  //------------------------------------------------------------------//
001996  002200  //        FAT16 Function Prototypes
001997  002201  //------------------------------------------------------------------//
001998  002202        
001999  002203  func file_Error(), 1;
002000  002204  // Syntax: myvar := file_Error();
002001  002205  // Usage : e := file_Error();
002002  002206  // Notes : return the most recent file error.
002003  002207  //       :
002004  002208        
002005  002209  func file_Count("filename"), 1;
002006  002210  // Syntax: count := file_Count("filename");
002007  002211  // Usage : count := file_Count("*.4dg");
002008  002212  // Notes : returns number of files found that match the criteria
002009  002213        
002010  002214  func file_Dir("filename"), 1;
002011  002215  // Syntax: count := file_Dir("filename");
002012  002216  // Usage : count := file_Dir("*.4dg");
002013  002217  // Notes : streams a string of filenames that agree with the search key
002014  002218  //       : returns number of files found that match the criteria
002015  002219        
002016  002220  func file_FindFirst("fname"), 1;
002017  002221  // Syntax: res := file_FindFirst("fname");
002018  002222  // Usage : if (file_FindFirst("*.4xe") ....
002019  002223  // Notes : returns true if at least 1 file exists
002020  002224  //       : that satisfies the file argument.
002021  002225  //       : Wildcards are usually used so if
002022  002226  //       : file_FindFirst returns true, further
002023  002227  //       : tests can be made using file_FindNext();
002024  002228  //       : to find all the files that match the
002025  002229  //       : wildcard class. Note that the stream behaviour
002026  002230  //       : is the same as file_Dir.
002027  002231  //       :
002028  002232        
002029  002233  func file_FindNext(), 1;
002030  002234  // Syntax: res := file_FindNext();
002031  002235  // Usage : while ((file_FindNext()) ....
002032  002236  // Notes : returns true if more file exists
002033  002237  //       : that satisfies the file argument
002034  002238  //       : that was given for  file_FindFirst.
002035  002239  //       : Wildcards must be used for
002036  002240  //       : file_FindFirst, else this function will
002037  002241  //       : always return zero as the only occurence
002038  002242  //       : will have already been found.
002039  002243  //       : Note that the stream behaviour
002040  002244  //       : is the same as file_Dir.
002041  002245  //       :
002042  002246        
002043  002247  func file_Exists("fname"), 1;
002044  002248  // Syntax: res := file_Exists("fname"),
002045  002249  // Usage : if(file_Exists("myfile") ....
002046  002250  // Notes : returns true if file exists
002047  002251  //       :
002048  002252        
002049  002253  func file_Open("fname", "mode"), 1;
002050  002254  // Syntax: handle := file_Open("fname","mode"),
002051  002255  // Usage : handle := file_Open("myfile.txt", 'r');
002052  002256  // Notes : returns handle if file exists
002053  002257  //       :
002054  002258        
002055  002259  func file_Close("handle"), 1;
002056  002260  // Syntax: res := file_Close("handle");
002057  002261  // Usage : res := file_Close(hnd1);
002058  002262  // Notes : returns true if file closed ok
002059  002263  //       :
002060  002264        
002061  002265  func file_Read("*dest", "size", "handle"), 1;
002062  002266  // Syntax: res := file_Read("*dest", "size", "handle"),
002063  002267  // Usage : res := file_Read(memblock,20,hnd1);
002064  002268  // Notes : returns number of characters read
002065  002269  //       : if "dest" is zero, data is read direct to GRAM window
002066  002270  //       :
002067  002271        
002068  002272        
002069  002273  func file_Seek("handle", "HiWord", "LoWord"), 1;
002070  002274  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
002071  002275  // Usage : res := file_Seek(hSource, 0, 0x1234);
002072  002276  // Notes : set file position to 0x00001234 (byte position 4660)
002073  002277  //       : for the file handle so subsequent data may be read
002074  002278  //       : from that position onwards with file_GetC(...),
002075  002279  //       : file_GetW(...) or file_GetS(...), or an image
002076  002280  //       : can be displayed with file_Image(...)
002077  002281  // Notes : returns true if ok, usually ignored
002078  002282        
002079  002283  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002080  002284  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002081  002285  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
002082  002286  // Notes : set file seek position to 123000
002083  002287  //       : for the file handle so subsequent data may be read
002084  002288  //       : from that record position onwards with file_GetC(...),
002085  002289  //       : file_GetW(...) or file_GetS(...), or an image
002086  002290  //       : can be displayed with file_Image(...)
002087  002291  // Notes : returns true if ok, usually ignored
002088  002292        
002089  002293  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
002090  002294  // Syntax: file_Tell("handle", &HiWord, &LoWord);
002091  002295  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
002092  002296  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
002093  002297  //       : returns true if function succeeded
002094  002298        
002095  002299  func file_Write("*source", "size", "handle"), 1;
002096  002300  // Syntax: res := fwrite("*source", "size", "handle"),
002097  002301  // Usage : res := fwrite(memblock, 20, hnd1);
002098  002302  // Notes : returns number of bytes written
002099  002303  //       :
002100  002304        
002101  002305  func file_Size("handle", "&HiWord", "&LoWord"), 1;
002102  002306  // Syntax: file_Size("handle", &HiWord, &LoWord);
002103  002307  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
002104  002308  // Notes : Reads the 32 bit file size and stores it into 2 variables.
002105  002309  //       : returns true if function succeeded
002106  002310        
002107  002311  func file_Image("x", "y", "handle"), 1;
002108  002312  // Syntax: file_Image(x, y, handle);
002109  002313  // Usage : file_Image(10, 10, hnd1);
002110  002314  // Notes : Display an image from a file at the current file position.
002111  002315  //       : The image is displayed at x,y (with respect to top left corner).
002112  002316  //       : If there is more than 1 image in the file, it can be
002113  002317  //       : accessed with file_Seek(...)
002114  002318        
002115  002319  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
002116  002320  // Syntax: file_ScreenCapture(x, y, w, h, handle);
002117  002321  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
002118  002322  // Notes : Save a image from screen to file at the current file position.
002119  002323  //       : The image can later be displayed with file_Image(...);
002120  002324  //       : The file may be opened in append mode to accumulate multiple
002121  002325  //       : images. Later, the images can be accessed with file_Seek(...);
002122  002326  //       : Note that the image will be sector aligned.
002123  002327  //       : All image headers must start on a sector boundary.
002124  002328  //       : The image is saved from x, y (with respect to top left corner)
002125  002329  //       : and the capture area is determined by "width" and "height".
002126  002330  //       : returns 0 if function succeeded
002127  002331        
002128  002332  func file_PutC("char","handle"), 1;
002129  002333  // Syntax: file_PutC("char", "handle");
002130  002334  // Usage : file_PutC('x', hndl);
002131  002335  // Notes : returns true if function succeeded
002132  002336        
002133  002337  func file_GetC("handle"), 1;
002134  002338  // Syntax: file_GetC("handle");
002135  002339  // Usage : mychar := fgetC("handle");
002136  002340  // Notes : returns next char from file
002137  002341        
002138  002342  func file_PutW("word","handle"), 1;
002139  002343  // Syntax: file_PutW("word","handle");
002140  002344  // Usage : file_PutW(0x1234, hndl);
002141  002345  // Notes : returns true if function succeeded
002142  002346        
002143  002347  func file_GetW("handle"), 1;
002144  002348  // Syntax: file_GetW("handle");
002145  002349  // Usage : myword := fgetW("handle");
002146  002350  // Notes : returns next word in file
002147  002351        
002148  002352  func file_PutS("*source", "handle"), 1;
002149  002353  // Syntax: res := file_Puts("*source", "handle"),
002150  002354  // Usage : res := file_Puts(mystring, hnd1);
002151  002355  // Notes : returns number of characters written
002152  002356  //       :
002153  002357        
002154  002358  func file_GetS("*string", "size", "handle"), 1;
002155  002359  // Syntax: res := file_Gets("*string", "size", "handle");
002156  002360  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
002157  002361  // Notes : get a string from a file
002158  002362  //       : returns pointer to string or null if failed.
002159  002363  //       : file_GetS(...) automatically appends a null-terminator to the data read.
002160  002364  //       : NB:- only reads up to "size-1" characters into "string"
002161  002365  //       : file_GetS(...) will stop reading when any of the following conditions are true:
002162  002366  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
002163  002367  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
002164  002368  //       : C] It reaches the end of file
002165  002369  //       : D] A read error occurs.
002166  002370        
002167  002371        
002168  002372  func file_Erase("fname"), 1;
002169  002373  // Syntax: res := file_Erase("fname");
002170  002374  // Usage : res := file_Erase("myfile.txt");
002171  002375  // Notes : returns true if successful
002172  002376  //       :
002173  002377        
002174  002378  func file_Rewind("handle"), 1;
002175  002379  // Syntax: res := file_Rewind("handle");
002176  002380  // Usage : res := file_Rewind(hnd1);
002177  002381  // Notes : returns true if file rewound ok (usually ignored)
002178  002382  //       : resets the file pointer the the beginning of the open file.
002179  002383        
002180  002384  func file_LoadFunction("fname.4xe"), 1;
002181  002385  // Syntax: res := file_LoadFunction("fname.4fn");
002182  002386  // Usage : myfunc := file_LoadFunction(myfuncname);
002183  002387  // Notes : Load a function or program from disk and
002184  002388  //       : return a function pointer to the allocation.
002185  002389  //       : The function can then be invoked just like any other
002186  002390  //       : function would be called via a function pointer.
002187  002391  //       : Parameters may be passed to it in a conventional way.
002188  002392  //       : The function may be discarded at any time when no
002189  002393  //       : longer required, thus freeing its memory resources.
002190  002394  //       : The loaded function can be discarded with mem_Free(..)
002191  002395  //       : eg:
002192  002396  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
002193  002397  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
002194  002398  //       : then elsewhere in your program:-
002195  002399  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
002196  002400  //       : if(res == QUIT_APPLICATION) goto exitApp;
002197  002401  //       : Later in your program, when popupWindow is no longer
002198  002402  //       : required for the application:-
002199  002403  //       : res := mem_Free(popupWindow);
002200  002404  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
002201  002405  //       : The callers stack is shared by the loaded function,
002202  002406  //       : however any global variables in the loaded function
002203  002407  //       : are private to that function.
002204  002408  //
002205  002409        
002206  002410  func file_Run("fname.4xe", "arglistptr"), 1;
002207  002411  // Syntax: res := file_Run("fname.4xe","arglistptr");
002208  002412  // Usage : res := file_Run(fname, argptr);
002209  002413  // Notes : current program releases any allocated memory but
002210  002414  //       : retains the stack and global memory.
002211  002415  //       : If arglistptr is 0, no arguments are passed, else
002212  002416  //       : arglist points to an array, the first element being
002213  002417  //       : the number of elements in the array.
002214  002418  //       : func 'main' in the called program accepts
002215  002419  //       : the arguments, if any. THe arguments can only
002216  002420  //       : be passed by value, no pointers or references can be
002217  002421  //       : used as all memory is cleared before the file
002218  002422  //       : is loaded. Refer to file_Exec and file_LoadFunction
002219  002423  //       : for functions that can pass by reference.
002220  002424        
002221  002425  func file_Exec("fname.4xe", "arglistptr"), 1;
002222  002426  // Syntax: res := file_Exec("fname.4xe","arglistptr");
002223  002427  // Usage : res := file_Exec("fname.4xe","arglistptr");
002224  002428  // Notes : returns like a function, current program
002225  002429  //       : calling program is kept active and control returns to it.
002226  002430  //       : If arglistptr is 0, no arguments are passed, else
002227  002431  //       : arglist points to an array, the first element being
002228  002432  //       : the number of elements in the array.
002229  002433  //       : func 'main' in the called program accepts the arguments.
002230  002434  //       : This function is similar to file_LoadFunction(...), however,
002231  002435  //       : the function argument list is passed by pointer, and
002232  002436  //       : the memory consumed by the function is released as
002233  002437  //       : soon as the function completes.
002234  002438        
002235  002439  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
002236  002440  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
002237  002441  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
002238  002442  // Notes : Reads a control file to create an image list.
002239  002443  //       : Returns NULL if function fails.
002240  002444  //       : Returns a handle (pointer to the memory allocation) to the
002241  002445  //       : image control list that has been created.
002242  002446  //       : "fname1" is the control list filename "*.dat"
002243  002447  //       : "fname2" is the image filename "*.gci"
002244  002448        
002245  002449  // Notes : This function Calculates the size of a chunk of memory required for
002246  002450  //       : a image list and populates it from the image control file ("*.dat")
002247  002451  //       : therefore, when imagelist is no longer required, you must de-allocate
002248  002452  //       : the image list memory by using eg:- mem_Free(hImagelist);
002249  002453  //       : to restore the heap.
002250  002454  //       :
002251  002455  //       : mode 0:- it is assumed that there is a graphics file with the
002252  002456  //       : file extension "fname2.gci". In this case, the images have been stored
002253  002457  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
002254  002458  //       : "fname1.dat" file are saved in the image control so that the image control
002255  002459  //       : can open the file (*.gci) and us file_Seek to get to the position of the
002256  002460  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
002257  002461  //       : mode 0 builds the image control quickly as it only scans the *.dat file
002258  002462  //       : for the file offsets and save them in the relevant entries in the image control.
002259  002463  //       : The penalty is that images take longer to find when displayed due to file_Seek
002260  002464  //       : overheads.
002261  002465  //
002262  002466  //       : mode 1:- it is assumed that there is a graphics file with the
002263  002467  //       : file extension "fname2.gci". In this case, the images have been stored
002264  002468  //       : in a FAT16 file concurrently, and the offset of the images are saved
002265  002469  //       : in the image control so that image file (*.gci) can be mapped to directly.
002266  002470  //       : The absolute cluster/sector is mapped so file seek does not need to be called
002267  002471  //       : internally. This means that there is no seek time penalty, however, the
002268  002472  //       : image list takes a lot longer to build, as all the seeking is done at control
002269  002473  //       : build time.
002270  002474        
002271  002475  //       : mode 2:- the graphics file with the is placed in a partitioned area
002272  002476  //       : In this case, the images have been stored in a in a known raw area of the FAT16
002273  002477  //       : disk, and the absolute address of the images are saved in the DAT file
002274  002478  //       : This is the fastest operation of the image control as there is no seeking
002275  002479  //       : or other disk activity taking place.
002276  002480        
002277  002481  func file_Mount(), 1;
002278  002482  // Syntax: r := file_Mount();
002279  002483  // Usage : r := file_Mount();
002280  002484  // Notes : Create a control block for FAT16 and mount the File System
002281  002485        
002282  002486  func file_Unmount(), 0;
002283  002487  // Syntax: file_Unmount();
002284  002488  // Usage : file_Unmount();
002285  002489  // Notes : release any control block and buffers for FAT16
002286  002490  //       : and unmount the File System
002287  002491        
002288  002492  func file_PlayWAV("fname1"), 1;
002289  002493  // Syntax: file_PlayWAV("fname1");
002290  002494  // Usage : file_PlayWAV("ding.wav");
002291  002495  // Notes : Play a wave file with filename "fname1"
002292  002496  //       : This function automatically grabs a chunk
002293  002497  //       : of memory for a file buffer, and a wave
002294  002498  //       : buffer. The minimum memory requirement is
002295  002499  //       : about 580 bytes for the disk io service and
002296  002500  //       : a minimum wave buffer size of 1024. The siz
002297  002501  //       : of the wave buffer allocation
002298  002502  //       : can be increased by the snd_BufSize function.
002299  002503  //       : The default size 1024 bytes.
002300  002504  //       : NB the memory is only required during the
002301  002505  //       : duration of play, and is automatically
002302  002506  //       : released while not in use.
002303  002507  //       : See the Sound Class services for other associated controls.
002304  002508  //       : If there are no errors, returns number of blocks to play (1 to 32767)
002305  002509  //       : If errors occured, the folling is returned
002306  002510  //       : -7  : Insufficient memory available for WAV buffer and file
002307  002511  //       : -6  : cant play this rate
002308  002512  //       : -5  : no data chunk found in first rsector
002309  002513  //       : -4  : no format data
002310  002514  //       : -3  : no wave chunk signature
002311  002515  //       : -2  : bad wave file format
002312  002516  //       : -1  : file not found
002313  002517        
002314  002518        
002315  002519        
002316  002520  //------------------------------------------------------------------//
002317  002521  //        Sound Class Services
002318  002522  //------------------------------------------------------------------//
002319  002523        
002320  002524  func snd_Volume("var"), 0;
002321  002525  // Syntax: snd_Volume("var");
002322  002526  // Usage : snd_Volume(30);
002323  002527  // Notes : set sound playback volume.  Var must
002324  002528  //       : be in the range from 8 (min volume)
002325  002529  //       : to 127 (max volume). If var is less
002326  002530  //       : than 8 volume is set to 8, and if
002327  002531  //       : var > 127 it is set to 127.
002328  002532        
002329  002533  func snd_Pitch("pitch"), 1;
002330  002534  // func snd_Pitch("freq"), 1;
002331  002535  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
002332  002536  // Notes : sets the samples playback rate to a different frequency
002333  002537  //       : The minimum value is 4khz
002334  002538  //       : Setting the pitch to zero restores the original sample rate
002335  002539  //       : Return value is the samples original sample rate.
002336  002540        
002337  002541  func snd_BufSize("var"), 0;
002338  002542  // Syntax: snd_BufSize("var");
002339  002543  // Usage : snd_BufSize(2);
002340  002544  // Notes : specify the a memory chunk size for the wavefile buffer.
002341  002545  //       : default size 1024 bytes.
002342  002546  //       : 0 = 1024 bytes (default)
002343  002547  //       : 1 = 2048 bytes
002344  002548  //       : 2 = 4096 bytes
002345  002549  //       : 3 = 8192 bytes
002346  002550        
002347  002551  func snd_Stop(), 0;
002348  002552  // Syntax: snd_Stop();
002349  002553  // Usage : snd_Stop();
002350  002554  // Notes : stop any sound that is playing, releasing
002351  002555  //       : buffers and closes any open wav file.
002352  002556        
002353  002557  func snd_Pause(), 0;
002354  002558  // Syntax: snd_Pause();
002355  002559  // Usage : snd_Pause();
002356  002560  // Notes : pauses any sound that is playing, does nothing
002357  002561  //       : until sound is resumed with snd_Continue().
002358  002562  //       : The sample cam be terminated with snd_Stop.
002359  002563  //       : buffers and closes any open wav file.
002360  002564        
002361  002565  func snd_Continue(), 0;
002362  002566  // Syntax: snd_Continue();
002363  002567  // Usage : snd_Continue();
002364  002568  // Notes : resume any sound that is paused by snd_Pause.
002365  002569        
002366  002570  func snd_Playing(), 1;
002367  002571  // Syntax: snd_Playing();
002368  002572  // Usage : r := snd_Playing();
002369  002573  // Notes : returns 0 if sound has finished playing,
002370  002574  //       : else return number of 512 byte blocks to go.
002371  002575        
002372  002576        
002373  002577        
002374  002578  //------------------------------------------------------------------//
002375  002579  //        String Class Services
002376  002580  //------------------------------------------------------------------//
002377  002581        
002378  002582  func str_Ptr("&var"), 1;
002379  002583  // Syntax: str_Ptr(&var);
002380  002584  // Usage : p := str_Ptr(&var);
002381  002585  // Notes : return a byte pointer to a word region
002382  002586        
002383  002587  func str_GetD("&ptr", "&var"), 1;
002384  002588  // Syntax: str_GetD(&ptr, &var);
002385  002589  // Usage : ok := str_GetD(&ptr, &var);
002386  002590  // Notes : convert number in a string to DWORD ( myvar[2] )
002387  002591  //       : returns true if function succeeds, advancing ptr
002388  002592        
002389  002593  func str_GetW("&ptr", "&var"), 1;
002390  002594  // Syntax: str_GetW(&ptr, &var);
002391  002595  // Usage : ok := str_GetW(&ptr, &var);
002392  002596  // Notes : convert number in a string to WORD ( myvar )
002393  002597  //       : returns true if function succeeds, advancing ptr
002394  002598        
002395  002599  func str_GetHexW("&ptr", "&var"), 1;
002396  002600  // Syntax: str_GetHexW(&ptr, &var);
002397  002601  // Usage : ok := str_GetHexW(&ptr, &var);
002398  002602  // Notes : convert HEX number in a string to WORD ( myvar )
002399  002603  //       : returns true if function succeeds, advancing ptr
002400  002604        
002401  002605  func str_GetC("&ptr", "&var"), 1;
002402  002606  // Syntax: str_GetC(&ptr, &var);
002403  002607  // Usage : ok := str_GetC(&ptr, &var);
002404  002608  // Notes : get a valid ascii char in a string to WORD ( myvar )
002405  002609  //       : returns true if function succeeds, advancing ptr
002406  002610        
002407  002611  func str_GetByte("ptr"), 1;
002408  002612  // Syntax: str_GetByte(ptr);
002409  002613  // Usage : myvar := str_GetByte(ptr);
002410  002614  // Notes : get a byte to myvar
002411  002615  //       : returns value
002412  002616        
002413  002617  func str_GetWord("ptr"), 1;
002414  002618  // Syntax: GetWord(ptr);
002415  002619  // Usage : GetWord(ptr);
002416  002620  // Notes : get a word to myvar
002417  002621  //       : returns value
002418  002622        
002419  002623  func str_PutByte("ptr","val"), 0;
002420  002624  // Syntax: str_PutByte(ptr);
002421  002625  // Usage : myvar := str_PutByte(ptr);
002422  002626  // Notes : put a byte at ptr
002423  002627  //       : returns value
002424  002628        
002425  002629  func str_PutWord("ptr","val"), 0;
002426  002630  // Syntax: str_PutWord("ptr","val");
002427  002631  // Usage : str_PutWord(p,100);
002428  002632  // Notes : put word 100 at current pointer location
002429  002633  //       : returns value
002430  002634        
002431  002635  func str_Match("&ptr", "*str"), 1;
002432  002636  // Syntax: str_Match(&ptr, *str);
002433  002637  // Usage : r := str_Match(&p, "hello");
002434  002638  // Notes : Case sensitive match
002435  002639  //       : returns true if function succeded, andvancing pointer to position past
002436  002640  //       : the matched item. Note that any whitespace characters are skipped
002437  002641  //       : in the source string prior to the test.
002438  002642        
002439  002643  func str_MatchI("&ptr", "*str"), 1;
002440  002644  // Syntax: str_MatchI(&ptr, *str);
002441  002645  // Usage : r := str_MatchI(&p, "hello");
002442  002646  // Notes : Case insensitive match
002443  002647  //       : returns true if function succeded, andvancing pointer to position past
002444  002648  //       : the matched item. Note that any whitespace characters are skipped
002445  002649  //       : in the source string prior to the test.
002446  002650        
002447  002651  func str_Find("&ptr", "*str"), 1;
002448  002652  // Syntax: str_Find(&ptr, *str);
002449  002653  // Usage : n := str_Find(&p, "hello");
002450  002654  // Notes : given the address of a pointer to a source string as the
002451  002655  //       : first argument, and a pointer to a test string as the second
002452  002656  //       : argument, attempt to find the position of the matching string
002453  002657  //       : in the source string. The test is performed with case sensitivity.
002454  002658  //       : return 0 if not found, else returns the address of the first
002455  002659  //       : character of the match. NB:- The source pointer is not altered.
002456  002660        
002457  002661  func str_FindI("&ptr", "*str"), 1;
002458  002662  // Syntax: str_Find(&ptr, *str);
002459  002663  // Usage : n := str_Find(&p, "hello");
002460  002664  // Notes : given the address of a pointer to a source string as the
002461  002665  //       : first argument, and a pointer to a test string as the second
002462  002666  //       : argument, attempt to find the position of the matching string
002463  002667  //       : in the source string. The test is performed with no case
002464  002668  //       : sensitivity, eg upper and lower case chars are accepted.
002465  002669  //       : return 0 if not found, else returns the address of the first
002466  002670  //       : character of the match. NB:- The source pointer is not altered.
002467  002671        
002468  002672  func str_Length("ptr"), 1;
002469  002673  // Syntax: str_Length(ptr);
002470  002674  // Usage : len := str_Ptr(mystring);
002471  002675  // Notes : return the length of a byte aligned string excluding terminator
002472  002676        
002473  002677  func str_Printf("&ptr", "*format"), 1;
002474  002678  // Syntax: str_Printf("&ptr", "*format");
002475  002679  // Usage : r := str_Printf(&p, "hello");
002476  002680  // Notes : refer to documentation
002477  002681  //       :
002478  002682        
002479  002683  func str_Cat("dest","src"), 1;
002480  002684  // Syntax: str_Append("&dest","&src");
002481  002685  // Usage : str_Append(&buf,"Hello");
002482  002686  // Notes : Appends a copy of the source string to the destination string.
002483  002687  //       : The terminating null character in destination is overwritten by
002484  002688  //       : the first character of source, and a new null-character is appended
002485  002689  //       : at the end of the new string formed by the concatenation of both in destination.
002486  002690  //       : returns destination.
002487  002691        
002488  002692  func str_CatN("dest","src","count"), 1;
002489  002693  // Syntax: str_Append("&dest","&src","count");
002490  002694  // Usage : str_Append(&buf,"Monday",3);
002491  002695  // Notes : Appends a copy of the source string to the destination string.
002492  002696  //       : The number of characters copied is limited by "count".
002493  002697  //       : The terminating null character in destination is overwritten by
002494  002698  //       : the first character of source, and a new null-character is appended
002495  002699  //       : at the end of the new string formed by the concatenation of both in destination.
002496  002700  //       : returns destination.
002497  002701        
002498  002702        
002499  002703  func sys_StoreTouchCalibration(), 1;
002500  002704  // Syntax: sys_StoreTouchCalibration();
002501  002705  // Usage : r := sys_StoreTouchCalibration();
002502  002706  // Notes : Store the touch calibration values in non-volatile memory.
002503  002707  //       : Returns true if the values have been accepted and stored,
002504  002708  //       : else returns false if write could not be performed, or
002505  002709  //       : touch calibration values are improbable.
002506  002710  //       : The values that are stored are obtained from:-
002507  002711  //     : TOUCH_XMINCAL             78  // touch calibration value
002508  002712  //     : TOUCH_YMINCAL             79  // touch calibration value
002509  002713  //       : TOUCH_XMAXCAL             80  // touch calibration value
002510  002714  //       : TOUCH_YMAXCAL             81  // touch calibration value
002511  002715  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
002512  002716  //       : This function is not supported on uVGA, Capicitive touch
002513  002717  //       : and 4.3" resistive touch modules.
002514  002718        
002515  002719        
002516  002720  func unicode_page("charbeg","charend","charoffset"), 1;
002517  002721  // Syntax: unicode_page("charbeg","charend","charoffset");
002518  002722  // Usage : eg:  F_Traditional_0x20_0xFF
002519  002723  // Notes : After selecting a unicode image control with txt_FontID,
002520  002724  //       : this function is called to set the required font within the
002521  002725  //       : unicode set. The file "Unicode.inc" contains wrappers for
002522  002726  //       : this function, and it is not normally called directly.
002523  002727  //       : Returns count of characters in the set.
002524  002728  //       : Refer to "Unicode.inc" for further information.
002525  002729        
002526  002730        
002527  002731  func EVE_SP(), 1;
002528  002732  // Syntax: EVE_SP();
002529  002733  // Usage : eg:  print(EVE_SP());
002530  002734  // Notes : Used for debugging to assess the current stack level,
002531  002735  //       : mainly for checking stack leaks
002532  002736        
002533  002737  func EVE_SSIZE(), 1;
002534  002738  // Syntax: EVE_SSIZE();
002535  002739  // Usage : eg:  print(EVE_SSIZE());
002536  002740  // Notes : Used to get the stack size,
002537  002741  //       : mainly for debugging purposes
002538  002742        
002539  002743        
002540  002744  // uVGAII extended functions
002541  002745  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
002542  002746  // Syntax: disp_Sync(line);
002543  002747  // Usage : disp_Sync(480);
002544  002748  // Notes : Waits till the hardware gets to a certain line.
002545  002749  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
002546  002750  //       : Some experimentation may be needed to find an optimum line for disp_Sync
002547  002751  //       : depending on the graphics operation. The higher the value, the slower
002548  002752  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
002549  002753  //       : within the vertical retrace period) where it will just 'hang up' stopping the
002550  002754  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
002551  002755  //       : be slowest (as its actually right at the end of the blanking period) and 508
002552  002756  //       : will cause a hangup situation as it is above the highes scanline value.
002553  002757  //       : Currently, this function is only supported on displays with SSD1963 driver.
002554  002758        
002555  002759        
002556  002760  // New functions added to PmmC v2.8
002557  002761  //================================================================
002558  002762  func CY(), 1;
002559  002763  // Syntax: CY();
002560  002764  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
002561  002765  //       : print(myvar," "CY(),"\n");           // carry = 1
002562  002766  // Notes : This function returns the carry status of an
002563  002767  // unsigned overflow from any 16 or 32bit additions or sutractions.
002564  002768  //================================================================
002565  002769        
002566  002770        
002567  002771  //================================================================
002568  002772  func str_ByteMove("src", "dest", "count"), 1;
002569  002773  // func str_ByteMove("src", "dest", "count"), 1;
002570  002774  // Syntax   : str_ByteMove(src, dest, bytecount);
002571  002775  // Input    : STR *source points to byte aligned source.
002572  002776  //          : STR *dest   points to byte aligned destination.
002573  002777  //          : VAR count   number of bytes to transfer.
002574  002778  // Usage    : nextpos := str_ByteMove(s, d, 100);
002575  002779  // Notes    : copy bytes from "src" to "dest", stopping only
002576  002780  //          : when "count" is exhausted.
002577  002781  //          : No terminator is appended, it is purely a
002578  002782  //          : byte copy, and any zeroes encountered will
002579  002783  //          : also be copied.
002580  002784  // Returns  : returns a pointer to the end of the destination
002581  002785  //          : (which is "dest" + "count")
002582  002786  //================================================================
002583  002787        
002584  002788        
002585  002789  //================================================================
002586  002790  func str_Copy("dest", "src"), 1;
002587  002791  // Syntax   : str_Copy(dest, src);
002588  002792  // Input    : STR *dest   points to byte aligned destination.
002589  002793  //          : STR *source points to byte aligned source.
002590  002794  // Usage    : nextplace := str_Copy(d, s);
002591  002795  // Notes    : copy a string from "src" to "dest", stopping only
002592  002796  //          : when the end of source string "src" is encountered
002593  002797  //          : (0x00 terminator).
002594  002798  //          : The terminator is always appended, even if "src" is
002595  002799  //          : an empty string.
002596  002800  // Returns  : returns a pointer to the 0x00 string terminator at
002597  002801  //          : end of "dest" (which is "dest" + str_Length(src); )
002598  002802  //================================================================
002599  002803        
002600  002804  //================================================================
002601  002805  func str_CopyN("dest", "src", "count"), 1;
002602  002806  // Syntax   : str_CopyN(dest, src, bytecount);
002603  002807  // Input    : STR *dest   points to byte aligned destination.
002604  002808  //          : STR *source points to byte aligned source.
002605  002809  //          : VAR count   max number of chars to copy.
002606  002810  // Usage    : nextplace := str_CopyN(d, s, 100);
002607  002811  // Notes    : copy a string from "src" to "dest", stopping only
002608  002812  //          : when "count" is exhausted, or end of source
002609  002813  //          : string "str" is encountered (0x00 string terminator).
002610  002814  //          : The terminator is always appended, even if
002611  002815  //          : "count" is zero, or "src" is a null string.
002612  002816  // Returns  : returns a pointer to the 0x00 string terminator
002613  002817  //          : (which is "dest" + whatever was copied)
002614  002818  //================================================================
002615  002819        
002616  002820  //================================================================
002617  002821  func umul_1616("&res32", "val1", "val2"), 1;
002618  002822  // Syntax   : umul_1616(&res32, varA, varB);
002619  002823  // Input    : DWORD *result   points to 32bit result register.
002620  002824  //          : VAR   val1  16bit register or constant
002621  002825  //          : VAR   val2  16bit register or constant
002622  002826  // Usage    : var res32[2];
002623  002827  //          : umul_1616(&res32, myvar, 50000);
002624  002828  // Notes    : performs an unsigned multiply of 2 x 16bit values
002625  002829  //          : placing the 32bit result in a 2 word array.
002626  002830  // Returns  : the pointer to the 32bit result.
002627  002831  //          : carry and overflow are not affected.
002628  002832  //================================================================
002629  002833        
002630  002834  //================================================================
002631  002835  func uadd_3232("&res32", "&val1", "&val2"), 1;
002632  002836  // Syntax   : cmp_3232(&res32, &varA, &varB);
002633  002837  // Input    : DWORD *res32 points to optional result (or zero for compare)
002634  002838  //          : DWORD *val1 points to 32bit augend
002635  002839  //          : DWORD *val2 points to 32bit addend
002636  002840  // Usage    : var res32[2];
002637  002841  //          : res := cmp_3232(res32, val1, val2);
002638  002842  // Notes    : performs an unsigned addition of 2 x 32bit values
002639  002843  //          : placing the 32bit result in a 2 word array.
002640  002844  // Returns  : returns 1 on 32bit unsigned overflow (carry).
002641  002845  //          ; carry flag is also set on 32bit unsigned overflow
002642  002846  //          ; and can be read with the CY() function.
002643  002847  //================================================================
002644  002848        
002645  002849  //================================================================
002646  002850  func usub_3232("&res32", "&val1", "&val2"), 1;
002647  002851  // Syntax   : cmp_3232(&res32, &varA, &varB);
002648  002852  // Input    : DWORD *res32 points to optional result (or zero for compare)
002649  002853  //          : DWORD *val1 points to first 32bit minuend
002650  002854  //          : DWORD *val2 points to 32bit subtrahend
002651  002855  // Usage    : var res32[2];
002652  002856  //          : res := cmp_3232(res32, val1, val2);
002653  002857  // Notes    : performs an unsigned subtraction of 2 x 32bit values
002654  002858  //          : placing the 32bit result in a 2 word array.
002655  002859  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
002656  002860  //          ; carry flag is also set on 32bit unsigned underflow
002657  002861  //          ; and can be read with the CY() function.
002658  002862  //================================================================
002659  002863        
002660  002864  //================================================================
002661  002865  func ucmp_3232("&val1", "&val2"), 1;
002662  002866  // Syntax   : cmp_3232(&varA, &varB);
002663  002867  // Input    : DWORD *val1 points to 32bit minuend
002664  002868  //          : DWORD *val2 points to 32bit sutrahend
002665  002869  // Usage    : res := cmp_3232(val1, val2);
002666  002870  // Notes    : performs an unsigned comparison of 2 x 32bit values.
002667  002871  //          : The result of the subtraction is returned.
002668  002872  // Returns  : 0  if equal
002669  002873  //          : 1  if val1 > val2
002670  002874  //          : -1 if val1 < val2
002671  002875  //          : This function does not affect the carry flag.
002672  002876  //================================================================
002673  002877        
002674  002878  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v3.8
002675  002879  // Syntax: disp_Disconnect();                  New in v3.8
002676  002880  // Usage : disp_Disconnect();
002677  002881  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
002678  002882  //       : its lowest possible power consumption. Use after disabling peripheral power
002679  002883  //       : to ensure the minimal power usage by the display.
002680  002884  //       : disp_Init() should be used to reinitialise the display.
002681  002885        
002682  002886  func reserved(), 0;                            
002683  002887        
002684  002888  func sys_DeepSleep("units"), 1;
002685  002889  // Syntax: t := sys_DeepSleep("units");       New in v3.8
002686  002890  // Usage : t := sys_DeepSleep(10);
002687  002891  // Notes : sets the display and processor into lowest power mode for a period of time.
002688  002892  //       : When returning from DeepSleep the display should be reinitialised
002689  002893  //       : with disp_Init().
002690  002894  //       : Touching the touch screen will also wake from sleep.
002691  002895  //       : Returns remaining sleep units.
002692  002896        
002693  002897  //------------------------------------------------------------------//
002694  002898  // CONSTANTS
002695  002899  //------------------------------------------------------------------//
002696  002900        
002697  002901  // generic constants
002698  002902  #CONST
002699  002911  #END
002700  002912        
002701  002913  //------------------------------------------------------------------------------
002702  002914  // Pin related constants
002703  002915  //------------------------------------------------------------------------------
002704  002916  #CONST
002705  002934  #END
002706  002935        
002707  002936  //------------------------------------------------------------------------------
002708  002937  //gfx_Set() related constants
002709  002938  //------------------------------------------------------------------------------
002710  002939  #CONST
002711  002956  #END
002712  002957        
002713  002958        
002714  002959  //gfx_Get() related constants
002715  002960  #CONST
002716  002969  #END
002717  002970        
002718  002971        
002719  002972        
002720  002973        
002721  002974  #CONST
002722  002987  #END
002723  002988        
002724  002989        
002725  002990  #CONST
002726  003013  #END
002727  003014        
002728  003015  //------------------------------------------------------------------------------
002729  003016  //txt_Set() related constants
002730  003017  //------------------------------------------------------------------------------
002731  003018  #CONST
002732  003037  #END
002733  003038        
002734  003039        
002735  003040        
002736  003041  //------------------------------------------------------------------------------
002737  003042  //txt_Set() related arguments
002738  003043  // NB:- FONT4 must be inherited if required,
002739  003044  // eg #inherit "FONT4.fnt"
002740  003045  //------------------------------------------------------------------------------
002741  003046  #CONST
002742  003058  #END
002743  003059        
002744  003060        
002745  003061        
002746  003062  //touch_Set() related constants
002747  003063  #CONST
002748  003067  #END
002749  003068        
002750  003069  //touch_Get() related constants
002751  003070  #CONST
002752  003078  #END
002753  003079        
002754  003080  // image control offset related constants
002755  003081  #CONST
002756  003088  #END
002757  003089        
002758  003090  // image attribute flags
002759  003091  // for img_SetAttributes(...) and img_ClearAttributes(...)
002760  003092  #CONST
002761  003106  #END
002762  003107        
002763  003108        
002764  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002765  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002766  003110        
002767  003111  // image control entry offsets
002768  003112  #CONST
002769  003127  #END
002770  003128        
002771  003129  #CONST
002772  003147  #END
002773  003148        
002774  003149        
002775  003150        
002776  003151        
002777  003152  #CONST
002778  003172  #END
002779  003173        
002780  003174        
002781  003175        
002782  003176  // timer control  related constants
002783  003177  #CONST
002784  003186  #END
002785  003187        
002786  003188  // I2C timing related constants
002787  003189  #CONST
002788  003193  #END
002789  003194        
002790  003195        
002791  003196  // spi_Init(...)  mode arguments
002792  003197  #CONST
002793  003207  #END
002794  003208        
002795  003209  //------------------------------------------------------------------------------
002796  003210  // system WORD variables accesible with peekW and pokeW or pointer access
002797  003211  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
002798  003212  // can also be accessed with peekW and pokeW
002799  003213  //------------------------------------------------------------------------------
002800  003214        
002801  003215  #CONST
002802  003309  #END
002803  003310        
002804  003311  //------------------------------------------------------------------------------
002805  003312  // FILEIO Error Code Constants
002806  003313  //------------------------------------------------------------------------------
002807  003314  #CONST
002808  003340  #END
002809  003341        
002810  003342  //==================================================================================================
002811  003343        
002812  003344        
002813  003345        
002814  000013      #ENDIF
002815  000014        
002816  000015        
002817  000016      #CONST
002818  000072      #END
002819  000073        
002820  000074        
002821  000075  //===========================================================================================
002822  000076        
002823  000077        
002824  000002        
002825  000003  // generated 05/12/2014 11:56:30
002826  000004        
002827  000005  #MODE RUNFLASH
002828  000006        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

002829  000007  #inherit "4DGL_16bitColours.fnc"
002830  000007  #inherit "4DGL_16bitColours.fnc"
002831  000004  */
002832  000005        
002833  000006        
002834  000007        
002835  000008  #CONST
002836  000149  #END
002837  000150        
002838  000008        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

002839  000009  #inherit "VisualConst.inc"
002840  000009  #inherit "VisualConst.inc"
002841  000001  // Line Patterns
002842  000002  #constant  LPCOARSE    0xF0F0
002843  000002  #constant  LPCOARSE    0xF0F0
002844  000003  #constant  LPMEDIUM    0x3333
002845  000003  #constant  LPMEDIUM    0x3333
002846  000004  #constant  LPFINE      0xAAAA
002847  000004  #constant  LPFINE      0xAAAA
002848  000005  #constant  LPDASHDOT   0x03CF
002849  000005  #constant  LPDASHDOT   0x03CF
002850  000006  #constant  LPDASHDOTDOT 0x0333
002851  000006  #constant  LPDASHDOTDOT 0x0333
002852  000007  #constant  LPSOLID     0x0000
002853  000007  #constant  LPSOLID     0x0000
002854  000010        
002855  000011        
file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_IntroConst.inc

002856  000012  #inherit "Test_millorat_IntroConst.inc"
002857  000012  #inherit "Test_millorat_IntroConst.inc"
002858  000001  // File generated 05/12/2014 11:56:11
002859  000002  // Warning! This is a generated file, any manual changes will be
002860  000003  // lost during the next generation.
002861  000004        
002862  000005  #constant  Strings0Count    1
002863  000005  #constant  Strings0Count    1
002864  000006  #constant  Strings0Size     28
002865  000006  #constant  Strings0Size     28
002866  000007  #constant  Strings1Count    0
002867  000007  #constant  Strings1Count    0
002868  000008  #constant  Strings1Size     1
002869  000008  #constant  Strings1Size     1
002870  000009  #constant  Strings3Count    1
002871  000009  #constant  Strings3Count    1
002872  000010  #constant  Strings3Size     18
002873  000010  #constant  Strings3Size     18
002874  000011  #constant  Strings13Count    1
002875  000011  #constant  Strings13Count    1
002876  000012  #constant  Strings13Size     25
002877  000012  #constant  Strings13Size     25
002878  000013  #constant  Strings9Count    1
002879  000013  #constant  Strings9Count    1
002880  000014  #constant  Strings9Size     25
002881  000014  #constant  Strings9Size     25
002882  000015  #constant  Strings5Count    1
002883  000015  #constant  Strings5Count    1
002884  000016  #constant  Strings5Size     13
002885  000016  #constant  Strings5Size     13
002886  000017  #constant  Strings4Count    1
002887  000017  #constant  Strings4Count    1
002888  000018  #constant  Strings4Size     25
002889  000018  #constant  Strings4Size     25
002890  000019  #constant  Strings6Count    1
002891  000019  #constant  Strings6Count    1
002892  000020  #constant  Strings6Size     26
002893  000020  #constant  Strings6Size     26
002894  000021  #constant  Strings2Count    0
002895  000021  #constant  Strings2Count    0
002896  000022  #constant  Strings2Size     1
002897  000022  #constant  Strings2Size     1
002898  000023  #constant  Strings7Count    0
002899  000023  #constant  Strings7Count    0
002900  000024  #constant  Strings7Size     1
002901  000024  #constant  Strings7Size     1
002902  000025  #constant  Strings8Count    1
002903  000025  #constant  Strings8Count    1
002904  000026  #constant  Strings8Size     25
002905  000026  #constant  Strings8Size     25
002906  000027  #constant  Strings10Count    0
002907  000027  #constant  Strings10Count    0
002908  000028  #constant  Strings10Size     1
002909  000028  #constant  Strings10Size     1
002910  000029  #constant  Strings11Count    1
002911  000029  #constant  Strings11Count    1
002912  000030  #constant  Strings11Size     25
002913  000030  #constant  Strings11Size     25
002914  000031  #constant  Strings12Count    1
002915  000031  #constant  Strings12Count    1
002916  000032  #constant  Strings12Size     19
002917  000032  #constant  Strings12Size     19
002918  000033  #constant  Strings14Count    1
002919  000033  #constant  Strings14Count    1
002920  000034  #constant  Strings14Size     23
002921  000034  #constant  Strings14Size     23
002922  000035  #constant  Strings16Count    1
002923  000035  #constant  Strings16Count    1
002924  000036  #constant  Strings16Size     31
002925  000036  #constant  Strings16Size     31
002926  000037  #constant  Strings15Count    1
002927  000037  #constant  Strings15Count    1
002928  000038  #constant  Strings15Size     24
002929  000038  #constant  Strings15Size     24
002930  000039  #constant  Strings17Count    1
002931  000039  #constant  Strings17Count    1
002932  000040  #constant  Strings17Size     33
002933  000040  #constant  Strings17Size     33
002934  000041  #constant  Strings18Count    1
002935  000041  #constant  Strings18Count    1
002936  000042  #constant  Strings18Size     32
002937  000042  #constant  Strings18Size     32
002938  000043  #constant  Strings19Count    1
002939  000043  #constant  Strings19Count    1
002940  000044  #constant  Strings19Size     29
002941  000044  #constant  Strings19Size     29
002942  000045  // object indexes into ImageControl
002943  000046  #CONST
002944  000179  #END
002945  000180        
002946  000181  #constant  Strings0StartH   0x0
002947  000181  #constant  Strings0StartH   0x0
002948  000182  #constant  Strings0StartL   0x0
002949  000182  #constant  Strings0StartL   0x0
002950  000183  #constant  Strings1StartH   0x0
002951  000183  #constant  Strings1StartH   0x0
002952  000184  #constant  Strings1StartL   0x200
002953  000184  #constant  Strings1StartL   0x200
002954  000185  #constant  Strings3StartH   0x0
002955  000185  #constant  Strings3StartH   0x0
002956  000186  #constant  Strings3StartL   0x400
002957  000186  #constant  Strings3StartL   0x400
002958  000187  #constant  Strings13StartH   0x0
002959  000187  #constant  Strings13StartH   0x0
002960  000188  #constant  Strings13StartL   0x600
002961  000188  #constant  Strings13StartL   0x600
002962  000189  #constant  Strings9StartH   0x0
002963  000189  #constant  Strings9StartH   0x0
002964  000190  #constant  Strings9StartL   0x800
002965  000190  #constant  Strings9StartL   0x800
002966  000191  #constant  Strings5StartH   0x0
002967  000191  #constant  Strings5StartH   0x0
002968  000192  #constant  Strings5StartL   0xA00
002969  000192  #constant  Strings5StartL   0xA00
002970  000193  #constant  Strings4StartH   0x0
002971  000193  #constant  Strings4StartH   0x0
002972  000194  #constant  Strings4StartL   0xC00
002973  000194  #constant  Strings4StartL   0xC00
002974  000195  #constant  Strings6StartH   0x0
002975  000195  #constant  Strings6StartH   0x0
002976  000196  #constant  Strings6StartL   0xE00
002977  000196  #constant  Strings6StartL   0xE00
002978  000197  #constant  Strings2StartH   0x0
002979  000197  #constant  Strings2StartH   0x0
002980  000198  #constant  Strings2StartL   0x1000
002981  000198  #constant  Strings2StartL   0x1000
002982  000199  #constant  Strings7StartH   0x0
002983  000199  #constant  Strings7StartH   0x0
002984  000200  #constant  Strings7StartL   0x1200
002985  000200  #constant  Strings7StartL   0x1200
002986  000201  #constant  Strings8StartH   0x0
002987  000201  #constant  Strings8StartH   0x0
002988  000202  #constant  Strings8StartL   0x1400
002989  000202  #constant  Strings8StartL   0x1400
002990  000203  #constant  Strings10StartH   0x0
002991  000203  #constant  Strings10StartH   0x0
002992  000204  #constant  Strings10StartL   0x1600
002993  000204  #constant  Strings10StartL   0x1600
002994  000205  #constant  Strings11StartH   0x0
002995  000205  #constant  Strings11StartH   0x0
002996  000206  #constant  Strings11StartL   0x1800
002997  000206  #constant  Strings11StartL   0x1800
002998  000207  #constant  Strings12StartH   0x0
002999  000207  #constant  Strings12StartH   0x0
003000  000208  #constant  Strings12StartL   0x1A00
003001  000208  #constant  Strings12StartL   0x1A00
003002  000209  #constant  Strings14StartH   0x0
003003  000209  #constant  Strings14StartH   0x0
003004  000210  #constant  Strings14StartL   0x1C00
003005  000210  #constant  Strings14StartL   0x1C00
003006  000211  #constant  Strings16StartH   0x0
003007  000211  #constant  Strings16StartH   0x0
003008  000212  #constant  Strings16StartL   0x1E00
003009  000212  #constant  Strings16StartL   0x1E00
003010  000213  #constant  Strings15StartH   0x0
003011  000213  #constant  Strings15StartH   0x0
003012  000214  #constant  Strings15StartL   0x2000
003013  000214  #constant  Strings15StartL   0x2000
003014  000215  #constant  Strings17StartH   0x0
003015  000215  #constant  Strings17StartH   0x0
003016  000216  #constant  Strings17StartL   0x2200
003017  000216  #constant  Strings17StartL   0x2200
003018  000217  #constant  Strings18StartH   0x0
003019  000217  #constant  Strings18StartH   0x0
003020  000218  #constant  Strings18StartL   0x2400
003021  000218  #constant  Strings18StartL   0x2400
003022  000219  #constant  Strings19StartH   0x0
003023  000219  #constant  Strings19StartH   0x0
003024  000220  #constant  Strings19StartL   0x2600
003025  000220  #constant  Strings19StartL   0x2600
003026  000221  #IFNOT EXISTS NOGLOBALS
003027  000222  var disk, hndl ;
003028  000223  #ENDIF
003029  000013        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

003030  000014  #inherit "CLPrintStrings.inc"
003031  000014  #inherit "CLPrintStrings.inc"
003032  000001  func PrintStrings(var ID, var *msgid, var String)
003033  000002      var StringID, i, ch, offs32[2], res32[2];
003034  000003      StringID := oStringss[1+ID] ;
003035  000004      if (String)
003036  000005          stringsCV[ID] := -1 ;
003037  000006      else
003038  000007          stringsCV[ID] := msgid ;
003039  000008      endif
003040  000009      if ((StringID == -1) || (*(StringID + STForm) != curform)) return ;
003041  000010      txt_FontID(hFonts[ID]) ;
003042  000011      txt_Attributes(*(StringID + STFontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
003043  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
003044  000013        
003045  000014      if (*(StringID + STTransparent))
003046  000015          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), *(StringID + STBGColor));
003047  000016      else if (formBGcol[curform] != BGIMAGE)
003048  000017          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), formBGcol[curform]);
003049  000018      else
003050  000019          gfx_ClipWindow(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2)) ;
003051  000020          gfx_Clipping(ON) ;
003052  000021          img_Show(hndl,formstidx[curform]) ;
003053  000022          gfx_Clipping(OFF) ;
003054  000023        
003055  000024      endif
003056  000025        
003057  000026      txt_FGcolour(*(StringID + STFGColor)) ;
003058  000027      txt_BGcolour(*(StringID + STBGColor)) ;
003059  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
003060  000029        
003061  000030      gfx_MoveTo(*(StringID + STx1) , *(StringID + STy1)) ;
003062  000031        
003063  000032      if (String)
003064  000033          i := 0 ;
003065  000034          ch := msgid[i++] ;
003066  000035          while (ch != 0)
003067  000036              putch(ch) ;
003068  000037              ch := msgid[i++] ;
003069  000038          wend
003070  000039      else
003071  000040          umul_1616(offs32, *(StringID + STSize), msgid);
003072  000041          res32[1] := *(StringID + STStartH) ;
003073  000042          res32[0] := *(StringID + STStartL) ;
003074  000043          uadd_3232(res32,res32,offs32) ;
003075  000044          file_Seek(hstrings, res32[1], res32[0]);
003076  000045          repeat
003077  000046              if (*(StringID + STAnsi))
003078  000047                  ch := file_GetC(hstrings) ;
003079  000048              else
003080  000049                  ch := file_GetW(hstrings) ;
003081  000050              endif
003082  000051              putch(ch) ;
003083  000052          until (ch == 0) ;
003084  000053      endif
003085  000054        
003086  000055  endfunc
003087  000056        
003088  000015        
003089  000016  #constant IPDatasize 22
003090  000016  #constant IPDatasize 22
003091  000017        
003092  000018  #CONST
003093  000020  #END
003094  000021        
003095  000022  #CONST
003096  000122  #END
003097  000123        
003098  000325  #END
3099  100C
3100  100D
3101  100E
3102  100F
3103  1010
3104  1011
3105  1012
3106  1013
3107  1014
3108  1015
3109  1016
3110  1017
3111  1018
3112  1019
3113  101A
3114  101B
3115  101C
3116  101D
3117  101E
3118  101F
3119  1020
3120  1021
3121  1022
3122  1023
3123  1024
3124  1025
3125  1026
3126  1027
3127  1028
3128  1029
3129  102A
3130  102B
3131  102C
3132  102D
3133  102E
3134  102F
3135  1030
3136  1031
3137  1032
3138  1033
3139  1034
3140  1035
3141  1036
3142  1037
3143  1038
3144  1039
3145  103A
3146  103B
3147  103C
3148  103D
3149  103E
3150  103F
3151  1040
3152  1041
3153  1042
3154  1043
3155  1044
3156  1045
3157  1046
3158  1047
3159  1048
3160  1049
3161  104A
3162  104B
3163  104C
3164  104D
3165  104E
3166  104F
3167  1050
3168  1051
3169  1052
3170  1053
3171  1054
3172  1055
3173  1056
3174  1057
3175  1058
3176  1059
3177  105A
3178  105B
3179  105C
3180  105D
3181  105E
3182  105F
3183  1060
3184  1061
3185  1062
3186  1063
3187  1064
3188  1065
3189  1066
3190  1067
3191  1068
3192  1069
3193  106A
3194  106B
3195  106C
3196  106D
3197  106E
3198  106F
3199  1070
3200  1071
3201  1072
3202  1073
3203  1074
3204  1075
3205  1076
3206  1077
3207  1078
3208  1079
3209  107A
3210  107B
3211  107C
3212  107D
3213  107E
3214  107F
3215  1080
3216  1081
3217  1082
3218  1083
3219  1084
3220  1085
3221  1086
3222  1087
3223  1088
3224  1089
3225  108A
3226  108B
3227  108C
3228  108D
3229  108E
3230  108F
3231  1090
3232  1091
3233  1092
3234  1093
3235  1094
3236  1095
3237  1096
3238  1097
3239  1098
3240  1099
3241  109A
3242  109B
3243  109C
3244  109D
3245  109E
3246  109F
3247  10A0
3248  10A1
3249  10A2
3250  10A3
3251  10A4
3252  10A5
3253  10A6
3254  10A7
3255  10A8
3256  10A9
3257  10AA
3258  10AB
3259  10AC
3260  10AD
3261  10AE
3262  10AF
3263  10B0
3264  10B1
3265  10B2
3266  10B3
3267  10B4
3268  10B5
3269  10B6
3270  10B7
3271  10B8
3272  10B9
3273  10BA
3274  10BB
3275  10BC
3276  10BD
3277  10BE
3278  10BF
3279  10C0
3280  10C1
3281  10C2
3282  10C3
3283  10C4
3284  10C5
3285  10C6
3286  10C7
3287  10C8
3288  10C9
3289  10CA
3290  10CB
3291  10CC
3292  10CD
3293  10CE
3294  10CF
3295  10D0
3296  10D1
3297  10D2
3298  10D3
3299  10D4
3300  10D5
3301  10D6
3302  10D7
3303  10D8
3304  10D9
3305  10DA
3306  10DB
3307  10DC
3308  10DD
3309  10DE
3310  10DF
3311  10E0
3312  10E1
3313  10E2
3314  10E3
3315  10E4
3316  10E5
3317  10E6
3318  10E7
3319  10E8
3320  10E9
3321  10EA
3322  10EB
3323  10EC
3324  10ED
3325  10EE
3326  10EF
3327  10F0
3328  10F1
3329  10F2
3330  10F3
3331  10F4
3332  10F5
3333  10F6
3334  10F7
3335  10F8
3336  10F9
3337  10FA
3338  10FB
3339  10FC
3340  10FD
3341  10FE
3342  10FF
3343  1100
3344  1101
3345  1102
3346  1103
3347  1104
3348  1105
3349  1106
3350  1107
3351  1108
3352  1109
3353  110A
3354  110B
3355  110C
3356  110D
3357  110E
3358  110F
3359  1110
3360  1111
3361  1112
3362  1113
3363  1114
3364  1115
3365  1116
3366  1117
3367  1118
3368  1119
3369  111A
3370  111B
3371  111C
3372  111D
3373  111E
3374  111F
3375  1120
3376  1121
3377  1122
3378  1123
3379  1124
3380  1125
3381  1126
3382  1127
3383  1128
3384  1129
3385  112A
3386  112B
3387  112C
3388  112D
3389  112E
3390  112F
3391  1130
3392  1131
3393  1132
3394  1133
3395  1134
3396  1135
3397  1136
3398  1137
3399  1138
3400  1139
3401  113A
3402  113B
3403  113C
3404  113D
3405  113E
3406  113F
3407  1140
3408  1141
3409  1142
3410  1143
3411  1144
3412  1145
3413  1146
3414  1147
3415  1148
3416  1149
3417  114A
3418  114B
3419  114C
3420  114D
3421  114E
3422  114F
3423  1150
3424  1151
3425  1152
3426  1153
3427  1154
3428  1155
3429  1156
3430  1157
3431  1158
3432  1159
3433  115A
3434  115B
3435  115C
3436  115D
3437  115E
3438  115F
3439  1160
3440  1161
3441  1162
3442  1163
3443  1164
3444  1165
3445  1166
3446  1167
3447  1168
3448  1169
3449  116A
3450  116B
3451  116C
3452  116D
3453  116E
3454  116F
3455  1170
3456  1171
3457  1172
3458  1173
3459  1174
3460  1175
3461  1176
3462  1177
3463  1178
3464  1179
3465  117A
3466  117B
3467  117C
3468  117D
3469  117E
3470  117F
3471  1180
3472  1181
3473  1182
3474  1183
3475  1184
3476  1185
3477  1186
3478  1187
3479  1188
3480  1189
3481  118A
3482  118B
3483  118C
3484  118D
3485  118E
3486  118F
3487  1190
3488  1191
3489  1192
3490  1193
3491  1194
3492  1195
3493  1196
3494  1197
3495  1198
3496  1199
3497  119A
3498  119B
3499  119C
3500  119D
3501  119E
3502  119F
3503  11A0
3504  11A1
3505  11A2
3506  11A3
3507  11A4
3508  11A5
3509  11A6
3510  11A7
3511  11A8
3512  11A9
3513  11AA
3514  11AB
3515  11AC
3516  11AD
3517  11AE
3518  11AF
3519  11B0
3520  11B1
3521  11B2
3522  11B3
3523  11B4
3524  11B5
3525  11B6
3526  11B7
3527  11B8
3528  11B9
3529  11BA
3530  11BB
3531  11BC
3532  11BD
3533  11BE
3534  11BF
3535  11C0
3536  11C1
3537  11C2
3538  11C3
3539  11C4
3540  11C5
3541  11C6
3542  11C7
3543  11C8
3544  11C9
3545  11CA
3546  11CB
3547  11CC
3548  11CD
3549  11CE
3550  11CF
3551  11D0
3552  11D1
3553  11D2
3554  11D3
3555  11D4
3556  11D5
3557  11D6
3558  11D7
3559  11D8
3560  11D9
3561  11DA
3562  11DB
3563  11DC
3564  11DD
3565  11DE
3566  11DF
3567  11E0
3568  11E1
3569  11E2
3570  11E3
3571  11E4
3572  11E5
3573  11E6
3574  11E7
3575  11E8
3576  11E9
3577  11EA
3578  11EB
3579  11EC
3580  11ED
3581  11EE
3582  11EF
3583  11F0
3584  11F1
3585  11F2
3586  11F3
3587  11F4
3588  11F5
3589  11F6
3590  11F7
3591  11F8
3592  11F9
3593  11FA
3594  11FB
3595  11FC
3596  11FD
3597  11FE
3598  11FF
3599  1200
3600  1201
3601  1202
3602  1203
3603  1204
3604  1205
3605  1206
3606  1207
3607  1208
3608  1209
3609  120A
3610  120B
3611  120C
3612  120D
3613  120E
3614  120F
3615  1210
3616  1211
3617  1212
3618  1213
3619  1214
3620  1215
3621  1216
3622  1217
3623  1218
3624  1219
3625  121A
3626  121B
3627  121C
3628  121D
3629  121E
3630  121F
3631  1220
3632  1221
3633  1222
3634  1223
3635  1224
3636  1225
3637  1226
3638  1227
3639  1228
3640  1229
3641  122A
3642  122B
3643  122C
3644  122D
3645  122E
3646  122F
3647  1230
3648  1231
3649  1232
3650  1233
3651  1234
3652  1235
3653  1236
3654  1237
3655  1238
3656  1239
3657  123A
3658  123B
3659  123C
3660  123D
3661  123E
3662  123F
3663  1240
3664  1241
3665  1242
3666  1243
3667  1244
3668  1245
3669  1246
3670  1247
3671  1248
3672  1249
3673  124A
3674  124B
3675  124C
3676  124D
3677  124E
3678  124F
3679  1250
3680  1251
3681  1252
3682  1253
3683  1254
3684  1255
3685  1256
3686  1257
3687  1258
3688  1259
3689  125A
3690  125B
3691  125C
3692  125D
3693  125E
3694  125F
3695  1260
3696  1261
3697  1262
3698  1263
3699  1264
3700  1265
3701  1266
3702  1267
3703  1268
3704  1269
3705  126A
3706  126B
3707  126C
3708  126D
3709  126E
3710  126F
3711  1270
3712  1271
3713  1272
3714  1273
3715  1274
3716  1275
3717  1276
3718  1277
3719  1278
3720  1279
3721  127A
3722  127B
3723  127C
3724  127D
3725  127E
3726  127F
3727  1280
3728  1281
3729  1282
3730  1283
3731  1284
3732  1285
3733  1286
3734  1287
3735  1288
3736  1289
3737  128A
3738  128B
3739  128C
3740  128D
3741  128E
3742  128F
3743  1290
3744  1291
3745  1292
3746  1293
3747  1294
3748  1295
3749  1296
3750  1297
3751  1298
3752  1299
3753  129A
3754  129B
3755  129C
3756  129D
3757  129E
3758  129F
3759  12A0
3760  12A1
3761  12A2
3762  12A3
3763  12A4
3764  12A5
3765  12A6
3766  12A7
3767  12A8
3768  12A9
3769  12AA
3770  12AB
3771  12AC
3772  12AD
3773  12AE
3774  12AF
3775  12B0
3776  12B1
3777  12B2
3778  12B3
3779  12B4
3780  12B5
3781  12B6
3782  12B7
3783  12B8
3784  12B9
3785  12BA
3786  12BB
3787  12BC
3788  12BD
3789  12BE
3790  12BF
3791  12C0
3792  12C1
3793  12C2
3794  12C3
3795  12C4
3796  12C5
3797  12C6
3798  12C7
3799  12C8
3800  12C9
3801  12CA
3802  12CB
3803  12CC
3804  12CD
3805  12CE
3806  12CF
3807  12D0
3808  12D1
3809  12D2
3810  12D3
3811  12D4
3812  12D5
3813  12D6
3814  12D7
3815  12D8
3816  12D9
3817  12DA
3818  12DB
3819  12DC
3820  12DD
3821  12DE
3822  12DF
3823  12E0
3824  12E1
3825  12E2
3826  12E3
3827  12E4
3828  12E5
3829  12E6
3830  12E7
3831  12E8
3832  12E9
3833  12EA
3834  12EB
3835  12EC
3836  12ED
3837  12EE
3838  12EF
3839  12F0
3840  12F1
3841  12F2
3842  12F3
3843  12F4
3844  12F5
3845  12F6
3846  12F7
3847  12F8
3848  12F9
3849  12FA
3850  12FB
3851  12FC
3852  12FD
3853  12FE
3854  12FF
3855  1300
3856  1301
3857  1302
3858  1303
3859  1304
3860  1305
3861  1306
3862  1307
3863  1308
3864  1309
3865  130A
3866  130B
3867  130C
3868  130D
3869  130E
3870  130F
3871  1310
3872  1311
3873  1312
3874  1313
3875  1314
3876  1315
3877  1316
3878  1317
3879  1318
3880  1319
3881  131A
3882  131B
3883  131C
3884  131D
3885  131E
3886  131F
3887  1320
3888  1321
3889  1322
3890  1323
3891  1324
3892  1325
3893  1326
3894  1327
3895  1328
3896  1329
3897  132A
3898  132B
3899  132C
3900  132D
3901  132E
3902  132F
3903  1330
3904  1331
3905  1332
3906  1333
3907  1334
3908  1335
3909  1336
3910  1337
3911  1338
3912  1339
3913  133A
3914  133B
3915  133C
3916  133D
3917  133E
3918  133F
3919  1340
3920  1341
3921  1342
3922  1343
3923  1344
3924  1345
3925  1346
3926  1347
3927  1348
3928  1349
3929  134A
3930  134B
3931  134C
3932  134D
3933  134E
3934  134F
3935  1350
3936  1351
3937  1352
3938  1353
3939  1354
3940  1355
3941  1356
3942  1357
3943  1358
3944  1359
3945  135A
3946  135B
3947  135C
3948  135D
3949  135E
3950  135F
3951  1360
3952  1361
3953  1362
3954  1363
3955  1364
3956  1365
3957  1366
3958  1367
3959  1368
3960  1369
3961  136A
3962  136B
3963  136C
3964  136D
3965  136E
3966  136F
3967  1370
3968  1371
3969  1372
3970  1373
3971  1374
3972  1375
3973  1376
3974  1377
3975  1378
3976  1379
3977  137A
3978  137B
3979  137C
3980  137D
3981  137E
3982  137F
3983  1380
3984  1381
3985  1382
3986  1383
3987  1384
3988  1385
3989  1386
3990  1387
3991  1388
3992  1389
3993  138A
3994  138B
3995  138C
3996  138D
3997  138E
3998  138F
3999  1390
4000  1391
4001  1392
4002  1393
4003  1394
4004  1395
4005  1396
4006  1397
4007  1398
4008  1399
4009  139A
4010  139B
4011  139C
4012  139D
4013  139E
4014  139F
4015  13A0
4016  13A1
4017  13A2
4018  13A3
4019  13A4
4020  13A5
4021  13A6
4022  13A7
4023  13A8
4024  13A9
4025  13AA
4026  13AB
4027  13AC
4028  13AD
4029  13AE
4030  13AF
4031  13B0
4032  13B1
4033  13B2
4034  13B3
4035  13B4
4036  13B5
4037  13B6
4038  13B7
4039  13B8
4040  13B9
4041  13BA
4042  13BB
4043  13BC
4044  13BD
4045  13BE
4046  13BF
4047  13C0
4048  13C1
4049  13C2
4050  13C3
4051  13C4
4052  13C5
4053  13C6
4054  13C7
4055  13C8
4056  13C9
4057  13CA
4058  13CB
4059  13CC
4060  13CD
4061  13CE
4062  13CF
4063  13D0
4064  13D1
4065  13D2
4066  13D3
4067  13D4
4068  13D5
4069  13D6
4070  13D7
4071  13D8
4072  13D9
4073  13DA
4074  13DB
4075  13DC
4076  13DD
4077  13DE
4078  13DF
4079  13E0
4080  13E1
4081  13E2
4082  13E3
4083  13E4
4084  13E5
4085  13E6
4086  13E7
4087  13E8
4088  13E9
4089  13EA
4090  13EB
4091  13EC
4092  13ED
4093  13EE
4094  13EF
4095  13F0
4096  13F1
4097  13F2
4098  13F3
4099  13F4
4100  13F5
4101  13F6
4102  13F7
4103  13F8
4104  13F9
4105  13FA
4106  13FB
4107  13FC
4108  13FD
4109  13FE
4110  13FF
4111  1400
4112  1401
4113  1402
4114  1403
4115  1404
4116  1405
4117  1406
4118  1407
4119  1408
4120  1409
4121  140A
4122  140B
4123  140C
4124  140D
4125  140E
4126  140F
4127  1410
4128  1411
4129  1412
4130  1413
4131  1414
4132  1415
4133  1416
4134  1417
4135  1418
4136  1419
4137  141A
4138  141B
4139  141C
4140  141D
4141  141E
4142  141F
4143  1420
4144  1421
4145  1422
4146  1423
4147  1424
4148  1425
4149  1426
4150  1427
4151  1428
4152  1429
4153  142A
4154  142B
4155  142C
4156  142D
4157  142E
4158  142F
4159  1430
4160  1431
4161  1432
4162  1433
4163  1434
4164  1435
4165  1436
4166  1437
4167  1438
4168  1439
4169  143A
4170  143B
4171  143C
4172  143D
4173  143E
4174  143F
4175  1440
4176  1441
4177  1442
4178  1443
4179  1444
4180  1445
4181  1446
4182  1447
4183  1448
4184  1449
4185  144A
4186  144B
4187  144C
4188  144D
4189  144E
4190  144F
4191  1450
4192  1451
4193  1452
4194  1453
4195  1454
4196  1455
4197  1456
4198  1457
4199  1458
4200  1459
4201  145A
4202  145B
4203  145C
4204  145D
4205  145E
4206  145F
4207  1460
4208  1461
4209  1462
4210  1463
4211  1464
4212  1465
4213  1466
4214  1467
4215  1468
4216  1469
4217  146A
4218  146B
4219  146C
4220  146D
4221  146E
4222  146F
4223  1470
4224  1471
4225  1472
4226  1473
4227  1474
4228  1475
4229  1476
4230  1477
4231  1478
4232  1479
4233  147A
4234  147B
4235  147C
4236  147D
4237  147E
4238  147F
4239  1480
4240  1481
4241  1482
4242  1483
4243  1484
4244  1485
4245  1486
4246  1487
4247  1488
4248  1489
4249  148A
4250  148B
4251  148C
4252  148D
4253  148E
4254  148F
4255  1490
4256  1491
4257  1492
4258  1493
4259  1494
4260  1495
4261  1496
4262  1497
4263  1498
4264  1499
4265  149A
4266  149B
4267  149C
4268  149D
4269  149E
4270  149F
4271  14A0
4272  14A1
4273  14A2
4274  14A3
4275  14A4
4276  14A5
4277  14A6
4278  14A7
4279  14A8
4280  14A9
4281  14AA
4282  14AB
4283  14AC
4284  14AD
4285  14AE
4286  14AF
4287  14B0
4288  14B1
4289  14B2
4290  14B3
4291  14B4
4292  14B5
4293  14B6
4294  14B7
4295  14B8
4296  14B9
4297  14BA
4298  14BB
4299  14BC
4300  14BD
4301  14BE
4302  14BF
4303  14C0
4304  14C1
4305  14C2
4306  14C3
4307  14C4
4308  14C5
4309  14C6
4310  14C7
4311  14C8
4312  14C9
4313  14CA
4314  14CB
4315  14CC
4316  14CD
4317  14CE
4318  14CF
4319  14D0
4320  14D1
4321  14D2
4322  14D3
4323  14D4
4324  14D5
4325  14D6
4326  14D7
4327  14D8
4328  14D9
4329  14DA
4330  14DB
4331  14DC
4332  14DD
4333  14DE
4334  14DF
4335  14E0
4336  14E1
4337  14E2
4338  14E3
4339  14E4
4340  14E5
4341  14E6
4342  14E7
4343  14E8
4344  14E9
4345  14EA
4346  14EB
4347  14EC
4348  14ED
4349  14EE
4350  14EF
4351  14F0
4352  14F1
4353  14F2
4354  14F3
4355  14F4
4356  14F5
4357  14F6
4358  14F7
4359  14F8
4360  14F9
4361  14FA
4362  14FB
4363  14FC
4364  14FD
4365  14FE
4366  14FF
4367  1500
4368  1501
4369  1502
4370  1503
4371  1504
4372  1505
4373  1506
4374  1507
4375  1508
4376  1509
4377  150A
4378  150B
4379  150C
4380  150D
4381  150E
4382  150F
4383  1510
4384  1511
4385  1512
4386  1513
4387  1514
4388  1515
4389  1516
4390  1517
4391  1518
4392  1519
4393  151A
4394  151B
4395  151C
4396  151D
4397  151E
4398  151F
4399  1520
4400  1521
4401  1522
4402  1523
4403  1524
4404  1525
4405  1526
4406  1527
4407  1528
4408  1529
4409  152A
4410  152B
4411  152C
4412  152D
4413  152E
4414  152F
4415  1530
4416  1531
4417  1532
4418  1533
4419  1534
4420  1535
4421  1536
4422  1537
4423  1538
4424  1539
4425  153A
4426  153B
4427  153C
4428  153D
4429  153E
4430  153F
4431  1540
4432  1541
4433  1542
4434  1543
4435  1544
4436  1545
4437  1546
4438  1547
4439  1548
4440  1549
4441  154A
4442  154B
4443  154C
4444  154D
4445  154E
4446  154F
4447  1550
4448  1551
4449  1552
4450  1553
4451  1554
4452  1555
4453  1556
4454  1557
4455  1558
4456  1559
4457  155A
4458  155B
4459  155C
4460  155D
4461  155E
4462  155F
4463  1560
4464  1561
4465  1562
4466  1563
4467  1564
4468  1565
4469  1566
4470  1567
4471  1568
4472  1569
4473  156A
4474  156B
4475  156C
4476  156D
4477  156E
4478  156F
4479  1570
4480  1571
4481  1572
4482  1573
4483  1574
4484  1575
4485  1576
4486  1577
4487  1578
4488  1579
4489  157A
4490  157B
4491  157C
4492  157D
4493  157E
4494  157F
4495  1580
4496  1581
4497  1582
4498  1583
4499  1584
4500  1585
4501  1586
4502  1587
4503  1588
4504  1589
4505  158A
4506  158B
4507  158C
4508  158D
4509  158E
4510  158F
4511  1590
4512  1591
4513  1592
4514  1593
4515  1594
4516  1595
4517  1596
4518  1597
4519  1598
4520  1599
4521  159A
4522  159B
4523  159C
4524  159D
4525  159E
4526  159F
4527  15A0
4528  15A1
4529  15A2
4530  15A3
4531  15A4
4532  15A5
4533  15A6
4534  15A7
4535  15A8
4536  15A9
4537  15AA
4538  15AB
4539  15AC
4540  15AD
4541  15AE
4542  15AF
4543  15B0
4544  15B1
4545  15B2
4546  15B3
4547  15B4
4548  15B5
4549  15B6
4550  15B7
4551  15B8
4552  15B9
4553  15BA
4554  15BB
4555  15BC
4556  15BD
4557  15BE
4558  15BF
4559  15C0
4560  15C1
4561  15C2
4562  15C3
4563  15C4
4564  15C5
4565  15C6
4566  15C7
4567  15C8
4568  15C9
4569  15CA
4570  15CB
4571  15CC
4572  15CD
4573  15CE
4574  15CF
4575  15D0
4576  15D1
4577  15D2
4578  15D3
4579  15D4
4580  15D5
4581  15D6
4582  15D7
4583  15D8
4584  15D9
4585  15DA
4586  15DB
4587  15DC
4588  15DD
4589  15DE
4590  15DF
4591  15E0
4592  15E1
4593  15E2
4594  15E3
4595  15E4
4596  15E5
4597  15E6
4598  15E7
4599  15E8
4600  15E9
4601  15EA
4602  15EB
4603  15EC
4604  15ED
4605  15EE
4606  15EF
4607  15F0
4608  15F1
4609  15F2
4610  15F3
4611  15F4
4612  15F5
4613  15F6
4614  15F7
4615  15F8
4616  15F9
4617  15FA
4618  15FB
4619  15FC
4620  15FD
4621  15FE
4622  15FF
4623  1600
4624  1601
4625  1602
4626  1603
4627  1604
4628  1605
4629  1606
4630  1607
4631  1608
4632  1609
4633  160A
4634  160B
4635  160C
4636  160D
4637  160E
4638  160F
4639  1610
4640  1611
4641  1612
4642  1613
4643  1614
4644  1615
4645  1616
4646  1617
4647  1618
4648  1619
4649  161A
4650  161B
4651  161C
4652  161D
4653  161E
4654  161F
4655  1620
4656  1621
4657  1622
4658  1623
4659  1624
4660  1625
4661  1626
4662  1627
4663  1628
4664  1629
4665  162A
4666  162B
4667  162C
4668  162D
4669  162E
4670  162F
4671  1630
4672  1631
4673  1632
4674  1633
4675  1634
4676  1635
4677  1636
4678  1637
4679  1638
4680  1639
4681  163A
4682  163B
4683  163C
4684  163D
4685  163E
4686  163F
4687  1640
4688  1641
4689  1642
4690  1643
4691  1644
4692  1645
4693  1646
4694  1647
4695  1648
4696  1649
4697  164A
4698  164B
4699  164C
4700  164D
4701  164E
4702  164F
4703  1650
4704  1651
4705  1652
4706  1653
4707  1654
4708  1655
4709  1656
4710  1657
4711  1658
4712  1659
4713  165A
4714  165B
4715  165C
4716  165D
4717  165E
4718  165F
4719  1660
4720  1661
4721  1662
4722  1663
4723  1664
4724  1665
4725  1666
4726  1667
4727  1668
4728  1669
4729  166A
4730  166B
4731  166C
4732  166D
4733  166E
4734  166F
4735  1670
4736  1671
4737  1672
4738  1673
4739  1674
4740  1675
4741  1676
4742  1677
4743  1678
4744  1679
4745  167A
4746  167B
4747  167C
4748  167D
4749  167E
4750  167F
4751  1680
4752  1681
4753  1682
4754  1683
4755  1684
4756  1685
4757  1686
4758  1687
4759  1688
4760  1689
4761  168A
4762  168B
4763  168C
4764  168D
4765  168E
4766  168F
4767  1690
4768  1691
4769  1692
4770  1693
4771  1694
4772  1695
4773  1696
4774  1697
4775  1698
4776  1699
4777  169A
4778  169B
4779  169C
4780  169D
4781  169E
4782  169F
4783  16A0
4784  16A1
4785  16A2
4786  16A3
4787  16A4
4788  16A5
4789  16A6
4790  16A7
4791  16A8
4792  16A9
4793  16AA
4794  16AB
4795  16AC
4796  16AD
4797  16AE
4798  16AF
4799  16B0
4800  16B1
4801  16B2
4802  16B3
4803  16B4
4804  16B5
4805  16B6
4806  16B7
4807  16B8
4808  16B9
4809  16BA
4810  16BB
4811  16BC
4812  16BD
4813  16BE
4814  16BF
4815  16C0
4816  16C1
4817  16C2
4818  16C3
4819  16C4
4820  16C5
4821  16C6
4822  16C7
4823  16C8
4824  16C9
4825  16CA
4826  16CB
4827  16CC
4828  16CD
4829  16CE
4830  16CF
4831  16D0
4832  16D1
4833  16D2
4834  16D3
4835  16D4
4836  16D5
4837  16D6
4838  16D7
4839  16D8
4840  16D9
4841  16DA
4842  16DB
4843  16DC
4844  16DD
4845  16DE
4846  16DF
4847  16E0
4848  16E1
4849  16E2
4850  16E3
4851  16E4
4852  16E5
4853  16E6
4854  16E7
4855  16E8
4856  16E9
4857  16EA
4858  16EB
4859  16EC
4860  16ED
4861  16EE
4862  16EF
4863  16F0
4864  16F1
4865  16F2
4866  16F3
4867  16F4
4868  16F5
4869  16F6
4870  16F7
4871  16F8
4872  16F9
4873  16FA
4874  16FB
4875  16FC
4876  16FD
4877  16FE
4878  16FF
4879  1700
4880  1701
4881  1702
4882  1703
4883  1704
4884  1705
4885  1706
4886  1707
4887  1708
4888  1709
4889  170A
4890  170B
4891  170C
4892  170D
4893  170E
4894  170F
4895  1710
4896  1711
4897  1712
4898  1713
4899  1714
4900  1715
4901  1716
4902  1717
4903  1718
4904  1719
4905  171A
4906  171B
4907  171C
4908  171D
4909  171E
4910  171F
4911  1720
4912  1721
4913  1722
4914  1723
4915  1724
4916  1725
4917  1726
4918  1727
4919  1728
4920  1729
4921  172A
4922  172B
4923  172C
4924  172D
4925  172E
4926  172F
4927  1730
4928  1731
4929  1732
4930  1733
4931  1734
4932  1735
4933  1736
4934  1737
4935  1738
4936  1739
4937  173A
4938  173B
4939  173C
4940  173D
4941  173E
4942  173F
4943  1740
4944  1741
4945  1742
4946  1743
4947  1744
4948  1745
4949  1746
4950  1747
4951  1748
4952  1749
4953  174A
4954  174B
4955  174C
4956  174D
4957  174E
4958  174F
4959  1750
4960  1751
4961  1752
4962  1753
4963  1754
4964  1755
4965  1756
4966  1757
4967  1758
4968  1759
4969  175A
4970  175B
4971  175C
4972  175D
4973  175E
4974  175F
4975  1760
4976  1761
4977  1762
4978  1763
4979  1764
4980  1765
4981  1766
4982  1767
4983  1768
4984  1769
4985  176A
4986  176B
4987  176C
4988  176D
4989  176E
4990  176F
4991  1770
4992  1771
4993  1772
4994  1773
4995  1774
4996  1775
4997  1776
4998  1777
4999  1778
5000  1779
5001  177A
5002  177B
5003  177C
5004  177D
5005  177E
5006  177F
5007  1780
5008  1781
5009  1782
5010  1783
5011  1784
5012  1785
5013  1786
5014  1787
5015  1788
5016  1789
5017  178A
5018  178B
5019  178C
5020  178D
5021  178E
5022  178F
5023  1790
5024  1791
5025  1792
5026  1793
5027  1794
5028  1795
5029  1796
5030  1797
5031  1798
5032  1799
5033  179A
5034  179B
5035  179C
5036  179D
5037  179E
5038  179F
5039  17A0
5040  17A1
5041  17A2
5042  17A3
5043  17A4
5044  17A5
5045  17A6
5046  17A7
5047  17A8
5048  17A9
5049  17AA
5050  17AB
5051  17AC
5052  17AD
5053  17AE
5054  17AF
5055  17B0
5056  17B1
5057  17B2
5058  17B3
5059  17B4
5060  17B5
5061  17B6
5062  17B7
5063  17B8
5064  17B9
5065  17BA
5066  17BB
5067  17BC
5068  17BD
5069  17BE
5070  17BF
5071  17C0
5072  17C1
5073  17C2
5074  17C3
5075  17C4
5076  17C5
5077  17C6
5078  17C7
5079  17C8
5080  17C9
5081  17CA
5082  17CB
5083  17CC
5084  17CD
5085  17CE
5086  17CF
5087  17D0
5088  17D1
5089  17D2
5090  17D3
5091  17D4
5092  17D5
5093  17D6
5094  17D7
5095  17D8
5096  17D9
5097  17DA
5098  17DB
5099  17DC
5100  17DD
5101  17DE
5102  17DF
5103  17E0
5104  17E1
5105  17E2
5106  17E3
5107  17E4
5108  17E5
5109  17E6
5110  17E7
5111  17E8
5112  17E9
5113  17EA
5114  17EB
5115  17EC
5116  17ED
5117  17EE
5118  17EF
5119  17F0
5120  17F1
5121  17F2
5122  17F3
5123  17F4
5124  17F5
5125  17F6
5126  17F7
5127  17F8
5128  17F9
5129  17FA
5130  17FB
5131  17FC
5132  17FD
5133  17FE
5134  17FF
5135  1800
5136  1801
5137  1802
5138  1803
5139  1804
5140  1805
5141  1806
5142  1807
5143  1808
5144  1809
5145  180A
5146  180B
5147  180C
5148  180D
5149  180E
5150  180F
5151  1810
5152  1811
5153  1812
5154  1813
5155  1814
5156  1815
5157  1816
5158  1817
5159  1818
5160  1819
5161  181A
5162  181B
5163  181C
5164  181D
5165  181E
5166  181F
5167  1820
5168  1821
5169  1822
5170  1823
5171  1824
5172  1825
5173  1826
5174  1827
5175  1828
5176  1829
5177  182A
5178  182B
5179  182C
5180  182D
5181  182E
5182  182F
5183  1830
5184  1831
5185  1832
5186  1833
5187  1834
5188  1835
5189  1836
5190  1837
5191  1838
5192  1839
5193  183A
5194  183B
5195  183C
5196  183D
5197  183E
5198  183F
5199  1840
5200  1841
5201  1842
5202  1843
5203  1844
5204  1845
5205  1846
5206  1847
5207  1848
5208  1849
5209  184A
5210  184B
5211  184C
5212  184D
5213  184E
5214  184F
5215  1850
5216  1851
5217  1852
5218  1853
5219  1854
5220  1855
5221  1856
5222  1857
5223  1858
5224  1859
5225  185A
5226  185B
5227  185C
5228  185D
5229  185E
5230  185F
5231  1860
5232  1861
5233  1862
5234  1863
5235  1864
5236  1865
5237  1866
5238  1867
5239  1868
5240  1869
5241  186A
5242  186B
5243  186C
5244  186D
5245  186E
5246  186F
5247  1870
5248  1871
5249  1872
5250  1873
5251  1874
5252  1875
5253  1876
5254  1877
5255  1878
5256  1879
5257  187A
5258  187B
5259  187C
5260  187D
5261  187E
5262  187F
5263  1880
5264  1881
5265  1882
5266  1883
5267  1884
5268  1885
5269  1886
5270  1887
5271  1888
5272  1889
5273  188A
5274  188B
5275  188C
5276  188D
5277  188E
5278  188F
5279  1890
5280  1891
5281  1892
5282  1893
5283  1894
5284  1895
5285  1896
5286  1897
5287  1898
5288  1899
5289  189A
5290  189B
5291  189C
5292  189D
5293  189E
5294  189F
5295  18A0
5296  18A1
5297  18A2
5298  18A3
5299  18A4
5300  18A5
5301  18A6
5302  18A7
5303  18A8
5304  18A9
5305  18AA
5306  18AB
5307  18AC
5308  18AD
5309  18AE
5310  18AF
5311  18B0
5312  18B1
5313  18B2
5314  18B3
5315  18B4
5316  18B5
5317  18B6
5318  18B7
5319  18B8
5320  18B9
5321  18BA
5322  18BB
5323  18BC
5324  18BD
5325  18BE
5326  18BF
5327  18C0
5328  18C1
5329  18C2
5330  18C3
5331  18C4
5332  18C5
5333  18C6
5334  18C7
5335  18C8
5336  18C9
5337  18CA
5338  18CB
5339  18CC
5340  18CD
5341  18CE
5342  18CF
5343  18D0
5344  18D1
5345  18D2
5346  18D3
5347  18D4
5348  18D5
5349  18D6
5350  18D7
5351  18D8
5352  18D9
5353  18DA
5354  18DB
5355  18DC
5356  18DD
5357  18DE
5358  18DF
5359  18E0
5360  18E1
5361  18E2
5362  18E3
5363  18E4
5364  18E5
5365  18E6
5366  18E7
5367  18E8
5368  18E9
5369  18EA
5370  18EB
5371  18EC
5372  18ED
5373  18EE
5374  18EF
5375  18F0
5376  18F1
5377  18F2
5378  18F3
5379  18F4
5380  18F5
5381  18F6
5382  18F7
5383  18F8
5384  18F9
5385  18FA
5386  18FB
5387  18FC
5388  18FD
5389  18FE
5390  18FF
5391  1900
5392  1901
5393  1902
5394  1903
5395  1904
5396  1905
5397  1906
5398  1907
5399  1908
5400  1909
5401  190A
5402  190B
5403  190C
5404  190D
5405  190E
5406  190F
5407  1910
5408  1911
5409  1912
5410  1913
5411  1914
5412  1915
5413  1916
5414  1917
5415  1918
5416  1919
5417  191A
5418  191B
5419  191C
5420  191D
5421  191E
5422  191F
5423  1920
5424  1921
5425  1922
5426  1923
5427  1924
5428  1925
5429  1926
5430  1927
5431  1928
5432  1929
5433  192A
5434  192B
5435  192C
5436  192D
5437  192E
5438  192F
5439  1930
5440  1931
5441  1932
5442  1933
5443  1934
5444  1935
5445  1936
5446  1937
5447  1938
5448  1939
5449  193A
5450  193B
5451  193C
5452  193D
5453  193E
5454  193F
5455  1940
5456  1941
5457  1942
5458  1943
5459  1944
5460  1945
5461  1946
5462  1947
5463  1948
5464  1949
5465  194A
5466  194B
5467  194C
5468  194D
5469  194E
5470  194F
5471  1950
5472  1951
5473  1952
5474  1953
5475  1954
5476  1955
5477  1956
5478  1957
5479  1958
5480  1959
5481  195A
5482  195B
5483  195C
5484  195D
5485  195E
5486  195F
5487  1960
5488  1961
5489  1962
5490  1963
5491  1964
5492  1965
5493  1966
5494  1967
5495  1968
5496  1969
5497  196A
5498  196B
5499  196C
5500  196D
5501  196E
5502  196F
5503  1970
5504  1971
5505  1972
5506  1973
5507  1974
5508  1975
5509  1976
5510  1977
5511  1978
5512  1979
5513  197A
5514  197B
5515  197C
5516  197D
5517  197E
5518  197F
5519  1980
5520  1981
5521  1982
5522  1983
5523  1984
5524  1985
5525  1986
5526  1987
5527  1988
5528  1989
5529  198A
5530  198B
5531  198C
5532  198D
5533  198E
5534  198F
5535  1990
5536  1991
5537  1992
5538  1993
5539  1994
5540  1995
5541  1996
5542  1997
5543  1998
5544  1999
5545  199A
5546  199B
5547  199C
5548  199D
5549  199E
5550  199F
5551  19A0
5552  19A1
5553  19A2
5554  19A3
5555  19A4
5556  19A5
5557  19A6
5558  19A7
5559  19A8
5560  19A9
5561  19AA
5562  19AB
5563  19AC
5564  19AD
5565  19AE
5566  19AF
5567  19B0
5568  19B1
5569  19B2
5570  19B3
5571  19B4
5572  19B5
5573  19B6
5574  19B7
5575  19B8
5576  19B9
5577  19BA
5578  19BB
5579  19BC
5580  19BD
5581  19BE
5582  19BF
5583  19C0
5584  19C1
5585  19C2
5586  19C3
5587  19C4
5588  19C5
5589  19C6
5590  19C7
5591  19C8
5592  19C9
5593  19CA
5594  19CB
5595  19CC
5596  19CD
5597  19CE
5598  19CF
5599  19D0
5600  19D1
5601  19D2
5602  19D3
5603  19D4
5604  19D5
5605  19D6
5606  19D7
5607  19D8
5608  19D9
5609  19DA
5610  19DB
5611  19DC
5612  19DD
5613  19DE
5614  19DF
5615  19E0
5616  19E1
5617  19E2
5618  19E3
5619  19E4
5620  19E5
5621  19E6
5622  19E7
5623  19E8
5624  19E9
5625  19EA
5626  19EB
5627  19EC
5628  19ED
5629  19EE
5630  19EF
5631  19F0
5632  19F1
5633  19F2
5634  19F3
5635  19F4
5636  19F5
5637  19F6
5638  19F7
5639  19F8
5640  19F9
5641  19FA
5642  19FB
5643  19FC
5644  19FD
5645  19FE
5646  19FF
5647  1A00
5648  1A01
5649  1A02
5650  1A03
5651  1A04
5652  1A05
5653  1A06
5654  1A07
5655  1A08
5656  1A09
5657  1A0A
5658  1A0B
5659  1A0C
5660  1A0D
5661  1A0E
5662  1A0F
5663  1A10
5664  1A11
5665  1A12
5666  1A13
5667  1A14
5668  1A15
5669  1A16
5670  1A17
5671  1A18
5672  1A19
5673  1A1A
5674  1A1B
5675  1A1C
5676  1A1D
5677  1A1E
5678  1A1F
5679  1A20
5680  1A21
5681  1A22
5682  1A23
5683  1A24
5684  1A25
5685  1A26
5686  1A27
5687  1A28
5688  1A29
5689  1A2A
5690  1A2B
5691  1A2C
5692  1A2D
5693  1A2E
5694  1A2F
5695  1A30
5696  1A31
5697  1A32
5698  1A33
5699  1A34
5700  1A35
5701  1A36
5702  1A37
5703  1A38
5704  1A39
5705  1A3A
5706  1A3B
5707  1A3C
5708  1A3D
5709  1A3E
5710  1A3F
5711  1A40
5712  1A41
5713  1A42
5714  1A43
5715  1A44
5716  1A45
5717  1A46
5718  1A47
5719  1A48
5720  1A49
5721  1A4A
5722  1A4B
5723  1A4C
5724  1A4D
5725  1A4E
5726  1A4F
5727  1A50
5728  1A51
5729  1A52
5730  1A53
5731  1A54
5732  1A55
5733  1A56
5734  1A57
5735  1A58
5736  1A59
5737  1A5A
5738  1A5B
5739  1A5C
5740  1A5D
5741  1A5E
5742  1A5F
5743  1A60
5744  1A61
5745  1A62
5746  1A63
5747  1A64
5748  1A65
5749  1A66
5750  1A67
5751  1A68
5752  1A69
5753  1A6A
5754  1A6B
5755  1A6C
5756  1A6D
5757  1A6E
5758  1A6F
5759  1A70
5760  1A71
5761  1A72
5762  1A73
5763  1A74
5764  1A75
5765  1A76
5766  1A77
5767  1A78
5768  1A79
5769  1A7A
5770  1A7B
5771  1A7C
5772  1A7D
5773  1A7E
5774  1A7F
5775  1A80
5776  1A81
5777  1A82
5778  1A83
5779  1A84
5780  1A85
5781  1A86
5782  1A87
5783  1A88
5784  1A89
5785  1A8A
5786  1A8B
5787  1A8C
5788  1A8D
5789  1A8E
5790  1A8F
5791  1A90
5792  1A91
5793  1A92
5794  1A93
5795  1A94
5796  1A95
5797  1A96
5798  1A97
5799  1A98
5800  1A99
5801  1A9A
5802  1A9B
5803  1A9C
5804  1A9D
5805  1A9E
5806  1A9F
5807  1AA0
5808  1AA1
5809  1AA2
5810  1AA3
5811  1AA4
5812  1AA5
5813  1AA6
5814  1AA7
5815  1AA8
5816  1AA9
5817  1AAA
5818  1AAB
5819  1AAC
5820  1AAD
5821  1AAE
5822  1AAF
5823  1AB0
5824  1AB1
5825  1AB2
5826  1AB3
5827  1AB4
5828  1AB5
5829  1AB6
5830  1AB7
5831  1AB8
5832  1AB9
5833  1ABA
5834  1ABB
5835  1ABC
5836  1ABD
5837  1ABE
5838  1ABF
5839  1AC0
5840  1AC1
5841  1AC2
5842  1AC3
5843  1AC4
5844  1AC5
5845  1AC6
5846  1AC7
5847  1AC8
5848  1AC9
5849  1ACA
5850  1ACB
5851  1ACC
5852  1ACD
5853  1ACE
5854  1ACF
5855  1AD0
5856  1AD1
5857  1AD2
5858  1AD3
5859  1AD4
5860  1AD5
5861  1AD6
5862  1AD7
5863  1AD8
5864  1AD9
5865  1ADA
5866  1ADB
5867  1ADC
5868  1ADD
5869  1ADE
5870  1ADF
5871  1AE0
5872  1AE1
5873  1AE2
5874  1AE3
5875  1AE4
5876  1AE5
5877  1AE6
5878  1AE7
5879  1AE8
5880  1AE9
5881  1AEA
5882  1AEB
5883  1AEC
5884  1AED
5885  1AEE
5886  1AEF
5887  1AF0
5888  1AF1
5889  1AF2
5890  1AF3
5891  1AF4
5892  1AF5
5893  1AF6
5894  1AF7
5895  1AF8
5896  1AF9
5897  1AFA
5898  1AFB
5899  1AFC
5900  1AFD
5901  1AFE
5902  1AFF
5903  1B00
5904  1B01
5905  1B02
5906  1B03
5907  1B04
5908  1B05
5909  1B06
5910  1B07
5911  1B08
5912  1B09
5913  1B0A
5914  1B0B
5915  1B0C
5916  1B0D
5917  1B0E
5918  1B0F
5919  1B10
5920  1B11
5921  1B12
5922  1B13
5923  1B14
5924  1B15
5925  1B16
5926  1B17
5927  1B18
5928  1B19
5929  1B1A
5930  1B1B
5931  1B1C
5932  1B1D
5933  1B1E
5934  1B1F
5935  1B20
5936  1B21
5937  1B22
5938  1B23
5939  1B24
5940  1B25
5941  1B26
5942  1B27
5943  1B28
5944  1B29
5945  1B2A
5946  1B2B
5947  1B2C
5948  1B2D
5949  1B2E
5950  1B2F
5951  1B30
5952  1B31
5953  1B32
5954  1B33
5955  1B34
5956  1B35
5957  1B36
5958  1B37
5959  1B38
5960  1B39
5961  1B3A
5962  1B3B
5963  1B3C
5964  1B3D
5965  1B3E
5966  1B3F
5967  1B40
5968  1B41
5969  1B42
5970  1B43
5971  1B44
5972  1B45
5973  1B46
5974  1B47
5975  1B48
5976  1B49
5977  1B4A
5978  1B4B
5979  1B4C
5980  1B4D
5981  1B4E
5982  1B4F
5983  1B50
5984  1B51
5985  1B52
5986  1B53
5987  1B54
5988  1B55
5989  1B56
5990  1B57
5991  1B58
5992  1B59
5993  1B5A
5994  1B5B
5995  1B5C
5996  1B5D
5997  1B5E
5998  1B5F
5999  1B60
6000  1B61
6001  1B62
6002  1B63
6003  1B64
6004  1B65
6005  1B66
6006  1B67
6007  1B68
6008  1B69
6009  1B6A
6010  1B6B
6011  1B6C
6012  1B6D
6013  1B6E
6014  1B6F
6015  1B70
6016  1B71
6017  1B72
6018  1B73
6019  1B74
6020  1B75
6021  1B76
6022  1B77
6023  1B78
6024  1B79
6025  1B7A
6026  1B7B
6027  1B7C
6028  1B7D
6029  1B7E
6030  1B7F
6031  1B80
6032  1B81
6033  1B82
6034  1B83
6035  1B84
6036  1B85
6037  1B86
6038  1B87
6039  1B88
6040  1B89
6041  1B8A
6042  1B8B
6043  1B8C
6044  1B8D
6045  1B8E
6046  1B8F
6047  1B90
6048  1B91
6049  1B92
6050  1B93
6051  1B94
6052  1B95
6053  1B96
6054  1B97
6055  1B98
6056  1B99
6057  1B9A
6058  1B9B
6059  1B9C
6060  1B9D
6061  1B9E
6062  1B9F
6063  1BA0
6064  1BA1
6065  1BA2
6066  1BA3
6067  1BA4
6068  1BA5
6069  1BA6
6070  1BA7
6071  1BA8
6072  1BA9
6073  1BAA
6074  1BAB
6075  1BAC
6076  1BAD
6077  1BAE
6078  1BAF
6079  1BB0
6080  1BB1
6081  1BB2
6082  1BB3
6083  1BB4
6084  1BB5
6085  1BB6
6086  1BB7
6087  1BB8
6088  1BB9
6089  1BBA
6090  1BBB
6091  1BBC
6092  1BBD
6093  1BBE
6094  1BBF
6095  1BC0
6096  1BC1
6097  1BC2
6098  1BC3
6099  1BC4
6100  1BC5
6101  1BC6
6102  1BC7
6103  1BC8
6104  1BC9
6105  1BCA
6106  1BCB
6107  1BCC
6108  1BCD
6109  1BCE
6110  1BCF
6111  1BD0
6112  1BD1
6113  1BD2
6114  1BD3
6115  1BD4
6116  1BD5
6117  1BD6
6118  1BD7
6119  1BD8
6120  1BD9
6121  1BDA
6122  1BDB
6123  1BDC
6124  1BDD
6125  1BDE
6126  1BDF
6127  1BE0
6128  1BE1
6129  1BE2
6130  1BE3
6131  1BE4
6132  1BE5
6133  1BE6
6134  1BE7
6135  1BE8
6136  1BE9
6137  1BEA
6138  1BEB
6139  1BEC
6140  1BED
6141  1BEE
6142  1BEF
6143  1BF0
6144  1BF1
6145  1BF2
6146  1BF3
6147  1BF4
6148  1BF5
6149  1BF6
6150  1BF7
6151  1BF8
6152  1BF9
6153  1BFA
6154  1BFB
6155  1BFC
6156  1BFD
6157  1BFE
6158  1BFF
6159  1C00
6160  1C01
6161  1C02
6162  1C03
6163  1C04
6164  1C05
6165  1C06
6166  1C07
6167  1C08
6168  1C09
6169  1C0A
6170  1C0B
6171  1C0C
6172  1C0D
6173  1C0E
6174  1C0F
6175  1C10
6176  1C11
6177  1C12
6178  1C13
6179  1C14
6180  1C15
6181  1C16
6182  1C17
6183  1C18
6184  1C19
6185  1C1A
6186  1C1B
6187  1C1C
6188  1C1D
6189  1C1E
6190  1C1F
6191  1C20
6192  1C21
6193  1C22
6194  1C23
6195  1C24
6196  1C25
6197  1C26
6198  1C27
6199  1C28
6200  1C29
6201  1C2A
6202  1C2B
6203  1C2C
6204  1C2D
6205  1C2E
6206  1C2F
6207  1C30
6208  1C31
6209  1C32
6210  1C33
6211  1C34
6212  1C35
6213  1C36
6214  1C37
6215  1C38
6216  1C39
6217  1C3A
6218  1C3B
6219  1C3C
6220  1C3D
6221  1C3E
6222  1C3F
6223  1C40
6224  1C41
6225  1C42
6226  1C43
6227  1C44
6228  1C45
6229  1C46
6230  1C47
6231  1C48
6232  1C49
6233  1C4A
6234  1C4B
6235  1C4C
6236  1C4D
6237  1C4E
6238  1C4F
6239  1C50
6240  1C51
6241  1C52
6242  1C53
6243  1C54
6244  1C55
6245  1C56
6246  1C57
6247  1C58
6248  1C59
6249  1C5A
6250  1C5B
6251  1C5C
6252  1C5D
6253  1C5E
6254  1C5F
6255  1C60
6256  1C61
6257  1C62
6258  1C63
6259  1C64
6260  1C65
6261  1C66
6262  1C67
6263  1C68
6264  1C69
6265  1C6A
6266  1C6B
6267  1C6C
6268  1C6D
6269  1C6E
6270  1C6F
6271  1C70
6272  1C71
6273  1C72
6274  1C73
6275  1C74
6276  1C75
6277  1C76
6278  1C77
6279  1C78
6280  1C79
6281  1C7A
6282  1C7B
6283  1C7C
6284  1C7D
6285  1C7E
6286  1C7F
6287  1C80
6288  1C81
6289  1C82
6290  1C83
6291  1C84
6292  1C85
6293  1C86
6294  1C87
6295  1C88
6296  1C89
6297  1C8A
6298  1C8B
6299  1C8C
6300  1C8D
6301  1C8E
6302  1C8F
6303  1C90
6304  1C91
6305  1C92
6306  1C93
6307  1C94
6308  1C95
6309  1C96
6310  1C97
6311  1C98
6312  1C99
6313  1C9A
6314  1C9B
6315  1C9C
6316  1C9D
6317  1C9E
6318  1C9F
6319  1CA0
6320  1CA1
6321  1CA2
6322  1CA3
6323  1CA4
6324  1CA5
6325  1CA6
6326  1CA7
6327  1CA8
6328  1CA9
6329  1CAA
6330  1CAB
6331  1CAC
6332  1CAD
6333  1CAE
6334  1CAF
6335  1CB0
6336  1CB1
6337  1CB2
6338  1CB3
6339  1CB4
6340  1CB5
6341  1CB6
6342  1CB7
6343  1CB8
6344  1CB9
6345  1CBA
6346  1CBB
6347  1CBC
6348  1CBD
6349  1CBE
6350  1CBF
6351  1CC0
6352  1CC1
6353  1CC2
6354  1CC3
6355  1CC4
6356  1CC5
6357  1CC6
6358  1CC7
6359  1CC8
6360  1CC9
6361  1CCA
6362  1CCB
6363  1CCC
6364  1CCD
6365  1CCE
6366  1CCF
6367  1CD0
6368  1CD1
6369  1CD2
6370  1CD3
6371  1CD4
6372  1CD5
6373  1CD6
6374  1CD7
6375  1CD8
6376  1CD9
6377  1CDA
6378  1CDB
6379  1CDC
6380  1CDD
6381  1CDE
6382  1CDF
6383  1CE0
6384  1CE1
6385  1CE2
6386  1CE3
6387  1CE4
6388  1CE5
6389  1CE6
6390  1CE7
6391  1CE8
6392  1CE9
6393  1CEA
6394  1CEB
6395  1CEC
6396  1CED
6397  1CEE
6398  1CEF
6399  1CF0
6400  1CF1
6401  1CF2
6402  1CF3
6403  1CF4
6404  1CF5
6405  1CF6
6406  1CF7
6407  1CF8
6408  1CF9
6409  1CFA
6410  1CFB
6411  1CFC
6412  1CFD
6413  1CFE
6414  1CFF
6415  1D00
6416  1D01
6417  1D02
6418  1D03
6419  1D04
6420  1D05
6421  1D06
6422  1D07
6423  1D08
6424  1D09
6425  1D0A
6426  1D0B
6427  1D0C
6428  1D0D
6429  1D0E
6430  1D0F
6431  1D10
6432  1D11
6433  1D12
6434  1D13
6435  1D14
6436  1D15
6437  1D16
6438  1D17
6439  1D18
6440  1D19
6441  1D1A
6442  1D1B
6443  1D1C
6444  1D1D
6445  1D1E
6446  1D1F
6447  1D20
6448  1D21
6449  1D22
6450  1D23
6451  1D24
6452  1D25
6453  1D26
6454  1D27
6455  1D28
6456  1D29
6457  1D2A
6458  1D2B
6459  1D2C
6460  1D2D
6461  1D2E
6462  1D2F
6463  1D30
6464  1D31
6465  1D32
6466  1D33
6467  1D34
6468  1D35
6469  1D36
6470  1D37
6471  1D38
6472  1D39
6473  1D3A
6474  1D3B
6475  1D3C
6476  1D3D
6477  1D3E
6478  1D3F
6479  1D40
6480  1D41
6481  1D42
6482  1D43
6483  1D44
6484  1D45
6485  1D46
6486  1D47
6487  1D48
6488  1D49
6489  1D4A
6490  1D4B
6491  1D4C
6492  1D4D
6493  1D4E
6494  1D4F
6495  1D50
6496  1D51
6497  1D52
6498  1D53
6499  1D54
6500  1D55
6501  1D56
6502  1D57
6503  1D58
6504  1D59
6505  1D5A
6506  1D5B
6507  1D5C
6508  1D5D
6509  1D5E
6510  1D5F
6511  1D60
6512  1D61
6513  1D62
6514  1D63
6515  1D64
6516  1D65
6517  1D66
6518  1D67
6519  1D68
6520  1D69
6521  1D6A
6522  1D6B
6523  1D6C
6524  1D6D
6525  1D6E
6526  1D6F
6527  1D70
6528  1D71
6529  1D72
6530  1D73
6531  1D74
6532  1D75
6533  1D76
6534  1D77
6535  1D78
6536  1D79
6537  1D7A
6538  1D7B
6539  1D7C
6540  1D7D
6541  1D7E
6542  1D7F
6543  1D80
6544  1D81
6545  1D82
6546  1D83
6547  1D84
6548  1D85
6549  1D86
6550  1D87
6551  1D88
6552  1D89
6553  1D8A
6554  1D8B
6555  1D8C
6556  1D8D
6557  1D8E
6558  1D8F
6559  1D90
6560  1D91
6561  1D92
6562  1D93
6563  1D94
6564  1D95
6565  1D96
6566  1D97
6567  1D98
6568  1D99
6569  1D9A
6570  1D9B
6571  1D9C
6572  1D9D
6573  1D9E
6574  1D9F
6575  1DA0
6576  1DA1
6577  1DA2
6578  1DA3
6579  1DA4
6580  1DA5
6581  1DA6
6582  1DA7
6583  1DA8
6584  1DA9
6585  1DAA
6586  1DAB
6587  1DAC
6588  1DAD
6589  1DAE
6590  1DAF
6591  1DB0
6592  1DB1
6593  1DB2
6594  1DB3
6595  1DB4
6596  1DB5
6597  1DB6
6598  1DB7
6599  1DB8
6600  1DB9
6601  1DBA
6602  1DBB
6603  1DBC
6604  1DBD
6605  1DBE
6606  1DBF
6607  1DC0
6608  1DC1
6609  1DC2
6610  1DC3
6611  1DC4
6612  1DC5
6613  1DC6
6614  1DC7
6615  1DC8
6616  1DC9
6617  1DCA
6618  1DCB
6619  1DCC
6620  1DCD
6621  1DCE
6622  1DCF
6623  1DD0
6624  1DD1
6625  1DD2
6626  1DD3
6627  1DD4
6628  1DD5
6629  1DD6
6630  1DD7
6631  1DD8
6632  1DD9
6633  1DDA
6634  1DDB
6635  1DDC
6636  1DDD
6637  1DDE
6638  1DDF
6639  1DE0
6640  1DE1
6641  1DE2
6642  1DE3
6643  1DE4
6644  1DE5
6645  1DE6
6646  1DE7
6647  1DE8
6648  1DE9
6649  1DEA
6650  1DEB
6651  1DEC
6652  1DED
6653  1DEE
6654  1DEF
6655  1DF0
6656  1DF1
6657  1DF2
6658  1DF3
6659  1DF4
6660  1DF5
6661  1DF6
6662  1DF7
6663  1DF8
6664  1DF9
6665  1DFA
6666  1DFB
6667  1DFC
6668  1DFD
6669  1DFE
6670  1DFF
6671  1E00
6672  1E01
6673  1E02
6674  1E03
6675  1E04
6676  1E05
6677  1E06
6678  1E07
6679  1E08
6680  1E09
6681  1E0A
6682  1E0B
6683  1E0C
6684  1E0D
6685  1E0E
6686  1E0F
6687  1E10
6688  1E11
6689  1E12
6690  1E13
6691  1E14
6692  1E15
6693  1E16
6694  1E17
6695  1E18
6696  1E19
6697  1E1A
6698  1E1B
6699  1E1C
6700  1E1D
6701  1E1E
6702  1E1F
6703  1E20
6704  1E21
6705  1E22
6706  1E23
6707  1E24
6708  1E25
6709  1E26
6710  1E27
6711  1E28
6712  1E29
6713  1E2A
6714  1E2B
6715  1E2C
6716  1E2D
6717  1E2E
6718  1E2F
6719  1E30
6720  1E31
6721  1E32
6722  1E33
6723  1E34
6724  1E35
6725  1E36
6726  1E37
6727  1E38
6728  1E39
6729  1E3A
6730  1E3B
6731  1E3C
6732  1E3D
6733  1E3E
6734  1E3F
6735  1E40
6736  1E41
6737  1E42
6738  1E43
6739  1E44
6740  1E45
6741  1E46
6742  1E47
6743  1E48
6744  1E49
6745  1E4A
6746  1E4B
6747  1E4C
6748  1E4D
6749  1E4E
6750  1E4F
6751  1E50
6752  1E51
6753  1E52
6754  1E53
6755  1E54
6756  1E55
6757  1E56
6758  1E57
6759  1E58
6760  1E59
6761  1E5A
6762  1E5B
6763  1E5C
6764  1E5D
6765  1E5E
6766  1E5F
6767  1E60
6768  1E61
6769  1E62
6770  1E63
6771  1E64
6772  1E65
6773  1E66
6774  1E67
6775  1E68
6776  1E69
6777  1E6A
6778  1E6B
6779  1E6C
6780  1E6D
6781  1E6E
6782  1E6F
6783  1E70
6784  1E71
6785  1E72
6786  1E73
6787  1E74
6788  1E75
6789  1E76
6790  1E77
6791  1E78
6792  1E79
6793  1E7A
6794  1E7B
6795  1E7C
6796  1E7D
6797  1E7E
6798  1E7F
6799  1E80
6800  1E81
6801  1E82
6802  1E83
6803  1E84
6804  1E85
6805  1E86
6806  1E87
6807  1E88
6808  1E89
6809  1E8A
6810  1E8B
6811  1E8C
6812  1E8D
6813  1E8E
6814  1E8F
6815  1E90
6816  1E91
6817  1E92
6818  1E93
6819  1E94
6820  1E95
6821  1E96
6822  1E97
6823  1E98
6824  1E99
6825  1E9A
6826  1E9B
6827  1E9C
6828  1E9D
6829  1E9E
6830  1E9F
6831  1EA0
6832  1EA1
6833  1EA2
6834  1EA3
6835  1EA4
6836  1EA5
6837  1EA6
6838  1EA7
6839  1EA8
6840  1EA9
6841  1EAA
6842  1EAB
6843  1EAC
6844  1EAD
6845  1EAE
6846  1EAF
6847  1EB0
6848  1EB1
6849  1EB2
6850  1EB3
6851  1EB4
6852  1EB5
6853  1EB6
6854  1EB7
6855  1EB8
6856  1EB9
6857  1EBA
6858  1EBB
6859  1EBC
6860  1EBD
6861  1EBE
6862  1EBF
6863  1EC0
6864  1EC1
6865  1EC2
6866  1EC3
6867  1EC4
6868  1EC5
6869  1EC6
6870  1EC7
6871  1EC8
6872  1EC9
6873  1ECA
6874  1ECB
6875  1ECC
6876  1ECD
6877  1ECE
6878  1ECF
6879  1ED0
6880  1ED1
6881  1ED2
6882  1ED3
6883  1ED4
6884  1ED5
6885  1ED6
6886  1ED7
6887  1ED8
6888  1ED9
6889  1EDA
6890  1EDB
6891  1EDC
6892  1EDD
6893  1EDE
6894  1EDF
6895  1EE0
6896  1EE1
6897  1EE2
6898  1EE3
6899  1EE4
6900  1EE5
6901  1EE6
6902  1EE7
6903  1EE8
6904  1EE9
6905  1EEA
6906  1EEB
6907  1EEC
6908  1EED
6909  1EEE
6910  1EEF
6911  1EF0
6912  1EF1
6913  1EF2
6914  1EF3
6915  1EF4
6916  1EF5
6917  1EF6
6918  1EF7
6919  1EF8
6920  1EF9
6921  1EFA
6922  1EFB
6923  1EFC
6924  1EFD
6925  1EFE
6926  1EFF
6927  1F00
6928  1F01
6929  1F02
6930  1F03
6931  1F04
6932  1F05
6933  1F06
6934  1F07
6935  1F08
6936  1F09
6937  1F0A
6938  1F0B
6939  1F0C
6940  1F0D
6941  1F0E
6942  1F0F
6943  1F10
6944  1F11
6945  1F12
6946  1F13
6947  1F14
6948  1F15
6949  1F16
6950  1F17
6951  1F18
6952  1F19
6953  1F1A
6954  1F1B
6955  1F1C
6956  1F1D
6957  1F1E
6958  1F1F
6959  1F20
6960  1F21
6961  1F22
6962  1F23
6963  1F24
6964  1F25
6965  1F26
6966  1F27
6967  1F28
6968  1F29
6969  1F2A
6970  1F2B
6971  1F2C
6972  1F2D
6973  1F2E
6974  1F2F
6975  1F30
6976  1F31
6977  1F32
6978  1F33
6979  1F34
6980  1F35
6981  1F36
6982  1F37
6983  1F38
6984  1F39
6985  1F3A
6986  1F3B
6987  1F3C
6988  1F3D
6989  1F3E
6990  1F3F
6991  1F40
6992  1F41
6993  1F42
6994  1F43
6995  1F44
6996  1F45
6997  1F46
6998  1F47
6999  1F48
7000  1F49
7001  1F4A
7002  1F4B
7003  1F4C
7004  1F4D
7005  1F4E
7006  1F4F
7007  1F50
7008  1F51
7009  1F52
7010  1F53
7011  1F54
7012  1F55
7013  1F56
7014  1F57
7015  1F58
7016  1F59
7017  1F5A
7018  1F5B
7019  1F5C
7020  1F5D
7021  1F5E
7022  1F5F
7023  1F60
7024  1F61
7025  1F62
7026  1F63
7027  1F64
7028  1F65
7029  1F66
7030  1F67
7031  1F68
7032  1F69
7033  1F6A
7034  1F6B
7035  1F6C
7036  1F6D
7037  1F6E
7038  1F6F
7039  1F70
7040  1F71
7041  1F72
7042  1F73
7043  1F74
7044  1F75
7045  1F76
7046  1F77
7047  1F78
7048  1F79
7049  1F7A
7050  1F7B
7051  1F7C
7052  1F7D
7053  1F7E
7054  1F7F
7055  1F80
7056  1F81
7057  1F82
7058  1F83
7059  1F84
7060  1F85
7061  1F86
7062  1F87
7063  1F88
7064  1F89
7065  1F8A
7066  1F8B
7067  1F8C
7068  1F8D
7069  1F8E
7070  1F8F
7071  1F90
7072  1F91
7073  1F92
7074  1F93
7075  1F94
7076  1F95
7077  1F96
7078  1F97
7079  1F98
7080  1F99
7081  1F9A
7082  1F9B
7083  1F9C
7084  1F9D
7085  1F9E
7086  1F9F
7087  1FA0
7088  1FA1
7089  1FA2
7090  1FA3
7091  1FA4
7092  1FA5
7093  1FA6
7094  1FA7
7095  1FA8
7096  1FA9
7097  1FAA
7098  1FAB
7099  1FAC
7100  1FAD
7101  1FAE
7102  1FAF
7103  1FB0
7104  1FB1
7105  1FB2
7106  1FB3
7107  1FB4
7108  1FB5
7109  1FB6
7110  1FB7
7111  1FB8
7112  1FB9
7113  1FBA
7114  1FBB
7115  1FBC
7116  1FBD
7117  1FBE
7118  1FBF
7119  1FC0
7120  1FC1
7121  1FC2
7122  1FC3
7123  1FC4
7124  1FC5
7125  1FC6
7126  1FC7
7127  1FC8
7128  1FC9
7129  1FCA
7130  1FCB
7131  1FCC
7132  1FCD
7133  1FCE
7134  1FCF
7135  1FD0
7136  1FD1
7137  1FD2
7138  1FD3
7139  1FD4
7140  1FD5
7141  1FD6
7142  1FD7
7143  1FD8
7144  1FD9
7145  1FDA
7146  1FDB
7147  1FDC
7148  1FDD
7149  1FDE
7150  1FDF
7151  1FE0
7152  1FE1
7153  1FE2
7154  1FE3
7155  1FE4
7156  1FE5
7157  1FE6
7158  1FE7
7159  1FE8
7160  1FE9
7161  1FEA
7162  1FEB
7163  1FEC
7164  1FED
7165  1FEE
7166  1FEF
7167  1FF0
7168  1FF1
7169  1FF2
7170  1FF3
7171  1FF4
7172  1FF5
7173  1FF6
7174  1FF7
7175  1FF8
7176  1FF9
7177  1FFA
7178  1FFB
7179  1FFC
7180  1FFD
7181  1FFE
7182  1FFF
7183  2000
7184  2001
7185  2002
7186  2003
7187  2004
7188  2005
7189  2006
7190  2007
7191  2008
7192  2009
7193  200A
7194  200B
7195  200C
7196  200D
7197  200E
7198  200F
7199  2010
7200  2011
007201  000326        
007202  000327  var hFonts[20] ;
007203  000328  var stringsCV[20] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
7204  1034
7205  1035
7206  1036
7207  1037
7208  1038
7209  1039
7210  103A
7211  103B
7212  103C
7213  103D
7214  103E
7215  103F
7216  1040
7217  1041
7218  1042
7219  1043
7220  1044
7221  1045
7222  1046
7223  1047
7224  1048
7225  1049
7226  104A
7227  104B
7228  104C
7229  104D
7230  104E
7231  104F
7232  1050
7233  1051
7234  1052
7235  1053
7236  1054
7237  1055
7238  1056
7239  1057
7240  1058
7241  1059
7242  105A
7243  105B
007244  000329  // Start P2.inc
007245  000330  var oObjects[MaxTotObjects+1] ;                 // address of objects
007246  000331  var curform ;
007247  000332  var x, y ;
007248  000333  var inputtype, TState, input, object ;
007249  000334  var comRX[40], cmd[CMDLenMAX] ;
007250  000335        
007251  000336  var cs, Ocs ;
007252  000337        
007253  000338  func seroutCS(var op)
007254  000339      serout(op) ;
007255  000340      Ocs ^= op ;
007256  000341  endfunc
007257  000342        
007258  000343  func seroutOcs()
007259  000344      serout(Ocs) ;
007260  000345      Ocs := 0 ;
007261  000346  endfunc
007262  000347        
007263  000348        
007264  000349  func ReadObject(var ObjectType, var ObjectIdx)
007265  000350      var j, k, Objects ;
007266  000351      Objects := *(oObjects+ObjectType) ;
007267  000352        
007268  000353      seroutCS(REPORT_OBJ) ;
007269  000354      seroutCS(ObjectType) ;
007270  000355      seroutCS(ObjectIdx) ;
007271  000356      j := 2 + ObjectIdx * 2 + Objects ;
007272  000357       if (ObjectType == tForm)
007273  000358          k := curform ;
007274  000359      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
007275  000360          k := img_GetWord(hndl, *j, IMAGE_TAG2);
007276  000361      else if (ObjectType == tStrings)
007277  000362          k := stringsCV[ObjectIdx];
007278  000363          else
007279  000364          k := img_GetWord(hndl, *j, IMAGE_INDEX);
007280  000365          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot 
007281  000366                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
007282  000367      endif
007283  000368      seroutCS(k >> 8) ; // first 8 bits
007284  000369      seroutCS(k) ;
007285  000370      seroutOcs() ;
007286  000371  endfunc
007287  000372        
007288  000373        
007289  000374  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
007290  000375      var i, j, k, Objects ;
007291  000376      ObjectType &= 0x3f ;
007292  000377      if (ObjectType == tForm)
007293  000378          ActivateForm(ObjectIdx) ;
007294  000379      else
007295  000380          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
007296  000381          i := *(Objects) ;
007297  000382          switch (ObjectType)
007298  000383              case tWinButton :
007299  000384                  j := IPControls[oWinButtons[ObjectIdx+1]] ;
007300  000385                  break ;
007301  000386              case tUserButton :
007302  000387                  j := IPControls[oUserButtons[ObjectIdx+1]] ;
007303  000388                  break ;
007304  000389              default : j := -1 ;
007305  000390          endswitch
007306  000391          if (j != -1) 
007307  000392              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
007308  000393              NewVal := NewVal << 1 ;  
007309  000394              if (OVF())      // button group index change
007310  000395                  if (*(j+IPData+IPD_P1))   
007311  000396                      k &= 1 ;    // mask off old group index for momentary
007312  000397                  else
007313  000398                      k &= 3 ;    // mask off old group index for toggle
007314  000399                  endif
007315  000400              else            // normal set
007316  000401                  if (*(j+IPData+IPD_P2) != -1) TurnOffButtons(*(j+IPData+IPD_P2)) ;
007317  000402                  k &= 0xfffc ;    // retain only group index for state set
007318  000403              endif
007319  000404              NewVal |= k ;
007320  000405          endif
007321  000406           if (ObjectType == tLeddigits)
007322  000407              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
007323  000408              ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
007324  000409          else if (ObjectType == tStrings)
007325  000410              PrintStrings(ObjectIdx, NewVal, 0);
007326  000411          else
007327  000412              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
007328  000413              img_Show(hndl, i) ; // will only display if form is current
007329  000414          endif
007330  000415      endif
007331  000416  endfunc
007332  000417        
007333  000418  func TurnOffButtons(var group)
007334  000419      var j, k, l;
007335  000420      for (j := 0; j < nInputs; j++)
007336  000421          k := j*IPDatasize ;
007337  000422          if (*(IPData+k+IPD_P2) == group)
007338  000423              l := -1 ;
007339  000424               if (*(IPData+k) == tWinButton)
007340  000425                  l := oWinButtons[*(IPData+k+IPD_OBJVidx)/2] ;
007341  000426                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
007342  000427                  img_Show(hndl, l);      // only shows on current form
007343  000428              else if (*(IPData+k) == tUserButton)
007344  000429                  l := oUserButtons[*(IPData+k+IPD_OBJVidx)/2] ;
007345  000430                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
007346  000431                  img_Show(hndl, l);      // only shows on current form
007347  000432              endif
007348  000433          endif
007349  000434      next
007350  000435  endfunc
007351  000436        
007352  000437        
007353  000438  // WARNING, this code will crash if newval exceeds maximum displayable number
007354  000439  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
007355  000440      var i, j, k, l, lb, newval ;
007356  000441      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
007357  000442      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
007358  000443      i := -1 ;
007359  000444      j := *(typeptr) ;
007360  000445      repeat
007361  000446          typeptr += 2 ;
007362  000447          i++ ;
007363  000448          until (*(typeptr) == imgidx);
007364  000449      j := setptr + i*10 ;
007365  000450        
007366  000451      imgidx++ ;
007367  000452      l := 1 ;
007368  000453      for (i := 1; i < *(j+iDigits); i++)
007369  000454          l *= 10 ;
007370  000455      next
007371  000456      lb := *(j+iLeadingBlanks) ;
007372  000457      for (i := 0; i < *(j+iDigits); i++)
007373  000458          k := newval / l ;
007374  000459          newval -= k * l ;
007375  000460          if ( lb && (i < *(j+iDigits) - *(j+iMinDigits)) )
007376  000461              if (k == 0)
007377  000462                  k := 10 ;
007378  000463              else
007379  000464                  lb := 0 ;
007380  000465              endif
007381  000466          endif
007382  000467          l /= 10 ;
007383  000468          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
007384  000469          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+ileft)+i* *(j+iWidthDigit)) ;
007385  000470          img_Show(hndl, imgidx);
007386  000471      next
007387  000472  endfunc
007388  000473        
007389  000474        
007390  000475  func ActivateForm(var newform)
007391  000476      var i, j, *p ;
007392  000477      if (curform != -1) // deactivate old form, by disabling all inputs
007393  000478          for (i := formstidx[curform]; i <= formenidx[curform]; i++)
007394  000479              if (img_GetWord(hndl, i, IMAGE_TAG))
007395  000480                  img_Disable(hndl,i) ;
007396  000481              endif
007397  000482          next
007398  000483      endif
007399  000484      curform := newform ;
007400  000485      // display newform image or clear to image color
007401  000486      if (formBGcol[curform] != BGIMAGE)
007402  000487          gfx_Set(BACKGROUND_COLOUR,formBGcol[curform]);
007403  000488          gfx_Cls() ;
007404  000489          DoGFXObjects() ;                                    // display GFX 'widgets'
007405  000490      endif
007406  000491        
007407  000492      // enable inputs
007408  000493      for (i := formstidx[curform]; i < formenidx[curform]; i++)
007409  000494          j := img_GetWord(hndl, i, IMAGE_TAG) ;
007410  000495          if (j)
007411  000496              j-- ;
007412  000497              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
007413  000498              //if (j != tKeyboard)
007414  000499              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
007415  000500                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
007416  000501              endif
007417  000502              img_Show(hndl,i) ; // show initialy, if required
007418  000503              if (j == tForm)
007419  000504                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
007420  000505              else if (j == tLeddigits)
007421  000506                  ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
007422  000507              endif
007423  000508          endif
007424  000509      next
007425  000510      for (i := 0; i < oStringss[0]; i++)
007426  000511          if (stringsCV[i] != -1)
007427  000512              WriteObject(tStrings, i, stringsCV[i]) ;
007428  000513          endif
007429  000514      next
007430  000515  endfunc
007431  000516        
007432  000517  func UpdateObjects(var newval)
007433  000518      var IPidx, otherOBJ ;
007434  000519      if ( ( img_GetWord(hndl, *(object), IMAGE_INDEX) != newval) || (TState == IPD_RELEASE) ) // only bother if values changed, or release
007435  000520        
007436  000521          img_SetWord(hndl, *(object), IMAGE_INDEX, newval);
007437  000522  // temp for **User??       if ((inputtype != tUserButton) || (!*(input+IPD_P1)))
007438  000523              img_Show(hndl, *(object));      // only shows on current form
007439  000524  //        endif
007440  000525          if ((inputtype == t4Dbutton) || (inputtype == tUserButton) || (inputtype == tWinButton)) 
007441  000526              if (*(input+IPD_P1))
007442  000527                  newval &= 1;
007443  000528              else
007444  000529                  newval &= 3;
007445  000530              endif
007446  000531              if (newval > 1) newval := 1;
007447  000532          endif
007448  000533          IPidx := *(input+TState) ;
007449  000534          while(IPidx != 0)
007450  000535              otherOBJ := IPidx + IPData;
007451  000536              if (*(otherOBJ) == OT_REPORT)
007452  000537                  seroutCS(REPORT_EVENT) ;
007453  000538                  seroutCS(inputtype) ;
007454  000539                  seroutCS(*(otherOBJ+IPD_OBJVidx)) ;
007455  000540                  seroutCS(newval >> 8) ;
007456  000541                  seroutCS(newval) ;
007457  000542                  seroutOcs() ;
007458  000543              else if (TState == *(otherOBJ+IPD_P4))
007459  000544                  if (*(otherOBJ) == OT_ACTIVATE)
007460  000545                      ActivateForm(*(otherOBJ+IPD_P2) ) ;
007461  000546                      inputtype := tForm ;
007462  000547                  else if (*(otherOBJ) == OT_SETCONST)
007463  000548                      newval := *(otherOBJ+IPD_P3) ;
007464  000549                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
007465  000550                  else if (*(otherOBJ) == OT_SETANOTHER)
007466  000551                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
007467  000552                  else if (*(otherOBJ) == OT_PREVFRAME)
007468  000553                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX))
007469  000554                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)-1) ;
007470  000555                      endif
007471  000556                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
007472  000557                  else if (*(otherOBJ) == OT_NEXTFRAME)
007473  000558                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) < *(otherOBJ+IPD_P3)) 
007474  000559                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)+1) ;
007475  000560                      endif
007476  000561                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
007477  000562                  else if (*(otherOBJ) == OT_PREVSTRING)
007478  000563                      if (stringsCV[*(otherOBJ+IPD_P2)])
007479  000564                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]-1) ;
007480  000565                      endif
007481  000566                  else if (*(otherOBJ) == OT_NEXTSTRING)
007482  000567                      if (stringsCV[*(otherOBJ+IPD_P2)] < *(otherOBJ+IPD_P3)) // fix IPD_P2 not filled in yet
007483  000568                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]+1) ;
007484  000569                      endif
007485  000570                  endif
007486  000571              endif
007487  000572              IPidx := *(otherOBJ+TState) ;
007488  000573          wend
007489  000574      endif
007490  000575  endfunc
007491  000576        
007492  000577  // End P2.inc
007493  000578  func DoGFXObjects()
007494  000579      switch (curform)
007495  000580          case 2:
007496  000581              gfx_Panel(PANEL_RAISED, 80, 44, 162, 135, WHEAT) ;
007497  000582          break ;
007498  000583      endswitch
007499  000584  endfunc
007500  000585        
007501  000586  // Start P3.inc
007502  000587  func main()
007503  000588      var comTX[50], cmdi, i, j, n, state, oldn ;
007504  000589      putstr("Mounting...\n");
007505  000590      if (!(disk:=file_Mount()))
007506  000591          while(!(disk :=file_Mount()))
007507  000592              putstr("Drive not mounted...");
007508  000593              pause(200);
007509  000594              gfx_Cls();
007510  000595              pause(200);
007511  000596          wend
007512  000597      endif
007513  000598  //    gfx_MoveTo(0, 0);
007514  000599  //    print(mem_Heap()," ") ;
007515  000600  //    gfx_TransparentColour(0x0020);
007516  000601  //    gfx_Transparency(ON);
007517  000602        
007518  000603      gfx_ScreenMode(LANDSCAPE_R) ;
007519  000604        
007520  000605      // open image control
007521  000606      hndl := file_LoadImageControl("TEST_M~2.dat", "TEST_M~2.gci", 1);
007522  000607        
007523  000608      // init 'constants'
007524  000609  // End P3.inc
007525  000610        
007526  000611      oObjects[tDipSwitch] := oDipSwitchs ;
007527  000612      oObjects[tKnob] := oKnobs ;
007528  000613      oObjects[tRockerSwitch] := oRockerSwitchs ;
007529  000614      oObjects[tRotarySwitch] := oRotarySwitchs ;
007530  000615      oObjects[tGSlider] := oGSliders ;
007531  000616      oObjects[tTrackbar] := oTrackbars ;
007532  000617      oObjects[tWinButton] := oWinButtons ;
007533  000618      oObjects[tAngularmeter] := oAngularmeters ;
007534  000619      oObjects[tCoolgauge] := oCoolgauges ;
007535  000620      oObjects[tCustomdigits] := oCustomdigitss ;
007536  000621      oObjects[tForm] := oForms ;
007537  000622      oObjects[tGauge] := oGauges ;
007538  000623      oObjects[tImage] := oImages ;
007539  000624      oObjects[tKeyboard] := oKeyboards ;
007540  000625      oObjects[tLed] := oLeds ;
007541  000626      oObjects[tLeddigits] := oLeddigitss ;
007542  000627      oObjects[tMeter] := oMeters ;
007543  000628      oObjects[tStrings] := oStringss ;
007544  000629      oObjects[tThermometer] := oThermometers ;
007545  000630      oObjects[tUserled] := oUserleds ;
007546  000631      oObjects[tVideo] := oVideos ;
007547  000632      oObjects[tStaticText] := oStaticTexts ;
007548  000633      oObjects[tSounds] := oSoundss ;
007549  000634      oObjects[tTimer] := oTimers ;
007550  000635      oObjects[tSpectrum] := oSpectrums ;
007551  000636      oObjects[tTank] := oTanks ;
007552  000637      oObjects[tUserImages] := oUserImagess ;
007553  000638      oObjects[tPinOutput] := oPinOutputs ;
007554  000639      oObjects[tPinInput] := oPinInputs ;
007555  000640      oObjects[t4Dbutton] := o4Dbuttons ;
007556  000641      oObjects[tAniButton] := oAniButtons ;
007557  000642      oObjects[tColorPicker] := oColorPickers ;
007558  000643      oObjects[tUserButton] := oUserButtons ;
007559  000644      hFonts[0] := FONT3 ;
007560  000645      hFonts[1] := FONT3 ;
007561  000646      hFonts[2] := FONT3 ;
007562  000647      hFonts[3] := FONT3 ;
007563  000648      hFonts[4] := FONT3 ;
007564  000649      hFonts[5] := FONT3 ;
007565  000650      hFonts[6] := FONT3 ;
007566  000651      hFonts[7] := FONT3 ;
007567  000652      hFonts[8] := FONT3 ;
007568  000653      hFonts[9] := FONT3 ;
007569  000654      hFonts[10] := FONT3 ;
007570  000655      hFonts[11] := FONT3 ;
007571  000656      hFonts[12] := FONT3 ;
007572  000657      hFonts[13] := FONT3 ;
007573  000658      hFonts[14] := FONT3 ;
007574  000659      hFonts[15] := FONT3 ;
007575  000660      hFonts[16] := FONT3 ;
007576  000661      hFonts[17] := FONT3 ;
007577  000662      hFonts[18] := FONT3 ;
007578  000663      hFonts[19] := FONT3 ;
007579  000664  // Start P4.inc
007580  000665      hstrings := file_Open("TEST_M~2.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
007581  000666      // init comms
007582  000667      com_Init(comRX,CMDLenMAX,0);
007583  000668      com_SetBaud(COM0,20000);
007584  000669      com_TXbuffer(comTX, 100, 0);
007585  000670      snd_BufSize(2) ;
007586  000671      // tag 'real' objects
007587  000672      for (i := 0; i <= MaxTotObjects; i++)
007588  000673          if (   (i != tSounds)
007589  000674              && (i != tTimer)
007590  000675              && (i != tPinOutput)
007591  000676              && (i != tPinInput) )
007592  000677              x := oObjects[i] ;
007593  000678              y := *(x) ;
007594  000679              for (n := 1; n <= y; n++)
007595  000680                  oldn := *(x+n*2) ;
007596  000681                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
007597  000682                  if (oldn != -1)
007598  000683                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
007599  000684                      img_Disable(hndl, oldn) ;
007600  000685                  endif
007601  000686              next
007602  000687          endif
007603  000688      next
007604  000689        
007605  000690      // display initial form
007606  000691      curform := -1 ;
007607  000692      ActivateForm(0) ; // need to change this according to first actual form
007608  000693  // End P4.inc
007609  000694  // Start P5.inc
007610  000695      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
007611  000696      oldn := -1 ;
007612  000697      repeat
007613  000698          // check comms for command, how to NAK invalid command
007614  000699          if (com_Count() != 0)
007615  000700              i := serin() ;
007616  000701              cs ^= i ;               // update checksum
007617  000702              if (   (cmdi > 2)
007618  000703                  && (cmd[0] == WRITE_STRU) )
007619  000704                  j := (cmdi-1) >> 1 + 2 ;
007620  000705                  if (j == CMDLenMAX)    // max length exceeded
007621  000706                      serout(NAK) ;
007622  000707                      cs := 0 ;
007623  000708                      cmdi := -1 ;
007624  000709                  else if (cmdi & 1)
007625  000710                      cmd[j] := i ;
007626  000711                      if (cmd[2] == 0)    // if string complete
007627  000712                          if (cs)
007628  000713                              serout(NAK) ;
007629  000714                              cs := 0 ;
007630  000715                          else
007631  000716                              cmd[j] := 0 ;                     // terminate it
007632  000717                              PrintStrings(cmd[1], &cmd[3], 1) ;
007633  000718                              serout(ACK) ;
007634  000719                          endif
007635  000720                          cmdi := -1 ;
007636  000721                      endif
007637  000722                  else
007638  000723                      cmd[j] := cmd[j] << 8 + i ;
007639  000724                      cmd[2]-- ;          // dec length
007640  000725                  endif
007641  000726                  cmdi++ ;
007642  000727              else // not unicode string
007643  000728                  cmd[cmdi++] := i ;
007644  000729                   if (cmd[0] == WRITE_STR)        // ansi string
007645  000730                      if (cmdi == CMDLenMAX)      // max length exceeded
007646  000731                          serout(NAK) ;
007647  000732                          cs := 0 ;
007648  000733                          cmdi := 0 ;
007649  000734                      else if (cmdi > 2)
007650  000735                          if (cmd[2] == -1)
007651  000736                              if (cs)
007652  000737                                  serout(NAK) ;
007653  000738                                  cs := 0 ;
007654  000739                              else
007655  000740                                  cmd[cmdi-1] := 0 ;                     // terminate it
007656  000741                                  PrintStrings(cmd[1], &cmd[3], 1) ;
007657  000742                                  serout(ACK) ;
007658  000743                              endif
007659  000744                              cmdi := 0 ;
007660  000745                          else
007661  000746                              cmd[2]-- ;          // dec length
007662  000747                          endif
007663  000748                      endif
007664  000749                  else if (   (cmd[0] == READ_OBJ)
007665  000750                           && (cmdi == 4)         )
007666  000751                      if (cs)
007667  000752                          serout(NAK) ;
007668  000753                          cs := 0 ;
007669  000754                      else
007670  000755                          ReadObject(cmd[1], cmd[2]) ;
007671  000756                      endif
007672  000757                      cmdi := 0 ;
007673  000758                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
007674  000759                           && (cmdi == 6)          )
007675  000760                      if (cs)
007676  000761                          serout(NAK) ;
007677  000762                          cs := 0 ;
007678  000763                      else
007679  000764                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
007680  000765                          serout(ACK) ;
007681  000766                      endif
007682  000767                      cmdi := 0 ;
007683  000768                  else if (   (cmd[0] == WRITE_CONTRAST)
007684  000769                           && (cmdi == 3)         )
007685  000770                      if (cs)
007686  000771                          serout(NAK) ;
007687  000772                          cs := 0 ;
007688  000773                      else
007689  000774                          gfx_Contrast(cmd[1]) ;
007690  000775                          serout(ACK) ;
007691  000776                      endif
007692  000777                      cmdi := 0 ;
007693  000778                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
007694  000779                      serout(NAK) ;
007695  000780                      cs := 0 ;
007696  000781                      cmdi := 0 ;
007697  000782                  endif
007698  000783              endif   // not unicode string
007699  000784          endif   // a character is available
007700  000785        
007701  000786        
007702  000787      // touch code processing
007703  000788        
007704  000789          state := touch_Get(TOUCH_STATUS);               // get touchscreen status
007705  000790          n := img_Touched(hndl,-1) ;
007706  000791          if ((state == TOUCH_PRESSED) || (state == TOUCH_RELEASED) || (state == TOUCH_MOVING))
007707  000792              if ((state != TOUCH_RELEASED) && (n != oldn) && (oldn != -1)) 
007708  000793                  state := TOUCH_RELEASED ;       // simulate release if we move off object
007709  000794              endif
007710  000795              if (state != TOUCH_RELEASED)        // if not released
007711  000796                  if (oldn != -1) 
007712  000797                      n := oldn ;
007713  000798                  else 
007714  000799                      oldn := n ;
007715  000800                      state := TOUCH_PRESSED ;
007716  000801                  endif
007717  000802                  x  := touch_Get(TOUCH_GETX);
007718  000803                  y  := touch_Get(TOUCH_GETY);
007719  000804                  TState := IPD_DOWN ;
007720  000805              else
007721  000806                  n := oldn ;                     // simulate release of what we touched
007722  000807                  oldn := -1 ;                    // prevent double release
007723  000808                  TState := IPD_RELEASE ;
007724  000809              endif
007725  000810              if (n != -1)
007726  000811                          input := IPControls[n] + IPData;
007727  000812                          inputtype := *(input) ;
007728  000813                          i := inputtype ;
007729  000814                          if (inputtype >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
007730  000815                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
007731  000816              endif
007732  000817          endif
007733  000818   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
007734  000819        
007735  000820          sys_EventsResume() ;
007736  000821      forever
007737  000822        
007738  000823  cDipswitch:
007739  000824        
007740  000825  cKnob:
007741  000826        
007742  000827  cRockerswitch:
007743  000828        
007744  000829  cRotaryswitch:
007745  000830        
007746  000831  cSlider:
007747  000832  cTrackbar:
007748  000833        
007749  000834  c4DButton:
007750  000835  cUserButton:
007751  000836      object := oUserButtons + *(input+IPD_OBJVidx) ;
007752  000837      goto gbutton ;
007753  000838  cWinbutton:
007754  000839      object := oWinButtons + *(input+IPD_OBJVidx) ;
007755  000840  gbutton:
007756  000841      i := img_GetWord(hndl, *(object), IMAGE_INDEX) ; // current state
007757  000842      if (*(input+IPD_P1))                                 // momentary, reports 0, but should report 1
007758  000843          if (state == TOUCH_RELEASED)
007759  000844              i &= 0xfffe ;
007760  000845              TState == IPD_DOWN ;
007761  000846          else
007762  000847              i |= 1 ;
007763  000848              TState == IPD_RELEASE ;
007764  000849          endif
007765  000850      else if (*(input+IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
007766  000851          if (state == TOUCH_RELEASED)                     // only truly change on release
007767  000852              if ((i & 3) == 3)
007768  000853                  i &= 0xfffc ;
007769  000854              else
007770  000855                  i++ ;
007771  000856              endif
007772  000857          else
007773  000858              i |= 1 ;                                      // make down regardless of current state
007774  000859          endif
007775  000860      else                        // group action, up all other buttons on touch press, reports 0 for button down
007776  000861          if (state == TOUCH_PRESSED)                     // only truly change on release
007777  000862              TurnOffButtons(*(input+IPD_P2)) ;
007778  000863          endif
007779  000864          i := (i & 0xfffc) | 2 ;
007780  000865      endif
007781  000866        
007782  000867      UpdateObjects(i) ;
007783  000868  endsub ;
007784  000869        
007785  000870  cAniButton:
007786  000871        
007787  000872  cColorPicker:
007788  000873        
007789  000874  endfunc
007790  000875  // End P5.inc
Notice: local var 'p' in func 'ActivateForm' is never used (line 476 file:Test_millorat_Intro.4DGenieS)


Symbol Table:
name                 decimal    hex
_1F                                  -40  0xffffffd8 (PmmC func) args[0] r=0  (not used)
__MAXMEM                           14400  0x00003840 (const dword)  (usage 1)
__MAXPROG                          14400  0x00003840 (const dword)  (usage 1)
__PLATFORM                             1  0x00000001 (const dword)  (not used)
ABS                                  -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                        6714  0x00001a3a (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ANITIMERS                              0  0x00000000 (const dword)  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                           7  0x00000007 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BACKLITE                               6  0x00000006 (const dword)  (not used)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BGIMAGE                               32  0x00000020 (const dword)  (usage 6)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 54)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 6)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
BUS_0                                  8  0x00000008 (const dword)  (not used)
BUS_1                                  9  0x00000009 (const dword)  (not used)
BUS_2                                 10  0x0000000a (const dword)  (not used)
BUS_3                                 11  0x0000000b (const dword)  (not used)
BUS_4                                 12  0x0000000c (const dword)  (not used)
BUS_5                                 13  0x0000000d (const dword)  (not used)
BUS_6                                 14  0x0000000e (const dword)  (not used)
BUS_7                                 15  0x0000000f (const dword)  (not used)
bus_In                               -45  0xffffffd3 (PmmC func) args[0] r=1  (not used)
bus_Out                              -46  0xffffffd2 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                             -49  0xffffffcf (PmmC func) args[0] r=1  (not used)
bus_Set                              -47  0xffffffd1 (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             5  0x00000005 (const dword)  (not used)
bus_Write                            -48  0xffffffd0 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                            -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS    2710  0x00000a96 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                          -159  0xffffff61 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                           -158  0xffffff62 (PmmC func) args[1] r=1  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
CKMODE_0                               0  0x00000000 (const dword)  (not used)
CKMODE_1                               1  0x00000001 (const dword)  (not used)
CKMODE_2                               2  0x00000002 (const dword)  (not used)
CKMODE_3                               3  0x00000003 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  248  0x000000f8 (mem) word[80] (global)  (usage 78)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COLOUR_MODE                           27  0x0000001b (const dword)  (not used)
COLUMN_ADDRESS_END1                    5  0x00000005 (const dword)  (not used)
COLUMN_ADDRESS_END2                    4  0x00000004 (const dword)  (not used)
COLUMN_ADDRESS_START1                  3  0x00000003 (const dword)  (not used)
COLUMN_ADDRESS_START2                  2  0x00000002 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63496  0x0000f808 (const dword)  (not used)
com1_Count                          -132  0xffffff7c (PmmC func) args[0] r=1  (not used)
com1_Error                          -134  0xffffff7a (PmmC func) args[0] r=1  (not used)
com1_Full                           -133  0xffffff7b (PmmC func) args[0] r=1  (not used)
com1_Init                           -130  0xffffff7e (PmmC func) args[3] r=0  (not used)
com1_Reset                          -131  0xffffff7d (PmmC func) args[0] r=0  (not used)
com1_Sync                           -135  0xffffff79 (PmmC func) args[0] r=1  (not used)
com1_TXbuffer                       -136  0xffffff78 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -139  0xffffff75 (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -137  0xffffff77 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -138  0xffffff76 (PmmC func) args[1] r=1  (not used)
com_Count                           -122  0xffffff86 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -124  0xffffff84 (PmmC func) args[0] r=1  (not used)
com_Full                            -123  0xffffff85 (PmmC func) args[0] r=1  (not used)
com_Init                            -120  0xffffff88 (PmmC func) args[3] r=0  (usage 3)
com_Reset                           -121  0xffffff87 (PmmC func) args[0] r=0  (not used)
com_SetBaud                         -142  0xffffff72 (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -125  0xffffff83 (PmmC func) args[0] r=1  (not used)
com_TXbuffer                        -126  0xffffff82 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -129  0xffffff7f (PmmC func) args[1] r=1  (not used)
com_TXcount                         -127  0xffffff81 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -128  0xffffff80 (PmmC func) args[1] r=1  (not used)
comRX                                168  0x000000a8 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -18  0xffffffee (PmmC func) args[1] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cs                                   408  0x00000198 (mem) word (global)  (usage 42)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
curform                              154  0x0000009a (mem) word (global)  (usage 45)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                  -285  0xfffffee3 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
CYCLE_CONTROL_1                       58  0x0000003a (const dword)  (not used)
CYCLE_CONTROL_2                       59  0x0000003b (const dword)  (not used)
CYCLE_CONTROL_3                       60  0x0000003c (const dword)  (not used)
CYCLE_CONTROL_4                       61  0x0000003d (const dword)  (not used)
CYCLE_CONTROL_5                       62  0x0000003e (const dword)  (not used)
CYCLE_CONTROL_6                       64  0x00000040 (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 6)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
disk                                   0  0x00000000 (mem) word (global)  (usage 6)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_Disconnect                     -293  0xfffffedb (PmmC func) args[0] r=0  (not used)
disp_Init                           -143  0xffffff71 (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -149  0xffffff6b (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -145  0xffffff6f (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -144  0xffffff70 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -284  0xfffffee4 (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -147  0xffffff6d (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -148  0xffffff6c (PmmC func) args[1] r=0  (not used)
DISPLAY_CONTROL_1                     38  0x00000026 (const dword)  (not used)
DISPLAY_CONTROL_10                    54  0x00000036 (const dword)  (not used)
DISPLAY_CONTROL_14                    65  0x00000041 (const dword)  (not used)
DISPLAY_CONTROL_2                     39  0x00000027 (const dword)  (not used)
DISPLAY_CONTROL_3                     40  0x00000028 (const dword)  (not used)
DISPLAY_CONTROL_4                     41  0x00000029 (const dword)  (not used)
DISPLAY_CONTROL_5                     42  0x0000002a (const dword)  (not used)
DISPLAY_CONTROL_6                     44  0x0000002c (const dword)  (not used)
DISPLAY_CONTROL_7                     45  0x0000002d (const dword)  (not used)
DISPLAY_CONTROL_8                    144  0x00000090 (const dword)  (not used)
DISPLAY_CONTROL_9                     53  0x00000035 (const dword)  (not used)
DISPLAY_MODE_CONTROL                   1  0x00000001 (const dword)  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        6024  0x00001788 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                              -282  0xfffffee6 (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                           -283  0xfffffee5 (PmmC func) args[0] r=1  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -232  0xffffff18 (PmmC func) args[1] r=1  (not used)
file_Count                          -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -247  0xffffff09 (PmmC func) args[1] r=1  (not used)
file_Error                          -225  0xffffff1f (PmmC func) args[0] r=1  (not used)
file_Exec                           -251  0xffffff05 (PmmC func) args[2] r=1  (not used)
file_Exists                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
file_FindNext                       -229  0xffffff1b (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -242  0xffffff0e (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -246  0xffffff0a (PmmC func) args[3] r=1  (not used)
file_GetW                           -244  0xffffff0c (PmmC func) args[1] r=1  (usage 3)
file_Image                          -239  0xffffff11 (PmmC func) args[3] r=1  (not used)
file_Index                          -235  0xffffff15 (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -249  0xffffff07 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -252  0xffffff04 (PmmC func) args[3] r=1  (usage 3)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -253  0xffffff03 (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -231  0xffffff19 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -255  0xffffff01 (PmmC func) args[1] r=1  (not used)
file_PutC                           -241  0xffffff0f (PmmC func) args[2] r=1  (not used)
file_PutS                           -245  0xffffff0b (PmmC func) args[2] r=1  (not used)
file_PutW                           -243  0xffffff0d (PmmC func) args[2] r=1  (not used)
file_Read                           -233  0xffffff17 (PmmC func) args[3] r=1  (not used)
file_Rewind                         -248  0xffffff08 (PmmC func) args[1] r=1  (not used)
file_Run                            -250  0xffffff06 (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -240  0xffffff10 (PmmC func) args[5] r=1  (not used)
file_Seek                           -234  0xffffff16 (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_Size                           -238  0xffffff12 (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -236  0xffffff14 (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -254  0xffffff02 (PmmC func) args[0] r=0  (not used)
file_Write                          -237  0xffffff13 (PmmC func) args[3] r=1  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_BlockErase                    -157  0xffffff63 (PmmC func) args[1] r=1  (not used)
flash_BulkErase                     -156  0xffffff64 (PmmC func) args[0] r=0  (not used)
flash_ID                            -155  0xffffff65 (PmmC func) args[0] r=1  (not used)
flash_SIG                           -154  0xffffff66 (PmmC func) args[0] r=1  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
FONT1                                  0  0x00000000 (const dword)  (not used)
FONT2                                  1  0x00000001 (const dword)  (not used)
FONT3                                  2  0x00000002 (const dword)  (usage 60)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
formBGcol                           3849  0x00000f09formBGcol                           3849  0x00000f09 (mem) word[19] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 8)
formBGcol                         UNRESOLVED  (usage 4)
formenidx                             45  0x0000002dformenidx                             45  0x0000002d (mem) word[19] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 6)
formstidx                              7  0x00000007formstidx                              7  0x00000007 (mem) word[19] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 7)
formstidx                         UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
GAMMA_CONTROL_1                       70  0x00000046 (const dword)  (not used)
GAMMA_CONTROL_10                      79  0x0000004f (const dword)  (not used)
GAMMA_CONTROL_11                      80  0x00000050 (const dword)  (not used)
GAMMA_CONTROL_12                      81  0x00000051 (const dword)  (not used)
GAMMA_CONTROL_2                       71  0x00000047 (const dword)  (not used)
GAMMA_CONTROL_3                       72  0x00000048 (const dword)  (not used)
GAMMA_CONTROL_4                       73  0x00000049 (const dword)  (not used)
GAMMA_CONTROL_5                       74  0x0000004a (const dword)  (not used)
GAMMA_CONTROL_6                       75  0x0000004b (const dword)  (not used)
GAMMA_CONTROL_7                       76  0x0000004c (const dword)  (not used)
GAMMA_CONTROL_8                       77  0x0000004d (const dword)  (not used)
GAMMA_CONTROL_9                       78  0x0000004e (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                         -85  0xffffffab (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -104  0xffffff98 (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -103  0xffffff99 (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                         -92  0xffffffa4 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                            -74  0xffffffb6 (PmmC func) args[2] r=0  (not used)
gfx_Bullet                           -71  0xffffffb9 (PmmC func) args[1] r=0  (not used)
gfx_Button                           -80  0xffffffb0 (PmmC func) args[9] r=0  (not used)
GFX_BUTTON_BACKGROUND                 64  0x00000040 (const dword)  (not used)
GFX_BUTTON_FOREGROUND                 63  0x0000003f (const dword)  (not used)
GFX_BUTTON_MODE                       65  0x00000041 (const dword)  (not used)
gfx_ChangeColour                     -76  0xffffffb4 (PmmC func) args[2] r=0  (not used)
gfx_Circle                           -61  0xffffffc3 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                     -62  0xffffffc2 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                         -94  0xffffffa2 (PmmC func) args[1] r=0  (usage 6)
gfx_ClipWindow                       -75  0xffffffb5 (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                              -51  0xffffffcd (PmmC func) args[0] r=0  (usage 6)
gfx_ColourMode                      -102  0xffffff9a (PmmC func) args[1] r=1  (not used)
gfx_Contrast                        -100  0xffffff9c (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                              -70  0xffffffba (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                          -78  0xffffffb2 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                    -79  0xffffffb1 (PmmC func) args[5] r=0  (not used)
gfx_FrameDelay                       -97  0xffffff9f (PmmC func) args[1] r=1  (not used)
gfx_Get                              -90  0xffffffa6 (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                         -64  0xffffffc0 (PmmC func) args[2] r=1  (not used)
GFX_HILIGHT_BACKGROUND                61  0x0000003d (const dword)  (not used)
GFX_HILIGHT_FOREGROUND                62  0x0000003e (const dword)  (not used)
GFX_HILITE_LINE                       58  0x0000003a (const dword)  (not used)
gfx_Hline                            -57  0xffffffc7 (PmmC func) args[4] r=1  (not used)
gfx_IncX                             -72  0xffffffb8 (PmmC func) args[0] r=1  (not used)
gfx_IncY                             -73  0xffffffb7 (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_SELECTION                    60  0x0000003c (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
GFX_LEFT_GUTTER_WIDTH                 68  0x00000044 (const dword)  (not used)
gfx_Line                             -56  0xffffffc8 (PmmC func) args[5] r=0  (not used)
GFX_LINE_COUNT                        59  0x0000003b (const dword)  (not used)
gfx_LinePattern                     -101  0xffffff9b (PmmC func) args[1] r=1  (not used)
gfx_LineRel                          -55  0xffffffc9 (PmmC func) args[2] r=0  (not used)
gfx_LineTo                           -54  0xffffffca (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                          -53  0xffffffcb (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                           -52  0xffffffcc (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                     -93  0xffffffa3 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                            -67  0xffffffbd (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                        -66  0xffffffbe (PmmC func) args[2] r=0  (not used)
gfx_Origin                           -89  0xffffffa7 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                    -99  0xffffff9d (PmmC func) args[1] r=1  (not used)
gfx_Panel                            -81  0xffffffaf (PmmC func) args[6] r=0  (usage 3)
gfx_PenSize                          -91  0xffffffa5 (PmmC func) args[1] r=1  (not used)
GFX_PIXEL_SHIFT                       70  0x00000046 (const dword)  (not used)
gfx_Polygon                          -69  0xffffffbb (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                    -88  0xffffffa8 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                         -68  0xffffffbc (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                         -63  0xffffffc1 (PmmC func) args[3] r=0  (not used)
GFX_RECT_X1                           71  0x00000047 (const dword)  (not used)
GFX_RECT_X2                           73  0x00000049 (const dword)  (not used)
GFX_RECT_Y1                           72  0x00000048 (const dword)  (not used)
GFX_RECT_Y2                           74  0x0000004a (const dword)  (not used)
gfx_Rectangle                        -59  0xffffffc5 (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                  -60  0xffffffc4 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                         -84  0xffffffac (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
GFX_RIGHT_GUTTER_WIDTH                69  0x00000045 (const dword)  (not used)
gfx_ScreenCopyPaste                  -83  0xffffffad (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                       -98  0xffffff9e (PmmC func) args[1] r=1  (usage 3)
gfx_Selection                        -86  0xffffffaa (PmmC func) args[3] r=0  (not used)
gfx_Set                              -50  0xffffffce (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                    -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
gfx_Slider                           -82  0xffffffae (PmmC func) args[8] r=1  (not used)
GFX_STATUSBAR_HEIGHT                  67  0x00000043 (const dword)  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOOLBAR_HEIGHT                    66  0x00000042 (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                     -96  0xffffffa0 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour                -95  0xffffffa1 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                         -65  0xffffffbf (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                   -87  0xffffffa9 (PmmC func) args[7] r=0  (not used)
gfx_Vline                            -58  0xffffffc6 (PmmC func) args[4] r=1  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -105  0xffffff97 (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -106  0xffffff96 (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 4  0x00000004 (mem) word[20] (global)  (usage 63)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                              -214  0xffffff2a (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   2  0x00000002 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                              84  0x00000054 (mem) word (global)  (usage 12)
I2C                                63520  0x0000f820 (const dword)  (not used)
I2C_Ack                             -169  0xffffff57 (PmmC func) args[0] r=0  (not used)
I2C_AckPoll                         -172  0xffffff54 (PmmC func) args[1] r=1  (not used)
I2C_AckStatus                       -171  0xffffff55 (PmmC func) args[0] r=0  (not used)
I2C_Close                           -163  0xffffff5d (PmmC func) args[0] r=0  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_Getn                            -175  0xffffff51 (PmmC func) args[2] r=1  (not used)
I2C_Gets                            -174  0xffffff52 (PmmC func) args[2] r=1  (not used)
I2C_Idle                            -173  0xffffff53 (PmmC func) args[0] r=0  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_Nack                            -170  0xffffff56 (PmmC func) args[0] r=0  (not used)
I2C_Open                            -162  0xffffff5e (PmmC func) args[1] r=0  (not used)
I2C_Putn                            -177  0xffffff4f (PmmC func) args[2] r=1  (not used)
I2C_Puts                            -176  0xffffff50 (PmmC func) args[1] r=1  (not used)
I2C_Read                            -167  0xffffff59 (PmmC func) args[0] r=1  (not used)
I2C_Restart                         -166  0xffffff5a (PmmC func) args[0] r=1  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I2C_Start                           -164  0xffffff5c (PmmC func) args[0] r=1  (not used)
I2C_Stop                            -165  0xffffff5b (PmmC func) args[0] r=1  (not used)
I2C_Write                           -168  0xffffff58 (PmmC func) args[1] r=1  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iDigits                                2  0x00000002 (const dword)  (usage 9)
iiLeddigits0                          34  0x00000022 (const ??? 0)  (not used)
iiLeddigits1                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits10                         65  0x00000041 (const ??? 0)  (not used)
iiLeddigits11                         71  0x00000047 (const ??? 0)  (not used)
iiLeddigits12                         73  0x00000049 (const ??? 0)  (not used)
iiLeddigits13                         83  0x00000053 (const ??? 0)  (not used)
iiLeddigits14                         86  0x00000056 (const ??? 0)  (not used)
iiLeddigits15                         89  0x00000059 (const ??? 0)  (not used)
iiLeddigits16                         92  0x0000005c (const ??? 0)  (not used)
iiLeddigits17                         94  0x0000005e (const ??? 0)  (not used)
iiLeddigits18                        104  0x00000068 (const ??? 0)  (not used)
iiLeddigits19                        116  0x00000074 (const ??? 0)  (not used)
iiLeddigits2                          38  0x00000026 (const ??? 0)  (not used)
iiLeddigits20                        125  0x0000007d (const ??? 0)  (not used)
iiLeddigits21                        131  0x00000083 (const ??? 0)  (not used)
iiLeddigits3                          55  0x00000037 (const ??? 0)  (not used)
iiLeddigits4                          46  0x0000002e (const ??? 0)  (not used)
iiLeddigits5                          48  0x00000030 (const ??? 0)  (not used)
iiLeddigits6                          57  0x00000039 (const ??? 0)  (not used)
iiLeddigits7                          59  0x0000003b (const ??? 0)  (not used)
iiLeddigits8                          61  0x0000003d (const ??? 0)  (not used)
iiLeddigits9                          63  0x0000003f (const ??? 0)  (not used)
iImage0                                0  0x00000000 (const ??? 0)  (usage 3)
iImage1                               19  0x00000013 (const ??? 0)  (usage 3)
iLeadingBlanks                         8  0x00000008 (const dword)  (usage 3)
iLeddigits0                           33  0x00000021 (const ??? 0)  (usage 3)
iLeddigits1                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits10                          64  0x00000040 (const ??? 0)  (usage 3)
iLeddigits11                          70  0x00000046 (const ??? 0)  (usage 3)
iLeddigits12                          72  0x00000048 (const ??? 0)  (usage 3)
iLeddigits13                          82  0x00000052 (const ??? 0)  (usage 3)
iLeddigits14                          85  0x00000055 (const ??? 0)  (usage 3)
iLeddigits15                          88  0x00000058 (const ??? 0)  (usage 3)
iLeddigits16                          91  0x0000005b (const ??? 0)  (usage 3)
iLeddigits17                          93  0x0000005d (const ??? 0)  (usage 3)
iLeddigits18                         103  0x00000067 (const ??? 0)  (usage 3)
iLeddigits19                         115  0x00000073 (const ??? 0)  (usage 3)
iLeddigits2                           37  0x00000025 (const ??? 0)  (usage 3)
iLeddigits20                         124  0x0000007c (const ??? 0)  (usage 3)
iLeddigits21                         130  0x00000082 (const ??? 0)  (usage 3)
iLeddigits3                           54  0x00000036 (const ??? 0)  (usage 3)
iLeddigits4                           45  0x0000002d (const ??? 0)  (usage 3)
iLeddigits5                           47  0x0000002f (const ??? 0)  (usage 3)
iLeddigits6                           56  0x00000038 (const ??? 0)  (usage 3)
iLeddigits7                           58  0x0000003a (const ??? 0)  (usage 3)
iLeddigits8                           60  0x0000003c (const ??? 0)  (usage 3)
iLeddigits9                           62  0x0000003e (const ??? 0)  (usage 3)
ileft                                  0  0x00000000 (const dword)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -187  0xffffff45 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -181  0xffffff4b (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -180  0xffffff4c (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -179  0xffffff4d (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -184  0xffffff48 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -182  0xffffff4a (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SetAttributes                   -186  0xffffff46 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -178  0xffffff4e (PmmC func) args[4] r=1  (not used)
img_SetWord                         -183  0xffffff49 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -185  0xffffff47 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -188  0xffffff44 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
iMinDigits                             4  0x00000004 (const dword)  (usage 3)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
input                                164  0x000000a4 (mem) word (global)  (usage 27)
INPUT                                  1  0x00000001 (const dword)  (not used)
inputtype                            160  0x000000a0 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IO1_PIN                                1  0x00000001 (const dword)  (not used)
IO2_PIN                                2  0x00000002 (const dword)  (not used)
IO3_PIN                                3  0x00000003 (const dword)  (not used)
IO4_PIN                                4  0x00000004 (const dword)  (not used)
IO5_PIN                                5  0x00000005 (const dword)  (not used)
IPControls                            83  0x00000053IPControls                            83  0x00000053 (mem) word[130] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 9)
IPD_DOWN                              16  0x00000010 (const dword)  (usage 6)
IPD_OBJVidx                           20  0x00000014 (const dword)  (usage 15)
IPD_P1                                 2  0x00000002 (const dword)  (usage 15)
IPD_P2                                 4  0x00000004 (const dword)  (usage 48)
IPD_P3                                 6  0x00000006 (const dword)  (usage 9)
IPD_P4                                 8  0x00000008 (const dword)  (usage 3)
IPD_P5                                10  0x0000000a (const dword)  (usage 6)
IPD_P6                                12  0x0000000c (const dword)  (usage 18)
IPD_P7                                14  0x0000000e (const dword)  (not used)
IPD_RELEASE                           18  0x00000012 (const dword)  (usage 9)
IPData                               343  0x00000157IPData                               343  0x00000157 (mem) word[1309] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 30)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                             -207  0xffffff31 (PmmC func) args[1] r=1  (not used)
isalpha                             -206  0xffffff32 (PmmC func) args[1] r=1  (not used)
isdigit                             -202  0xffffff36 (PmmC func) args[1] r=1  (not used)
islower                             -205  0xffffff33 (PmmC func) args[1] r=1  (not used)
isprint                             -208  0xffffff30 (PmmC func) args[1] r=1  (not used)
isspace                             -209  0xffffff2f (PmmC func) args[1] r=1  (not used)
iStatictext0                           2  0x00000002 (const ??? 0)  (usage 3)
iStatictext1                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext10                         66  0x00000042 (const ??? 0)  (usage 3)
iStatictext11                         67  0x00000043 (const ??? 0)  (usage 3)
iStatictext12                         68  0x00000044 (const ??? 0)  (usage 3)
iStatictext13                         69  0x00000045 (const ??? 0)  (usage 3)
iStatictext14                         74  0x0000004a (const ??? 0)  (usage 3)
iStatictext15                         81  0x00000051 (const ??? 0)  (usage 3)
iStatictext16                         84  0x00000054 (const ??? 0)  (usage 3)
iStatictext17                         87  0x00000057 (const ??? 0)  (usage 3)
iStatictext18                         90  0x0000005a (const ??? 0)  (usage 3)
iStatictext19                         95  0x0000005f (const ??? 0)  (usage 3)
iStatictext2                          40  0x00000028 (const ??? 0)  (usage 3)
iStatictext20                        108  0x0000006c (const ??? 0)  (usage 3)
iStatictext21                        117  0x00000075 (const ??? 0)  (usage 3)
iStatictext22                        126  0x0000007e (const ??? 0)  (usage 3)
iStatictext3                           3  0x00000003 (const ??? 0)  (usage 3)
iStatictext4                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext5                          51  0x00000033 (const ??? 0)  (usage 3)
iStatictext6                          44  0x0000002c (const ??? 0)  (usage 3)
iStatictext7                          49  0x00000031 (const ??? 0)  (usage 3)
iStatictext8                          52  0x00000034 (const ??? 0)  (usage 3)
iStatictext9                          53  0x00000035 (const ??? 0)  (usage 3)
iStrings0                           2961  0x00000b91iStrings0                           2961  0x00000b91 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings1                           2987  0x00000babiStrings1                           2987  0x00000bab (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings10                          3221  0x00000c95iStrings10                          3221  0x00000c95 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings11                          3247  0x00000cafiStrings11                          3247  0x00000caf (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings12                          3273  0x00000cc9iStrings12                          3273  0x00000cc9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings13                          3299  0x00000ce3iStrings13                          3299  0x00000ce3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings14                          3325  0x00000cfdiStrings14                          3325  0x00000cfd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings15                          3351  0x00000d17iStrings15                          3351  0x00000d17 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings16                          3377  0x00000d31iStrings16                          3377  0x00000d31 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings17                          3403  0x00000d4biStrings17                          3403  0x00000d4b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings18                          3429  0x00000d65iStrings18                          3429  0x00000d65 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings19                          3455  0x00000d7fiStrings19                          3455  0x00000d7f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings2                           3013  0x00000bc5iStrings2                           3013  0x00000bc5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings3                           3039  0x00000bdfiStrings3                           3039  0x00000bdf (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings4                           3065  0x00000bf9iStrings4                           3065  0x00000bf9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings5                           3091  0x00000c13iStrings5                           3091  0x00000c13 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings6                           3117  0x00000c2diStrings6                           3117  0x00000c2d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings7                           3143  0x00000c47iStrings7                           3143  0x00000c47 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings8                           3169  0x00000c61iStrings8                           3169  0x00000c61 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings9                           3195  0x00000c7biStrings9                           3195  0x00000c7b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
isupper                             -204  0xffffff34 (PmmC func) args[1] r=1  (not used)
iswhite                             -210  0xffffff2e (PmmC func) args[1] r=1  (not used)
isxdigit                            -203  0xffffff35 (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -198  0xffffff3a (PmmC func) args[1] r=0  (not used)
iThermometer0                          4  0x00000004 (const ??? 0)  (usage 3)
iThermometer1                          1  0x00000001 (const ??? 0)  (usage 3)
iUserbutton0                          22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton1                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton10                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton11                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton12                         20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton13                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton14                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton15                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton16                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton17                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton18                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton19                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton2                          23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton20                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton21                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton22                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton23                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton24                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton25                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton26                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton27                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton28                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton29                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton3                          32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton30                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton31                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton32                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton33                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton34                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton35                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton36                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton37                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton38                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton39                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton4                           7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton40                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton41                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton42                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton43                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton44                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton45                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton46                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton47                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton48                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton49                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton5                           8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton6                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton7                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton8                          15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton9                          16  0x00000010 (const ??? 0)  (usage 3)
iUserimages0                          10  0x0000000a (const ??? 0)  (usage 3)
iVideo0                               12  0x0000000c (const ??? 0)  (usage 3)
iVideo1                               96  0x00000060 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWidthDigit                            6  0x00000006 (const dword)  (usage 3)
iWinbutton0                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton1                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton2                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton3                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton4                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton5                            5  0x00000005 (const ??? 0)  (usage 3)
iWinbutton7                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton8                           31  0x0000001f (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 3887  0x00000f2fkKeyboardKeystrokes                 3887  0x00000f2f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (not used)
LANDSCAPE_R                            1  0x00000001 (const dword)  (usage 3)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                    7066  0x00001b9a (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                              -213  0xffffff2b (PmmC func) args[1] r=1  (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                4265  0x000010a9 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -15  0xfffffff1 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
MEDIA_ADDRESS_MW                      92  0x0000005c (const dword)  (not used)
MEDIA_ADDRESS_UW                      93  0x0000005d (const dword)  (not used)
media_Flush                         -118  0xffffff8a (PmmC func) args[0] r=1  (not used)
media_Image                         -117  0xffffff8b (PmmC func) args[2] r=0  (not used)
media_Init                          -119  0xffffff89 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -111  0xffffff91 (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -113  0xffffff8f (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -114  0xffffff8e (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                      124  0x0000007c (const dword)  (not used)
MEDIA_SECTOR_LO                      123  0x0000007b (const dword)  (not used)
media_SetAdd                        -109  0xffffff93 (PmmC func) args[2] r=0  (not used)
media_SetSector                     -110  0xffffff92 (PmmC func) args[2] r=0  (not used)
media_Video                         -107  0xffffff95 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -108  0xffffff94 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -115  0xffffff8d (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
media_WrSector                      -112  0xffffff90 (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -217  0xffffff27 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -218  0xffffff26 (PmmC func) args[1] r=1  (not used)
mem_Compare                         -224  0xffffff20 (PmmC func) args[3] r=1  (not used)
mem_Copy                            -223  0xffffff21 (PmmC func) args[3] r=1  (not used)
mem_Free                            -220  0xffffff24 (PmmC func) args[1] r=1  (not used)
mem_Heap                            -221  0xffffff23 (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -219  0xffffff25 (PmmC func) args[2] r=1  (not used)
mem_Set                             -222  0xffffff22 (PmmC func) args[3] r=1  (not used)
MEMORY_ACCESS_CONTROL                 22  0x00000016 (const dword)  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -14  0xfffffff2 (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 24)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              119  0x00000077 (const dword)  (usage 3)
nObjects                             132  0x00000084 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
o4Dbuttons                          3735  0x00000e97o4Dbuttons                          3735  0x00000e97 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oAngularmeters                      3513  0x00000db9oAngularmeters                      3513  0x00000db9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oAniButtons                         3737  0x00000e99oAniButtons                         3737  0x00000e99 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
object                               166  0x000000a6 (mem) word (global)  (usage 18)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       3739  0x00000e9boColorPickers                       3739  0x00000e9b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oCoolgauges                         3515  0x00000dbboCoolgauges                         3515  0x00000dbb (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
Ocs                                  410  0x0000019a (mem) word (global)  (usage 9)
oCustomdigitss                      3517  0x00000dbdoCustomdigitss                      3517  0x00000dbd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oDipSwitchs                         3481  0x00000d99oDipSwitchs                         3481  0x00000d99 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              3519  0x00000dbfoForms                              3519  0x00000dbf (mem) word[20] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oGauges                             3559  0x00000de7oGauges                             3559  0x00000de7 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oGSliders                           3489  0x00000da1oGSliders                           3489  0x00000da1 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oImages                             3561  0x00000de9oImages                             3561  0x00000de9 (mem) word[3] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oKeyboards                          3567  0x00000defoKeyboards                          3567  0x00000def (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oKnobs                              3483  0x00000d9boKnobs                              3483  0x00000d9b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                         3571  0x00000df3oLeddigitss                         3571  0x00000df3 (mem) word[23] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 9)
oLeds                               3569  0x00000df1oLeds                               3569  0x00000df1 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             3617  0x00000e21oMeters                             3617  0x00000e21 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                              86  0x00000056 (mem) word[34] (global)  (usage 108)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
OPDataL                             3889  0x00000f31OPDataL                             3889  0x00000f31 (mem) word[110] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 6)
oPinInputs                          3733  0x00000e95oPinInputs                          3733  0x00000e95 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oPinOutputs                         3847  0x00000f07oPinOutputs                         3847  0x00000f07 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      3485  0x00000d9doRockerSwitchs                      3485  0x00000d9d (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oRotarySwitchs                      3487  0x00000d9foRotarySwitchs                      3487  0x00000d9f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OSC_CONTROL_1                         25  0x00000019 (const dword)  (not used)
OSC_CONTROL_3                        147  0x00000093 (const dword)  (not used)
oScopes                             3725  0x00000e8doScopes                             3725  0x00000e8d (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (not used)
oSoundss                            3845  0x00000f05oSoundss                            3845  0x00000f05 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oSpectrums                          3723  0x00000e8boSpectrums                          3723  0x00000e8b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oStaticTexts                        3675  0x00000e5boStaticTexts                        3675  0x00000e5b (mem) word[24] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oStringss                           3619  0x00000e23oStringss                           3619  0x00000e23 (mem) word[21] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 7)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 81)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 108)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              3727  0x00000e8foTanks                              3727  0x00000e8f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oThermometers                       3661  0x00000e4doThermometers                       3661  0x00000e4d (mem) word[3] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oTimers                             3843  0x00000f03oTimers                             3843  0x00000f03 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oTrackbars                          3491  0x00000da3oTrackbars                          3491  0x00000da3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oUserButtons                        3741  0x00000e9doUserButtons                        3741  0x00000e9d (mem) word[51] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 12)
oUserImagess                        3729  0x00000e91oUserImagess                        3729  0x00000e91 (mem) word[2] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oUserleds                           3667  0x00000e53oUserleds                           3667  0x00000e53 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OUTPUT                                 0  0x00000000 (const dword)  (not used)
OVF                                  -21  0xffffffeb (PmmC func) args[0] r=1  (usage 3)
oVideos                             3669  0x00000e55oVideos                             3669  0x00000e55 (mem) word[3] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oWinButtons                         3493  0x00000da5oWinButtons                         3493  0x00000da5 (mem) word[10] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 12)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (usage 3)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PICASO                                 1  0x00000001 (const dword)  (usage 3)
PICASO_FUNCTIONS                       0  0x00000000 (const ??? 0)  (not used)
pin_HI                               -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
pin_LO                               -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
pin_Read                             -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
pin_Set                              -41  0xffffffd7 (PmmC func) args[2] r=1  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -12  0xfffffff4 (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
POWER_CONTROL_1                       27  0x0000001b (const dword)  (not used)
POWER_CONTROL_2                       28  0x0000001c (const dword)  (not used)
POWER_CONTROL_3                       29  0x0000001d (const dword)  (not used)
POWER_CONTROL_4                       30  0x0000001e (const dword)  (not used)
POWER_CONTROL_5                       31  0x0000001f (const dword)  (not used)
POWER_CONTROL_6                       32  0x00000020 (const dword)  (not used)
PrintStrings                        8188  0x00001ffc (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
RAND                                 -19  0xffffffed (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
READ_WRITE_DATA                       34  0x00000022 (const dword)  (not used)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                          7934  0x00001efe (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
reserved                            -294  0xfffffeda (PmmC func) args[0] r=0  (not used)
RGBINT_CONTROL_1                      56  0x00000038 (const dword)  (not used)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROW_ADDRESS_END1                       9  0x00000009 (const dword)  (not used)
ROW_ADDRESS_END2                       8  0x00000008 (const dword)  (not used)
ROW_ADDRESS_START1                     7  0x00000007 (const dword)  (not used)
ROW_ADDRESS_START2                     6  0x00000006 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (usage 3)
RXMODE_0                               0  0x00000000 (const dword)  (not used)
RXMODE_1                               1  0x00000001 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -20  0xffffffec (PmmC func) args[1] r=0  (not used)
SELECT                                 3  0x00000003 (const dword)  (not used)
SELECT_MULTIPLE                        4  0x00000004 (const dword)  (not used)
serin                                 -1  0xffffffff (PmmC func) args[0] r=1  (usage 3)
serin1                              -140  0xffffff74 (PmmC func) args[0] r=1  (not used)
serout                                -3  0xfffffffd (PmmC func) args[1] r=0  (usage 42)
serout1                             -141  0xffffff73 (PmmC func) args[1] r=0  (not used)
seroutCS                            8170  0x00001fea (User func) args[1] r=0  (usage 30)
seroutOcs                           8155  0x00001fdb (User func) args[0] r=0  (usage 6)
setbaud                               -4  0xfffffffc (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -17  0xffffffef (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -258  0xfffffefe (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -261  0xfffffefb (PmmC func) args[0] r=0  (not used)
snd_Pause                           -260  0xfffffefc (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -257  0xfffffeff (PmmC func) args[1] r=1  (not used)
snd_Playing                         -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
snd_Stop                            -259  0xfffffefd (PmmC func) args[0] r=0  (not used)
snd_Volume                          -256  0xffffff00 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
spi_Disable                         -153  0xffffff67 (PmmC func) args[0] r=0  (not used)
SPI_FAST                               0  0x00000000 (const dword)  (not used)
spi_Init                            -150  0xffffff6a (PmmC func) args[3] r=0  (not used)
SPI_MED                                1  0x00000001 (const dword)  (not used)
spi_Read                            -151  0xffffff69 (PmmC func) args[0] r=1  (not used)
SPI_SLOW                               2  0x00000002 (const dword)  (not used)
spi_Write                           -152  0xffffff68 (PmmC func) args[1] r=0  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -22  0xffffffea (PmmC func) args[1] r=1  (not used)
STAnsi                                22  0x00000016 (const dword)  (usage 3)
STBGColor                             16  0x00000010 (const dword)  (usage 6)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STFGColor                             14  0x0000000e (const dword)  (usage 3)
STFontAttribs                         18  0x00000012 (const dword)  (usage 3)
STForm                                24  0x00000018 (const dword)  (usage 3)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
str_Cat                             -278  0xfffffeea (PmmC func) args[2] r=1  (not used)
str_CatN                            -279  0xfffffee9 (PmmC func) args[3] r=1  (not used)
str_Copy                            -287  0xfffffee1 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -288  0xfffffee0 (PmmC func) args[3] r=1  (not used)
str_Find                            -274  0xfffffeee (PmmC func) args[2] r=1  (not used)
str_FindI                           -275  0xfffffeed (PmmC func) args[2] r=1  (not used)
str_GetByte                         -268  0xfffffef4 (PmmC func) args[1] r=1  (not used)
str_GetC                            -267  0xfffffef5 (PmmC func) args[2] r=1  (not used)
str_GetD                            -264  0xfffffef8 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -266  0xfffffef6 (PmmC func) args[2] r=1  (not used)
str_GetW                            -265  0xfffffef7 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -269  0xfffffef3 (PmmC func) args[1] r=1  (not used)
str_Length                          -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
str_Match                           -272  0xfffffef0 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -273  0xfffffeef (PmmC func) args[2] r=1  (not used)
str_Printf                          -277  0xfffffeeb (PmmC func) args[2] r=1  (not used)
str_Ptr                             -263  0xfffffef9 (PmmC func) args[1] r=1  (not used)
str_PutByte                         -270  0xfffffef2 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -271  0xfffffef1 (PmmC func) args[2] r=0  (not used)
strheight                           -161  0xffffff5f (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                          28  0x0000001c (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                         0  0x00000000 (const dword)  (usage 3)
Strings10Count                         0  0x00000000 (const dword)  (not used)
Strings10Size                          1  0x00000001 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         25  0x00000019 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         19  0x00000013 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                         25  0x00000019 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                     1536  0x00000600 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings16Count                         1  0x00000001 (const dword)  (not used)
Strings16Size                         31  0x0000001f (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         33  0x00000021 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         32  0x00000020 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         29  0x0000001d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      4096  0x00001000 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          13  0x0000000d (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          26  0x0000001a (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      3584  0x00000e00 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      4608  0x00001200 (const dword)  (usage 3)
Strings8Count                          1  0x00000001 (const dword)  (not used)
Strings8Size                          25  0x00000019 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      5120  0x00001400 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                          25  0x00000019 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      2048  0x00000800 (const dword)  (usage 3)
stringsCV                             44  0x0000002c (mem) word[20] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                            -160  0xffffff60 (PmmC func) args[1] r=1  (not used)
STSize                                 4  0x00000004 (const dword)  (usage 3)
STStartH                               0  0x00000000 (const dword)  (usage 3)
STStartL                               2  0x00000002 (const dword)  (usage 3)
STTransparent                         20  0x00000014 (const dword)  (usage 3)
STx1                                   6  0x00000006 (const dword)  (usage 12)
STx2                                  10  0x0000000a (const dword)  (usage 9)
STy1                                   8  0x00000008 (const dword)  (usage 12)
STy2                                  12  0x0000000c (const dword)  (usage 9)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -295  0xfffffed9 (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -194  0xffffff3e (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -195  0xffffff3d (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -196  0xffffff3c (PmmC func) args[0] r=0  (usage 3)
sys_GetTimer                        -192  0xffffff40 (PmmC func) args[1] r=1  (not used)
sys_SetTimer                        -191  0xffffff41 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -193  0xffffff3f (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -280  0xfffffee8 (PmmC func) args[0] r=1  (not used)
sys_T                               -189  0xffffff43 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -190  0xffffff42 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -5  0xfffffffb (PmmC func) args[1] r=1  (not used)
tolower                             -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -199  0xffffff39 (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -201  0xffffff37 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -200  0xffffff38 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
toupper                             -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
translate                             -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
TState                               162  0x000000a2 (mem) word (global)  (usage 24)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                      7380  0x00001cd4 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 165)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 42)
txt_Attributes                       -38  0xffffffda (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -34  0xffffffde (PmmC func) args[1] r=1  (not used)
txt_Delay                            -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -25  0xffffffe7 (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontID                           -27  0xffffffe5 (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
txt_Italic                           -35  0xffffffdd (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -23  0xffffffe9 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -33  0xffffffdf (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -24  0xffffffe8 (PmmC func) args[2] r=0  (not used)
txt_Underline                        -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
txt_Width                            -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
uadd_3232                           -290  0xfffffede (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                           -292  0xfffffedc (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
ULCD_32PT_GFX                          0  0x00000000 (const ??? 0)  (not used)
umul_1616                           -289  0xfffffedf (PmmC func) args[3] r=1  (usage 3)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                        -281  0xfffffee7 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                       6077  0x000017bd (User func) args[1] r=0  (usage 3)
USER_INITIALIZED_DISPLAY              32  0x00000020 (const dword)  (not used)
usub_3232                           -291  0xfffffedd (PmmC func) args[3] r=1  (not used)
VCOM_CONTROL_1                        67  0x00000043 (const dword)  (not used)
VCOM_CONTROL_2                        68  0x00000044 (const dword)  (not used)
VCOM_CONTROL_3                        69  0x00000045 (const dword)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (usage 3)
WHITE                              65535  0x0000ffff (const dword)  (usage 54)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 3)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 3)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                         7579  0x00001d9b (User func) args[3] r=0  (usage 24)
x                                    156  0x0000009c (mem) word (global)  (usage 12)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
y                                    158  0x0000009e (mem) word (global)  (usage 9)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
