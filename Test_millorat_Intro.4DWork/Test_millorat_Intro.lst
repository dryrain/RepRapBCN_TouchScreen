file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS

file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\uLCD-32PTU.fnc

000001  000001  #platform "uLCD-32PTU"
000002  000001  #platform "uLCD-32PTU"
000003  000008  */
000004  000009      #constant ULCD_32PT_GFX
000005  000009      #constant ULCD_32PT_GFX
000006  000010        
000007  000011      #IFNOT EXISTS PICASO_FUNCTIONS
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\PicasoFunctions.fnc

000008  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000009  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for PicasoGFX2 platforms
000012  000003        
000013  000004  #constant PICASO_FUNCTIONS
000014  000004  #constant PICASO_FUNCTIONS
000015  000005        
000016  000006        
000017  000007  #CONST
000018  000017  #END
000019  000018        
000020  000019  #CONST
000021  000025  #END
000022  000026        
000023  000027        
000024  000028  #CONST
000025  000040  #END
000026  000041        
000027  000042        
000028  000043  #CONST
000029  000208  #END
000030  000209        
000031  000210        
000032  000211  // baud divisor rates for setbaud(n);
000033  000212  #CONST
000034  000234  #END
000035  000235        
000036  000236        
000037  000237        
000038  000238        
000039  000243  */
000040  000244        
000041  000245        
000042  000246  //==============================================//
000043  000247  // EVE bios functions                           //
000044  000248  //==============================================//
000045  000249                                                  //
000046  000250  func serin(), 1;                // read a byte from COM0
000047  000251  // Syntax: serin();
000048  000252  // Usage : char := serin();
000049  000253  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
000050  000254  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000051  000255  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000052  000256  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000053  000257  //     : Returns: -1 if no character is available
000054  000258  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
000055  000259  //     : Returns: positive value 0 to 255 for a valid character received
000056  000260        
000057  000261  func putch("char"), 0;                // write single char to current output device
000058  000262  // Syntax: putch("char");
000059  000263  // Usage : putch("A");
000060  000264  // Notes : Transmits a single byte from the Serial Port COM0. The transmission format is:
000061  000265  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000062  000266  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000063  000267  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000064  000268  //     : The arguments can be a variable, array element, expression or constant
000065  000269        
000066  000270  func serout("char"), 0;                // write a byte to COM0
000067  000271  // Syntax: serout1("char");
000068  000272  // Usage : serout1(ch);
000069  000273  // Notes : send character to COM1
000070  000274        
000071  000275  func setbaud("baudnum"), 0;            // set baud rate of COM0
000072  000276  // Syntax: setbaud(baud_number);
000073  000277  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
000074  000278  // *Notes : argument specifies the baud rate using pre-defined constant.
000075  000279  //       : The pre-defined constant is a value of 0-19 , and internally
000076  000280  //       : this is used as a table pointer to get the baud rate divisor
000077  000281  //       : value for one of the 20 selected baud rates, control is then
000078  000282  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
000079  000283  //       : The pre-defined constants equate to a value of 0-19.
000080  000284  //       : If a value other than 0-19 is used, a run time error (eror 25)
000081  000285  //       : will occur.
000082  000286        
000083  000287  func to("device"), 1;                // output device redirection
000084  000288  // Syntax: to(outstream);
000085  000289  // Usage : to(APPEND); putstr("TWO ");
000086  000290  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000087  000291  //     :
000088  000292  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000089  000293  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000090  000294  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000091  000295  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000092  000296  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000093  000297  //     : completed its action. The APPEND argument is used to send the printed output to the same
000094  000298  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000095  000299  //     : sequential data to a media stream.
000096  000300  //     :
000097  000301  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000098  000302  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000099  000303  //     :                            appended to user memory if previous redirection was to an array.
000100  000304  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000101  000305  //     : TEXT           0xFF08      Output is directed to the screen (default).
000102  000306  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000103  000307  //     : I2C            0xF820      Output is directed to the I2C port.
000104  000308  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000105  000309        
000106  000310        
000107  000311  func pause("milliseconds"), 0;            // blocking delay
000108  000312  // Syntax: pause(milliseconds);
000109  000313  // Usage : pause(1000);                //pause for 1 second
000110  000314  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000111  000315        
000112  000316  func putnum("arg1","arg2"), 1;            // print number to current output device
000113  000317  // Syntax: putnum(format, value);
000114  000318  // Usage : var := putnum(HEX, val);
000115  000319  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000116  000320  //     : Format: A constant that specifies the number format
000117  000321  //     : Value : The number to be printed
000118  000322  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000119  000323  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000120  000324  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000121  000325  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000122  000326  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000123  000327  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000124  000328  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000125  000329  //     :                                     BIN6     BIN6Z     BIN6ZB
000126  000330  //     :                                     BIN7     BIN7Z     BIN7ZB
000127  000331  //     :                                     BIN8     BIN8Z     BIN8ZB
000128  000332  //     :                                     BIN9     BIN9Z     BIN9ZB
000129  000333  //     :                                     BIN10     BIN10Z     BIN10ZB
000130  000334  //     :                                     BIN11     BIN11Z     BIN11ZB
000131  000335  //     :                                     BIN12     BIN12Z     BIN12ZB
000132  000336  //     :                                     BIN13     BIN13Z     BIN13ZB
000133  000337  //     :                                     BIN14     BIN14Z     BIN14ZB
000134  000338  //     :                                     BIN15     BIN15Z     BIN15ZB
000135  000339  //     :                                     BIN16     BIN16Z     BIN16ZB
000136  000340  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000137  000341  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000138  000342  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000139  000343  //     : | | | | V V V
000140  000344  //     : | | | | | | |
000141  000345  //     : | | | | | |
000142  000346  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000143  000347  //     : | | | | digit count |
000144  000348  //     : | | | | |___reserved (not used on GOLDELOX)
000145  000349  //     : | | | |
000146  000350  //     : | | | |
000147  000351  //     : | | | |
000148  000352  //     : | | | |
000149  000353  //     : | | | |
000150  000354  //     : | | | |______ 1 = leading zeros included
000151  000355  //     : | | | 0 = leading zeros suppressed
000152  000356  //     : | | |
000153  000357  //     : | | |
000154  000358  //     : | | |_______ 1 = leading zero blanking
000155  000359  //     : | |
000156  000360  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000157  000361  //     : |
000158  000362  //     : |______ 1 = space before unsigned number
000159  000363        
000160  000364        
000161  000365  func translate("arg1","arg2","arg3","arg4"), 1; // list translator (internal use only, not usable)
000162  000366        
000163  000367  func putstr("string"), 1;                       // print string to current output device
000164  000368  // Syntax: putstr(pointer);
000165  000369  // Usage : putstr("HELLO\n");
000166  000370  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000167  000371  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000168  000372  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000169  000373  //       : The output of putstr can be redirected to the communications port, the media, or memory
000170  000374  //       : using the to(...); function.
000171  000375  //       : A string constant is automatically terminated with a zero.
000172  000376  //       : A string in a data statement is not automatically terminated with a zero.
000173  000377  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000174  000378  //       : element packs 1 or 2 characters.
000175  000379        
000176  000380        
000177  000381  func strlen("varAddress"), 1;                   // return length of a var packed string in character units
000178  000382  // Syntax: strlen("varAddress);
000179  000383  // Usage : strlen("HELLO\n");
000180  000384  // Notes : gives the length of a string that is packed into regular var array
000181  000385  //       : Use str_Length(ptr)  for string pointer mode
000182  000386        
000183  000387        
000184  000388  //==============================================//
000185  000389  // Memory Access Function Prototypes            //
000186  000390  //==============================================//
000187  000391                                                  //
000188  000392  func peekW("address"), 1;                       // read a word from system memory
000189  000393  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000190  000394  // refer to address map of internal variables   //
000191  000395  //==============================================//
000192  000396  // Math Functions                               //
000193  000397  //==============================================//
000194  000398                                                  //
000195  000399  func ABS("value"), 1;                           // return a positive number
000196  000400  // Syntax: ABS(value);
000197  000401  // Usage : var := ABS(arg);
000198  000402  // Notes : Returns the absolute value of an argument
000199  000403        
000200  000404  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000201  000405  // Syntax: MIN(value1, value2);
000202  000406  // Usage : var := MIN(arg1, arg2);
000203  000407  // Notes : Returns the minimum of 2 arguments
000204  000408        
000205  000409  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000206  000410  // Syntax: MAX(value1, value2);
000207  000411  // Usage : var := MAX(arg1, arg2);
000208  000412  // Notes : Returns the maximum of 2 arguments
000209  000413        
000210  000414  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000211  000415  // Syntax: SWAP(&var1, &var2);
000212  000416  // Usage : SWAP(&var1, &var2);
000213  000417  // Notes : Swaps the contents of 2 variables or memory locations
000214  000418        
000215  000419  func SIN("angle"), 1;                           // return SIN of angle
000216  000420  // Syntax: SIN(angle);
000217  000421  // Usage : var := SIN(arg);
000218  000422  // Notes : Returns the sine in radians of an argument in degrees
000219  000423  //       : the returned value range is from 127 to -127. The real
000220  000424  //       : cosine values vary from 1.0 to -1.0 so appropriate
000221  000425  //       : scaling must be done in user code.
000222  000426        
000223  000427  func COS("angle"), 1;                           // return COS of angle
000224  000428  // Syntax: COS(angle);
000225  000429  // Usage : var := COS(arg);
000226  000430  // Notes : Returns the cosine in radians of an argument in degrees
000227  000431  //       : the returned value range is from 127 to -127. The real
000228  000432  //       : cosine values vary from 1.0 to -1.0 so appropriate
000229  000433  //       : scaling must be done in user code.
000230  000434        
000231  000435  func RAND(), 1;                                 // return a pseudo random number
000232  000436  // Syntax: RAND();
000233  000437  // Usage : var := RAND();
000234  000438  // Notes : Returns a random number between 0 and 0xFFFF.
000235  000439  //       : The random number generator must first be seeded
000236  000440  //       : by using the SEED(number) function.
000237  000441        
000238  000442  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000239  000443  // Syntax: SEED(number);
000240  000444  // Usage : SEED(arg);
000241  000445  // Notes : Seeds the random number generator.
000242  000446        
000243  000447  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000244  000448  // Syntax: OVF();
000245  000449  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000246  000450  //       : hiWord := OVF();
000247  000451  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000248  000452        
000249  000453  func SQRT("number"), 1;                         // return square root of a number
000250  000454  // Syntax: SQRT(number);
000251  000455  // Usage : SQRT(arg);
000252  000456  // Notes : Returns the integer square root of a number.
000253  000457  //------------------------------------------------------------------//
000254  000458  //          Text Related Function Prototypes
000255  000459  //------------------------------------------------------------------//
000256  000460        
000257  000461  func txt_MoveCursor("line", "column"), 0;
000258  000462  // Syntax: txt_SetCursor(line, column);
000259  000463  // Usage : txt_SetCursor(arg1, arg2);
000260  000464  // Notes : Moves the text Cursor to a new screen position set by
000261  000465  //       : line,column parameters.
000262  000466        
000263  000467  func txt_Set("mode", "value"), 0;
000264  000468  // Syntax: txt_Set(mode, value);
000265  000469  // Usage : txt_Set(arg1, arg2);
000266  000470  // Returns : Original value before the change
000267  000471  // Notes : Sets various text related parameters used by other functions
000268  000472  //       : This allows the features to be set programatically with a
000269  000473  //       : single function call.It is strongly recommended to use the
000270  000474  //       : pre-defined constants rather than the mode numbers.
000271  000475  //       : NB:- Although it is often required to be able to set text
000272  000476  //       : functions with a single function call for graphics engine
000273  000477  //       : related functions, there is a complete set of single parameter
000274  000478  //       : shortcut functions that have exactly the same function as
000275  000479  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000276  000480  //       :
000277  000481  //       : mode = TEXT_COLOUR (mode 0)
000278  000482  //       : txt_Set(TEXT_COLOUR, value);
000279  000483  //       : value = 0 to 0xFFFF, Black to White
000280  000484  //       : Sets the Text colour for the display
000281  000485  //       : Default = LIME.
000282  000486  //       :
000283  000487  //       : mode = TEXT_HIGHLIGHT (mode 1)
000284  000488  //       : txt_Set(TEXT_HIGHLIGHT, value);
000285  000489  //       : value = 0 to 0xFFFF, Black to White
000286  000490  //       : Sets the Text background colour for the display. Effective
000287  000491  //       : when text mode is Opaque.
000288  000492  //       : Default = BLACK.
000289  000493  //       :
000290  000494  //       : mode = FONT_ID (mode 2)
000291  000495  //       : txt_Set(FONT_ID, value);
000292  000496  //       : value = FONT1, FONT2 or FONT3 for internal fonts
000293  000497  //       : else this value is the name of a font included
000294  000498  //       : in a users program in a data statement.
000295  000499  //       : Default = FONT SIZE 3.
000296  000500  //       :
000297  000501  //       : mode = TEXT_WIDTH  (mode 3)
000298  000502  //       : txt_Set(TEXT_WIDTH, value);
000299  000503  //       : value = 1 to 16
000300  000504  //       : Sets the Text Width multiplier
000301  000505  //       : text will be printed magnified horizontally
000302  000506  //       : by this factor, Default = 1.
000303  000507  //       :
000304  000508  //       : mode = TEXT_HEIGHT  (mode 4)
000305  000509  //       : txt_Set(TEXT_HEIGHT, value);
000306  000510  //       : value = 1 to 16
000307  000511  //       : Sets the Text Height multiplier
000308  000512  //       : text will be printed magnified vertically
000309  000513  //       : by this factor, Default = 1.
000310  000514  //       :
000311  000515  //       : mode = TEXT_XGAP  (mode 5)
000312  000516  //       : txt_Set(TEXT_XGAP, value);
000313  000517  //       : value = 1 to 32
000314  000518  //       : Sets the horizontal gap between characters
000315  000519  //       : The gap is in pixel units, Default = 0
000316  000520  //       :
000317  000521  //       : mode = TEXT_YGAP  (mode 6)
000318  000522  //       : txt_Set(TEXT_YGAP, value);
000319  000523  //       : value = 1 to 32
000320  000524  //       : Sets the vertical gap below characters
000321  000525  //       : The gap is in pixel units, Default = 0
000322  000526  //       :
000323  000527  //       : mode = TEXT_PRINTDELAY  (mode 7) DEPRECATED
000324  000528  //       : txt_Set(TEXT_PRINTDELAY, value);
000325  000529  //       : value = 0 to 255
000326  000530  //       : Sets the delay time (in ms) during character
000327  000531  //       : printing to give a 'teletype' like effect.
000328  000532  //       : Often used to attract attention to a string
000329  000533  //       : being printed which can often be missed if
000330  000534  //       : just suddenly appearing or changing.
000331  000535  //       : Default = 0 ms.
000332  000536  //       :
000333  000537  //       : mode = TEXT_OPACITY (mode 8)
000334  000538  //       : txt_Set(TEXT_OPACITY, value);
000335  000539  //       : value = TRANSPARENT (0) = Text Trasparent
000336  000540  //       : value = OPAQUE (1) = Text Opaque
000337  000541  //       : Sets the Opacity/Transparency of the text
000338  000542  //       : Default = 0 or TRANSPARENT
000339  000543  //       :
000340  000544  //       : mode = TEXT_BOLD (mode 9)
000341  000545  //       : txt_Set(TEXT_BOLD, value);
000342  000546  //       : value = dont care
000343  000547  //       : Sets Bold Text mode for the next string or char
000344  000548  //       : The feature automatically resets after printing
000345  000549  //       : using putstr or print has completed
000346  000550  //       :
000347  000551  //       : mode = TEXT_ITALIC (mode 10)
000348  000552  //       : txt_Set(TEXT_ITALIC, value);
000349  000553  //       : value = dont care
000350  000554  //       : Sets Italic Text mode for the next string or char
000351  000555  //       : The feature automatically resets after printing
000352  000556  //       : using putstr or print has completed
000353  000557        
000354  000558  //       : mode = TEXT_INVERSE (mode 11)
000355  000559  //       : txt_Set(TEXT_INVERSE, value);
000356  000560  //       : value = dont care
000357  000561  //       : Sets Inverse Text mode for the next string or char
000358  000562  //       : The feature automatically resets after printing
000359  000563  //       : using putstr or print has completed
000360  000564  //       :
000361  000565  //       : mode = TEXT_UNDERLINED (mode 12)
000362  000566  //       : txt_Set(TEXT_UNDERLINED, value);
000363  000567  //       : value = dont care
000364  000568  //       : Sets Underlined Text mode for the next string or char
000365  000569  //       : The feature automatically resets after printing
000366  000570  //       : using putstr or print has completed
000367  000571  //       :
000368  000572  //       : mode = TEXT_ATTRIBUTES (mode 13)
000369  000573  //       : txt_Set(TEXT_ATTRIBUTES, value);
000370  000574  //       : value = bits are defined as:
000371  000575  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000372  000576  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000373  000577  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000374  000578  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000375  000579  //       : Allows a combination of text attributes to be defined together
000376  000580  //       : by 'or'ing the bits together.
000377  000581  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000378  000582  //       : The feature automatically resets after printing
000379  000583  //       : using putstr or print has completed.
000380  000584  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000381  000585  //       :
000382  000586  //       : mode = TEXT_WRAP (mode 14)
000383  000587  //       : txt_Set(TEXT_WRAP , value);
000384  000588  //       : Sets the position where text wrap will occur
000385  000589  //       : The feature automatically resets when screen
000386  000590  //       : mode is changed. If the value is set to 0,
000387  000591  //       : text wrap is turned off.
000388  000592  //       : of the current screen. Default value is 0
000389  000593  // Notes : The value is in pixel units.
000390  000594  //       :
000391  000595        
000392  000596  //       : txt_Set mode 15 reserved for future use
000393  000597  //       :
000394  000598        
000395  000599        
000396  000600        
000397  000601  //=====================================================//
000398  000602  // Single parameter short-cuts                         //
000399  000603  // for the txt_Set functions                           //
000400  000604  // These functions return the existing value before    //
000401  000605  // the change is made.                                 //
000402  000606  //=====================================================//
000403  000607  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000404  000608  func txt_BGcolour("colour"), 1;             // 1  text background colour
000405  000609  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000406  000610  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000407  000611  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000408  000612  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000409  000613  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000410  000614  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000411  000615  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000412  000616  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000413  000617  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000414  000618  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000415  000619  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000416  000620  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000417  000621  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000418  000622  func _1F(), 0;                              // 15 text (reserved DO NOT REMOVE)
000419  000623        
000420  000624        
000421  000625  //------------------------------------------------------------------//
000422  000626  //                 Hardware Function Prototypes
000423  000627  //------------------------------------------------------------------//
000424  000628        
000425  000629  // I/O Pin reference:-
000426  000630  //
000427  000631  //    IO1_PIN           is pin 2 of J1
000428  000632  //    IO2_PIN           is pin 1 of J1
000429  000633  //    IO3_PIN           is pin 3 of J1
000430  000634  //    IO4_PIN           is pin 5 of J1 (also used for BUS_RD)
000431  000635  //    IO5_PIN           is pin 9 of J2 (also used for BUS_WR)
000432  000636  //    BUS_RD_PIN        is pin 5 of J1 (alias IO4_PIN)
000433  000637  //    BUS_WR_PIN        is pin 9 of J2 (alias IO5_PIN)
000434  000638  //    BUS_0             is pin 27 of J1
000435  000639  //    BUS_1             is pin 25 of J1
000436  000640  //    BUS_2             is pin 23 of J1
000437  000641  //    BUS_3             is pin 21 of J1
000438  000642  //    BUS_4             is pin 19 of J1
000439  000643  //    BUS_5             is pin 17 of J1
000440  000644  //    BUS_6             is pin 13 of J2
000441  000645  //    BUS_7             is pin 11 of J2
000442  000646  //    BACKLITE          is backlite control pin
000443  000647  //    AUDIO_ENABLE      is amplifier chip control pin
000444  000648        
000445  000649  func pin_Set("mode", "pin"), 1;            // set pin to required mode
000446  000650  // Syntax: pin_Set(mode, pin);
000447  000651  // Usage : pin_Set(arg1, arg2);
000448  000652  // Notes : Sets the appropriate pins to Inputs or Outputs
000449  000653  //       : returns true if the pin number is legal (usually ignored)
000450  000654  //       :
000451  000655  //       : mode = 0 : Set Pin to Output
000452  000656  //       : pin_Set(0, pin);
000453  000657  //       : pin_Set(OUTPUT, pin);
000454  000658  //       : pin = 1  : set IO1_PIN to output (pin 2 J1)
000455  000659  //       : pin = 2  : set IO2_PIN to output (pin 1 J1)
000456  000660  //       : pin = 3  : set IO3_PIN to output (pin 3 J1)
000457  000661  //       : pin = 4  : set IO4_PIN to output (pin 5 J1, also used for BUS_RD)
000458  000662  //       : pin = 5  : set IO5_PIN to output (pin 9 J2, also used for BUS_WR)
000459  000663  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000460  000664  //       : pin = 8  : set BUS_0   to output (pin 27 of J1)
000461  000665  //       : pin = 9  : set BUS_1   to output (pin 25 of J1)
000462  000666  //       : pin = 10 : set BUS_2   to output (pin 23 of J1)
000463  000667  //       : pin = 11 : set BUS_3   to output (pin 21 of J1)
000464  000668  //       : pin = 12 : set BUS_4   to output (pin 19 of J1)
000465  000669  //       : pin = 13 : set BUS_5   to output (pin 17 of J1)
000466  000670  //       : pin = 14 : set BUS_6   to output (pin 13 of J2)
000467  000671  //       : pin = 15 : set BUS_7   to output (pin 11 of J2)
000468  000672  //       : Sets the desired pin to be used as an Output.
000469  000673  //       :
000470  000674  //       : mode = 1 : Set Pin to Input
000471  000675  //       : pin_Set(1, pin);
000472  000676  //       : pin_Set(INPUT, pin);
000473  000677  //       : pin = 1  : set IO1_PIN to input (pin 2 J1)
000474  000678  //       : pin = 2  : set IO2_PIN to input (pin 1 J1)
000475  000679  //       : pin = 3  : set IO3_PIN to input (pin 3 J1)
000476  000680  //       : pin = 4  : set IO4_PIN to input (pin 5 J1, also used for BUS_RD)
000477  000681  //       : pin = 5  : set IO5_PIN to input (pin 9 J2, also used for BUS_WR)
000478  000682  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000479  000683  //       : pin = 8  : set BUS_0   to input (pin 27 of J1)
000480  000684  //       : pin = 9  : set BUS_1   to input (pin 25 of J1)
000481  000685  //       : pin = 10 : set BUS_2   to input (pin 23 of J1)
000482  000686  //       : pin = 11 : set BUS_3   to input (pin 21 of J1)
000483  000687  //       : pin = 12 : set BUS_4   to input (pin 19 of J1)
000484  000688  //       : pin = 13 : set BUS_5   to input (pin 17 of J1)
000485  000689  //       : pin = 14 : set BUS_6   to input (pin 13 of J2)
000486  000690  //       : pin = 15 : set BUS_7   to input (pin 11 of J2)
000487  000691  //       : Sets the desired pin to be used as an Input.
000488  000692        
000489  000693  func pin_HI("pin"), 1;                    // set pin to logic '1'
000490  000694  // Syntax: pin_HI(pin);
000491  000695  // Usage : pin_HI(arg);
000492  000696  // Notes : Outputs a logic "High" (3.3V) on the appropriate
000493  000697  //       : pin that was previously selected as an Output.
000494  000698  //       : returns true if the pin number is legal (usually ignored)
000495  000699  //       :
000496  000700  //       : pin = 1  : set IO1_PIN to "High" level (pin 2 of J1)
000497  000701  //       : pin = 2  : set IO2_PIN to "High" level (pin 1 of J1)
000498  000702  //       : pin = 3  : set IO3_PIN to "High" level (pin 3 of J1)
000499  000703  //       : pin = 4  : set IO4_PIN to "High" level (pin 5 of J1, also used for BUS_RD)
000500  000704  //       : pin = 5  : set IO5_PIN to "High" level (pin 9 of J2, also used for BUS_WR)
000501  000705  //       : pin = 6  : set DCENB pin to "High" level (BACKLITE ON)
000502  000706  //       : pin = 7  : set AUDIO_ENABL pin to "High" level (AMP OFF)
000503  000707  //       : pin = 8  : set BUS_0   to "High" level (pin 27 of J1)
000504  000708  //       : pin = 9  : set BUS_1   to "High" level (pin 25 of J1)
000505  000709  //       : pin = 10 : set BUS_2   to "High" level (pin 23 of J1)
000506  000710  //       : pin = 11 : set BUS_3   to "High" level (pin 21 of J1)
000507  000711  //       : pin = 12 : set BUS_4   to "High" level (pin 19 of J1)
000508  000712  //       : pin = 13 : set BUS_5   to "High" level (pin 17 of J1)
000509  000713  //       : pin = 14 : set BUS_6   to "High" level (pin 13 of J2)
000510  000714  //       : pin = 15 : set BUS_7   to "High" level (pin 11 of J2)
000511  000715        
000512  000716  func pin_LO("pin"), 1;                    // set pin to logic '0'
000513  000717  // Syntax: pin_LO(pin);
000514  000718  // Usage : pin_LO(arg);
000515  000719  // Notes : Outputs a logic "Low" (0V) on the appropriate
000516  000720  //       : pin that was previously selected as an Output.
000517  000721  //       : returns true if the pin number is legal (usually ignored)
000518  000722  //       :
000519  000723  //       : pin = 1 : set IO1_PIN to "Low" level (pin 2 of J1)
000520  000724  //       : pin = 2 : set IO2_PIN to "Low" level (pin 1 of J1)
000521  000725  //       : pin = 3 : set IO3_PIN to "Low" level (pin 3 of J1)
000522  000726  //       : pin = 4 : set IO4_PIN to "Low" level (pin 5 of J1, also used for BUS_RD)
000523  000727  //       : pin = 5 : set IO5_PIN to "Low" level (pin 9 of J2, also used for BUS_WR)
000524  000728  //       : pin = 6 : set DCENB pin to "Low" level (BACKLITE)
000525  000729  //       : pin = 7 : set AUDIO_ENABL pin to "Low" level (AMP ON)
000526  000730  //       : pin = 8  : set BUS_0  to "Low" level (pin 27 of J1)
000527  000731  //       : pin = 9  : set BUS_1  to "Low" level (pin 25 of J1)
000528  000732  //       : pin = 10 : set BUS_2  to "Low" level (pin 23 of J1)
000529  000733  //       : pin = 11 : set BUS_3  to "Low" level (pin 21 of J1)
000530  000734  //       : pin = 12 : set BUS_4  to "Low" level (pin 19 of J1)
000531  000735  //       : pin = 13 : set BUS_5  to "Low" level (pin 17 of J1)
000532  000736  //       : pin = 14 : set BUS_6  to "Low" level (pin 13 of J2)
000533  000737  //       : pin = 15 : set BUS_7  to "Low" level (pin 11 of J2)
000534  000738        
000535  000739  func pin_Read("pin"), 1;                // read pin, logic or analogue
000536  000740  // Syntax: pin_Read(pin);
000537  000741  // Usage : arg1 := pin_Read(arg2);
000538  000742  // Notes : Reads the logic state of the appropriate
000539  000743  //       : pin that was previously selected as an Input.
000540  000744  //       :
000541  000745  //       : pin = 1  : Read the state of IO1_PIN (pin 2 of J1)
000542  000746  //       : pin = 2  : Read the state of IO2_PIN (pin 1 of J1)
000543  000747  //       : pin = 3  : Read the state of IO3_PIN (pin 3 of J1)
000544  000748  //       : pin = 4  : Read the state of IO4_PIN (pin 5 of J1, also used for BUS_RD)
000545  000749  //       : pin = 5  : Read the state of IO5_PIN (pin 9 of J2, also used for BUS_WR)
000546  000750  //       : pin = 6  : Read the state of DCENB pin to "Low" level (BACKLITE)
000547  000751  //       : pin = 7  : Read the state of AUDIO_ENABL pin to "Low" level (AMP ON)
000548  000752  //       : pin = 8  : Read the state of BUS_0   (pin 27 of J1)
000549  000753  //       : pin = 9  : Read the state of BUS_1   (pin 25 of J1)
000550  000754  //       : pin = 10 : Read the state of BUS_2   (pin 23 of J1)
000551  000755  //       : pin = 11 : Read the state of BUS_3   (pin 21 of J1)
000552  000756  //       : pin = 12 : Read the state of BUS_4   (pin 19 of J1)
000553  000757  //       : pin = 13 : Read the state of BUS_5   (pin 17 of J1)
000554  000758  //       : pin = 14 : Read the state of BUS_6   (pin 13 of J2)
000555  000759  //       : pin = 15 : Read the state of BUS_7   (pin 11 of J2)
000556  000760  //       : Returns a 0 (logic low) or 1 (logic high).
000557  000761        
000558  000762        
000559  000763  //------------------------------------------------------------------//
000560  000764  //                 P1 module BUS I/O control
000561  000765  //------------------------------------------------------------------//
000562  000766        
000563  000767  func bus_In(), 1;
000564  000768  // Syntax: bus_In();
000565  000769  // Usage : arg1 := bus_In();
000566  000770  // Notes : Read the 8bit wide bus into the lower 8 bits of arg1.
000567  000771  //       : The upper 8 bits of arg1 are set to 0.
000568  000772  //       : the BUS_RD and BUS_WR pins are not affected.
000569  000773  //       :
000570  000774  //       : BUS_0 is pin 27 of J1
000571  000775  //       : BUS_1 is pin 25 of J1
000572  000776  //       : BUS_2 is pin 23 of J1
000573  000777  //       : BUS_3 is pin 21 of J1
000574  000778  //       : BUS_4 is pin 19 of J1
000575  000779  //       : BUS_5 is pin 17 of J1
000576  000780  //       : BUS_6 is pin 13 of J2
000577  000781  //       : BUS_7 is pin 11 of J2
000578  000782        
000579  000783  func bus_Out("var"), 0;
000580  000784  // Syntax: bus_Out(var);
000581  000785  // Usage : bus_Out(arg1);
000582  000786  // Notes : The lower 8 bits of arg1 are placed on the 8bit wide bus.
000583  000787  //       : The upper 8 bits of arg1 are ignored.
000584  000788  //       : the BUS_RD and BUS_WR pins are not affected.
000585  000789  //       : NB:- any BUS pins that are set to inputs are not affected.
000586  000790  //       :
000587  000791  //       : BUS_0 is pin 27 of J1
000588  000792  //       : BUS_1 is pin 25 of J1
000589  000793  //       : BUS_2 is pin 23 of J1
000590  000794  //       : BUS_3 is pin 21 of J1
000591  000795  //       : BUS_4 is pin 19 of J1
000592  000796  //       : BUS_5 is pin 17 of J1
000593  000797  //       : BUS_6 is pin 13 of J2
000594  000798  //       : BUS_7 is pin 11 of J2
000595  000799        
000596  000800  func bus_Set("var"), 0;
000597  000801  // Syntax: bus_Set(var);
000598  000802  // Usage : bus_Set(arg1);
000599  000803  // Notes : The lower 8 bits of arg1 are placed in the BUS direction register.
000600  000804  //       : a '1' sets a pin to be an input, a '0' sets a pin to be output.
000601  000805  //       : The upper 8 bits of arg1 are ignored.
000602  000806  //       : the BUS_RD and BUS_WR pins are not affected.
000603  000807  //       :
000604  000808  //       : BUS_0 is pin 27 of J1
000605  000809  //       : BUS_1 is pin 25 of J1
000606  000810  //       : BUS_2 is pin 23 of J1
000607  000811  //       : BUS_3 is pin 21 of J1
000608  000812  //       : BUS_4 is pin 19 of J1
000609  000813  //       : BUS_5 is pin 17 of J1
000610  000814  //       : BUS_6 is pin 13 of J2
000611  000815  //       : BUS_7 is pin 11 of J2
000612  000816        
000613  000817  func bus_Write("var"), 0;
000614  000818  // Syntax: bus_Write(var);
000615  000819  // Usage : bus_Write(arg1);
000616  000820  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
000617  000821  //       : a settling delay of approx 50nsec, the BUS_WR pin is strobed
000618  000822  //       : LO for approx 50nsec then set back HI.
000619  000823  //       : The upper 8 bits of arg1 are ignored.
000620  000824  //       : NB:- the BUS_WR pin is automatically pre-set to an output to
000621  000825  //       : ensure BUS write integrity.
000622  000826  //       :
000623  000827  //       : BUS_0 is pin 27 of J1
000624  000828  //       : BUS_1 is pin 25 of J1
000625  000829  //       : BUS_2 is pin 23 of J1
000626  000830  //       : BUS_3 is pin 21 of J1
000627  000831  //       : BUS_4 is pin 19 of J1
000628  000832  //       : BUS_5 is pin 17 of J1
000629  000833  //       : BUS_6 is pin 13 of J2
000630  000834  //       : BUS_7 is pin 11 of J2
000631  000835        
000632  000836  func bus_Read(), 1;
000633  000837  // Syntax: bus_Read();
000634  000838  // Usage : arg1 := bus_Read();
000635  000839  // Notes : The BUS_RD pin set to LO, then, after a settling delay
000636  000840  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
000637  000841  //       : (the upper 8 bits being set to 0)
000638  000842  //       : the BUS_RD pin is then set back to a HI level.
000639  000843  //       : NB:- the BUS_RD pin is automatically pre-set to an output to
000640  000844  //       : ensure BUS write integrity.
000641  000845  //       :
000642  000846  //       : BUS_0 is pin 27 of J1
000643  000847  //       : BUS_1 is pin 25 of J1
000644  000848  //       : BUS_2 is pin 23 of J1
000645  000849  //       : BUS_3 is pin 21 of J1
000646  000850  //       : BUS_4 is pin 19 of J1
000647  000851  //       : BUS_5 is pin 17 of J1
000648  000852  //       : BUS_6 is pin 13 of J2
000649  000853  //       : BUS_7 is pin 11 of J2
000650  000854        
000651  000855        
000652  000856  //------------------------------------------------------------------//
000653  000857  //   Graphics Functions
000654  000858  //------------------------------------------------------------------//
000655  000859  func gfx_Set("mode", "value"), 0;            // set various graphics functions
000656  000860  // Syntax: gfx_Set(mode, value);
000657  000861  // Usage : gfx_Set(arg1, arg2);
000658  000862  // Notes : Sets various graphics parameters used by other functions
000659  000863  //       : This allows the features to be set programatically with a
000660  000864  //       : single function call.It is strongly recommended to use the
000661  000865  //       : pre-defined constants rather than the mode numbers.
000662  000866  //       : NB:- Although it is often required to be able to set graphics
000663  000867  //       : functions with a single function call for graphics engine
000664  000868  //       : related functions, there is a complete set of single parameter
000665  000869  //       : shortcut functions that have exactly the same function as
000666  000870  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
000667  000871  //       :
000668  000872  //       : mode = PEN_SIZE (mode 16)
000669  000873  //       : gfx_Set(PEN_SIZE, value);
000670  000874  //       : value = SOLID (value 0) rectangle and circle objects are solid
000671  000875  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
000672  000876  //       : Sets the mode of the Pen used by most graphics objects
000673  000877  //       :
000674  000878  //       : mode = BACKGROUND_COLOUR (mode 17)
000675  000879  //       : gfx_Set(BACKGROUND_COLOUR, value);
000676  000880  //       : value = 0 to 0xFFFF, Black to White
000677  000881  //       : Sets the Background colour of the screen
000678  000882  //       :
000679  000883  //       : mode = OBJECT_COLOUR (mode 18)
000680  000884  //       : gfx_Set(OBJECT_COLOUR, value);
000681  000885  //       : value = 0 to 0xFFFF, Black to White
000682  000886  //       : Sets the Object colour used in various functions
000683  000887  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
000684  000888  //       :
000685  000889  //       : mode = CLIPPING (mode 19)
000686  000890  //       : gfx_Set(CLIPPING, value);
000687  000891  //       : value = OFF (value 0) Clipping disabled
000688  000892  //       : value = ON (value 1) Clipping enabled
000689  000893  //       : Enables/Disables the Clipping feature
000690  000894  //       :
000691  000895  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
000692  000896  //       : gfx_Set(TRANSPARENT_COLOUR, value);
000693  000897  //       : value = 0 to 0xFFFF Black to White
000694  000898  //       : Sets Bitmap, Image or Animation Transparency Colour.
000695  000899  //       : NB not implemented
000696  000900  //       :
000697  000901  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
000698  000902  //       : gfx_Set(5, value);
000699  000903  //       : value = OFF (value 0) Transparency disabled
000700  000904  //       : value = ON (value 1) Transparency enabled
000701  000905  //       : Enables/Disables the Transparency feature
000702  000906  //       : NB not implemented
000703  000907  //       :
000704  000908  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
000705  000909  //       : gfx_Set(FRAME_DELAY, value);
000706  000910  //       : value = 0 to 65535 ms
000707  000911  //       : Sets the Video/Animation clip inter-frame delay. This setting will
000708  000912  //       : over-ride the embedded frame delay of the clip. After the event,
000709  000913  //       : the setting will auto disable and if further inter-frame delays need
000710  000914  //       : overriding the setting must be re-issued.
000711  000915  //       :
000712  000916  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
000713  000917  //       : gfx_Set(SCREEN_MODE, value);
000714  000918  //       : value = LANDSCAPE   (value 0)
000715  000919  //       : value = LANDSCAPE_R (value 1)
000716  000920  //       : value = PORTRAIT    (value 2)
000717  000921  //       : value = PORTRAIT_R  (value 3)
000718  000922  //       :
000719  000923  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
000720  000924  //       : gfx_Set(OUTLINE_COLOUR, value);
000721  000925  //       : value = 1 to 0xFFFF, if 0, featre is OFF
000722  000926  //       : Sets the filled Rectangle or Circle objects outline colour
000723  000927  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
000724  000928  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
000725  000929  //       :
000726  000930  //       : Only supports variable contrast for uOLED Modules
000727  000931  //       : mode = CONTRAST (mode 25) : Contrast
000728  000932  //       : gfx_Set(CONTRAST, value);
000729  000933  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
000730  000934  //       : when contrast=0, display is placed in low power mode.
000731  000935  //       : This function should be called with contrast=0 when
000732  000936  //       : powering down the module.
000733  000937  //       :
000734  000938  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
000735  000939  //       : gfx_Set(LINE_PATTERN, value);
000736  000940  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
000737  000941  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
000738  000942  //       : a value of 0 turns the feature off
000739  000943  //       :
000740  000944  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
000741  000945  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
000742  000946  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
000743  000947  //       : NB not implemented, default is COLOUR16
000744  000948  //       :
000745  000949  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
000746  000950  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
000747  000951  //       : sets the button and slider objects bevel width
000748  000952  //       :
000749  000953  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
000750  000954  //       : gfx_Set(BEVEL_SHADOW , 5);
000751  000955  //       : sets the button and slider objects darken and lighten depth for the bevel colour
000752  000956  //       :
000753  000957  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
000754  000958  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
000755  000959  //       : sets the origin of drawn objects to a position other than 0,0
000756  000960  //       :
000757  000961  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
000758  000962  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
000759  000963  //       : sets the origin of drawn objects to a position other than 0,0
000760  000964        
000761  000965        
000762  000966  func gfx_Cls(), 0;                    // clear the screen
000763  000967  // Syntax: gfx_Cls();
000764  000968  // Usage : gfx_Cls();
000765  000969  // Notes : Clears the screen with current background colour
000766  000970        
000767  000971  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
000768  000972  // Syntax: gfx_MoveTo(x, y);
000769  000973  // Usage : gfx_MoveTo(arg1, arg2);
000770  000974  // Notes : Moves the origin to a new x,y position
000771  000975        
000772  000976  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
000773  000977  // Syntax: gfx_MoveRel(x, y);
000774  000978  // Usage : gfx_MoveRel(arg1, arg2);
000775  000979  // Notes : Moves the origin to a new x,y position
000776  000980  //       : relative to the current origing
000777  000981        
000778  000982  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
000779  000983  // Syntax: gfx_LineTo(x1, y1);
000780  000984  // Usage : gfx_LineTo(arg1, arg2);
000781  000985  // Notes : Draws a Line from the origin x,y to x1,y1.
000782  000986  //       : The new origin is then set to x1, y1. Line colour needs
000783  000987  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000784  000988        
000785  000989  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
000786  000990  // Syntax: gfx_LineRel(x1, y1);
000787  000991  // Usage : gfx_LineRel(arg1, arg2);
000788  000992  // Notes : Draws a Line from the origin x,y to x1,y1.
000789  000993  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
000790  000994  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
000791  000995        
000792  000996  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
000793  000997  // Syntax: gfx_Line(x1, x2, y2, colr);
000794  000998  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
000795  000999  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
000796  001000        
000797  001001  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
000798  001002  // Syntax: gfx_Line(x1, x2, y, colr);
000799  001003  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000800  001004  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
000801  001005        
000802  001006  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
000803  001007  // Syntax: gfx_Line(y1, y2, x, colr);
000804  001008  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000805  001009  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
000806  001010        
000807  001011  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
000808  001012  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
000809  001013  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000810  001014  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
000811  001015  //       : bottom corner (x2,y2) on the screen.
000812  001016        
000813  001017  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
000814  001018  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
000815  001019  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000816  001020  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
000817  001021  //       : bottom corner (x2,y2) on the screen.
000818  001022        
000819  001023  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
000820  001024  // Syntax: gfx_Circle(x, y, rad, colr);
000821  001025  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000822  001026  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
000823  001027        
000824  001028  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
000825  001029  // Syntax: gfx_Circle(x, y, rad, colr);
000826  001030  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000827  001031  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
000828  001032        
000829  001033  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
000830  001034  // Syntax: gfx_PutPixel(x, y, colr);
000831  001035  // Usage : gfx_PutPixel(arg1, arg2, arg3);
000832  001036  // Notes : Plots a coloured pixel on the screen at x,y location
000833  001037        
000834  001038  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
000835  001039  // Syntax: gfx_GetPixel(x, y);
000836  001040  // Usage : var := gfx_GetPixel(arg1, arg2);
000837  001041  // Notes : Reads and returns the colour value of a pixel at location x,y
000838  001042        
000839  001043  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
000840  001044  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
000841  001045  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000842  001046  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000843  001047  //       : Vertices must be specified in an anti-clockwise fashion
000844  001048        
000845  001049  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
000846  001050  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
000847  001051  // Usage : gfx_OrbitInit(&arg1, &arg2);
000848  001052  // Notes : Sets up the Orbit function parameters.
000849  001053  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
000850  001054  //       : variables that get updated after calling gfx_Orbit(,,) function.
000851  001055  //       : The coordiantaes are calculated relative to the origin
000852  001056  //       : obtained by using the gfx_MoveTo(x, y) function.
000853  001057        
000854  001058  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
000855  001059  // Syntax: gfx_Orbit(angle, distance);
000856  001060  // Usage : gfx_Orbit(arg1, arg2);
000857  001061  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
000858  001062  //       : only known parameters are the angle and the distance from the current origin.
000859  001063        
000860  001064  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
000861  001065  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
000862  001066  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
000863  001067  // Notes : This function is very similar to the Ploygon function
000864  001068  //       : with the exception of the 1st and the last vertices not joined.
000865  001069        
000866  001070  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
000867  001071  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
000868  001072  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
000869  001073  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000870  001074  //       : Vertices must be minimum of 3 and can be specified in any fashion
000871  001075        
000872  001076  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
000873  001077  // Syntax: gfx_Dot();
000874  001078  // Usage : gfx_Dot();
000875  001079  // Notes : Places a coloured dot at the origin
000876  001080        
000877  001081        
000878  001082  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
000879  001083  // Syntax: gfx_Bullet();
000880  001084  // Usage : gfx_Bullet();
000881  001085  // Notes : Places a coloured circle at the origin
000882  001086  //       : filled or unfilled state is controlled by PenSize
000883  001087        
000884  001088  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
000885  001089  // Syntax: gfx_IncX();
000886  001090  // Usage : var := gfx_IncX();
000887  001091  // Notes : Increments the x coordinate of the origin
000888  001092        
000889  001093  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
000890  001094  // Syntax: gfx_IncY();
000891  001095  // Usage : var := gfx_IncY();
000892  001096  // Notes : Increments the y coordinate of the origin
000893  001097        
000894  001098  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
000895  001099  // Syntax: gfx_BoxTo(x1, y1);
000896  001100  // Usage : gfx_BoxTo(arg1, arg2);
000897  001101  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
000898  001102  //       : The new origin is then set to x1,y1. Rectangle colour needs
000899  001103  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000900  001104  //       : and the PenSize setting determines if Box is solid or outline.
000901  001105        
000902  001106  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
000903  001107  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
000904  001108  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
000905  001109  // Notes : Specifies a clipping window region on the screen such that any objects
000906  001110  //       : and text placed onto the screen will be clipped and displayed only
000907  001111  //       : within that region. For the clipping window to take effect, "Clipping"
000908  001112  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
000909  001113        
000910  001114        
000911  001115  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
000912  001116  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
000913  001117  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
000914  001118  // *Notes:
000915  001119        
000916  001120  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
000917  001121  // Syntax: gfx_SetClipRegion();
000918  001122  // Usage : var := gfx_SetClipRegion();
000919  001123  // *Notes:
000920  001124        
000921  001125  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
000922  001126  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
000923  001127  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
000924  001128  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000925  001129  //       : with xradius = xrad and yradius = yrad.
000926  001130  //       : if PenSize = 0 Ellipse is Solid
000927  001131  //       : if PenSize = 1 Ellipse is Outline
000928  001132        
000929  001133        
000930  001134  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
000931  001135  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
000932  001136  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
000933  001137  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000934  001138  //       : with xradius = xrad and yradius = yrad.
000935  001139        
000936  001140  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 0;
000937  001141  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
000938  001142  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
000939  001143  // Notes : Draws a 3 dimensional Text Button at screen location defined by
000940  001144  //       : x,y arguments (top left corner). The size of the button depends on
000941  001145  //       : the font, width, height and length of the text.
000942  001146  //       : The button appearance will depend on the state parameter setting:
000943  001147  //       :         state = 0 : Button Pressed
000944  001148  //       :         state = 1 : Button Raised
000945  001149        
000946  001150  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
000947  001151  // Syntax: gfx_Panel("style", "x", "y", "width", "height", "colour"), 0;
000948  001152  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
000949  001153  // Notes : Draws a panel (groupbox) at screen location defined by
000950  001154  //       : x, y, width and height with colour "colour".
000951  001155  //       :         state = 0 : recessed
000952  001156  //       :         state = 1 : raised
000953  001157        
000954  001158  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
000955  001159  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
000956  001160  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
000957  001161  // Notes : Draws a 3 dimensional Slider Bar on the screen.
000958  001162  //       : Slider parameters are as follows:
000959  001163  //       :         mode = 0 : Slider recessed
000960  001164  //       :         mode = 1 : Slider raised
000961  001165  //       :         x1, y1 = top left corner
000962  001166  //       :         x2, y2 = bottom right corner
000963  001167  //       :         scale = n : sets the full scale range from 0 to n
000964  001168  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
000965  001169  //       : returns:-
000966  001170        
000967  001171        
000968  001172  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
000969  001173  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
000970  001174  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
000971  001175  // Notes : Copies an area of a screen from xs,ys of size given by width and height
000972  001176  //       : and pastes it to another location determined by xd, yd.
000973  001177        
000974  001178  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
000975  001179  // Syntax: gfx_RGBto565(red, green, blue);
000976  001180  // Usage : gfx_RGBto565(arg1, arg2, arg3);
000977  001181  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
000978  001182        
000979  001183  func gfx_332to565("COLOUR8BIT"), 1;
000980  001184  // Syntax: gfx_332to565(colour);
000981  001185  // Usage : gfx_332to565(arg);
000982  001186  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
000983  001187        
000984  001188  func gfx_Selection("index", "backcolor", "textcolor"), 0;
000985  001189  // Syntax: gfx_Selection("index", "backcolor", "textcolor"), 0;
000986  001190  // Usage : gfx_Selection(1, RED, YELLOW);
000987  001191  // Notes : Called prior to drawing a button, this function
000988  001192  //       : hilites the required text line on a multiline button.
000989  001193        
000990  001194  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
000991  001195  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
000992  001196  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000993  001197  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000994  001198  //       : Vertices must be specified in an anti-clockwise fashion
000995  001199        
000996  001200        
000997  001201  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
000998  001202  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
000999  001203  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001000  001204  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001001  001205  //       : Vertices must be minimum of 3 and can be specified in any fashion
001002  001206        
001003  001207        
001004  001208  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001005  001209  // Syntax: gfx_Offset(x, y);
001006  001210  // Usage : gfx_Offset(arg1, arg2);
001007  001211  // Notes : Set the screen offset
001008  001212        
001009  001213        
001010  001214        
001011  001215  func gfx_Get("mode"), 1;
001012  001216  // Syntax: gfx_Get(mode);
001013  001217  // Usage : arg1 := gfx_Get(arg);
001014  001218  // Notes : Returns various parameters to caller
001015  001219  //       :
001016  001220  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001017  001221  //       : var := gfx_Get(X_MAX);
001018  001222  //       : Returns the maximum horizontal value of the display
001019  001223  //       :
001020  001224  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001021  001225  //       : var := gfx_Get(Y_MAX);
001022  001226  //       : Returns the maximum vertical value of the display
001023  001227  //       :
001024  001228  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001025  001229  //       : var := gfx_Get(LEFT_POS);
001026  001230  //       : Returns the left location of the last drawn object
001027  001231  //       : such as a slider or button or an image/video
001028  001232  //       :
001029  001233  //       : mode = TOP_POS (mode 3) : Top location of Object
001030  001234  //       : var := gfx_Get(TOP_POS);
001031  001235  //       : Returns the top location of the last drawn object
001032  001236  //       : such as a slider or button or an image/video
001033  001237  //       :
001034  001238  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001035  001239  //       : var := gfx_Get(RIGHT_POS);
001036  001240  //       : Returns the right location of the last drawn object
001037  001241  //       : such as a slider or button or an image/video
001038  001242  //       :
001039  001243  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001040  001244  //       : var := gfx_Get(BOTTOM_POS );
001041  001245  //       : Returns the bottom location of the last drawn object
001042  001246  //       : such as a slider or button or an image/video
001043  001247  //       :
001044  001248        
001045  001249        
001046  001250  //==================================================//
001047  001251  // Single parameter short-cuts                      //
001048  001252  // for the gfx_Set functions                        //
001049  001253  // These functions return the existing value before //
001050  001254  // the change is made.                              //
001051  001255  //==================================================//
001052  001256  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001053  001257  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001054  001258  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001055  001259  func gfx_Clipping("mode"), 0;                       // 3  graphics clipping ON/OFF
001056  001260  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001057  001261  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001058  001262  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001059  001263  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001060  001264  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001061  001265  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001062  001266  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001063  001267  func gfx_ColourMode("mode"), 1;                     // 11 graphics colour mode COLOUR8 or COLOUR16 (default colour 16)
001064  001268  func gfx_BevelWidth("mode"), 1;                     // 12 graphics button bevel width
001065  001269  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001066  001270  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001067  001271  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001068  001272        
001069  001273        
001070  001274  //==================================================//
001071  001275  // uSD/FLASH Function Prototypes                    //
001072  001276  //==================================================//
001073  001277  func media_Video("x", "y"), 0;                      // display movie at position x y
001074  001278  // Syntax: media_Video(x, y);
001075  001279  // Usage : media_Video(arg1, arg2);
001076  001280  // Notes : Play a Video/Animation clip from the uSD card at screen location
001077  001281  //       : specified by x,y (top left corner). The location of the clip in the
001078  001282  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001079  001283        
001080  001284  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001081  001285  // Syntax: media_VideoFrame(Frame_number);
001082  001286  // Usage : arg1 := media_VideoFrame();
001083  001287  // Notes : After a pointer to a valid video has been set with media_SetSector,
001084  001288  //       : calling this function shows each fram sequentially, returning
001085  001289  //       : the number of frames remaining. The position of the image is
001086  001290  //     : at the current origin as set with gfx_MoveTo(...);
001087  001291        
001088  001292  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001089  001293  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001090  001294  // Usage : media_SetAdd(arg1, arg2);
001091  001295  // Notes : Set uSD internal Address pointer for bytewise access
001092  001296        
001093  001297  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001094  001298  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001095  001299  // Usage : media_SetSector(arg1, arg2);
001096  001300  // Notes : Set uSD internal Sector pointer for sector block access
001097  001301        
001098  001302  func media_RdSector("*destination"), 1;
001099  001303  // Syntax: media_RdSector(*destination);
001100  001304  // Usage : media_RdSector(rdblock);
001101  001305  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001102  001306  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001103  001307  //       : After the read the Sector pointer is automatically incremented by 1.
001104  001308  //       : Returns TRUE if uSD response was TRUE
001105  001309        
001106  001310  func media_WrSector("*source"), 1;
001107  001311  // Syntax: media_WrSector(*source);
001108  001312  // Usage : media_WrSector(wrblock);
001109  001313  // Notes : Writes 512 bytes (256 words) from a source memory block
001110  001314  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001111  001315  //       : pointer is automatically incremented by 1.
001112  001316  //       : Returns TRUE if uSD response was TRUE
001113  001317        
001114  001318  func media_ReadByte(), 1;                // read a byte at the current stream position
001115  001319  // Syntax: media_RdByte();
001116  001320  // Usage : var := media_RdByte();
001117  001321  // Notes : Reads and Returns a single byte of data from the
001118  001322  //       : uSD card pointed to by the internal Address pointer.
001119  001323  //       : After the read the Address pointer is automatically
001120  001324  //       : incremented by 1.
001121  001325        
001122  001326  func media_ReadWord(), 1;                // read a word at the current stream position
001123  001327  // Syntax: media_ReadWord();
001124  001328  // Usage : var := media_ReadWord();
001125  001329  // *Notes : Reads and Returns a single word of data from the
001126  001330  //       : uSD card pointed to by the internal Address pointer.
001127  001331  //       : After the read the Address pointer is automatically
001128  001332  //       : incremented by 2.
001129  001333        
001130  001334  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
001131  001335  // Syntax: media_WriteByte(arg1);
001132  001336  // Usage : var := media_WriteByte(arg1);
001133  001337  // *Notes : Writes and Returns xxxxx
001134  001338  //       : After the write the Address pointer is automatically
001135  001339  //       : incremented by 1.
001136  001340        
001137  001341  func media_WriteWord("word"), 1;            // write a word to the current stream position
001138  001342  // Syntax: media_WriteWord(arg1);
001139  001343  // Usage : var := media_WriteWord(arg1);
001140  001344  // *Notes : Writes and Returns xxxxx
001141  001345  //       : After the write the Address pointer is automatically
001142  001346  //       : incremented by 2.
001143  001347        
001144  001348  func media_Image("x", "y"), 0;            // display image at position x y
001145  001349  // Syntax: media_Image(x, y);
001146  001350  // Usage : media_Image(arg1, arg2);
001147  001351  // Notes : Display an image from the uSD card at screen location
001148  001352  //       : specified by x,y (top left corner). The location of the
001149  001353  //       : Image in the uSD card must be specified by
001150  001354  //       : media_setSector(Image_Sector_Add) function.
001151  001355        
001152  001356  func media_Flush(), 1;                    // after writing to media, flush the sector and write
001153  001357  // Syntax: media_Flush();
001154  001358  // Usage : var := media_Flush();
001155  001359  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
001156  001360  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
001157  001361        
001158  001362  func media_Init(), 1;                    // initialize uSD card
001159  001363  // Usage : media_Init();
001160  001364  // Notes : Initialise uSD CARD
001161  001365  //       : Response: 0 = No Card
001162  001366  //       :           1 = Card Initialised
001163  001367        
001164  001368        
001165  001369  //==============================================//
001166  001370  // Communications Function Prototypes           //
001167  001371  //==============================================//
001168  001372  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
001169  001373  // Syntax: com_Init(buffer, bufsize, qualifier);
001170  001374  // Usage1: com_Init(mybuf, 20, 0);
001171  001375  // Usage2: com_Init(mybuf, 20, ':');
001172  001376  // Notes : initialize a serial capture buffer for the comms input
001173  001377  //       : The program must declare a var array as a circular buffer.
001174  001378  //       : Usage1 declares a circular buffer which will continually
001175  001379  //       : buffer characters.
001176  001380  //       : Usage2 must receive ':' before any characters will
001177  001381  //       : accumulate in the buffer.
001178  001382        
001179  001383  func com_Reset(), 0;                 // reset the comms receiver
001180  001384  // Syntax: com_Reset();
001181  001385  // Usage : com_Reset();
001182  001386  // Notes : reset comms to default polled mode
001183  001387        
001184  001388  func com_Count(), 1;                // return count of characters in receive buffer
001185  001389  // Syntax: com_Count();
001186  001390  // Usage : arg := com_Count();
001187  001391  // Notes : return count of buffered characters in buffer attachment
001188  001392        
001189  001393  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
001190  001394  // Syntax: com_Full();
001191  001395  // Usage : if (com_Full() ,,,, go read buffer;
001192  001396  // Notes : return true if buffer full (not necessarily an error if
001193  001397  //       : buffer is sized to a packet size)
001194  001398        
001195  001399  func com_Error(), 1;                // return comms errors comms error occurred
001196  001400  // Syntax: com_Error();
001197  001401  // Usage : if (com_Error() ) ...... take recovery action;
001198  001402  // Notes : return non zero if any errors low level comms errors occured
001199  001403  // returns :
001200  001404  // bit0 = Receiver Overflow Error
001201  001405  // bit1 = Receiver Framing Error
001202  001406  // bit2 = Transmit Buffer Overflow
001203  001407        
001204  001408  func com_Sync(), 1;                // returns TRUE if qualifier has been received
001205  001409  // Syntax: com_Sync();
001206  001410  // Usage : com_Sync();
001207  001411  // return true if sync character has been received in com_Init("...") mode
001208  001412        
001209  001413        
001210  001414  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001211  001415  // Syntax: com_TXbuffer("buf", "bufsize", "pin");
001212  001416  // Usage : com_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001213  001417  // Usage : com_TXbuffer(0, 0, 0);              // revert to non buffered service
001214  001418  // Notes : initialize a serial buffer for the COM0 output.
001215  001419  //       : The program must declare a var array as a circular buffer.
001216  001420  //       : When a TX buffer is declared for comms, the transmission
001217  001421  //       : of characters becomes non blocking. The only time
001218  001422  //       : blocking will occur is if the buffer has insufficient space
001219  001423  //       : to accept the next character, in which case the function
001220  001424  //       : will wait for buffer space to become available. If the
001221  001425  //       : TX buffer is no longer required, just set the buffer pointer
001222  001426  //       : to zero, the size in this case doesnt matter and is ignored.
001223  001427  //       : The function can resize or reallocated to another buffer at
001224  001428  //       : any time. The buffer is flushed before any changes are made.
001225  001429  //       : "pin" designates an IO pin to control a bi-directional 
001226  001430  //       : control device for half duplex mode. "pin" will go HI at the
001227  001431  //       : start of a transmission, and will return low after the final
001228  001432  //       : byte is transmitted. If not required, just set "pin" to zero.
001229  001433        
001230  001434        
001231  001435  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
001232  001436  // Syntax: com_TXcount();
001233  001437  // Usage : arg := com_Count();
001234  001438  // Notes : return count of characters remaining in COM0 transmit buffer
001235  001439  //       : that was previously allocated with com_TXbuffer(...);
001236  001440        
001237  001441        
001238  001442  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
001239  001443  // Syntax: com_TXemptyEvent(function);
001240  001444  // Usage : arg := com_TXemptyEvent();
001241  001445  // Notes : If a comms TX buffer that was previously allocated with
001242  001446  //       : com_TXbuffer(...);, this function can be used to set up
001243  001447  //       : a function to be called when the COM0 TX buffer is empty.
001244  001448  //       : This is useful for either reloading the TX buffer, setting
001245  001449  //       : or clearing a pin to change the direction of eg a RS485
001246  001450  //       : line driver, or any other form of traffic control.
001247  001451  //       : The event function must not have any parameters.
001248  001452  //       : To disable the event, simply call com_TXemptyEvent(0).
001249  001453  //       : com_TXbuffer(...); also resets any active event.
001250  001454  //       : com_TXemptyEvent returns any previous event function
001251  001455  //       : address, or zero if there was no previous function.
001252  001456        
001253  001457        
001254  001458  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
001255  001459  // Usage : arg := com_TXbufferHold(ON);  // hold the buffer while we fill it
001256  001460  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
001257  001461  // Notes : Expecting that a comms TX buffer that was previously allocated with
001258  001462  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
001259  001463  //       : the buffer being sent wile it is being loaded. Mormally, when
001260  001464  //       : using buffered comms, the transmit process will begin
001261  001465  //       : immediately. This is often undesirable for 2 reasons,
001262  001466  //       : 1] you may wish to build a packet then send it later
001263  001467  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001264  001468  //       : as the FIFO buffer is constantly trying to empty while
001265  001469  //       : you are busy tring to fill it.
001266  001470  // return -1 if function is called illegally when TX comms is not buffered.
001267  001471  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
001268  001472  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
001269  001473        
001270  001474        
001271  001475  //=============================================================//
001272  001476  // Auxilliary Communications Function Prototypes
001273  001477  //=============================================================//
001274  001478  func com1_Init("buffer", "bufsize", "qualifier"), 0;
001275  001479  // Syntax: com_Init(buffer, bufsize, qualifier);
001276  001480  // Usage1: com_Init(mybuf, 20, 0);
001277  001481  // Usage2: com_Init(mybuf, 20, ':');
001278  001482  // Notes : initialize a serial capture buffer for the comms input
001279  001483  //       : The program must declare a var array as a circular buffer.
001280  001484  //       : Usage1 declares a circular buffer which will continually
001281  001485  //       : buffer characters.
001282  001486  //       : Usage2 must receive ':' before any characters will
001283  001487  //       : accumulate in the buffer.
001284  001488        
001285  001489  func com1_Reset(), 0;
001286  001490  // Syntax: com_Reset();
001287  001491  // Usage : com_Reset();
001288  001492  // Notes : reset comms receiver to default polled mode
001289  001493        
001290  001494  func com1_Count(), 1;
001291  001495  // Syntax: com_Count();
001292  001496  // Usage : arg := com_Count();
001293  001497  // Notes : return count of characters in receive buffer
001294  001498        
001295  001499  func com1_Full(), 1;
001296  001500  // Syntax: com_Full();
001297  001501  // Usage : if (com_Full() ,,,, go read buffer;
001298  001502  // Notes : return true if receive buffer full
001299  001503        
001300  001504  func com1_Error(), 1;
001301  001505  // Syntax: com_Error();
001302  001506  // Usage : if (com_Error() ) ...... take recovery action;
001303  001507  // Notes : return non zero if any level comms errors occured
001304  001508  // returns :
001305  001509  // bit0 = Receiver Overflow Error
001306  001510  // bit1 = Receiver Framing Error
001307  001511  // bit2 = Transmit Buffer Overflow
001308  001512        
001309  001513  func com1_Sync(), 1;
001310  001514  // Syntax: com_Sync();
001311  001515  // Usage : com_Sync();
001312  001516  // Notes : return true if sync character has been received in com_Init("...") mode
001313  001517        
001314  001518        
001315  001519  func com1_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001316  001520  // Syntax: com1_TXbuffer("buf", "bufsize", "pin");
001317  001521  // Usage : com1_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001318  001522  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
001319  001523  // Notes : initialize a serial buffer for the COM1 output.
001320  001524  //       : The program must declare a var array as a circular buffer.
001321  001525  //       : When a TX buffer is declared for comms, the transmission
001322  001526  //       : of characters becomes non blocking. The only time
001323  001527  //       : blocking will occur is if the buffer has insufficient space
001324  001528  //       : to accept the next character, in which case the function
001325  001529  //       : will wait for buffer space to become available. If the
001326  001530  //       : TX buffer is no longer required, just set the buffer pointer
001327  001531  //       : to zero, the size in this case doesnt matter and is ignored.
001328  001532  //       : The function can resize or reallocated to another buffer at
001329  001533  //       : any time. The buffer is flushed before any changes are made.
001330  001534  //       : "pin" designates an IO pin to control a bi-directional 
001331  001535  //       : control device for half duplex mode. "pin" will go HI at the
001332  001536  //       : start of a transmission, and will return low after the final
001333  001537  //       : byte is transmitted. If not required, just set "pin" to zero.
001334  001538        
001335  001539        
001336  001540  func com1_TXcount(), 1;                // return count of characters in COM1 TX buffer
001337  001541  // Syntax: com1_TXcount();
001338  001542  // Usage : arg := com1_Count();
001339  001543  // Notes : return count of characters remaining in COM1 transmit buffer
001340  001544  //       : that was previously allocated with com1_TXbuffer(...);
001341  001545        
001342  001546        
001343  001547  func com1_TXemptyEvent("function"), 1;  // sets a function to be called when COM1 TX buffer empty
001344  001548  // Syntax: com1_TXemptyEvent(function);
001345  001549  // Usage : arg := com1_TXemptyEvent();
001346  001550  // Notes : If a comms TX buffer that was previously allocated with
001347  001551  //       : com1_TXbuffer(...);, this function can be used to set up
001348  001552  //       : a function to be called when the COM1 TX buffer is empty.
001349  001553  //       : This is useful for either reloading the TX buffer, setting
001350  001554  //       : or clearing a pin to change the direction of eg a RS485
001351  001555  //       : line driver, or any other form of traffic control.
001352  001556  //       : The event function must not have any parameters.
001353  001557  //       : To disable the event, simply call com1_TXemptyEvent(0).
001354  001558  //       : com1_TXbuffer(...); also resets any active event.
001355  001559  //       : com1_TXemptyEvent returns any previous event function
001356  001560  //       : address, or zero if there was no previous function.
001357  001561        
001358  001562        
001359  001563  func com1_TXbufferHold("state"), 1; // hold or release a com1_TXbuffer
001360  001564  // Usage : arg := com1_TXbufferHold(ON);  // hold the buffer while we fill it
001361  001565  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
001362  001566  // Notes : Expecting that a comms TX buffer that was previously allocated with
001363  001567  //       : com1_TXbuffer(...);, com1_TXbufferHold(ON) can be used to stop
001364  001568  //       : the buffer being sent wile it is being loaded. Mormally, when
001365  001569  //       : using buffered comms, the transmit process will begin
001366  001570  //       : immediately. This is often undesirable for 2 reasons,
001367  001571  //       : 1] you may wish to build a packet then send it later
001368  001572  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001369  001573  //       : as the FIFO buffer is constantly trying to empty while
001370  001574  //       : you are busy tring to fill it.
001371  001575  // return -1 if function is called illegally when TX comms is not buffered.
001372  001576  // return buffer count when called with argument of 1, eg com1_TXbufferHold(ON)
001373  001577  // return 0 when argument is zero, eg com1_TXbufferHold(OFF)
001374  001578        
001375  001579  func serin1(), 1;
001376  001580  // Syntax: serin1();
001377  001581  // Usage : char := serin1();
001378  001582  // Notes : return the next available character from COM1
001379  001583        
001380  001584  func serout1("char"), 0;
001381  001585  // Syntax: serout1("char");
001382  001586  // Usage : serout1(ch);
001383  001587  // Notes : send character to COM1
001384  001588        
001385  001589  func com_SetBaud("comport","baudrate/10"), 1;
001386  001590  // Syntax: com_SetBaud("comport","baudrate/10");
001387  001591  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
001388  001592  // Notes : sets to any viable baud rate from 160 to 655350
001389  001593  // return true if baud rate was acceptable
001390  001594        
001391  001595        
001392  001596        
001393  001597  //==============================================//
001394  001598  // Display Access                               //
001395  001599  //==============================================//
001396  001600  func disp_Init(), 0;                            // initialize display with required tables
001397  001601  // Syntax: disp_Init();
001398  001602  // Usage : disp_Init();
001399  001603  // Notes : Initialises or reinitialises the display.
001400  001604  //       : Normally used after restoration of peripheral power
001401  001605  //       : and after DeepSleep.
001402  001606        
001403  001607  func disp_SetReg("register", "data"), 0;
001404  001608  // Syntax: display_SetReg(register, data);
001405  001609  // Usage : display_SetReg(arg1, arg2);
001406  001610  // Notes : Sets uLCD specific display driver registers. Refer
001407  001611  //       : to appropriate display driver data sheet.
001408  001612        
001409  001613  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
001410  001614  // Syntax: disp_setGRAM(x1, y1, x2, y2);
001411  001615  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
001412  001616  // Notes : Prepares the GRAM area for user access.
001413  001617  //       : Data can now be written with disp_GRAM.
001414  001618  //       : GRAM will be set accordingly for the correct screen mode.
001415  001619  //       : the LO word of the 32 bit pixel count is returned. This is
001416  001620  //       : usually all that is needed unlse GRAM area exceeds 256^2
001417  001621  //       : A copy of the 32bit value can be found in
001418  001622  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
001419  001623        
001420  001624  func disp_WrGRAM("colour"), 0;
001421  001625  // Syntax: display_WrGRAM(colour);
001422  001626  // Usage : display_WrGRAM(arg);
001423  001627  // Notes : Data can be written to the GRAM consecutively using
001424  001628  //       : this function once the GRAM access window has been setup.
001425  001629        
001426  001630  func disp_WriteControl("value"), 0;             // write a control byte to the display
001427  001631  func disp_WriteWord("value"), 0;                // write a word to the display
001428  001632        
001429  001633        
001430  001634  func disp_ReadWord(), 1;                        // read a word from the display
001431  001635  // Syntax: disp_ReadWord();
001432  001636  // Usage : x:=disp_ReadWord();
001433  001637  // Notes : Read a word from the controller
001434  001638  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
001435  001639  //       : print(disp_ReadWord());        // print ID
001436  001640  //       : (Many displays are write only)
001437  001641        
001438  001642                                                  //
001439  001643  //==============================================//
001440  001644  // unadorned SPI functions                      //
001441  001645  //==============================================//
001442  001646  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
001443  001647  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
001444  001648  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
001445  001649  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
001446  001650                                                  //
001447  001651  //==============================================//
001448  001652  // flash device specific functions              //
001449  001653  //==============================================//
001450  001654  func flash_SIG(), 1;                            // read Jedecsignature from SPI Flash device
001451  001655  func flash_ID(), 1;                             // read ID code from FLASH device
001452  001656  func flash_BulkErase(), 0;                      // erase the entire FLASH device
001453  001657  func flash_BlockErase("block"), 1;              // erase the required 64k flash block
001454  001658                                                  //
001455  001659                                                  //
001456  001660  //==============================================//
001457  001661  // string and character size function           //
001458  001662  //==============================================//
001459  001663  func charwidth("char"), 1;                      // return width of a character in pixel units
001460  001664  func charheight("char"), 1;                     // return height of a character in pixel units
001461  001665  func strwidth("pointer"), 1;                    // return width of a string in pixel units
001462  001666  func strheight(), 1;                            // return height of a string in pixel units
001463  001667        
001464  001668        
001465  001669  //------------------------------------------------------------------//
001466  001670  //        I2C Function Prototypes
001467  001671  //------------------------------------------------------------------//
001468  001672  func I2C_Open("speed"), 0;
001469  001673  // Syntax: I2C_Open(speed),
001470  001674  // Usage : I2C_Open(I2C_MED);
001471  001675  // Notes : configures the I2C module
001472  001676  //       : speed can be I2C_SLOW, I2C_MED, I2C_FAST (100khz, 400khz, 1mhz)
001473  001677        
001474  001678  func I2C_Close(), 0;
001475  001679  // Syntax: I2C_Close();
001476  001680  // Usage : I2C_Close();
001477  001681  // Notes : disables the I2C1 module.
001478  001682        
001479  001683  func I2C_Start(), 1;
001480  001684  // Syntax: I2C_Start();
001481  001685  // Usage : I2C_Start();
001482  001686  // Notes : generates a Start condition.
001483  001687  //       : returns true if successful (usually ignored)
001484  001688        
001485  001689  func I2C_Stop(), 1;
001486  001690  // Syntax: I2C_Stop();
001487  001691  // Usage : I2C_Stop();
001488  001692  // Notes : generates a Stop condition.
001489  001693  //       : returns true if successful (usually ignored)
001490  001694        
001491  001695  func I2C_Restart(), 1;
001492  001696  // Syntax: I2C_Restart();
001493  001697  // Usage : I2C_Restart();
001494  001698  // Notes : generates a Restart condition.
001495  001699  //       : returns true if successful (usually ignored)
001496  001700        
001497  001701  func I2C_Read(), 1;
001498  001702  // Syntax: I2C_Read();
001499  001703  // Usage : ch := I2C_Read();
001500  001704  // Notes : reads a single byte from the I2C Bus.
001501  001705        
001502  001706  func I2C_Write("byte"), 1;
001503  001707  // Syntax: I2C_Write(byte);
001504  001708  // Usage : r := I2C_Write(ch);
001505  001709  // Notes : is used to write a byte to the I2C bus.
001506  001710  //       : Returns 0 if failed, 1 if no ack, 2 if ack
001507  001711        
001508  001712  func I2C_Ack(), 0;
001509  001713  // Syntax: I2C_Ack();
001510  001714  // Usage : I2C_Ack();
001511  001715  // Notes : generates the acknowledge condition.
001512  001716        
001513  001717  func I2C_Nack(), 0;
001514  001718  // Syntax: I2C_Nack();
001515  001719  // Usage : I2C_Nack();
001516  001720  // Notes : generates the negative acknowledge condition.
001517  001721        
001518  001722  func I2C_AckStatus(), 0;
001519  001723  // Syntax: I2C_AckStatus();
001520  001724  // Usage : r := I2C_AckStatus();
001521  001725  // Notes : returns the ACK status from the device.
001522  001726        
001523  001727  func I2C_AckPoll("control"), 1;
001524  001728  // Syntax: I2C_AckPoll();
001525  001729  // Usage : r := I2C_AckPoll(0xA0);
001526  001730  // Notes : waits for a device to return from ACK polling.
001527  001731        
001528  001732  func I2C_Idle(), 0;
001529  001733  // Syntax: I2C_Idle();
001530  001734  // Usage : I2C_Idle();
001531  001735  // Notes : waits until the I2C Bus is Inactive.
001532  001736        
001533  001737  func I2C_Gets("buffer", "size"), 1;
001534  001738  // Syntax: I2C_Gets("buffer", "size");
001535  001739  // Usage : r := I2C_Gets(mybuf, 16);
001536  001740  // Notes : only reads up to "size" characters into "buffer"
001537  001741  //       : Reads up to asciiz terminator including terminator
001538  001742        
001539  001743  func I2C_Getn("buffer", "size"), 1;
001540  001744  // Syntax: I2C_Gets("buffer", "size");
001541  001745  // Usage : r := I2C_Gets(mybuf, 16);
001542  001746  // Notes : reads "size" bytes into "buffer"
001543  001747  //       :
001544  001748        
001545  001749  func I2C_Puts("buffer"), 1;
001546  001750  // Syntax: I2C_Puts("buffer");
001547  001751  // Usage : r := I2C_Puts(mybuf);
001548  001752  // Notes : writes an asciiz string to the I2C device
001549  001753  //       : returns count of characters written
001550  001754        
001551  001755  func I2C_Putn("buffer", "count"), 1;
001552  001756  // Syntax: I2C_Putn("buffer","count");
001553  001757  // Usage : r := I2C_Puts(mybuf,10);
001554  001758  // Notes : writes up to "size" bytes to the I2C device
001555  001759  //       : returns number of bytes written
001556  001760        
001557  001761        
001558  001762  //------------------------------------------------------------------//
001559  001763  //        Image Control Function Prototypes
001560  001764  //------------------------------------------------------------------//
001561  001765  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
001562  001766  // Syntax: img_SetPosition(handle, index, xpos, ypos);
001563  001767  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
001564  001768  // Notes : set the position where the image will be displayed
001565  001769  //       : returns true if index was ok and function was successful.
001566  001770  //       : you may turn off an image so when img_Refresh is called,
001567  001771  //       : the image will not be shown
001568  001772        
001569  001773  func img_Enable("handle", "index"), 1;
001570  001774  // Syntax: img_Enable(handle, index);
001571  001775  // Usage : r := img_Enable(hImageList, imagenum);
001572  001776  // Notes : enable image in a image list
001573  001777  //       : returns true if index was ok and function was successful.
001574  001778  //       : this is the default state so when img_Refresh is called,
001575  001779  //       : all the images in the list will be shown
001576  001780  //       : if index is set to -1, all of the images are enabled
001577  001781        
001578  001782  func img_Disable("handle", "index"), 1;
001579  001783  // Syntax: img_Disable(handle, index);
001580  001784  // Usage : r := img_Disable(hImageList, imagenum);
001581  001785  // Notes : disable image in a image list
001582  001786  //       : returns true if index was ok and function was successful.
001583  001787  //       : you must turn off an image so when img_Refresh is called,
001584  001788  //       : the image will not be shown.
001585  001789  //       : if index is set to -1, all of the images are disabled
001586  001790        
001587  001791        
001588  001792  func img_Darken("handle", "index"), 1;
001589  001793  // Syntax: img_Darken(handle, index);
001590  001794  // Usage : r := img_Darken(hImageList, imagenum);
001591  001795  // Notes : darken image in a image list
001592  001796  //       : returns true if index was ok and function was successful.
001593  001797  //       : if index is set to -1, all of the images are darkened
001594  001798  //       : NB:- this feature will only work for the next refresh, then
001595  001799  //       : the image reverts back to normal when displayed again.
001596  001800        
001597  001801        
001598  001802  func img_Lighten("handle", "index"), 1;
001599  001803  // Syntax: img_Lighten(handle, index);
001600  001804  // Usage : r := img_Lighten(hImageList, imagenum);
001601  001805  // Notes : lighten image in a image list
001602  001806  //       : returns true if index was ok and function was successful.
001603  001807  //       : if index is set to -1, all of the images are lightened
001604  001808  //       : NB:- this feature will only work for the next refresh, then
001605  001809  //       : the image reverts back to normal when displayed again.
001606  001810        
001607  001811  func img_SetWord("handle", "index", "offset", "word"), 1;
001608  001812  // Syntax: img_SetWord(handle, index, offset, word);
001609  001813  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
001610  001814  // Notes : set specified word (0-7) in a image entry
001611  001815  //       : returns TRUE if successful, return value usually ignored.
001612  001816        
001613  001817  func img_GetWord("handle", "index", "offset"), 1;
001614  001818  // Syntax: myvar := img_GetWord("handle", "index", "offset");
001615  001819  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
001616  001820  // Notes : returns specified word (0-14) from an image entry
001617  001821  //       : refer to image control entry offsets.
001618  001822        
001619  001823  func img_Show("handle", "index"), 1;
001620  001824  // Syntax: img_Show(handle, index);
001621  001825  // Usage : display image entry (regardless of enable/disable)
001622  001826  //       : returns TRUE if successful, return value usually ignored.
001623  001827        
001624  001828  func img_SetAttributes("handle", "index","value"), 1;
001625  001829  // Syntax: img_SetAttributes("handle", "index","offset");
001626  001830  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
001627  001831  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
001628  001832  //       : of an image control entry. "value" refers to various bits in
001629  001833  //       : the image control entry (see image attribute flags).
001630  001834  //       : A '1' bit in the "value" field SETS the respective bit
001631  001835  //       : in the IMAGE_FLAGS field of the image control entry.
001632  001836  //       : returns TRUE if successful, return value usually ignored.
001633  001837        
001634  001838  func img_ClearAttributes("handle", "index","value"), 1;
001635  001839  // Syntax: img_ClearAttributes("handle", "index","offset");
001636  001840  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
001637  001841  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
001638  001842  //       : of an image control entry. "value" refers to various bits in
001639  001843  //       : the image control entry (see image attribute flags)
001640  001844  //       : a '1' bit in the "value" field CLEARS the respective bit
001641  001845  //       : in the IMAGE_FLAGS field of the image control entry.
001642  001846  //       : returns TRUE if successful, return value usually ignored.
001643  001847        
001644  001848  func img_Touched("handle", "index"), 1;
001645  001849  // Syntax: r := img_Touched(handle, index);
001646  001850  // Usage : img_Touched(hndl, 17);
001647  001851  //       : returns -1 if image not touched, or returns index
001648  001852  // Notes : if index is passed as -1, function tests all images,
001649  001853  //       : and returns -1 if image not touched, or returns index.
001650  001854        
001651  001855        
001652  001856        
001653  001857        
001654  001858  //------------------------------------------------------------------//
001655  001859  //        Timer Function Prototypes
001656  001860  //------------------------------------------------------------------//
001657  001861  func sys_T(), 1;
001658  001862  // Syntax: sys_T();
001659  001863  // Usage : t := sys_T();
001660  001864  // Notes : return the current value of the rolling system timer (1msec) LO word
001661  001865        
001662  001866  func sys_T_HI(), 1;
001663  001867  // Syntax: sys_T_HI();
001664  001868  // Usage : t := sys_T_HI();
001665  001869  // Notes : return the current value of the rolling system timer (1msec) HI word
001666  001870        
001667  001871  func sys_SetTimer("timernum","value"), 0;
001668  001872  // Syntax: sys_SetTimer("timernum", "value");
001669  001873  // Usage : sys_SetTimer(TIMER5, 10000);
001670  001874  // Notes : set a countdown on the selected timer, or 'top up' if required.
001671  001875  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001672  001876  //       : Maximum timeout period is 65.535 seconds
001673  001877  //       : A timer can be read with the sys_GetTimer("timernum") function
001674  001878        
001675  001879  func sys_GetTimer("timernum"), 1;
001676  001880  // Syntax: t := sys_GetTimer("timernum");
001677  001881  // Usage : t := sys_GetTimer(TIMER3);
001678  001882  // Notes : returns 0 if timer has expired, or the current countdown value.
001679  001883  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001680  001884  //       : Maximum timeout period is 65.535 seconds
001681  001885  //       : A timer must be set with the sys_SetTimer("timernum","value") function
001682  001886        
001683  001887  func sys_SetTimerEvent("timernum","function"), 1;
001684  001888  // Syntax: sys_SetTimerFunction("timernum", "function");
001685  001889  // Usage : sys_SetTimer(TIMER5, myfunc);
001686  001890  // Notes : set a function to be called for selected timer.
001687  001891  //       : When the timer reaches zero, the function is called.
001688  001892  //       : The called function must not have any parameters
001689  001893  //       : sys_SetTimerEvent returns any previous event function
001690  001894  //       : address, or zero if there was no previous function.
001691  001895        
001692  001896  func sys_EventQueue(), 1;
001693  001897  // Syntax: sys_EventQueue();
001694  001898  // Usage : tasks := sys_EventQueue();
001695  001899  // Notes : returns the max number of events that were pending
001696  001900  //       : in the timer queue since the last call to this function.
001697  001901  //       : This can be used to assess timer event overhead burden,
001698  001902  //       : especially after or during a sys_EventsPostpone action.
001699  001903        
001700  001904  func sys_EventsPostpone(), 0;
001701  001905  // Syntax: sys_EventPostpone();
001702  001906  // Usage : sys_EventPostpone();   // postpone the event queue
001703  001907  // Notes : postpone any events until the sys_EventResume function is executed
001704  001908  //       : The timer event queue will continue to queue events, but no action
001705  001909  //       : will take place untill a sys_EventResume function is encountered.
001706  001910  //       : The queue will continue to receive up to 32 events before discarding
001707  001911  //       : any further events. This function is required to allow a sequence of
001708  001912  //       : instructions or functions to occur that would otherwise be corrupted
001709  001913  //       : by an event occuring during the sequence of instructions or functions.
001710  001914  //       : A good example of this is when you set a position to print, if there
001711  001915  //       : was no way of locking the current sequence, an event may occur which
001712  001916  //       : does a similar thing, and a contention would occur - printing to
001713  001917  //       : the wrong position. This function should be used wisely, if any action
001714  001918  //       : that is required would take considerable time, it is better to disable
001715  001919  //       : any conflicting event functions with a bypass flag, then restart the
001716  001920  //       : conflicting event by re-issuing a timer value.
001717  001921        
001718  001922  func sys_EventsResume(), 0;
001719  001923  // Syntax: sys_EventsResume();
001720  001924  // Usage : sys_EventsResume();   // resume the event queue
001721  001925  // Notes : resume any postponed events. The queue will try to execute any timer
001722  001926  //       : events that were incurred during the postponed period.
001723  001927        
001724  001928        
001725  001929  func sys_Sleep("units"), 1;
001726  001930  // Syntax: t := sys_Sleep("units");
001727  001931  // Usage : t := sys_Sleep(10);
001728  001932  // Notes : sets the display into low power mode for a period of time.
001729  001933  //       : Touching the touch screen will also wake from sleep.
001730  001934  //       : Returns remaining sleep units.
001731  001935        
001732  001936  func iterator("offset"), 0;
001733  001937  // Syntax: t :=  iterator("offset");
001734  001938  // Usage : t :=  iterator(10);
001735  001939  // Notes : set the iterator size for ++/--
001736  001940  //       : The next postinc,postdec,preinc of predec will alter
001737  001941  //       : by the specified value.
001738  001942  //       : The offset will return to 1 after the next operation.
001739  001943        
001740  001944        
001741  001945        
001742  001946        
001743  001947  //------------------------------------------------------------------//
001744  001948  //         Touch Screen Function Prototypes
001745  001949  //------------------------------------------------------------------//
001746  001950        
001747  001951  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
001748  001952  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
001749  001953  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
001750  001954  // Notes : Specifies a new touch detect region on the screen
001751  001955  //       : such that only touch activity in that region will
001752  001956  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
001753  001957        
001754  001958  func touch_Set("mode"), 0;
001755  001959  // Syntax: touch_Set(mode);
001756  001960  // Usage : touch_Set(arg);
001757  001961  // Notes : Sets various Touch Screen related parameters
001758  001962  //       :
001759  001963  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
001760  001964  //       : touch_Set(TOUCH_ENABLE);
001761  001965  //       : Enables and initialises Touch Screen hardware
001762  001966  //       :
001763  001967  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
001764  001968  //       : touch_Set(TOUCH_DISABLE );
001765  001969  //       : Disables the Touch Screen
001766  001970  //       : Note: Touch Screen runs in the background and disabling
001767  001971  //       : it when not in use will free up extra resources
001768  001972  //       : such as 4DVM CPU cycles.
001769  001973  //       :
001770  001974  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
001771  001975  //       : touch_Set(TOUCH_REGIONDEFAULT);
001772  001976  //       : This will reset the current active region to default
001773  001977  //       : to the full screen without the application having to
001774  001978  //       : set a new active region for the full screen.
001775  001979  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
001776  001980  //       : that requre to be interfaced with an external pointing
001777  001981  //       : device, values that are poked into TOUCH_DRIVE will be
001778  001982  //       : read with the touch_Get() function)
001779  001983        
001780  001984        
001781  001985  func touch_Get("mode"), 1;
001782  001986  // Syntax: touch_Get(mode);
001783  001987  // Usage : arg1 := touch_Get(arg);
001784  001988  // Notes : Returns various Touch Screen parameters to caller
001785  001989  //       :
001786  001990  //       : mode = TOUCH_STATUS  (mode 0)
001787  001991  //       : var := touch_Get(TOUCH_STATUS);
001788  001992  //       : Returns the various states of the touch screen
001789  001993  //       : 0 = NOTOUCH
001790  001994  //       : 1 = TOUCH_PRESSED
001791  001995  //       : 2 = TOUCH_RELEASED
001792  001996  //       : 3 = TOUCH_MOVING
001793  001997  //       :
001794  001998  //       : mode = TOUCH_GETX   (mode 1)
001795  001999  //       : var := touch_Get(TOUCH_GETX);
001796  002000  //       : Returns the X coordinates of the touch
001797  002001  //       :
001798  002002  //       : mode = TOUCH_GETY   (mode 2)
001799  002003  //       : var := touch_Get(TOUCH_GETY);
001800  002004  //       : Returns the Y coordinates of the touch
001801  002005        
001802  002006  //------------------------------------------------------------------//
001803  002007  //        CTYPE Function Prototypes
001804  002008  //------------------------------------------------------------------//
001805  002009        
001806  002010  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
001807  002011  // Syntax: isdigit("char");
001808  002012  // Usage : Var := isdigit(ch);
001809  002013  // Notes : char specifies the ascii character for the test
001810  002014  //     : 0 : char is not an ascii digit.
001811  002015  //     : 1 : char is an ascii digit..
001812  002016  //     : Valid range is "0123456789"
001813  002017        
001814  002018  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
001815  002019  // Syntax: isxdigit("char");
001816  002020  // Usage : Var := isxdigit(ch);
001817  002021  // Notes : char specifies the ascii character for the test
001818  002022  //     : 0 : char is not an ascii hexadecimal digit.
001819  002023  //     : 1 : char is an ascii hexadecimal digit..
001820  002024  //     : Valid range is "0123456789ABCDEF"
001821  002025        
001822  002026  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
001823  002027  // Syntax: isupper("char");
001824  002028  // Usage : Var := isupper(ch);
001825  002029  // Notes : char specifies the ascii character for the test
001826  002030  //     : 0 : char is not an ascii upper-case letter.
001827  002031  //     : 1 : char is an ascii upper-case letter.
001828  002032  //     : Valid range is "ABCD....WXYZ"
001829  002033        
001830  002034  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
001831  002035  // Syntax: islower("char");
001832  002036  // Usage : Var := islower(ch);
001833  002037  // Notes : char specifies the ascii character for the test
001834  002038  //     : 0 : char is not an ascii lower-case letter.
001835  002039  //     : 1 : char is an ascii lower-case letter.
001836  002040  //     : Valid range is "abcd....wxyz"
001837  002041        
001838  002042  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
001839  002043  // Syntax: isalpha("char");
001840  002044  // Usage : Var := isalpha(ch);
001841  002045  // Notes : char specifies the ascii character for the test
001842  002046  //     : 0 : char is not an ascii lower or upper case letter.
001843  002047  //     : 1 : char is an ascii lower or upper case letter.
001844  002048  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
001845  002049        
001846  002050  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
001847  002051  // Syntax: isalnum("char");
001848  002052  // Usage : Var := isalnum(ch);
001849  002053  // Notes : char specifies the ascii character for the test
001850  002054  //     : 0 : char is not an ascii alphanumeric character.
001851  002055  //     : 1 : char is an ascii alphanumeric character.
001852  002056  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
001853  002057        
001854  002058  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
001855  002059  // Syntax: isprint("char");
001856  002060  // Usage : Var := isprint(ch);
001857  002061  // Notes : char specifies the ascii character for the test
001858  002062  //     : 0 : char is not a printable ascii character.
001859  002063  //     : 1 : char is a printable ascii character.
001860  002064  //     : Valid range is "0x20...0x7F"
001861  002065        
001862  002066  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
001863  002067  // Syntax: isspace("char");
001864  002068  // Usage : Var := isspace(ch);
001865  002069  // Notes : char specifies the ascii character for the test
001866  002070  //     : 0 : char is not a space type character.
001867  002071  //     : 1 : char is a space type character.
001868  002072  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
001869  002073        
001870  002074  //unformatted
001871  002075  func iswhite("char"), 1;    //
001872  002076  // Syntax: iswhite("char");
001873  002077  // Usage : Var := iswhite(ch);
001874  002078  // Notes : char specifies the ascii character for the test
001875  002079  //     : 0 : char is not a space or tab character.
001876  002080  //     : 1 : char is not a space or tab character.
001877  002081  //     : Valid range is space or tab
001878  002082        
001879  002083  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
001880  002084  // Syntax: toupper("char");
001881  002085  // Usage : Var := toupper(ch);
001882  002086  // Notes : char specifies the ascii character for the test
001883  002087  //     : "ABCD....XYZ" : if character is a lower case letter.
001884  002088  //     : char : if character is not a lower case letter.
001885  002089  //     : Valid range is "abcd....wxyz"
001886  002090        
001887  002091  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
001888  002092  // Syntax: tolower("char");
001889  002093  // Usage : Var := tolower(ch);
001890  002094  // Notes : char specifies the ascii character for the test
001891  002095  //     : "abcd....xyz" : if character is an upper case letter.
001892  002096  //     : char : if character is not an upper case letter.
001893  002097  //     : Valid range is "ABCD....WXYZ"
001894  002098        
001895  002099  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
001896  002100  // Syntax: LObyte(var);
001897  002101  // Usage : myVar := LObyte(myvar2);
001898  002102  // Notes : var specifies the user variable
001899  002103  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
001900  002104        
001901  002105  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
001902  002106  // Syntax: HIbyte(var);
001903  002107  // Usage : myVar := HIbyte(myvar2);
001904  002108  // Notes : var specifies the user variable
001905  002109  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
001906  002110        
001907  002111        
001908  002112  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
001909  002113  // Syntax: ByteSwap(var);
001910  002114  // Usage : myVar := ByteSwap(myvar2);
001911  002115  // Notes : var specifies the user variable
001912  002116  //     : Returns the endian swapped value of a 16 bit variable
001913  002117        
001914  002118        
001915  002119  //------------------------------------------------------------------//
001916  002120  //        Memory Allocation Function Prototypes
001917  002121  //------------------------------------------------------------------//
001918  002122        
001919  002123  func mem_Alloc("size"), 1;
001920  002124  // Syntax: mem_Alloc(bytesize);
001921  002125  // Usage : myvar := mem_Alloc(100);
001922  002126  // Notes : Allocate a block of memory to pointer myvar
001923  002127  //       : The allocated memory contains garbage but is a fast allocation.
001924  002128  //       : The block must later be released with mem_Free();
001925  002129  //       : returns 0 if function fails
001926  002130        
001927  002131  func mem_AllocV("size"), 1;
001928  002132  // Syntax: mem_AllocV(bytesize);
001929  002133  // Usage : myvar := mem_AllocV(100);
001930  002134  // Notes : Allocate a block of memory to pointer myvar
001931  002135  //       : The block of memory is filled with signature values
001932  002136  //       : the block starts with A5,5A then fills with incrementing
001933  002137  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
001934  002138  //       : This can be helpful when debugging
001935  002139  //       : The block must later be released with mem_Free();
001936  002140  //       : returns 0 if function fails
001937  002141        
001938  002142  func mem_AllocZ("size"), 1;
001939  002143  // Syntax: mem_AllocZ(bytesize);
001940  002144  // Usage : myvar := mem_AllocC(100);
001941  002145  // Notes : Allocate a zeroed block of memory to pointer myvar
001942  002146  //       : The block of memory is filled with zeroes
001943  002147  //       : The block must later be released with mem_Free();
001944  002148  //       : returns 0 if function fails
001945  002149        
001946  002150  func mem_Realloc("ptr", "size"), 1;
001947  002151  // Syntax: myvar := mem_Realloc("ptr", "size");
001948  002152  // Usage : myvar := mem_Realloc(ptr, size);
001949  002153  // Notes : The function may move the memory block to a new location,
001950  002154  //       : in which case the new location is returned.
001951  002155  //       : The content of the memory block is preserved up to the lesser
001952  002156  //       : of the new and old sizes, even if the block is moved.
001953  002157  //       : If the new size is larger, the value of the newly allocated
001954  002158  //       : portion is indeterminate. In case that ptr is NULL,
001955  002159  //       : the function behaves exactly as mem_Alloc, assigning a new block
001956  002160  //       : of size bytes and returning a pointer to the beginning of it.
001957  002161  //       : In case that the size is 0, the memory previously allocated in
001958  002162  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
001959  002163  //       : pointer is returned.
001960  002164        
001961  002165  func mem_Free("allocation"), 1;
001962  002166  // Syntax: myvar := mem_Free(allocation);
001963  002167  // Usage : myvar := mem_Free(myvar);
001964  002168  // Notes : De-allocate a block of memory previously created with
001965  002169  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
001966  002170  //       : returns 0 if function fails
001967  002171        
001968  002172  func mem_Heap(), 1;
001969  002173  // Syntax: myvar := mem_Heap();
001970  002174  // Usage : myvar := mem_Heap();
001971  002175  // Notes : returns bytecount available in heap
001972  002176  //       :
001973  002177        
001974  002178  func mem_Set("ptr","char","size"), 1;
001975  002179  // Syntax: mem_Set(ptr,char,bytesize);
001976  002180  // Usage : mem_Set(p, 'A', 100);
001977  002181  // Notes : fill a block of memory with a byte value
001978  002182  //       : returns ptr
001979  002183        
001980  002184  func mem_Copy("src", "dest", "bytecount"), 1;
001981  002185  // Syntax: myvar := mem_Copy(src, dest, bytesize);
001982  002186  // Usage : myvar := mem_Copy(p1, p2, 100);
001983  002187  // Notes : copy a word aligned block of memory from src to dest
001984  002188  //       : Note that count is a byte count, this facilitates
001985  002189  //       : copying word aligned byte arrays when using word
001986  002190  //       : aliggned packed strings.
001987  002191  //       : returns src
001988  002192        
001989  002193  func mem_Compare("ptr1","ptr2","count"), 1;
001990  002194  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
001991  002195  // Usage : myvar := mem_Compare(p1, p2, 100);
001992  002196  // Notes : compare blocks of memory at src, dest
001993  002197  //       : returns 0 if we have a match
001994  002198        
001995  002199  //------------------------------------------------------------------//
001996  002200  //        FAT16 Function Prototypes
001997  002201  //------------------------------------------------------------------//
001998  002202        
001999  002203  func file_Error(), 1;
002000  002204  // Syntax: myvar := file_Error();
002001  002205  // Usage : e := file_Error();
002002  002206  // Notes : return the most recent file error.
002003  002207  //       :
002004  002208        
002005  002209  func file_Count("filename"), 1;
002006  002210  // Syntax: count := file_Count("filename");
002007  002211  // Usage : count := file_Count("*.4dg");
002008  002212  // Notes : returns number of files found that match the criteria
002009  002213        
002010  002214  func file_Dir("filename"), 1;
002011  002215  // Syntax: count := file_Dir("filename");
002012  002216  // Usage : count := file_Dir("*.4dg");
002013  002217  // Notes : streams a string of filenames that agree with the search key
002014  002218  //       : returns number of files found that match the criteria
002015  002219        
002016  002220  func file_FindFirst("fname"), 1;
002017  002221  // Syntax: res := file_FindFirst("fname");
002018  002222  // Usage : if (file_FindFirst("*.4xe") ....
002019  002223  // Notes : returns true if at least 1 file exists
002020  002224  //       : that satisfies the file argument.
002021  002225  //       : Wildcards are usually used so if
002022  002226  //       : file_FindFirst returns true, further
002023  002227  //       : tests can be made using file_FindNext();
002024  002228  //       : to find all the files that match the
002025  002229  //       : wildcard class. Note that the stream behaviour
002026  002230  //       : is the same as file_Dir.
002027  002231  //       :
002028  002232        
002029  002233  func file_FindNext(), 1;
002030  002234  // Syntax: res := file_FindNext();
002031  002235  // Usage : while ((file_FindNext()) ....
002032  002236  // Notes : returns true if more file exists
002033  002237  //       : that satisfies the file argument
002034  002238  //       : that was given for  file_FindFirst.
002035  002239  //       : Wildcards must be used for
002036  002240  //       : file_FindFirst, else this function will
002037  002241  //       : always return zero as the only occurence
002038  002242  //       : will have already been found.
002039  002243  //       : Note that the stream behaviour
002040  002244  //       : is the same as file_Dir.
002041  002245  //       :
002042  002246        
002043  002247  func file_Exists("fname"), 1;
002044  002248  // Syntax: res := file_Exists("fname"),
002045  002249  // Usage : if(file_Exists("myfile") ....
002046  002250  // Notes : returns true if file exists
002047  002251  //       :
002048  002252        
002049  002253  func file_Open("fname", "mode"), 1;
002050  002254  // Syntax: handle := file_Open("fname","mode"),
002051  002255  // Usage : handle := file_Open("myfile.txt", 'r');
002052  002256  // Notes : returns handle if file exists
002053  002257  //       :
002054  002258        
002055  002259  func file_Close("handle"), 1;
002056  002260  // Syntax: res := file_Close("handle");
002057  002261  // Usage : res := file_Close(hnd1);
002058  002262  // Notes : returns true if file closed ok
002059  002263  //       :
002060  002264        
002061  002265  func file_Read("*dest", "size", "handle"), 1;
002062  002266  // Syntax: res := file_Read("*dest", "size", "handle"),
002063  002267  // Usage : res := file_Read(memblock,20,hnd1);
002064  002268  // Notes : returns number of characters read
002065  002269  //       : if "dest" is zero, data is read direct to GRAM window
002066  002270  //       :
002067  002271        
002068  002272        
002069  002273  func file_Seek("handle", "HiWord", "LoWord"), 1;
002070  002274  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
002071  002275  // Usage : res := file_Seek(hSource, 0, 0x1234);
002072  002276  // Notes : set file position to 0x00001234 (byte position 4660)
002073  002277  //       : for the file handle so subsequent data may be read
002074  002278  //       : from that position onwards with file_GetC(...),
002075  002279  //       : file_GetW(...) or file_GetS(...), or an image
002076  002280  //       : can be displayed with file_Image(...)
002077  002281  // Notes : returns true if ok, usually ignored
002078  002282        
002079  002283  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002080  002284  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002081  002285  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
002082  002286  // Notes : set file seek position to 123000
002083  002287  //       : for the file handle so subsequent data may be read
002084  002288  //       : from that record position onwards with file_GetC(...),
002085  002289  //       : file_GetW(...) or file_GetS(...), or an image
002086  002290  //       : can be displayed with file_Image(...)
002087  002291  // Notes : returns true if ok, usually ignored
002088  002292        
002089  002293  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
002090  002294  // Syntax: file_Tell("handle", &HiWord, &LoWord);
002091  002295  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
002092  002296  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
002093  002297  //       : returns true if function succeeded
002094  002298        
002095  002299  func file_Write("*source", "size", "handle"), 1;
002096  002300  // Syntax: res := fwrite("*source", "size", "handle"),
002097  002301  // Usage : res := fwrite(memblock, 20, hnd1);
002098  002302  // Notes : returns number of bytes written
002099  002303  //       :
002100  002304        
002101  002305  func file_Size("handle", "&HiWord", "&LoWord"), 1;
002102  002306  // Syntax: file_Size("handle", &HiWord, &LoWord);
002103  002307  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
002104  002308  // Notes : Reads the 32 bit file size and stores it into 2 variables.
002105  002309  //       : returns true if function succeeded
002106  002310        
002107  002311  func file_Image("x", "y", "handle"), 1;
002108  002312  // Syntax: file_Image(x, y, handle);
002109  002313  // Usage : file_Image(10, 10, hnd1);
002110  002314  // Notes : Display an image from a file at the current file position.
002111  002315  //       : The image is displayed at x,y (with respect to top left corner).
002112  002316  //       : If there is more than 1 image in the file, it can be
002113  002317  //       : accessed with file_Seek(...)
002114  002318        
002115  002319  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
002116  002320  // Syntax: file_ScreenCapture(x, y, w, h, handle);
002117  002321  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
002118  002322  // Notes : Save a image from screen to file at the current file position.
002119  002323  //       : The image can later be displayed with file_Image(...);
002120  002324  //       : The file may be opened in append mode to accumulate multiple
002121  002325  //       : images. Later, the images can be accessed with file_Seek(...);
002122  002326  //       : Note that the image will be sector aligned.
002123  002327  //       : All image headers must start on a sector boundary.
002124  002328  //       : The image is saved from x, y (with respect to top left corner)
002125  002329  //       : and the capture area is determined by "width" and "height".
002126  002330  //       : returns 0 if function succeeded
002127  002331        
002128  002332  func file_PutC("char","handle"), 1;
002129  002333  // Syntax: file_PutC("char", "handle");
002130  002334  // Usage : file_PutC('x', hndl);
002131  002335  // Notes : returns true if function succeeded
002132  002336        
002133  002337  func file_GetC("handle"), 1;
002134  002338  // Syntax: file_GetC("handle");
002135  002339  // Usage : mychar := fgetC("handle");
002136  002340  // Notes : returns next char from file
002137  002341        
002138  002342  func file_PutW("word","handle"), 1;
002139  002343  // Syntax: file_PutW("word","handle");
002140  002344  // Usage : file_PutW(0x1234, hndl);
002141  002345  // Notes : returns true if function succeeded
002142  002346        
002143  002347  func file_GetW("handle"), 1;
002144  002348  // Syntax: file_GetW("handle");
002145  002349  // Usage : myword := fgetW("handle");
002146  002350  // Notes : returns next word in file
002147  002351        
002148  002352  func file_PutS("*source", "handle"), 1;
002149  002353  // Syntax: res := file_Puts("*source", "handle"),
002150  002354  // Usage : res := file_Puts(mystring, hnd1);
002151  002355  // Notes : returns number of characters written
002152  002356  //       :
002153  002357        
002154  002358  func file_GetS("*string", "size", "handle"), 1;
002155  002359  // Syntax: res := file_Gets("*string", "size", "handle");
002156  002360  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
002157  002361  // Notes : get a string from a file
002158  002362  //       : returns pointer to string or null if failed.
002159  002363  //       : file_GetS(...) automatically appends a null-terminator to the data read.
002160  002364  //       : NB:- only reads up to "size-1" characters into "string"
002161  002365  //       : file_GetS(...) will stop reading when any of the following conditions are true:
002162  002366  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
002163  002367  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
002164  002368  //       : C] It reaches the end of file
002165  002369  //       : D] A read error occurs.
002166  002370        
002167  002371        
002168  002372  func file_Erase("fname"), 1;
002169  002373  // Syntax: res := file_Erase("fname");
002170  002374  // Usage : res := file_Erase("myfile.txt");
002171  002375  // Notes : returns true if successful
002172  002376  //       :
002173  002377        
002174  002378  func file_Rewind("handle"), 1;
002175  002379  // Syntax: res := file_Rewind("handle");
002176  002380  // Usage : res := file_Rewind(hnd1);
002177  002381  // Notes : returns true if file rewound ok (usually ignored)
002178  002382  //       : resets the file pointer the the beginning of the open file.
002179  002383        
002180  002384  func file_LoadFunction("fname.4xe"), 1;
002181  002385  // Syntax: res := file_LoadFunction("fname.4fn");
002182  002386  // Usage : myfunc := file_LoadFunction(myfuncname);
002183  002387  // Notes : Load a function or program from disk and
002184  002388  //       : return a function pointer to the allocation.
002185  002389  //       : The function can then be invoked just like any other
002186  002390  //       : function would be called via a function pointer.
002187  002391  //       : Parameters may be passed to it in a conventional way.
002188  002392  //       : The function may be discarded at any time when no
002189  002393  //       : longer required, thus freeing its memory resources.
002190  002394  //       : The loaded function can be discarded with mem_Free(..)
002191  002395  //       : eg:
002192  002396  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
002193  002397  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
002194  002398  //       : then elsewhere in your program:-
002195  002399  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
002196  002400  //       : if(res == QUIT_APPLICATION) goto exitApp;
002197  002401  //       : Later in your program, when popupWindow is no longer
002198  002402  //       : required for the application:-
002199  002403  //       : res := mem_Free(popupWindow);
002200  002404  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
002201  002405  //       : The callers stack is shared by the loaded function,
002202  002406  //       : however any global variables in the loaded function
002203  002407  //       : are private to that function.
002204  002408  //
002205  002409        
002206  002410  func file_Run("fname.4xe", "arglistptr"), 1;
002207  002411  // Syntax: res := file_Run("fname.4xe","arglistptr");
002208  002412  // Usage : res := file_Run(fname, argptr);
002209  002413  // Notes : current program releases any allocated memory but
002210  002414  //       : retains the stack and global memory.
002211  002415  //       : If arglistptr is 0, no arguments are passed, else
002212  002416  //       : arglist points to an array, the first element being
002213  002417  //       : the number of elements in the array.
002214  002418  //       : func 'main' in the called program accepts
002215  002419  //       : the arguments, if any. THe arguments can only
002216  002420  //       : be passed by value, no pointers or references can be
002217  002421  //       : used as all memory is cleared before the file
002218  002422  //       : is loaded. Refer to file_Exec and file_LoadFunction
002219  002423  //       : for functions that can pass by reference.
002220  002424        
002221  002425  func file_Exec("fname.4xe", "arglistptr"), 1;
002222  002426  // Syntax: res := file_Exec("fname.4xe","arglistptr");
002223  002427  // Usage : res := file_Exec("fname.4xe","arglistptr");
002224  002428  // Notes : returns like a function, current program
002225  002429  //       : calling program is kept active and control returns to it.
002226  002430  //       : If arglistptr is 0, no arguments are passed, else
002227  002431  //       : arglist points to an array, the first element being
002228  002432  //       : the number of elements in the array.
002229  002433  //       : func 'main' in the called program accepts the arguments.
002230  002434  //       : This function is similar to file_LoadFunction(...), however,
002231  002435  //       : the function argument list is passed by pointer, and
002232  002436  //       : the memory consumed by the function is released as
002233  002437  //       : soon as the function completes.
002234  002438        
002235  002439  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
002236  002440  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
002237  002441  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
002238  002442  // Notes : Reads a control file to create an image list.
002239  002443  //       : Returns NULL if function fails.
002240  002444  //       : Returns a handle (pointer to the memory allocation) to the
002241  002445  //       : image control list that has been created.
002242  002446  //       : "fname1" is the control list filename "*.dat"
002243  002447  //       : "fname2" is the image filename "*.gci"
002244  002448        
002245  002449  // Notes : This function Calculates the size of a chunk of memory required for
002246  002450  //       : a image list and populates it from the image control file ("*.dat")
002247  002451  //       : therefore, when imagelist is no longer required, you must de-allocate
002248  002452  //       : the image list memory by using eg:- mem_Free(hImagelist);
002249  002453  //       : to restore the heap.
002250  002454  //       :
002251  002455  //       : mode 0:- it is assumed that there is a graphics file with the
002252  002456  //       : file extension "fname2.gci". In this case, the images have been stored
002253  002457  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
002254  002458  //       : "fname1.dat" file are saved in the image control so that the image control
002255  002459  //       : can open the file (*.gci) and us file_Seek to get to the position of the
002256  002460  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
002257  002461  //       : mode 0 builds the image control quickly as it only scans the *.dat file
002258  002462  //       : for the file offsets and save them in the relevant entries in the image control.
002259  002463  //       : The penalty is that images take longer to find when displayed due to file_Seek
002260  002464  //       : overheads.
002261  002465  //
002262  002466  //       : mode 1:- it is assumed that there is a graphics file with the
002263  002467  //       : file extension "fname2.gci". In this case, the images have been stored
002264  002468  //       : in a FAT16 file concurrently, and the offset of the images are saved
002265  002469  //       : in the image control so that image file (*.gci) can be mapped to directly.
002266  002470  //       : The absolute cluster/sector is mapped so file seek does not need to be called
002267  002471  //       : internally. This means that there is no seek time penalty, however, the
002268  002472  //       : image list takes a lot longer to build, as all the seeking is done at control
002269  002473  //       : build time.
002270  002474        
002271  002475  //       : mode 2:- the graphics file with the is placed in a partitioned area
002272  002476  //       : In this case, the images have been stored in a in a known raw area of the FAT16
002273  002477  //       : disk, and the absolute address of the images are saved in the DAT file
002274  002478  //       : This is the fastest operation of the image control as there is no seeking
002275  002479  //       : or other disk activity taking place.
002276  002480        
002277  002481  func file_Mount(), 1;
002278  002482  // Syntax: r := file_Mount();
002279  002483  // Usage : r := file_Mount();
002280  002484  // Notes : Create a control block for FAT16 and mount the File System
002281  002485        
002282  002486  func file_Unmount(), 0;
002283  002487  // Syntax: file_Unmount();
002284  002488  // Usage : file_Unmount();
002285  002489  // Notes : release any control block and buffers for FAT16
002286  002490  //       : and unmount the File System
002287  002491        
002288  002492  func file_PlayWAV("fname1"), 1;
002289  002493  // Syntax: file_PlayWAV("fname1");
002290  002494  // Usage : file_PlayWAV("ding.wav");
002291  002495  // Notes : Play a wave file with filename "fname1"
002292  002496  //       : This function automatically grabs a chunk
002293  002497  //       : of memory for a file buffer, and a wave
002294  002498  //       : buffer. The minimum memory requirement is
002295  002499  //       : about 580 bytes for the disk io service and
002296  002500  //       : a minimum wave buffer size of 1024. The siz
002297  002501  //       : of the wave buffer allocation
002298  002502  //       : can be increased by the snd_BufSize function.
002299  002503  //       : The default size 1024 bytes.
002300  002504  //       : NB the memory is only required during the
002301  002505  //       : duration of play, and is automatically
002302  002506  //       : released while not in use.
002303  002507  //       : See the Sound Class services for other associated controls.
002304  002508  //       : If there are no errors, returns number of blocks to play (1 to 32767)
002305  002509  //       : If errors occured, the folling is returned
002306  002510  //       : -7  : Insufficient memory available for WAV buffer and file
002307  002511  //       : -6  : cant play this rate
002308  002512  //       : -5  : no data chunk found in first rsector
002309  002513  //       : -4  : no format data
002310  002514  //       : -3  : no wave chunk signature
002311  002515  //       : -2  : bad wave file format
002312  002516  //       : -1  : file not found
002313  002517        
002314  002518        
002315  002519        
002316  002520  //------------------------------------------------------------------//
002317  002521  //        Sound Class Services
002318  002522  //------------------------------------------------------------------//
002319  002523        
002320  002524  func snd_Volume("var"), 0;
002321  002525  // Syntax: snd_Volume("var");
002322  002526  // Usage : snd_Volume(30);
002323  002527  // Notes : set sound playback volume.  Var must
002324  002528  //       : be in the range from 8 (min volume)
002325  002529  //       : to 127 (max volume). If var is less
002326  002530  //       : than 8 volume is set to 8, and if
002327  002531  //       : var > 127 it is set to 127.
002328  002532        
002329  002533  func snd_Pitch("pitch"), 1;
002330  002534  // func snd_Pitch("freq"), 1;
002331  002535  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
002332  002536  // Notes : sets the samples playback rate to a different frequency
002333  002537  //       : The minimum value is 4khz
002334  002538  //       : Setting the pitch to zero restores the original sample rate
002335  002539  //       : Return value is the samples original sample rate.
002336  002540        
002337  002541  func snd_BufSize("var"), 0;
002338  002542  // Syntax: snd_BufSize("var");
002339  002543  // Usage : snd_BufSize(2);
002340  002544  // Notes : specify the a memory chunk size for the wavefile buffer.
002341  002545  //       : default size 1024 bytes.
002342  002546  //       : 0 = 1024 bytes (default)
002343  002547  //       : 1 = 2048 bytes
002344  002548  //       : 2 = 4096 bytes
002345  002549  //       : 3 = 8192 bytes
002346  002550        
002347  002551  func snd_Stop(), 0;
002348  002552  // Syntax: snd_Stop();
002349  002553  // Usage : snd_Stop();
002350  002554  // Notes : stop any sound that is playing, releasing
002351  002555  //       : buffers and closes any open wav file.
002352  002556        
002353  002557  func snd_Pause(), 0;
002354  002558  // Syntax: snd_Pause();
002355  002559  // Usage : snd_Pause();
002356  002560  // Notes : pauses any sound that is playing, does nothing
002357  002561  //       : until sound is resumed with snd_Continue().
002358  002562  //       : The sample cam be terminated with snd_Stop.
002359  002563  //       : buffers and closes any open wav file.
002360  002564        
002361  002565  func snd_Continue(), 0;
002362  002566  // Syntax: snd_Continue();
002363  002567  // Usage : snd_Continue();
002364  002568  // Notes : resume any sound that is paused by snd_Pause.
002365  002569        
002366  002570  func snd_Playing(), 1;
002367  002571  // Syntax: snd_Playing();
002368  002572  // Usage : r := snd_Playing();
002369  002573  // Notes : returns 0 if sound has finished playing,
002370  002574  //       : else return number of 512 byte blocks to go.
002371  002575        
002372  002576        
002373  002577        
002374  002578  //------------------------------------------------------------------//
002375  002579  //        String Class Services
002376  002580  //------------------------------------------------------------------//
002377  002581        
002378  002582  func str_Ptr("&var"), 1;
002379  002583  // Syntax: str_Ptr(&var);
002380  002584  // Usage : p := str_Ptr(&var);
002381  002585  // Notes : return a byte pointer to a word region
002382  002586        
002383  002587  func str_GetD("&ptr", "&var"), 1;
002384  002588  // Syntax: str_GetD(&ptr, &var);
002385  002589  // Usage : ok := str_GetD(&ptr, &var);
002386  002590  // Notes : convert number in a string to DWORD ( myvar[2] )
002387  002591  //       : returns true if function succeeds, advancing ptr
002388  002592        
002389  002593  func str_GetW("&ptr", "&var"), 1;
002390  002594  // Syntax: str_GetW(&ptr, &var);
002391  002595  // Usage : ok := str_GetW(&ptr, &var);
002392  002596  // Notes : convert number in a string to WORD ( myvar )
002393  002597  //       : returns true if function succeeds, advancing ptr
002394  002598        
002395  002599  func str_GetHexW("&ptr", "&var"), 1;
002396  002600  // Syntax: str_GetHexW(&ptr, &var);
002397  002601  // Usage : ok := str_GetHexW(&ptr, &var);
002398  002602  // Notes : convert HEX number in a string to WORD ( myvar )
002399  002603  //       : returns true if function succeeds, advancing ptr
002400  002604        
002401  002605  func str_GetC("&ptr", "&var"), 1;
002402  002606  // Syntax: str_GetC(&ptr, &var);
002403  002607  // Usage : ok := str_GetC(&ptr, &var);
002404  002608  // Notes : get a valid ascii char in a string to WORD ( myvar )
002405  002609  //       : returns true if function succeeds, advancing ptr
002406  002610        
002407  002611  func str_GetByte("ptr"), 1;
002408  002612  // Syntax: str_GetByte(ptr);
002409  002613  // Usage : myvar := str_GetByte(ptr);
002410  002614  // Notes : get a byte to myvar
002411  002615  //       : returns value
002412  002616        
002413  002617  func str_GetWord("ptr"), 1;
002414  002618  // Syntax: GetWord(ptr);
002415  002619  // Usage : GetWord(ptr);
002416  002620  // Notes : get a word to myvar
002417  002621  //       : returns value
002418  002622        
002419  002623  func str_PutByte("ptr","val"), 0;
002420  002624  // Syntax: str_PutByte(ptr);
002421  002625  // Usage : myvar := str_PutByte(ptr);
002422  002626  // Notes : put a byte at ptr
002423  002627  //       : returns value
002424  002628        
002425  002629  func str_PutWord("ptr","val"), 0;
002426  002630  // Syntax: str_PutWord("ptr","val");
002427  002631  // Usage : str_PutWord(p,100);
002428  002632  // Notes : put word 100 at current pointer location
002429  002633  //       : returns value
002430  002634        
002431  002635  func str_Match("&ptr", "*str"), 1;
002432  002636  // Syntax: str_Match(&ptr, *str);
002433  002637  // Usage : r := str_Match(&p, "hello");
002434  002638  // Notes : Case sensitive match
002435  002639  //       : returns true if function succeded, andvancing pointer to position past
002436  002640  //       : the matched item. Note that any whitespace characters are skipped
002437  002641  //       : in the source string prior to the test.
002438  002642        
002439  002643  func str_MatchI("&ptr", "*str"), 1;
002440  002644  // Syntax: str_MatchI(&ptr, *str);
002441  002645  // Usage : r := str_MatchI(&p, "hello");
002442  002646  // Notes : Case insensitive match
002443  002647  //       : returns true if function succeded, andvancing pointer to position past
002444  002648  //       : the matched item. Note that any whitespace characters are skipped
002445  002649  //       : in the source string prior to the test.
002446  002650        
002447  002651  func str_Find("&ptr", "*str"), 1;
002448  002652  // Syntax: str_Find(&ptr, *str);
002449  002653  // Usage : n := str_Find(&p, "hello");
002450  002654  // Notes : given the address of a pointer to a source string as the
002451  002655  //       : first argument, and a pointer to a test string as the second
002452  002656  //       : argument, attempt to find the position of the matching string
002453  002657  //       : in the source string. The test is performed with case sensitivity.
002454  002658  //       : return 0 if not found, else returns the address of the first
002455  002659  //       : character of the match. NB:- The source pointer is not altered.
002456  002660        
002457  002661  func str_FindI("&ptr", "*str"), 1;
002458  002662  // Syntax: str_Find(&ptr, *str);
002459  002663  // Usage : n := str_Find(&p, "hello");
002460  002664  // Notes : given the address of a pointer to a source string as the
002461  002665  //       : first argument, and a pointer to a test string as the second
002462  002666  //       : argument, attempt to find the position of the matching string
002463  002667  //       : in the source string. The test is performed with no case
002464  002668  //       : sensitivity, eg upper and lower case chars are accepted.
002465  002669  //       : return 0 if not found, else returns the address of the first
002466  002670  //       : character of the match. NB:- The source pointer is not altered.
002467  002671        
002468  002672  func str_Length("ptr"), 1;
002469  002673  // Syntax: str_Length(ptr);
002470  002674  // Usage : len := str_Ptr(mystring);
002471  002675  // Notes : return the length of a byte aligned string excluding terminator
002472  002676        
002473  002677  func str_Printf("&ptr", "*format"), 1;
002474  002678  // Syntax: str_Printf("&ptr", "*format");
002475  002679  // Usage : r := str_Printf(&p, "hello");
002476  002680  // Notes : refer to documentation
002477  002681  //       :
002478  002682        
002479  002683  func str_Cat("dest","src"), 1;
002480  002684  // Syntax: str_Append("&dest","&src");
002481  002685  // Usage : str_Append(&buf,"Hello");
002482  002686  // Notes : Appends a copy of the source string to the destination string.
002483  002687  //       : The terminating null character in destination is overwritten by
002484  002688  //       : the first character of source, and a new null-character is appended
002485  002689  //       : at the end of the new string formed by the concatenation of both in destination.
002486  002690  //       : returns destination.
002487  002691        
002488  002692  func str_CatN("dest","src","count"), 1;
002489  002693  // Syntax: str_Append("&dest","&src","count");
002490  002694  // Usage : str_Append(&buf,"Monday",3);
002491  002695  // Notes : Appends a copy of the source string to the destination string.
002492  002696  //       : The number of characters copied is limited by "count".
002493  002697  //       : The terminating null character in destination is overwritten by
002494  002698  //       : the first character of source, and a new null-character is appended
002495  002699  //       : at the end of the new string formed by the concatenation of both in destination.
002496  002700  //       : returns destination.
002497  002701        
002498  002702        
002499  002703  func sys_StoreTouchCalibration(), 1;
002500  002704  // Syntax: sys_StoreTouchCalibration();
002501  002705  // Usage : r := sys_StoreTouchCalibration();
002502  002706  // Notes : Store the touch calibration values in non-volatile memory.
002503  002707  //       : Returns true if the values have been accepted and stored,
002504  002708  //       : else returns false if write could not be performed, or
002505  002709  //       : touch calibration values are improbable.
002506  002710  //       : The values that are stored are obtained from:-
002507  002711  //     : TOUCH_XMINCAL             78  // touch calibration value
002508  002712  //     : TOUCH_YMINCAL             79  // touch calibration value
002509  002713  //       : TOUCH_XMAXCAL             80  // touch calibration value
002510  002714  //       : TOUCH_YMAXCAL             81  // touch calibration value
002511  002715  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
002512  002716  //       : This function is not supported on uVGA, Capicitive touch
002513  002717  //       : and 4.3" resistive touch modules.
002514  002718        
002515  002719        
002516  002720  func unicode_page("charbeg","charend","charoffset"), 1;
002517  002721  // Syntax: unicode_page("charbeg","charend","charoffset");
002518  002722  // Usage : eg:  F_Traditional_0x20_0xFF
002519  002723  // Notes : After selecting a unicode image control with txt_FontID,
002520  002724  //       : this function is called to set the required font within the
002521  002725  //       : unicode set. The file "Unicode.inc" contains wrappers for
002522  002726  //       : this function, and it is not normally called directly.
002523  002727  //       : Returns count of characters in the set.
002524  002728  //       : Refer to "Unicode.inc" for further information.
002525  002729        
002526  002730        
002527  002731  func EVE_SP(), 1;
002528  002732  // Syntax: EVE_SP();
002529  002733  // Usage : eg:  print(EVE_SP());
002530  002734  // Notes : Used for debugging to assess the current stack level,
002531  002735  //       : mainly for checking stack leaks
002532  002736        
002533  002737  func EVE_SSIZE(), 1;
002534  002738  // Syntax: EVE_SSIZE();
002535  002739  // Usage : eg:  print(EVE_SSIZE());
002536  002740  // Notes : Used to get the stack size,
002537  002741  //       : mainly for debugging purposes
002538  002742        
002539  002743        
002540  002744  // uVGAII extended functions
002541  002745  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
002542  002746  // Syntax: disp_Sync(line);
002543  002747  // Usage : disp_Sync(480);
002544  002748  // Notes : Waits till the hardware gets to a certain line.
002545  002749  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
002546  002750  //       : Some experimentation may be needed to find an optimum line for disp_Sync
002547  002751  //       : depending on the graphics operation. The higher the value, the slower
002548  002752  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
002549  002753  //       : within the vertical retrace period) where it will just 'hang up' stopping the
002550  002754  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
002551  002755  //       : be slowest (as its actually right at the end of the blanking period) and 508
002552  002756  //       : will cause a hangup situation as it is above the highes scanline value.
002553  002757  //       : Currently, this function is only supported on displays with SSD1963 driver.
002554  002758        
002555  002759        
002556  002760  // New functions added to PmmC v2.8
002557  002761  //================================================================
002558  002762  func CY(), 1;
002559  002763  // Syntax: CY();
002560  002764  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
002561  002765  //       : print(myvar," "CY(),"\n");           // carry = 1
002562  002766  // Notes : This function returns the carry status of an
002563  002767  // unsigned overflow from any 16 or 32bit additions or sutractions.
002564  002768  //================================================================
002565  002769        
002566  002770        
002567  002771  //================================================================
002568  002772  func str_ByteMove("src", "dest", "count"), 1;
002569  002773  // func str_ByteMove("src", "dest", "count"), 1;
002570  002774  // Syntax   : str_ByteMove(src, dest, bytecount);
002571  002775  // Input    : STR *source points to byte aligned source.
002572  002776  //          : STR *dest   points to byte aligned destination.
002573  002777  //          : VAR count   number of bytes to transfer.
002574  002778  // Usage    : nextpos := str_ByteMove(s, d, 100);
002575  002779  // Notes    : copy bytes from "src" to "dest", stopping only
002576  002780  //          : when "count" is exhausted.
002577  002781  //          : No terminator is appended, it is purely a
002578  002782  //          : byte copy, and any zeroes encountered will
002579  002783  //          : also be copied.
002580  002784  // Returns  : returns a pointer to the end of the destination
002581  002785  //          : (which is "dest" + "count")
002582  002786  //================================================================
002583  002787        
002584  002788        
002585  002789  //================================================================
002586  002790  func str_Copy("dest", "src"), 1;
002587  002791  // Syntax   : str_Copy(dest, src);
002588  002792  // Input    : STR *dest   points to byte aligned destination.
002589  002793  //          : STR *source points to byte aligned source.
002590  002794  // Usage    : nextplace := str_Copy(d, s);
002591  002795  // Notes    : copy a string from "src" to "dest", stopping only
002592  002796  //          : when the end of source string "src" is encountered
002593  002797  //          : (0x00 terminator).
002594  002798  //          : The terminator is always appended, even if "src" is
002595  002799  //          : an empty string.
002596  002800  // Returns  : returns a pointer to the 0x00 string terminator at
002597  002801  //          : end of "dest" (which is "dest" + str_Length(src); )
002598  002802  //================================================================
002599  002803        
002600  002804  //================================================================
002601  002805  func str_CopyN("dest", "src", "count"), 1;
002602  002806  // Syntax   : str_CopyN(dest, src, bytecount);
002603  002807  // Input    : STR *dest   points to byte aligned destination.
002604  002808  //          : STR *source points to byte aligned source.
002605  002809  //          : VAR count   max number of chars to copy.
002606  002810  // Usage    : nextplace := str_CopyN(d, s, 100);
002607  002811  // Notes    : copy a string from "src" to "dest", stopping only
002608  002812  //          : when "count" is exhausted, or end of source
002609  002813  //          : string "str" is encountered (0x00 string terminator).
002610  002814  //          : The terminator is always appended, even if
002611  002815  //          : "count" is zero, or "src" is a null string.
002612  002816  // Returns  : returns a pointer to the 0x00 string terminator
002613  002817  //          : (which is "dest" + whatever was copied)
002614  002818  //================================================================
002615  002819        
002616  002820  //================================================================
002617  002821  func umul_1616("&res32", "val1", "val2"), 1;
002618  002822  // Syntax   : umul_1616(&res32, varA, varB);
002619  002823  // Input    : DWORD *result   points to 32bit result register.
002620  002824  //          : VAR   val1  16bit register or constant
002621  002825  //          : VAR   val2  16bit register or constant
002622  002826  // Usage    : var res32[2];
002623  002827  //          : umul_1616(&res32, myvar, 50000);
002624  002828  // Notes    : performs an unsigned multiply of 2 x 16bit values
002625  002829  //          : placing the 32bit result in a 2 word array.
002626  002830  // Returns  : the pointer to the 32bit result.
002627  002831  //          : carry and overflow are not affected.
002628  002832  //================================================================
002629  002833        
002630  002834  //================================================================
002631  002835  func uadd_3232("&res32", "&val1", "&val2"), 1;
002632  002836  // Syntax   : cmp_3232(&res32, &varA, &varB);
002633  002837  // Input    : DWORD *res32 points to optional result (or zero for compare)
002634  002838  //          : DWORD *val1 points to 32bit augend
002635  002839  //          : DWORD *val2 points to 32bit addend
002636  002840  // Usage    : var res32[2];
002637  002841  //          : res := cmp_3232(res32, val1, val2);
002638  002842  // Notes    : performs an unsigned addition of 2 x 32bit values
002639  002843  //          : placing the 32bit result in a 2 word array.
002640  002844  // Returns  : returns 1 on 32bit unsigned overflow (carry).
002641  002845  //          ; carry flag is also set on 32bit unsigned overflow
002642  002846  //          ; and can be read with the CY() function.
002643  002847  //================================================================
002644  002848        
002645  002849  //================================================================
002646  002850  func usub_3232("&res32", "&val1", "&val2"), 1;
002647  002851  // Syntax   : cmp_3232(&res32, &varA, &varB);
002648  002852  // Input    : DWORD *res32 points to optional result (or zero for compare)
002649  002853  //          : DWORD *val1 points to first 32bit minuend
002650  002854  //          : DWORD *val2 points to 32bit subtrahend
002651  002855  // Usage    : var res32[2];
002652  002856  //          : res := cmp_3232(res32, val1, val2);
002653  002857  // Notes    : performs an unsigned subtraction of 2 x 32bit values
002654  002858  //          : placing the 32bit result in a 2 word array.
002655  002859  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
002656  002860  //          ; carry flag is also set on 32bit unsigned underflow
002657  002861  //          ; and can be read with the CY() function.
002658  002862  //================================================================
002659  002863        
002660  002864  //================================================================
002661  002865  func ucmp_3232("&val1", "&val2"), 1;
002662  002866  // Syntax   : cmp_3232(&varA, &varB);
002663  002867  // Input    : DWORD *val1 points to 32bit minuend
002664  002868  //          : DWORD *val2 points to 32bit sutrahend
002665  002869  // Usage    : res := cmp_3232(val1, val2);
002666  002870  // Notes    : performs an unsigned comparison of 2 x 32bit values.
002667  002871  //          : The result of the subtraction is returned.
002668  002872  // Returns  : 0  if equal
002669  002873  //          : 1  if val1 > val2
002670  002874  //          : -1 if val1 < val2
002671  002875  //          : This function does not affect the carry flag.
002672  002876  //================================================================
002673  002877        
002674  002878  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v3.8
002675  002879  // Syntax: disp_Disconnect();                  New in v3.8
002676  002880  // Usage : disp_Disconnect();
002677  002881  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
002678  002882  //       : its lowest possible power consumption. Use after disabling peripheral power
002679  002883  //       : to ensure the minimal power usage by the display.
002680  002884  //       : disp_Init() should be used to reinitialise the display.
002681  002885        
002682  002886  func reserved(), 0;                            
002683  002887        
002684  002888  func sys_DeepSleep("units"), 1;
002685  002889  // Syntax: t := sys_DeepSleep("units");       New in v3.8
002686  002890  // Usage : t := sys_DeepSleep(10);
002687  002891  // Notes : sets the display and processor into lowest power mode for a period of time.
002688  002892  //       : When returning from DeepSleep the display should be reinitialised
002689  002893  //       : with disp_Init().
002690  002894  //       : Touching the touch screen will also wake from sleep.
002691  002895  //       : Returns remaining sleep units.
002692  002896        
002693  002897  //------------------------------------------------------------------//
002694  002898  // CONSTANTS
002695  002899  //------------------------------------------------------------------//
002696  002900        
002697  002901  // generic constants
002698  002902  #CONST
002699  002911  #END
002700  002912        
002701  002913  //------------------------------------------------------------------------------
002702  002914  // Pin related constants
002703  002915  //------------------------------------------------------------------------------
002704  002916  #CONST
002705  002934  #END
002706  002935        
002707  002936  //------------------------------------------------------------------------------
002708  002937  //gfx_Set() related constants
002709  002938  //------------------------------------------------------------------------------
002710  002939  #CONST
002711  002956  #END
002712  002957        
002713  002958        
002714  002959  //gfx_Get() related constants
002715  002960  #CONST
002716  002969  #END
002717  002970        
002718  002971        
002719  002972        
002720  002973        
002721  002974  #CONST
002722  002987  #END
002723  002988        
002724  002989        
002725  002990  #CONST
002726  003013  #END
002727  003014        
002728  003015  //------------------------------------------------------------------------------
002729  003016  //txt_Set() related constants
002730  003017  //------------------------------------------------------------------------------
002731  003018  #CONST
002732  003037  #END
002733  003038        
002734  003039        
002735  003040        
002736  003041  //------------------------------------------------------------------------------
002737  003042  //txt_Set() related arguments
002738  003043  // NB:- FONT4 must be inherited if required,
002739  003044  // eg #inherit "FONT4.fnt"
002740  003045  //------------------------------------------------------------------------------
002741  003046  #CONST
002742  003058  #END
002743  003059        
002744  003060        
002745  003061        
002746  003062  //touch_Set() related constants
002747  003063  #CONST
002748  003067  #END
002749  003068        
002750  003069  //touch_Get() related constants
002751  003070  #CONST
002752  003078  #END
002753  003079        
002754  003080  // image control offset related constants
002755  003081  #CONST
002756  003088  #END
002757  003089        
002758  003090  // image attribute flags
002759  003091  // for img_SetAttributes(...) and img_ClearAttributes(...)
002760  003092  #CONST
002761  003106  #END
002762  003107        
002763  003108        
002764  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002765  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002766  003110        
002767  003111  // image control entry offsets
002768  003112  #CONST
002769  003127  #END
002770  003128        
002771  003129  #CONST
002772  003147  #END
002773  003148        
002774  003149        
002775  003150        
002776  003151        
002777  003152  #CONST
002778  003172  #END
002779  003173        
002780  003174        
002781  003175        
002782  003176  // timer control  related constants
002783  003177  #CONST
002784  003186  #END
002785  003187        
002786  003188  // I2C timing related constants
002787  003189  #CONST
002788  003193  #END
002789  003194        
002790  003195        
002791  003196  // spi_Init(...)  mode arguments
002792  003197  #CONST
002793  003207  #END
002794  003208        
002795  003209  //------------------------------------------------------------------------------
002796  003210  // system WORD variables accesible with peekW and pokeW or pointer access
002797  003211  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
002798  003212  // can also be accessed with peekW and pokeW
002799  003213  //------------------------------------------------------------------------------
002800  003214        
002801  003215  #CONST
002802  003309  #END
002803  003310        
002804  003311  //------------------------------------------------------------------------------
002805  003312  // FILEIO Error Code Constants
002806  003313  //------------------------------------------------------------------------------
002807  003314  #CONST
002808  003340  #END
002809  003341        
002810  003342  //==================================================================================================
002811  003343        
002812  003344        
002813  003345        
002814  000013      #ENDIF
002815  000014        
002816  000015        
002817  000016      #CONST
002818  000072      #END
002819  000073        
002820  000074        
002821  000075  //===========================================================================================
002822  000076        
002823  000077        
002824  000002        
002825  000003  // generated 02/12/2014 11:35:36
002826  000004        
002827  000005  #MODE RUNFLASH
002828  000006        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

002829  000007  #inherit "4DGL_16bitColours.fnc"
002830  000007  #inherit "4DGL_16bitColours.fnc"
002831  000004  */
002832  000005        
002833  000006        
002834  000007        
002835  000008  #CONST
002836  000149  #END
002837  000150        
002838  000008        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

002839  000009  #inherit "VisualConst.inc"
002840  000009  #inherit "VisualConst.inc"
002841  000001  // Line Patterns
002842  000002  #constant  LPCOARSE    0xF0F0
002843  000002  #constant  LPCOARSE    0xF0F0
002844  000003  #constant  LPMEDIUM    0x3333
002845  000003  #constant  LPMEDIUM    0x3333
002846  000004  #constant  LPFINE      0xAAAA
002847  000004  #constant  LPFINE      0xAAAA
002848  000005  #constant  LPDASHDOT   0x03CF
002849  000005  #constant  LPDASHDOT   0x03CF
002850  000006  #constant  LPDASHDOTDOT 0x0333
002851  000006  #constant  LPDASHDOTDOT 0x0333
002852  000007  #constant  LPSOLID     0x0000
002853  000007  #constant  LPSOLID     0x0000
002854  000010        
002855  000011        
file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_IntroConst.inc

002856  000012  #inherit "Test_millorat_IntroConst.inc"
002857  000012  #inherit "Test_millorat_IntroConst.inc"
002858  000001  // File generated 02/12/2014 11:35:23
002859  000002  // Warning! This is a generated file, any manual changes will be
002860  000003  // lost during the next generation.
002861  000004        
002862  000005  #constant  Strings0Count    1
002863  000005  #constant  Strings0Count    1
002864  000006  #constant  Strings0Size     28
002865  000006  #constant  Strings0Size     28
002866  000007  #constant  Strings1Count    0
002867  000007  #constant  Strings1Count    0
002868  000008  #constant  Strings1Size     1
002869  000008  #constant  Strings1Size     1
002870  000009  #constant  Strings3Count    1
002871  000009  #constant  Strings3Count    1
002872  000010  #constant  Strings3Size     18
002873  000010  #constant  Strings3Size     18
002874  000011  #constant  Strings13Count    1
002875  000011  #constant  Strings13Count    1
002876  000012  #constant  Strings13Size     25
002877  000012  #constant  Strings13Size     25
002878  000013  #constant  Strings9Count    1
002879  000013  #constant  Strings9Count    1
002880  000014  #constant  Strings9Size     25
002881  000014  #constant  Strings9Size     25
002882  000015  #constant  Strings5Count    1
002883  000015  #constant  Strings5Count    1
002884  000016  #constant  Strings5Size     13
002885  000016  #constant  Strings5Size     13
002886  000017  #constant  Strings4Count    1
002887  000017  #constant  Strings4Count    1
002888  000018  #constant  Strings4Size     25
002889  000018  #constant  Strings4Size     25
002890  000019  #constant  Strings6Count    1
002891  000019  #constant  Strings6Count    1
002892  000020  #constant  Strings6Size     26
002893  000020  #constant  Strings6Size     26
002894  000021  #constant  Strings2Count    0
002895  000021  #constant  Strings2Count    0
002896  000022  #constant  Strings2Size     1
002897  000022  #constant  Strings2Size     1
002898  000023  #constant  Strings7Count    0
002899  000023  #constant  Strings7Count    0
002900  000024  #constant  Strings7Size     1
002901  000024  #constant  Strings7Size     1
002902  000025  #constant  Strings8Count    1
002903  000025  #constant  Strings8Count    1
002904  000026  #constant  Strings8Size     25
002905  000026  #constant  Strings8Size     25
002906  000027  #constant  Strings10Count    0
002907  000027  #constant  Strings10Count    0
002908  000028  #constant  Strings10Size     1
002909  000028  #constant  Strings10Size     1
002910  000029  #constant  Strings11Count    1
002911  000029  #constant  Strings11Count    1
002912  000030  #constant  Strings11Size     25
002913  000030  #constant  Strings11Size     25
002914  000031  #constant  Strings12Count    1
002915  000031  #constant  Strings12Count    1
002916  000032  #constant  Strings12Size     19
002917  000032  #constant  Strings12Size     19
002918  000033  #constant  Strings14Count    1
002919  000033  #constant  Strings14Count    1
002920  000034  #constant  Strings14Size     23
002921  000034  #constant  Strings14Size     23
002922  000035  // object indexes into ImageControl
002923  000036  #CONST
002924  000145  #END
002925  000146        
002926  000147  #constant  Strings0StartH   0x0
002927  000147  #constant  Strings0StartH   0x0
002928  000148  #constant  Strings0StartL   0x0
002929  000148  #constant  Strings0StartL   0x0
002930  000149  #constant  Strings1StartH   0x0
002931  000149  #constant  Strings1StartH   0x0
002932  000150  #constant  Strings1StartL   0x200
002933  000150  #constant  Strings1StartL   0x200
002934  000151  #constant  Strings3StartH   0x0
002935  000151  #constant  Strings3StartH   0x0
002936  000152  #constant  Strings3StartL   0x400
002937  000152  #constant  Strings3StartL   0x400
002938  000153  #constant  Strings13StartH   0x0
002939  000153  #constant  Strings13StartH   0x0
002940  000154  #constant  Strings13StartL   0x600
002941  000154  #constant  Strings13StartL   0x600
002942  000155  #constant  Strings9StartH   0x0
002943  000155  #constant  Strings9StartH   0x0
002944  000156  #constant  Strings9StartL   0x800
002945  000156  #constant  Strings9StartL   0x800
002946  000157  #constant  Strings5StartH   0x0
002947  000157  #constant  Strings5StartH   0x0
002948  000158  #constant  Strings5StartL   0xA00
002949  000158  #constant  Strings5StartL   0xA00
002950  000159  #constant  Strings4StartH   0x0
002951  000159  #constant  Strings4StartH   0x0
002952  000160  #constant  Strings4StartL   0xC00
002953  000160  #constant  Strings4StartL   0xC00
002954  000161  #constant  Strings6StartH   0x0
002955  000161  #constant  Strings6StartH   0x0
002956  000162  #constant  Strings6StartL   0xE00
002957  000162  #constant  Strings6StartL   0xE00
002958  000163  #constant  Strings2StartH   0x0
002959  000163  #constant  Strings2StartH   0x0
002960  000164  #constant  Strings2StartL   0x1000
002961  000164  #constant  Strings2StartL   0x1000
002962  000165  #constant  Strings7StartH   0x0
002963  000165  #constant  Strings7StartH   0x0
002964  000166  #constant  Strings7StartL   0x1200
002965  000166  #constant  Strings7StartL   0x1200
002966  000167  #constant  Strings8StartH   0x0
002967  000167  #constant  Strings8StartH   0x0
002968  000168  #constant  Strings8StartL   0x1400
002969  000168  #constant  Strings8StartL   0x1400
002970  000169  #constant  Strings10StartH   0x0
002971  000169  #constant  Strings10StartH   0x0
002972  000170  #constant  Strings10StartL   0x1600
002973  000170  #constant  Strings10StartL   0x1600
002974  000171  #constant  Strings11StartH   0x0
002975  000171  #constant  Strings11StartH   0x0
002976  000172  #constant  Strings11StartL   0x1800
002977  000172  #constant  Strings11StartL   0x1800
002978  000173  #constant  Strings12StartH   0x0
002979  000173  #constant  Strings12StartH   0x0
002980  000174  #constant  Strings12StartL   0x1A00
002981  000174  #constant  Strings12StartL   0x1A00
002982  000175  #constant  Strings14StartH   0x0
002983  000175  #constant  Strings14StartH   0x0
002984  000176  #constant  Strings14StartL   0x1C00
002985  000176  #constant  Strings14StartL   0x1C00
002986  000177  #IFNOT EXISTS NOGLOBALS
002987  000178  var disk, hndl ;
002988  000179  #ENDIF
002989  000013        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

002990  000014  #inherit "CLPrintStrings.inc"
002991  000014  #inherit "CLPrintStrings.inc"
002992  000001  func PrintStrings(var ID, var *msgid, var String)
002993  000002      var StringID, i, ch, offs32[2], res32[2];
002994  000003      StringID := oStringss[1+ID] ;
002995  000004      if (String)
002996  000005          stringsCV[ID] := -1 ;
002997  000006      else
002998  000007          stringsCV[ID] := msgid ;
002999  000008      endif
003000  000009      if ((StringID == -1) || (*(StringID + STForm) != curform)) return ;
003001  000010      txt_FontID(hFonts[ID]) ;
003002  000011      txt_Attributes(*(StringID + STFontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
003003  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
003004  000013        
003005  000014      if (*(StringID + STTransparent))
003006  000015          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), *(StringID + STBGColor));
003007  000016      else if (formBGcol[curform] != BGIMAGE)
003008  000017          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), formBGcol[curform]);
003009  000018      else
003010  000019          gfx_ClipWindow(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2)) ;
003011  000020          gfx_Clipping(ON) ;
003012  000021          img_Show(hndl,formstidx[curform]) ;
003013  000022          gfx_Clipping(OFF) ;
003014  000023        
003015  000024      endif
003016  000025        
003017  000026      txt_FGcolour(*(StringID + STFGColor)) ;
003018  000027      txt_BGcolour(*(StringID + STBGColor)) ;
003019  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
003020  000029        
003021  000030      gfx_MoveTo(*(StringID + STx1) , *(StringID + STy1)) ;
003022  000031        
003023  000032      if (String)
003024  000033          i := 0 ;
003025  000034          ch := msgid[i++] ;
003026  000035          while (ch != 0)
003027  000036              putch(ch) ;
003028  000037              ch := msgid[i++] ;
003029  000038          wend
003030  000039      else
003031  000040          umul_1616(offs32, *(StringID + STSize), msgid);
003032  000041          res32[1] := *(StringID + STStartH) ;
003033  000042          res32[0] := *(StringID + STStartL) ;
003034  000043          uadd_3232(res32,res32,offs32) ;
003035  000044          file_Seek(hstrings, res32[1], res32[0]);
003036  000045          repeat
003037  000046              if (*(StringID + STAnsi))
003038  000047                  ch := file_GetC(hstrings) ;
003039  000048              else
003040  000049                  ch := file_GetW(hstrings) ;
003041  000050              endif
003042  000051              putch(ch) ;
003043  000052          until (ch == 0) ;
003044  000053      endif
003045  000054        
003046  000055  endfunc
003047  000056        
003048  000015        
003049  000016  #constant IPDatasize 22
003050  000016  #constant IPDatasize 22
003051  000017        
003052  000018  #CONST
003053  000020  #END
003054  000021        
003055  000022  #CONST
003056  000122  #END
003057  000123        
003058  000282  #END
3059  0BEA
3060  0BEB
3061  0BEC
3062  0BED
3063  0BEE
3064  0BEF
3065  0BF0
3066  0BF1
3067  0BF2
3068  0BF3
3069  0BF4
3070  0BF5
3071  0BF6
3072  0BF7
3073  0BF8
3074  0BF9
3075  0BFA
3076  0BFB
3077  0BFC
3078  0BFD
3079  0BFE
3080  0BFF
3081  0C00
3082  0C01
3083  0C02
3084  0C03
3085  0C04
3086  0C05
3087  0C06
3088  0C07
3089  0C08
3090  0C09
3091  0C0A
3092  0C0B
3093  0C0C
3094  0C0D
3095  0C0E
3096  0C0F
3097  0C10
3098  0C11
3099  0C12
3100  0C13
3101  0C14
3102  0C15
3103  0C16
3104  0C17
3105  0C18
3106  0C19
3107  0C1A
3108  0C1B
3109  0C1C
3110  0C1D
3111  0C1E
3112  0C1F
3113  0C20
3114  0C21
3115  0C22
3116  0C23
3117  0C24
3118  0C25
3119  0C26
3120  0C27
3121  0C28
3122  0C29
3123  0C2A
3124  0C2B
3125  0C2C
3126  0C2D
3127  0C2E
3128  0C2F
3129  0C30
3130  0C31
3131  0C32
3132  0C33
3133  0C34
3134  0C35
3135  0C36
3136  0C37
3137  0C38
3138  0C39
3139  0C3A
3140  0C3B
3141  0C3C
3142  0C3D
3143  0C3E
3144  0C3F
3145  0C40
3146  0C41
3147  0C42
3148  0C43
3149  0C44
3150  0C45
3151  0C46
3152  0C47
3153  0C48
3154  0C49
3155  0C4A
3156  0C4B
3157  0C4C
3158  0C4D
3159  0C4E
3160  0C4F
3161  0C50
3162  0C51
3163  0C52
3164  0C53
3165  0C54
3166  0C55
3167  0C56
3168  0C57
3169  0C58
3170  0C59
3171  0C5A
3172  0C5B
3173  0C5C
3174  0C5D
3175  0C5E
3176  0C5F
3177  0C60
3178  0C61
3179  0C62
3180  0C63
3181  0C64
3182  0C65
3183  0C66
3184  0C67
3185  0C68
3186  0C69
3187  0C6A
3188  0C6B
3189  0C6C
3190  0C6D
3191  0C6E
3192  0C6F
3193  0C70
3194  0C71
3195  0C72
3196  0C73
3197  0C74
3198  0C75
3199  0C76
3200  0C77
3201  0C78
3202  0C79
3203  0C7A
3204  0C7B
3205  0C7C
3206  0C7D
3207  0C7E
3208  0C7F
3209  0C80
3210  0C81
3211  0C82
3212  0C83
3213  0C84
3214  0C85
3215  0C86
3216  0C87
3217  0C88
3218  0C89
3219  0C8A
3220  0C8B
3221  0C8C
3222  0C8D
3223  0C8E
3224  0C8F
3225  0C90
3226  0C91
3227  0C92
3228  0C93
3229  0C94
3230  0C95
3231  0C96
3232  0C97
3233  0C98
3234  0C99
3235  0C9A
3236  0C9B
3237  0C9C
3238  0C9D
3239  0C9E
3240  0C9F
3241  0CA0
3242  0CA1
3243  0CA2
3244  0CA3
3245  0CA4
3246  0CA5
3247  0CA6
3248  0CA7
3249  0CA8
3250  0CA9
3251  0CAA
3252  0CAB
3253  0CAC
3254  0CAD
3255  0CAE
3256  0CAF
3257  0CB0
3258  0CB1
3259  0CB2
3260  0CB3
3261  0CB4
3262  0CB5
3263  0CB6
3264  0CB7
3265  0CB8
3266  0CB9
3267  0CBA
3268  0CBB
3269  0CBC
3270  0CBD
3271  0CBE
3272  0CBF
3273  0CC0
3274  0CC1
3275  0CC2
3276  0CC3
3277  0CC4
3278  0CC5
3279  0CC6
3280  0CC7
3281  0CC8
3282  0CC9
3283  0CCA
3284  0CCB
3285  0CCC
3286  0CCD
3287  0CCE
3288  0CCF
3289  0CD0
3290  0CD1
3291  0CD2
3292  0CD3
3293  0CD4
3294  0CD5
3295  0CD6
3296  0CD7
3297  0CD8
3298  0CD9
3299  0CDA
3300  0CDB
3301  0CDC
3302  0CDD
3303  0CDE
3304  0CDF
3305  0CE0
3306  0CE1
3307  0CE2
3308  0CE3
3309  0CE4
3310  0CE5
3311  0CE6
3312  0CE7
3313  0CE8
3314  0CE9
3315  0CEA
3316  0CEB
3317  0CEC
3318  0CED
3319  0CEE
3320  0CEF
3321  0CF0
3322  0CF1
3323  0CF2
3324  0CF3
3325  0CF4
3326  0CF5
3327  0CF6
3328  0CF7
3329  0CF8
3330  0CF9
3331  0CFA
3332  0CFB
3333  0CFC
3334  0CFD
3335  0CFE
3336  0CFF
3337  0D00
3338  0D01
3339  0D02
3340  0D03
3341  0D04
3342  0D05
3343  0D06
3344  0D07
3345  0D08
3346  0D09
3347  0D0A
3348  0D0B
3349  0D0C
3350  0D0D
3351  0D0E
3352  0D0F
3353  0D10
3354  0D11
3355  0D12
3356  0D13
3357  0D14
3358  0D15
3359  0D16
3360  0D17
3361  0D18
3362  0D19
3363  0D1A
3364  0D1B
3365  0D1C
3366  0D1D
3367  0D1E
3368  0D1F
3369  0D20
3370  0D21
3371  0D22
3372  0D23
3373  0D24
3374  0D25
3375  0D26
3376  0D27
3377  0D28
3378  0D29
3379  0D2A
3380  0D2B
3381  0D2C
3382  0D2D
3383  0D2E
3384  0D2F
3385  0D30
3386  0D31
3387  0D32
3388  0D33
3389  0D34
3390  0D35
3391  0D36
3392  0D37
3393  0D38
3394  0D39
3395  0D3A
3396  0D3B
3397  0D3C
3398  0D3D
3399  0D3E
3400  0D3F
3401  0D40
3402  0D41
3403  0D42
3404  0D43
3405  0D44
3406  0D45
3407  0D46
3408  0D47
3409  0D48
3410  0D49
3411  0D4A
3412  0D4B
3413  0D4C
3414  0D4D
3415  0D4E
3416  0D4F
3417  0D50
3418  0D51
3419  0D52
3420  0D53
3421  0D54
3422  0D55
3423  0D56
3424  0D57
3425  0D58
3426  0D59
3427  0D5A
3428  0D5B
3429  0D5C
3430  0D5D
3431  0D5E
3432  0D5F
3433  0D60
3434  0D61
3435  0D62
3436  0D63
3437  0D64
3438  0D65
3439  0D66
3440  0D67
3441  0D68
3442  0D69
3443  0D6A
3444  0D6B
3445  0D6C
3446  0D6D
3447  0D6E
3448  0D6F
3449  0D70
3450  0D71
3451  0D72
3452  0D73
3453  0D74
3454  0D75
3455  0D76
3456  0D77
3457  0D78
3458  0D79
3459  0D7A
3460  0D7B
3461  0D7C
3462  0D7D
3463  0D7E
3464  0D7F
3465  0D80
3466  0D81
3467  0D82
3468  0D83
3469  0D84
3470  0D85
3471  0D86
3472  0D87
3473  0D88
3474  0D89
3475  0D8A
3476  0D8B
3477  0D8C
3478  0D8D
3479  0D8E
3480  0D8F
3481  0D90
3482  0D91
3483  0D92
3484  0D93
3485  0D94
3486  0D95
3487  0D96
3488  0D97
3489  0D98
3490  0D99
3491  0D9A
3492  0D9B
3493  0D9C
3494  0D9D
3495  0D9E
3496  0D9F
3497  0DA0
3498  0DA1
3499  0DA2
3500  0DA3
3501  0DA4
3502  0DA5
3503  0DA6
3504  0DA7
3505  0DA8
3506  0DA9
3507  0DAA
3508  0DAB
3509  0DAC
3510  0DAD
3511  0DAE
3512  0DAF
3513  0DB0
3514  0DB1
3515  0DB2
3516  0DB3
3517  0DB4
3518  0DB5
3519  0DB6
3520  0DB7
3521  0DB8
3522  0DB9
3523  0DBA
3524  0DBB
3525  0DBC
3526  0DBD
3527  0DBE
3528  0DBF
3529  0DC0
3530  0DC1
3531  0DC2
3532  0DC3
3533  0DC4
3534  0DC5
3535  0DC6
3536  0DC7
3537  0DC8
3538  0DC9
3539  0DCA
3540  0DCB
3541  0DCC
3542  0DCD
3543  0DCE
3544  0DCF
3545  0DD0
3546  0DD1
3547  0DD2
3548  0DD3
3549  0DD4
3550  0DD5
3551  0DD6
3552  0DD7
3553  0DD8
3554  0DD9
3555  0DDA
3556  0DDB
3557  0DDC
3558  0DDD
3559  0DDE
3560  0DDF
3561  0DE0
3562  0DE1
3563  0DE2
3564  0DE3
3565  0DE4
3566  0DE5
3567  0DE6
3568  0DE7
3569  0DE8
3570  0DE9
3571  0DEA
3572  0DEB
3573  0DEC
3574  0DED
3575  0DEE
3576  0DEF
3577  0DF0
3578  0DF1
3579  0DF2
3580  0DF3
3581  0DF4
3582  0DF5
3583  0DF6
3584  0DF7
3585  0DF8
3586  0DF9
3587  0DFA
3588  0DFB
3589  0DFC
3590  0DFD
3591  0DFE
3592  0DFF
3593  0E00
3594  0E01
3595  0E02
3596  0E03
3597  0E04
3598  0E05
3599  0E06
3600  0E07
3601  0E08
3602  0E09
3603  0E0A
3604  0E0B
3605  0E0C
3606  0E0D
3607  0E0E
3608  0E0F
3609  0E10
3610  0E11
3611  0E12
3612  0E13
3613  0E14
3614  0E15
3615  0E16
3616  0E17
3617  0E18
3618  0E19
3619  0E1A
3620  0E1B
3621  0E1C
3622  0E1D
3623  0E1E
3624  0E1F
3625  0E20
3626  0E21
3627  0E22
3628  0E23
3629  0E24
3630  0E25
3631  0E26
3632  0E27
3633  0E28
3634  0E29
3635  0E2A
3636  0E2B
3637  0E2C
3638  0E2D
3639  0E2E
3640  0E2F
3641  0E30
3642  0E31
3643  0E32
3644  0E33
3645  0E34
3646  0E35
3647  0E36
3648  0E37
3649  0E38
3650  0E39
3651  0E3A
3652  0E3B
3653  0E3C
3654  0E3D
3655  0E3E
3656  0E3F
3657  0E40
3658  0E41
3659  0E42
3660  0E43
3661  0E44
3662  0E45
3663  0E46
3664  0E47
3665  0E48
3666  0E49
3667  0E4A
3668  0E4B
3669  0E4C
3670  0E4D
3671  0E4E
3672  0E4F
3673  0E50
3674  0E51
3675  0E52
3676  0E53
3677  0E54
3678  0E55
3679  0E56
3680  0E57
3681  0E58
3682  0E59
3683  0E5A
3684  0E5B
3685  0E5C
3686  0E5D
3687  0E5E
3688  0E5F
3689  0E60
3690  0E61
3691  0E62
3692  0E63
3693  0E64
3694  0E65
3695  0E66
3696  0E67
3697  0E68
3698  0E69
3699  0E6A
3700  0E6B
3701  0E6C
3702  0E6D
3703  0E6E
3704  0E6F
3705  0E70
3706  0E71
3707  0E72
3708  0E73
3709  0E74
3710  0E75
3711  0E76
3712  0E77
3713  0E78
3714  0E79
3715  0E7A
3716  0E7B
3717  0E7C
3718  0E7D
3719  0E7E
3720  0E7F
3721  0E80
3722  0E81
3723  0E82
3724  0E83
3725  0E84
3726  0E85
3727  0E86
3728  0E87
3729  0E88
3730  0E89
3731  0E8A
3732  0E8B
3733  0E8C
3734  0E8D
3735  0E8E
3736  0E8F
3737  0E90
3738  0E91
3739  0E92
3740  0E93
3741  0E94
3742  0E95
3743  0E96
3744  0E97
3745  0E98
3746  0E99
3747  0E9A
3748  0E9B
3749  0E9C
3750  0E9D
3751  0E9E
3752  0E9F
3753  0EA0
3754  0EA1
3755  0EA2
3756  0EA3
3757  0EA4
3758  0EA5
3759  0EA6
3760  0EA7
3761  0EA8
3762  0EA9
3763  0EAA
3764  0EAB
3765  0EAC
3766  0EAD
3767  0EAE
3768  0EAF
3769  0EB0
3770  0EB1
3771  0EB2
3772  0EB3
3773  0EB4
3774  0EB5
3775  0EB6
3776  0EB7
3777  0EB8
3778  0EB9
3779  0EBA
3780  0EBB
3781  0EBC
3782  0EBD
3783  0EBE
3784  0EBF
3785  0EC0
3786  0EC1
3787  0EC2
3788  0EC3
3789  0EC4
3790  0EC5
3791  0EC6
3792  0EC7
3793  0EC8
3794  0EC9
3795  0ECA
3796  0ECB
3797  0ECC
3798  0ECD
3799  0ECE
3800  0ECF
3801  0ED0
3802  0ED1
3803  0ED2
3804  0ED3
3805  0ED4
3806  0ED5
3807  0ED6
3808  0ED7
3809  0ED8
3810  0ED9
3811  0EDA
3812  0EDB
3813  0EDC
3814  0EDD
3815  0EDE
3816  0EDF
3817  0EE0
3818  0EE1
3819  0EE2
3820  0EE3
3821  0EE4
3822  0EE5
3823  0EE6
3824  0EE7
3825  0EE8
3826  0EE9
3827  0EEA
3828  0EEB
3829  0EEC
3830  0EED
3831  0EEE
3832  0EEF
3833  0EF0
3834  0EF1
3835  0EF2
3836  0EF3
3837  0EF4
3838  0EF5
3839  0EF6
3840  0EF7
3841  0EF8
3842  0EF9
3843  0EFA
3844  0EFB
3845  0EFC
3846  0EFD
3847  0EFE
3848  0EFF
3849  0F00
3850  0F01
3851  0F02
3852  0F03
3853  0F04
3854  0F05
3855  0F06
3856  0F07
3857  0F08
3858  0F09
3859  0F0A
3860  0F0B
3861  0F0C
3862  0F0D
3863  0F0E
3864  0F0F
3865  0F10
3866  0F11
3867  0F12
3868  0F13
3869  0F14
3870  0F15
3871  0F16
3872  0F17
3873  0F18
3874  0F19
3875  0F1A
3876  0F1B
3877  0F1C
3878  0F1D
3879  0F1E
3880  0F1F
3881  0F20
3882  0F21
3883  0F22
3884  0F23
3885  0F24
3886  0F25
3887  0F26
3888  0F27
3889  0F28
3890  0F29
3891  0F2A
3892  0F2B
3893  0F2C
3894  0F2D
3895  0F2E
3896  0F2F
3897  0F30
3898  0F31
3899  0F32
3900  0F33
3901  0F34
3902  0F35
3903  0F36
3904  0F37
3905  0F38
3906  0F39
3907  0F3A
3908  0F3B
3909  0F3C
3910  0F3D
3911  0F3E
3912  0F3F
3913  0F40
3914  0F41
3915  0F42
3916  0F43
3917  0F44
3918  0F45
3919  0F46
3920  0F47
3921  0F48
3922  0F49
3923  0F4A
3924  0F4B
3925  0F4C
3926  0F4D
3927  0F4E
3928  0F4F
3929  0F50
3930  0F51
3931  0F52
3932  0F53
3933  0F54
3934  0F55
3935  0F56
3936  0F57
3937  0F58
3938  0F59
3939  0F5A
3940  0F5B
3941  0F5C
3942  0F5D
3943  0F5E
3944  0F5F
3945  0F60
3946  0F61
3947  0F62
3948  0F63
3949  0F64
3950  0F65
3951  0F66
3952  0F67
3953  0F68
3954  0F69
3955  0F6A
3956  0F6B
3957  0F6C
3958  0F6D
3959  0F6E
3960  0F6F
3961  0F70
3962  0F71
3963  0F72
3964  0F73
3965  0F74
3966  0F75
3967  0F76
3968  0F77
3969  0F78
3970  0F79
3971  0F7A
3972  0F7B
3973  0F7C
3974  0F7D
3975  0F7E
3976  0F7F
3977  0F80
3978  0F81
3979  0F82
3980  0F83
3981  0F84
3982  0F85
3983  0F86
3984  0F87
3985  0F88
3986  0F89
3987  0F8A
3988  0F8B
3989  0F8C
3990  0F8D
3991  0F8E
3992  0F8F
3993  0F90
3994  0F91
3995  0F92
3996  0F93
3997  0F94
3998  0F95
3999  0F96
4000  0F97
4001  0F98
4002  0F99
4003  0F9A
4004  0F9B
4005  0F9C
4006  0F9D
4007  0F9E
4008  0F9F
4009  0FA0
4010  0FA1
4011  0FA2
4012  0FA3
4013  0FA4
4014  0FA5
4015  0FA6
4016  0FA7
4017  0FA8
4018  0FA9
4019  0FAA
4020  0FAB
4021  0FAC
4022  0FAD
4023  0FAE
4024  0FAF
4025  0FB0
4026  0FB1
4027  0FB2
4028  0FB3
4029  0FB4
4030  0FB5
4031  0FB6
4032  0FB7
4033  0FB8
4034  0FB9
4035  0FBA
4036  0FBB
4037  0FBC
4038  0FBD
4039  0FBE
4040  0FBF
4041  0FC0
4042  0FC1
4043  0FC2
4044  0FC3
4045  0FC4
4046  0FC5
4047  0FC6
4048  0FC7
4049  0FC8
4050  0FC9
4051  0FCA
4052  0FCB
4053  0FCC
4054  0FCD
4055  0FCE
4056  0FCF
4057  0FD0
4058  0FD1
4059  0FD2
4060  0FD3
4061  0FD4
4062  0FD5
4063  0FD6
4064  0FD7
4065  0FD8
4066  0FD9
4067  0FDA
4068  0FDB
4069  0FDC
4070  0FDD
4071  0FDE
4072  0FDF
4073  0FE0
4074  0FE1
4075  0FE2
4076  0FE3
4077  0FE4
4078  0FE5
4079  0FE6
4080  0FE7
4081  0FE8
4082  0FE9
4083  0FEA
4084  0FEB
4085  0FEC
4086  0FED
4087  0FEE
4088  0FEF
4089  0FF0
4090  0FF1
4091  0FF2
4092  0FF3
4093  0FF4
4094  0FF5
4095  0FF6
4096  0FF7
4097  0FF8
4098  0FF9
4099  0FFA
4100  0FFB
4101  0FFC
4102  0FFD
4103  0FFE
4104  0FFF
4105  1000
4106  1001
4107  1002
4108  1003
4109  1004
4110  1005
4111  1006
4112  1007
4113  1008
4114  1009
4115  100A
4116  100B
4117  100C
4118  100D
4119  100E
4120  100F
4121  1010
4122  1011
4123  1012
4124  1013
4125  1014
4126  1015
4127  1016
4128  1017
4129  1018
4130  1019
4131  101A
4132  101B
4133  101C
4134  101D
4135  101E
4136  101F
4137  1020
4138  1021
4139  1022
4140  1023
4141  1024
4142  1025
4143  1026
4144  1027
4145  1028
4146  1029
4147  102A
4148  102B
4149  102C
4150  102D
4151  102E
4152  102F
4153  1030
4154  1031
4155  1032
4156  1033
4157  1034
4158  1035
4159  1036
4160  1037
4161  1038
4162  1039
4163  103A
4164  103B
4165  103C
4166  103D
4167  103E
4168  103F
4169  1040
4170  1041
4171  1042
4172  1043
4173  1044
4174  1045
4175  1046
4176  1047
4177  1048
4178  1049
4179  104A
4180  104B
4181  104C
4182  104D
4183  104E
4184  104F
4185  1050
4186  1051
4187  1052
4188  1053
4189  1054
4190  1055
4191  1056
4192  1057
4193  1058
4194  1059
4195  105A
4196  105B
4197  105C
4198  105D
4199  105E
4200  105F
4201  1060
4202  1061
4203  1062
4204  1063
4205  1064
4206  1065
4207  1066
4208  1067
4209  1068
4210  1069
4211  106A
4212  106B
4213  106C
4214  106D
4215  106E
4216  106F
4217  1070
4218  1071
4219  1072
4220  1073
4221  1074
4222  1075
4223  1076
4224  1077
4225  1078
4226  1079
4227  107A
4228  107B
4229  107C
4230  107D
4231  107E
4232  107F
4233  1080
4234  1081
4235  1082
4236  1083
4237  1084
4238  1085
4239  1086
4240  1087
4241  1088
4242  1089
4243  108A
4244  108B
4245  108C
4246  108D
4247  108E
4248  108F
4249  1090
4250  1091
4251  1092
4252  1093
4253  1094
4254  1095
4255  1096
4256  1097
4257  1098
4258  1099
4259  109A
4260  109B
4261  109C
4262  109D
4263  109E
4264  109F
4265  10A0
4266  10A1
4267  10A2
4268  10A3
4269  10A4
4270  10A5
4271  10A6
4272  10A7
4273  10A8
4274  10A9
4275  10AA
4276  10AB
4277  10AC
4278  10AD
4279  10AE
4280  10AF
4281  10B0
4282  10B1
4283  10B2
4284  10B3
4285  10B4
4286  10B5
4287  10B6
4288  10B7
4289  10B8
4290  10B9
4291  10BA
4292  10BB
4293  10BC
4294  10BD
4295  10BE
4296  10BF
4297  10C0
4298  10C1
4299  10C2
4300  10C3
4301  10C4
4302  10C5
4303  10C6
4304  10C7
4305  10C8
4306  10C9
4307  10CA
4308  10CB
4309  10CC
4310  10CD
4311  10CE
4312  10CF
4313  10D0
4314  10D1
4315  10D2
4316  10D3
4317  10D4
4318  10D5
4319  10D6
4320  10D7
4321  10D8
4322  10D9
4323  10DA
4324  10DB
4325  10DC
4326  10DD
4327  10DE
4328  10DF
4329  10E0
4330  10E1
4331  10E2
4332  10E3
4333  10E4
4334  10E5
4335  10E6
4336  10E7
4337  10E8
4338  10E9
4339  10EA
4340  10EB
4341  10EC
4342  10ED
4343  10EE
4344  10EF
4345  10F0
4346  10F1
4347  10F2
4348  10F3
4349  10F4
4350  10F5
4351  10F6
4352  10F7
4353  10F8
4354  10F9
4355  10FA
4356  10FB
4357  10FC
4358  10FD
4359  10FE
4360  10FF
4361  1100
4362  1101
4363  1102
4364  1103
4365  1104
4366  1105
4367  1106
4368  1107
4369  1108
4370  1109
4371  110A
4372  110B
4373  110C
4374  110D
4375  110E
4376  110F
4377  1110
4378  1111
4379  1112
4380  1113
4381  1114
4382  1115
4383  1116
4384  1117
4385  1118
4386  1119
4387  111A
4388  111B
4389  111C
4390  111D
4391  111E
4392  111F
4393  1120
4394  1121
4395  1122
4396  1123
4397  1124
4398  1125
4399  1126
4400  1127
4401  1128
4402  1129
4403  112A
4404  112B
4405  112C
4406  112D
4407  112E
4408  112F
4409  1130
4410  1131
4411  1132
4412  1133
4413  1134
4414  1135
4415  1136
4416  1137
4417  1138
4418  1139
4419  113A
4420  113B
4421  113C
4422  113D
4423  113E
4424  113F
4425  1140
4426  1141
4427  1142
4428  1143
4429  1144
4430  1145
4431  1146
4432  1147
4433  1148
4434  1149
4435  114A
4436  114B
4437  114C
4438  114D
4439  114E
4440  114F
4441  1150
4442  1151
4443  1152
4444  1153
4445  1154
4446  1155
4447  1156
4448  1157
4449  1158
4450  1159
4451  115A
4452  115B
4453  115C
4454  115D
4455  115E
4456  115F
4457  1160
4458  1161
4459  1162
4460  1163
4461  1164
4462  1165
4463  1166
4464  1167
4465  1168
4466  1169
4467  116A
4468  116B
4469  116C
4470  116D
4471  116E
4472  116F
4473  1170
4474  1171
4475  1172
4476  1173
4477  1174
4478  1175
4479  1176
4480  1177
4481  1178
4482  1179
4483  117A
4484  117B
4485  117C
4486  117D
4487  117E
4488  117F
4489  1180
4490  1181
4491  1182
4492  1183
4493  1184
4494  1185
4495  1186
4496  1187
4497  1188
4498  1189
4499  118A
4500  118B
4501  118C
4502  118D
4503  118E
4504  118F
4505  1190
4506  1191
4507  1192
4508  1193
4509  1194
4510  1195
4511  1196
4512  1197
4513  1198
4514  1199
4515  119A
4516  119B
4517  119C
4518  119D
4519  119E
4520  119F
4521  11A0
4522  11A1
4523  11A2
4524  11A3
4525  11A4
4526  11A5
4527  11A6
4528  11A7
4529  11A8
4530  11A9
4531  11AA
4532  11AB
4533  11AC
4534  11AD
4535  11AE
4536  11AF
4537  11B0
4538  11B1
4539  11B2
4540  11B3
4541  11B4
4542  11B5
4543  11B6
4544  11B7
4545  11B8
4546  11B9
4547  11BA
4548  11BB
4549  11BC
4550  11BD
4551  11BE
4552  11BF
4553  11C0
4554  11C1
4555  11C2
4556  11C3
4557  11C4
4558  11C5
4559  11C6
4560  11C7
4561  11C8
4562  11C9
4563  11CA
4564  11CB
4565  11CC
4566  11CD
4567  11CE
4568  11CF
4569  11D0
4570  11D1
4571  11D2
4572  11D3
4573  11D4
4574  11D5
4575  11D6
4576  11D7
4577  11D8
4578  11D9
4579  11DA
4580  11DB
4581  11DC
4582  11DD
4583  11DE
4584  11DF
4585  11E0
4586  11E1
4587  11E2
4588  11E3
4589  11E4
4590  11E5
4591  11E6
4592  11E7
4593  11E8
4594  11E9
4595  11EA
4596  11EB
4597  11EC
4598  11ED
4599  11EE
4600  11EF
4601  11F0
4602  11F1
4603  11F2
4604  11F3
4605  11F4
4606  11F5
4607  11F6
4608  11F7
4609  11F8
4610  11F9
4611  11FA
4612  11FB
4613  11FC
4614  11FD
4615  11FE
4616  11FF
4617  1200
4618  1201
4619  1202
4620  1203
4621  1204
4622  1205
4623  1206
4624  1207
4625  1208
4626  1209
4627  120A
4628  120B
4629  120C
4630  120D
4631  120E
4632  120F
4633  1210
4634  1211
4635  1212
4636  1213
4637  1214
4638  1215
4639  1216
4640  1217
4641  1218
4642  1219
4643  121A
4644  121B
4645  121C
4646  121D
4647  121E
4648  121F
4649  1220
4650  1221
4651  1222
4652  1223
4653  1224
4654  1225
4655  1226
4656  1227
4657  1228
4658  1229
4659  122A
4660  122B
4661  122C
4662  122D
4663  122E
4664  122F
4665  1230
4666  1231
4667  1232
4668  1233
4669  1234
4670  1235
4671  1236
4672  1237
4673  1238
4674  1239
4675  123A
4676  123B
4677  123C
4678  123D
4679  123E
4680  123F
4681  1240
4682  1241
4683  1242
4684  1243
4685  1244
4686  1245
4687  1246
4688  1247
4689  1248
4690  1249
4691  124A
4692  124B
4693  124C
4694  124D
4695  124E
4696  124F
4697  1250
4698  1251
4699  1252
4700  1253
4701  1254
4702  1255
4703  1256
4704  1257
4705  1258
4706  1259
4707  125A
4708  125B
4709  125C
4710  125D
4711  125E
4712  125F
4713  1260
4714  1261
4715  1262
4716  1263
4717  1264
4718  1265
4719  1266
4720  1267
4721  1268
4722  1269
4723  126A
4724  126B
4725  126C
4726  126D
4727  126E
4728  126F
4729  1270
4730  1271
4731  1272
4732  1273
4733  1274
4734  1275
4735  1276
4736  1277
4737  1278
4738  1279
4739  127A
4740  127B
4741  127C
4742  127D
4743  127E
4744  127F
4745  1280
4746  1281
4747  1282
4748  1283
4749  1284
4750  1285
4751  1286
4752  1287
4753  1288
4754  1289
4755  128A
4756  128B
4757  128C
4758  128D
4759  128E
4760  128F
4761  1290
4762  1291
4763  1292
4764  1293
4765  1294
4766  1295
4767  1296
4768  1297
4769  1298
4770  1299
4771  129A
4772  129B
4773  129C
4774  129D
4775  129E
4776  129F
4777  12A0
4778  12A1
4779  12A2
4780  12A3
4781  12A4
4782  12A5
4783  12A6
4784  12A7
4785  12A8
4786  12A9
4787  12AA
4788  12AB
4789  12AC
4790  12AD
4791  12AE
4792  12AF
4793  12B0
4794  12B1
4795  12B2
4796  12B3
4797  12B4
4798  12B5
4799  12B6
4800  12B7
4801  12B8
4802  12B9
4803  12BA
4804  12BB
4805  12BC
4806  12BD
4807  12BE
4808  12BF
4809  12C0
4810  12C1
4811  12C2
4812  12C3
4813  12C4
4814  12C5
4815  12C6
4816  12C7
4817  12C8
4818  12C9
4819  12CA
4820  12CB
4821  12CC
4822  12CD
4823  12CE
4824  12CF
4825  12D0
4826  12D1
4827  12D2
4828  12D3
4829  12D4
4830  12D5
4831  12D6
4832  12D7
4833  12D8
4834  12D9
4835  12DA
4836  12DB
4837  12DC
4838  12DD
4839  12DE
4840  12DF
4841  12E0
4842  12E1
4843  12E2
4844  12E3
4845  12E4
4846  12E5
4847  12E6
4848  12E7
4849  12E8
4850  12E9
4851  12EA
4852  12EB
4853  12EC
4854  12ED
4855  12EE
4856  12EF
4857  12F0
4858  12F1
4859  12F2
4860  12F3
4861  12F4
4862  12F5
4863  12F6
4864  12F7
4865  12F8
4866  12F9
4867  12FA
4868  12FB
4869  12FC
4870  12FD
4871  12FE
4872  12FF
4873  1300
4874  1301
4875  1302
4876  1303
4877  1304
4878  1305
4879  1306
4880  1307
4881  1308
4882  1309
4883  130A
4884  130B
4885  130C
4886  130D
4887  130E
4888  130F
4889  1310
4890  1311
4891  1312
4892  1313
4893  1314
4894  1315
4895  1316
4896  1317
4897  1318
4898  1319
4899  131A
4900  131B
4901  131C
4902  131D
4903  131E
4904  131F
4905  1320
4906  1321
4907  1322
4908  1323
4909  1324
4910  1325
4911  1326
4912  1327
4913  1328
4914  1329
4915  132A
4916  132B
4917  132C
4918  132D
4919  132E
4920  132F
4921  1330
4922  1331
4923  1332
4924  1333
4925  1334
4926  1335
4927  1336
4928  1337
4929  1338
4930  1339
4931  133A
4932  133B
4933  133C
4934  133D
4935  133E
4936  133F
4937  1340
4938  1341
4939  1342
4940  1343
4941  1344
4942  1345
4943  1346
4944  1347
4945  1348
4946  1349
4947  134A
4948  134B
4949  134C
4950  134D
4951  134E
4952  134F
4953  1350
4954  1351
4955  1352
4956  1353
4957  1354
4958  1355
4959  1356
4960  1357
4961  1358
4962  1359
4963  135A
4964  135B
4965  135C
4966  135D
4967  135E
4968  135F
4969  1360
4970  1361
4971  1362
4972  1363
4973  1364
4974  1365
4975  1366
4976  1367
4977  1368
4978  1369
4979  136A
4980  136B
4981  136C
4982  136D
4983  136E
4984  136F
4985  1370
4986  1371
4987  1372
4988  1373
4989  1374
4990  1375
4991  1376
4992  1377
4993  1378
4994  1379
4995  137A
4996  137B
4997  137C
4998  137D
4999  137E
5000  137F
5001  1380
5002  1381
5003  1382
5004  1383
5005  1384
5006  1385
5007  1386
5008  1387
5009  1388
5010  1389
5011  138A
5012  138B
5013  138C
5014  138D
5015  138E
5016  138F
5017  1390
5018  1391
5019  1392
5020  1393
5021  1394
5022  1395
5023  1396
5024  1397
5025  1398
5026  1399
5027  139A
5028  139B
5029  139C
5030  139D
5031  139E
5032  139F
5033  13A0
5034  13A1
5035  13A2
5036  13A3
5037  13A4
5038  13A5
5039  13A6
5040  13A7
5041  13A8
5042  13A9
5043  13AA
5044  13AB
5045  13AC
5046  13AD
5047  13AE
5048  13AF
5049  13B0
5050  13B1
5051  13B2
5052  13B3
5053  13B4
5054  13B5
5055  13B6
5056  13B7
5057  13B8
5058  13B9
5059  13BA
5060  13BB
5061  13BC
5062  13BD
5063  13BE
5064  13BF
5065  13C0
5066  13C1
5067  13C2
5068  13C3
5069  13C4
5070  13C5
5071  13C6
5072  13C7
5073  13C8
5074  13C9
5075  13CA
5076  13CB
5077  13CC
5078  13CD
5079  13CE
5080  13CF
5081  13D0
5082  13D1
5083  13D2
5084  13D3
5085  13D4
5086  13D5
5087  13D6
5088  13D7
5089  13D8
5090  13D9
5091  13DA
5092  13DB
5093  13DC
5094  13DD
5095  13DE
5096  13DF
5097  13E0
5098  13E1
5099  13E2
5100  13E3
5101  13E4
5102  13E5
5103  13E6
5104  13E7
5105  13E8
5106  13E9
5107  13EA
5108  13EB
5109  13EC
5110  13ED
5111  13EE
5112  13EF
5113  13F0
5114  13F1
5115  13F2
5116  13F3
5117  13F4
5118  13F5
5119  13F6
5120  13F7
5121  13F8
5122  13F9
5123  13FA
5124  13FB
5125  13FC
5126  13FD
5127  13FE
5128  13FF
5129  1400
5130  1401
5131  1402
5132  1403
5133  1404
5134  1405
5135  1406
5136  1407
5137  1408
5138  1409
5139  140A
5140  140B
5141  140C
5142  140D
5143  140E
5144  140F
5145  1410
5146  1411
5147  1412
5148  1413
5149  1414
5150  1415
5151  1416
5152  1417
5153  1418
5154  1419
5155  141A
5156  141B
5157  141C
5158  141D
5159  141E
5160  141F
5161  1420
5162  1421
5163  1422
5164  1423
5165  1424
5166  1425
5167  1426
5168  1427
5169  1428
5170  1429
5171  142A
5172  142B
5173  142C
5174  142D
5175  142E
5176  142F
5177  1430
5178  1431
5179  1432
5180  1433
5181  1434
5182  1435
5183  1436
5184  1437
5185  1438
5186  1439
5187  143A
5188  143B
5189  143C
5190  143D
5191  143E
5192  143F
5193  1440
5194  1441
5195  1442
5196  1443
5197  1444
5198  1445
5199  1446
5200  1447
5201  1448
5202  1449
5203  144A
5204  144B
5205  144C
5206  144D
5207  144E
5208  144F
5209  1450
5210  1451
5211  1452
5212  1453
5213  1454
5214  1455
5215  1456
5216  1457
5217  1458
5218  1459
5219  145A
5220  145B
5221  145C
5222  145D
5223  145E
5224  145F
5225  1460
5226  1461
5227  1462
5228  1463
5229  1464
5230  1465
5231  1466
5232  1467
5233  1468
5234  1469
5235  146A
5236  146B
5237  146C
5238  146D
5239  146E
5240  146F
5241  1470
5242  1471
5243  1472
5244  1473
5245  1474
5246  1475
5247  1476
5248  1477
5249  1478
5250  1479
5251  147A
5252  147B
5253  147C
5254  147D
5255  147E
5256  147F
5257  1480
5258  1481
5259  1482
5260  1483
5261  1484
5262  1485
5263  1486
5264  1487
5265  1488
5266  1489
5267  148A
5268  148B
5269  148C
5270  148D
5271  148E
5272  148F
5273  1490
5274  1491
5275  1492
5276  1493
5277  1494
5278  1495
5279  1496
5280  1497
5281  1498
5282  1499
5283  149A
5284  149B
5285  149C
5286  149D
5287  149E
5288  149F
5289  14A0
5290  14A1
5291  14A2
5292  14A3
5293  14A4
5294  14A5
5295  14A6
5296  14A7
5297  14A8
5298  14A9
5299  14AA
5300  14AB
5301  14AC
5302  14AD
5303  14AE
5304  14AF
5305  14B0
5306  14B1
5307  14B2
5308  14B3
5309  14B4
5310  14B5
5311  14B6
5312  14B7
5313  14B8
5314  14B9
5315  14BA
5316  14BB
5317  14BC
5318  14BD
5319  14BE
5320  14BF
5321  14C0
5322  14C1
5323  14C2
5324  14C3
5325  14C4
5326  14C5
5327  14C6
5328  14C7
5329  14C8
5330  14C9
5331  14CA
5332  14CB
5333  14CC
5334  14CD
5335  14CE
5336  14CF
5337  14D0
5338  14D1
5339  14D2
5340  14D3
5341  14D4
5342  14D5
5343  14D6
5344  14D7
5345  14D8
5346  14D9
5347  14DA
5348  14DB
5349  14DC
5350  14DD
5351  14DE
5352  14DF
5353  14E0
5354  14E1
5355  14E2
5356  14E3
5357  14E4
5358  14E5
5359  14E6
5360  14E7
5361  14E8
5362  14E9
5363  14EA
5364  14EB
5365  14EC
5366  14ED
5367  14EE
5368  14EF
5369  14F0
5370  14F1
5371  14F2
5372  14F3
5373  14F4
5374  14F5
5375  14F6
5376  14F7
5377  14F8
5378  14F9
5379  14FA
5380  14FB
5381  14FC
5382  14FD
5383  14FE
5384  14FF
5385  1500
5386  1501
5387  1502
5388  1503
5389  1504
5390  1505
5391  1506
5392  1507
5393  1508
5394  1509
5395  150A
5396  150B
5397  150C
5398  150D
5399  150E
5400  150F
5401  1510
5402  1511
5403  1512
5404  1513
5405  1514
5406  1515
5407  1516
5408  1517
5409  1518
5410  1519
5411  151A
5412  151B
5413  151C
5414  151D
5415  151E
5416  151F
5417  1520
5418  1521
5419  1522
5420  1523
5421  1524
5422  1525
5423  1526
5424  1527
5425  1528
5426  1529
5427  152A
5428  152B
5429  152C
5430  152D
5431  152E
5432  152F
5433  1530
5434  1531
5435  1532
5436  1533
5437  1534
5438  1535
5439  1536
5440  1537
5441  1538
5442  1539
5443  153A
5444  153B
5445  153C
5446  153D
5447  153E
5448  153F
5449  1540
5450  1541
5451  1542
5452  1543
5453  1544
5454  1545
5455  1546
5456  1547
5457  1548
5458  1549
5459  154A
5460  154B
5461  154C
5462  154D
5463  154E
5464  154F
5465  1550
5466  1551
5467  1552
5468  1553
5469  1554
5470  1555
5471  1556
5472  1557
5473  1558
5474  1559
5475  155A
5476  155B
5477  155C
5478  155D
5479  155E
5480  155F
5481  1560
5482  1561
5483  1562
5484  1563
5485  1564
5486  1565
5487  1566
5488  1567
5489  1568
5490  1569
5491  156A
5492  156B
5493  156C
5494  156D
5495  156E
5496  156F
5497  1570
5498  1571
5499  1572
5500  1573
5501  1574
5502  1575
5503  1576
5504  1577
5505  1578
5506  1579
5507  157A
5508  157B
5509  157C
5510  157D
5511  157E
5512  157F
5513  1580
5514  1581
5515  1582
5516  1583
5517  1584
5518  1585
5519  1586
5520  1587
5521  1588
5522  1589
5523  158A
5524  158B
5525  158C
5526  158D
5527  158E
5528  158F
5529  1590
5530  1591
5531  1592
5532  1593
5533  1594
5534  1595
5535  1596
5536  1597
5537  1598
5538  1599
5539  159A
5540  159B
5541  159C
5542  159D
5543  159E
5544  159F
5545  15A0
5546  15A1
5547  15A2
5548  15A3
5549  15A4
5550  15A5
5551  15A6
5552  15A7
5553  15A8
5554  15A9
5555  15AA
5556  15AB
5557  15AC
5558  15AD
5559  15AE
5560  15AF
5561  15B0
5562  15B1
5563  15B2
5564  15B3
5565  15B4
5566  15B5
5567  15B6
5568  15B7
5569  15B8
5570  15B9
5571  15BA
5572  15BB
5573  15BC
5574  15BD
5575  15BE
5576  15BF
5577  15C0
5578  15C1
5579  15C2
5580  15C3
5581  15C4
5582  15C5
5583  15C6
5584  15C7
5585  15C8
5586  15C9
5587  15CA
5588  15CB
5589  15CC
5590  15CD
5591  15CE
5592  15CF
5593  15D0
5594  15D1
5595  15D2
5596  15D3
5597  15D4
5598  15D5
5599  15D6
5600  15D7
5601  15D8
5602  15D9
5603  15DA
5604  15DB
5605  15DC
5606  15DD
5607  15DE
5608  15DF
5609  15E0
5610  15E1
5611  15E2
5612  15E3
5613  15E4
5614  15E5
5615  15E6
5616  15E7
5617  15E8
5618  15E9
5619  15EA
5620  15EB
5621  15EC
5622  15ED
5623  15EE
5624  15EF
5625  15F0
5626  15F1
5627  15F2
5628  15F3
5629  15F4
5630  15F5
5631  15F6
5632  15F7
5633  15F8
5634  15F9
5635  15FA
5636  15FB
5637  15FC
5638  15FD
5639  15FE
5640  15FF
5641  1600
5642  1601
5643  1602
5644  1603
5645  1604
5646  1605
5647  1606
5648  1607
5649  1608
5650  1609
5651  160A
5652  160B
5653  160C
5654  160D
5655  160E
5656  160F
5657  1610
5658  1611
5659  1612
5660  1613
5661  1614
5662  1615
5663  1616
5664  1617
5665  1618
5666  1619
5667  161A
5668  161B
5669  161C
5670  161D
5671  161E
5672  161F
5673  1620
5674  1621
5675  1622
5676  1623
5677  1624
5678  1625
5679  1626
5680  1627
5681  1628
5682  1629
5683  162A
5684  162B
5685  162C
5686  162D
5687  162E
5688  162F
5689  1630
5690  1631
5691  1632
5692  1633
5693  1634
5694  1635
5695  1636
5696  1637
5697  1638
5698  1639
5699  163A
5700  163B
5701  163C
5702  163D
5703  163E
5704  163F
5705  1640
5706  1641
5707  1642
5708  1643
5709  1644
5710  1645
5711  1646
5712  1647
5713  1648
5714  1649
5715  164A
5716  164B
5717  164C
5718  164D
5719  164E
5720  164F
5721  1650
5722  1651
5723  1652
5724  1653
5725  1654
5726  1655
5727  1656
5728  1657
5729  1658
5730  1659
5731  165A
5732  165B
5733  165C
5734  165D
5735  165E
5736  165F
5737  1660
5738  1661
5739  1662
5740  1663
5741  1664
5742  1665
5743  1666
5744  1667
5745  1668
5746  1669
5747  166A
5748  166B
5749  166C
5750  166D
5751  166E
5752  166F
5753  1670
5754  1671
5755  1672
5756  1673
5757  1674
5758  1675
5759  1676
5760  1677
5761  1678
5762  1679
5763  167A
5764  167B
5765  167C
5766  167D
5767  167E
5768  167F
5769  1680
5770  1681
5771  1682
5772  1683
5773  1684
5774  1685
5775  1686
5776  1687
5777  1688
5778  1689
5779  168A
5780  168B
5781  168C
5782  168D
5783  168E
5784  168F
5785  1690
5786  1691
5787  1692
5788  1693
5789  1694
5790  1695
5791  1696
5792  1697
5793  1698
5794  1699
5795  169A
5796  169B
5797  169C
5798  169D
5799  169E
5800  169F
5801  16A0
5802  16A1
5803  16A2
5804  16A3
5805  16A4
5806  16A5
5807  16A6
5808  16A7
5809  16A8
5810  16A9
5811  16AA
5812  16AB
5813  16AC
5814  16AD
5815  16AE
5816  16AF
5817  16B0
5818  16B1
5819  16B2
5820  16B3
5821  16B4
5822  16B5
5823  16B6
5824  16B7
5825  16B8
5826  16B9
5827  16BA
5828  16BB
5829  16BC
5830  16BD
5831  16BE
5832  16BF
5833  16C0
5834  16C1
5835  16C2
5836  16C3
5837  16C4
5838  16C5
5839  16C6
5840  16C7
5841  16C8
5842  16C9
5843  16CA
5844  16CB
5845  16CC
5846  16CD
5847  16CE
5848  16CF
5849  16D0
5850  16D1
5851  16D2
5852  16D3
5853  16D4
5854  16D5
5855  16D6
5856  16D7
5857  16D8
5858  16D9
5859  16DA
5860  16DB
5861  16DC
5862  16DD
5863  16DE
5864  16DF
5865  16E0
5866  16E1
5867  16E2
5868  16E3
5869  16E4
5870  16E5
5871  16E6
5872  16E7
5873  16E8
5874  16E9
5875  16EA
5876  16EB
5877  16EC
5878  16ED
5879  16EE
5880  16EF
5881  16F0
5882  16F1
5883  16F2
5884  16F3
5885  16F4
5886  16F5
5887  16F6
5888  16F7
5889  16F8
5890  16F9
5891  16FA
5892  16FB
5893  16FC
5894  16FD
5895  16FE
5896  16FF
5897  1700
5898  1701
5899  1702
5900  1703
5901  1704
5902  1705
5903  1706
5904  1707
5905  1708
5906  1709
5907  170A
5908  170B
5909  170C
5910  170D
5911  170E
5912  170F
5913  1710
5914  1711
5915  1712
5916  1713
5917  1714
5918  1715
5919  1716
5920  1717
5921  1718
5922  1719
5923  171A
5924  171B
5925  171C
5926  171D
5927  171E
5928  171F
5929  1720
5930  1721
5931  1722
5932  1723
5933  1724
5934  1725
5935  1726
5936  1727
5937  1728
5938  1729
5939  172A
5940  172B
5941  172C
5942  172D
5943  172E
5944  172F
5945  1730
5946  1731
5947  1732
5948  1733
5949  1734
5950  1735
5951  1736
5952  1737
5953  1738
5954  1739
5955  173A
5956  173B
5957  173C
5958  173D
5959  173E
5960  173F
5961  1740
5962  1741
5963  1742
5964  1743
5965  1744
5966  1745
5967  1746
5968  1747
5969  1748
5970  1749
5971  174A
5972  174B
5973  174C
5974  174D
5975  174E
5976  174F
5977  1750
5978  1751
5979  1752
5980  1753
5981  1754
5982  1755
5983  1756
5984  1757
5985  1758
5986  1759
5987  175A
5988  175B
5989  175C
5990  175D
5991  175E
5992  175F
5993  1760
5994  1761
5995  1762
5996  1763
5997  1764
5998  1765
5999  1766
6000  1767
6001  1768
6002  1769
6003  176A
6004  176B
6005  176C
6006  176D
6007  176E
6008  176F
6009  1770
6010  1771
6011  1772
6012  1773
6013  1774
6014  1775
6015  1776
6016  1777
6017  1778
6018  1779
6019  177A
6020  177B
6021  177C
6022  177D
6023  177E
6024  177F
6025  1780
6026  1781
6027  1782
6028  1783
6029  1784
6030  1785
6031  1786
6032  1787
6033  1788
6034  1789
6035  178A
6036  178B
6037  178C
6038  178D
6039  178E
6040  178F
6041  1790
6042  1791
6043  1792
6044  1793
6045  1794
6046  1795
6047  1796
6048  1797
6049  1798
6050  1799
6051  179A
6052  179B
6053  179C
6054  179D
6055  179E
6056  179F
6057  17A0
6058  17A1
6059  17A2
6060  17A3
6061  17A4
6062  17A5
6063  17A6
6064  17A7
6065  17A8
6066  17A9
6067  17AA
6068  17AB
6069  17AC
6070  17AD
6071  17AE
6072  17AF
6073  17B0
6074  17B1
6075  17B2
6076  17B3
6077  17B4
6078  17B5
6079  17B6
6080  17B7
6081  17B8
6082  17B9
6083  17BA
6084  17BB
6085  17BC
6086  17BD
6087  17BE
6088  17BF
6089  17C0
6090  17C1
6091  17C2
6092  17C3
6093  17C4
6094  17C5
6095  17C6
6096  17C7
6097  17C8
6098  17C9
6099  17CA
6100  17CB
6101  17CC
6102  17CD
006103  000283        
006104  000284  var hFonts[15] ;
006105  000285  var stringsCV[15] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
6106  0C08
6107  0C09
6108  0C0A
6109  0C0B
6110  0C0C
6111  0C0D
6112  0C0E
6113  0C0F
6114  0C10
6115  0C11
6116  0C12
6117  0C13
6118  0C14
6119  0C15
6120  0C16
6121  0C17
6122  0C18
6123  0C19
6124  0C1A
6125  0C1B
6126  0C1C
6127  0C1D
6128  0C1E
6129  0C1F
6130  0C20
6131  0C21
6132  0C22
6133  0C23
6134  0C24
6135  0C25
006136  000286  // Start P2.inc
006137  000287  var oObjects[MaxTotObjects+1] ;                 // address of objects
006138  000288  var curform ;
006139  000289  var x, y ;
006140  000290  var inputtype, TState, input, object ;
006141  000291  var comRX[40], cmd[CMDLenMAX] ;
006142  000292        
006143  000293  var cs, Ocs ;
006144  000294        
006145  000295  func seroutCS(var op)
006146  000296      serout(op) ;
006147  000297      Ocs ^= op ;
006148  000298  endfunc
006149  000299        
006150  000300  func seroutOcs()
006151  000301      serout(Ocs) ;
006152  000302      Ocs := 0 ;
006153  000303  endfunc
006154  000304        
006155  000305        
006156  000306  func ReadObject(var ObjectType, var ObjectIdx)
006157  000307      var j, k, Objects ;
006158  000308      Objects := *(oObjects+ObjectType) ;
006159  000309        
006160  000310      seroutCS(REPORT_OBJ) ;
006161  000311      seroutCS(ObjectType) ;
006162  000312      seroutCS(ObjectIdx) ;
006163  000313      j := 2 + ObjectIdx * 2 + Objects ;
006164  000314       if (ObjectType == tForm)
006165  000315          k := curform ;
006166  000316      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
006167  000317          k := img_GetWord(hndl, *j, IMAGE_TAG2);
006168  000318      else if (ObjectType == tStrings)
006169  000319          k := stringsCV[ObjectIdx];
006170  000320          else
006171  000321          k := img_GetWord(hndl, *j, IMAGE_INDEX);
006172  000322          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot 
006173  000323                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
006174  000324      endif
006175  000325      seroutCS(k >> 8) ; // first 8 bits
006176  000326      seroutCS(k) ;
006177  000327      seroutOcs() ;
006178  000328  endfunc
006179  000329        
006180  000330        
006181  000331  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
006182  000332      var i, j, k, Objects ;
006183  000333      ObjectType &= 0x3f ;
006184  000334      if (ObjectType == tForm)
006185  000335          ActivateForm(ObjectIdx) ;
006186  000336      else
006187  000337          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
006188  000338          i := *(Objects) ;
006189  000339          switch (ObjectType)
006190  000340              case tWinButton :
006191  000341                  j := IPControls[oWinButtons[ObjectIdx+1]] ;
006192  000342                  break ;
006193  000343              case tUserButton :
006194  000344                  j := IPControls[oUserButtons[ObjectIdx+1]] ;
006195  000345                  break ;
006196  000346              default : j := -1 ;
006197  000347          endswitch
006198  000348          if (j != -1) 
006199  000349              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
006200  000350              NewVal := NewVal << 1 ;  
006201  000351              if (OVF())      // button group index change
006202  000352                  if (*(j+IPData+IPD_P1))   
006203  000353                      k &= 1 ;    // mask off old group index for momentary
006204  000354                  else
006205  000355                      k &= 3 ;    // mask off old group index for toggle
006206  000356                  endif
006207  000357              else            // normal set
006208  000358                  if (*(j+IPData+IPD_P2) != -1) TurnOffButtons(*(j+IPData+IPD_P2)) ;
006209  000359                  k &= 0xfffc ;    // retain only group index for state set
006210  000360              endif
006211  000361              NewVal |= k ;
006212  000362          endif
006213  000363           if (ObjectType == tLeddigits)
006214  000364              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
006215  000365              ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
006216  000366          else if (ObjectType == tStrings)
006217  000367              PrintStrings(ObjectIdx, NewVal, 0);
006218  000368          else
006219  000369              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
006220  000370              img_Show(hndl, i) ; // will only display if form is current
006221  000371          endif
006222  000372      endif
006223  000373  endfunc
006224  000374        
006225  000375  func TurnOffButtons(var group)
006226  000376      var j, k, l;
006227  000377      for (j := 0; j < nInputs; j++)
006228  000378          k := j*IPDatasize ;
006229  000379          if (*(IPData+k+IPD_P2) == group)
006230  000380              l := -1 ;
006231  000381               if (*(IPData+k) == tWinButton)
006232  000382                  l := oWinButtons[*(IPData+k+IPD_OBJVidx)/2] ;
006233  000383                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
006234  000384                  img_Show(hndl, l);      // only shows on current form
006235  000385              else if (*(IPData+k) == tUserButton)
006236  000386                  l := oUserButtons[*(IPData+k+IPD_OBJVidx)/2] ;
006237  000387                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
006238  000388                  img_Show(hndl, l);      // only shows on current form
006239  000389              endif
006240  000390          endif
006241  000391      next
006242  000392  endfunc
006243  000393        
006244  000394        
006245  000395  // WARNING, this code will crash if newval exceeds maximum displayable number
006246  000396  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
006247  000397      var i, j, k, l, lb, newval ;
006248  000398      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
006249  000399      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
006250  000400      i := -1 ;
006251  000401      j := *(typeptr) ;
006252  000402      repeat
006253  000403          typeptr += 2 ;
006254  000404          i++ ;
006255  000405          until (*(typeptr) == imgidx);
006256  000406      j := setptr + i*10 ;
006257  000407        
006258  000408      imgidx++ ;
006259  000409      l := 1 ;
006260  000410      for (i := 1; i < *(j+iDigits); i++)
006261  000411          l *= 10 ;
006262  000412      next
006263  000413      lb := *(j+iLeadingBlanks) ;
006264  000414      for (i := 0; i < *(j+iDigits); i++)
006265  000415          k := newval / l ;
006266  000416          newval -= k * l ;
006267  000417          if ( lb && (i < *(j+iDigits) - *(j+iMinDigits)) )
006268  000418              if (k == 0)
006269  000419                  k := 10 ;
006270  000420              else
006271  000421                  lb := 0 ;
006272  000422              endif
006273  000423          endif
006274  000424          l /= 10 ;
006275  000425          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
006276  000426          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+ileft)+i* *(j+iWidthDigit)) ;
006277  000427          img_Show(hndl, imgidx);
006278  000428      next
006279  000429  endfunc
006280  000430        
006281  000431        
006282  000432  func ActivateForm(var newform)
006283  000433      var i, j, *p ;
006284  000434      if (curform != -1) // deactivate old form, by disabling all inputs
006285  000435          for (i := formstidx[curform]; i <= formenidx[curform]; i++)
006286  000436              if (img_GetWord(hndl, i, IMAGE_TAG))
006287  000437                  img_Disable(hndl,i) ;
006288  000438              endif
006289  000439          next
006290  000440      endif
006291  000441      curform := newform ;
006292  000442      // display newform image or clear to image color
006293  000443      if (formBGcol[curform] != BGIMAGE)
006294  000444          gfx_Set(BACKGROUND_COLOUR,formBGcol[curform]);
006295  000445          gfx_Cls() ;
006296  000446          DoGFXObjects() ;                                    // display GFX 'widgets'
006297  000447      endif
006298  000448        
006299  000449      // enable inputs
006300  000450      for (i := formstidx[curform]; i < formenidx[curform]; i++)
006301  000451          j := img_GetWord(hndl, i, IMAGE_TAG) ;
006302  000452          if (j)
006303  000453              j-- ;
006304  000454              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
006305  000455              //if (j != tKeyboard)
006306  000456              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
006307  000457                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
006308  000458              endif
006309  000459              img_Show(hndl,i) ; // show initialy, if required
006310  000460              if (j == tForm)
006311  000461                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
006312  000462              else if (j == tLeddigits)
006313  000463                  ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
006314  000464              endif
006315  000465          endif
006316  000466      next
006317  000467      for (i := 0; i < oStringss[0]; i++)
006318  000468          if (stringsCV[i] != -1)
006319  000469              WriteObject(tStrings, i, stringsCV[i]) ;
006320  000470          endif
006321  000471      next
006322  000472  endfunc
006323  000473        
006324  000474  func UpdateObjects(var newval)
006325  000475      var IPidx, otherOBJ ;
006326  000476      if ( ( img_GetWord(hndl, *(object), IMAGE_INDEX) != newval) || (TState == IPD_RELEASE) ) // only bother if values changed, or release
006327  000477        
006328  000478          img_SetWord(hndl, *(object), IMAGE_INDEX, newval);
006329  000479  // temp for **User??       if ((inputtype != tUserButton) || (!*(input+IPD_P1)))
006330  000480              img_Show(hndl, *(object));      // only shows on current form
006331  000481  //        endif
006332  000482          if ((inputtype == t4Dbutton) || (inputtype == tUserButton) || (inputtype == tWinButton)) 
006333  000483              if (*(input+IPD_P1))
006334  000484                  newval &= 1;
006335  000485              else
006336  000486                  newval &= 3;
006337  000487              endif
006338  000488              if (newval > 1) newval := 1;
006339  000489          endif
006340  000490          IPidx := *(input+TState) ;
006341  000491          while(IPidx != 0)
006342  000492              otherOBJ := IPidx + IPData;
006343  000493              if (*(otherOBJ) == OT_REPORT)
006344  000494                  seroutCS(REPORT_EVENT) ;
006345  000495                  seroutCS(inputtype) ;
006346  000496                  seroutCS(*(otherOBJ+IPD_OBJVidx)) ;
006347  000497                  seroutCS(newval >> 8) ;
006348  000498                  seroutCS(newval) ;
006349  000499                  seroutOcs() ;
006350  000500              else if (TState == *(otherOBJ+IPD_P4))
006351  000501                  if (*(otherOBJ) == OT_ACTIVATE)
006352  000502                      ActivateForm(*(otherOBJ+IPD_P2) ) ;
006353  000503                      inputtype := tForm ;
006354  000504                  else if (*(otherOBJ) == OT_SETCONST)
006355  000505                      newval := *(otherOBJ+IPD_P3) ;
006356  000506                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
006357  000507                  else if (*(otherOBJ) == OT_SETANOTHER)
006358  000508                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
006359  000509                  else if (*(otherOBJ) == OT_PREVFRAME)
006360  000510                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX))
006361  000511                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)-1) ;
006362  000512                      endif
006363  000513                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
006364  000514                  else if (*(otherOBJ) == OT_NEXTFRAME)
006365  000515                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) < *(otherOBJ+IPD_P3)) 
006366  000516                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)+1) ;
006367  000517                      endif
006368  000518                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
006369  000519                  else if (*(otherOBJ) == OT_PREVSTRING)
006370  000520                      if (stringsCV[*(otherOBJ+IPD_P2)])
006371  000521                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]-1) ;
006372  000522                      endif
006373  000523                  else if (*(otherOBJ) == OT_NEXTSTRING)
006374  000524                      if (stringsCV[*(otherOBJ+IPD_P2)] < *(otherOBJ+IPD_P3)) // fix IPD_P2 not filled in yet
006375  000525                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]+1) ;
006376  000526                      endif
006377  000527                  endif
006378  000528              endif
006379  000529              IPidx := *(otherOBJ+TState) ;
006380  000530          wend
006381  000531      endif
006382  000532  endfunc
006383  000533        
006384  000534  // End P2.inc
006385  000535  func DoGFXObjects()
006386  000536      switch (curform)
006387  000537          case 2:
006388  000538              gfx_Panel(PANEL_RAISED, 80, 44, 162, 135, WHEAT) ;
006389  000539          break ;
006390  000540      endswitch
006391  000541  endfunc
006392  000542        
006393  000543  // Start P3.inc
006394  000544  func main()
006395  000545      var comTX[50], cmdi, i, j, n, state, oldn ;
006396  000546      putstr("Mounting...\n");
006397  000547      if (!(disk:=file_Mount()))
006398  000548          while(!(disk :=file_Mount()))
006399  000549              putstr("Drive not mounted...");
006400  000550              pause(200);
006401  000551              gfx_Cls();
006402  000552              pause(200);
006403  000553          wend
006404  000554      endif
006405  000555  //    gfx_MoveTo(0, 0);
006406  000556  //    print(mem_Heap()," ") ;
006407  000557  //    gfx_TransparentColour(0x0020);
006408  000558  //    gfx_Transparency(ON);
006409  000559        
006410  000560      gfx_ScreenMode(LANDSCAPE_R) ;
006411  000561        
006412  000562      // open image control
006413  000563      hndl := file_LoadImageControl("TEST_M~2.dat", "TEST_M~2.gci", 1);
006414  000564        
006415  000565      // init 'constants'
006416  000566  // End P3.inc
006417  000567        
006418  000568      oObjects[tDipSwitch] := oDipSwitchs ;
006419  000569      oObjects[tKnob] := oKnobs ;
006420  000570      oObjects[tRockerSwitch] := oRockerSwitchs ;
006421  000571      oObjects[tRotarySwitch] := oRotarySwitchs ;
006422  000572      oObjects[tGSlider] := oGSliders ;
006423  000573      oObjects[tTrackbar] := oTrackbars ;
006424  000574      oObjects[tWinButton] := oWinButtons ;
006425  000575      oObjects[tAngularmeter] := oAngularmeters ;
006426  000576      oObjects[tCoolgauge] := oCoolgauges ;
006427  000577      oObjects[tCustomdigits] := oCustomdigitss ;
006428  000578      oObjects[tForm] := oForms ;
006429  000579      oObjects[tGauge] := oGauges ;
006430  000580      oObjects[tImage] := oImages ;
006431  000581      oObjects[tKeyboard] := oKeyboards ;
006432  000582      oObjects[tLed] := oLeds ;
006433  000583      oObjects[tLeddigits] := oLeddigitss ;
006434  000584      oObjects[tMeter] := oMeters ;
006435  000585      oObjects[tStrings] := oStringss ;
006436  000586      oObjects[tThermometer] := oThermometers ;
006437  000587      oObjects[tUserled] := oUserleds ;
006438  000588      oObjects[tVideo] := oVideos ;
006439  000589      oObjects[tStaticText] := oStaticTexts ;
006440  000590      oObjects[tSounds] := oSoundss ;
006441  000591      oObjects[tTimer] := oTimers ;
006442  000592      oObjects[tSpectrum] := oSpectrums ;
006443  000593      oObjects[tTank] := oTanks ;
006444  000594      oObjects[tUserImages] := oUserImagess ;
006445  000595      oObjects[tPinOutput] := oPinOutputs ;
006446  000596      oObjects[tPinInput] := oPinInputs ;
006447  000597      oObjects[t4Dbutton] := o4Dbuttons ;
006448  000598      oObjects[tAniButton] := oAniButtons ;
006449  000599      oObjects[tColorPicker] := oColorPickers ;
006450  000600      oObjects[tUserButton] := oUserButtons ;
006451  000601      hFonts[0] := FONT3 ;
006452  000602      hFonts[1] := FONT3 ;
006453  000603      hFonts[2] := FONT3 ;
006454  000604      hFonts[3] := FONT3 ;
006455  000605      hFonts[4] := FONT3 ;
006456  000606      hFonts[5] := FONT3 ;
006457  000607      hFonts[6] := FONT3 ;
006458  000608      hFonts[7] := FONT3 ;
006459  000609      hFonts[8] := FONT3 ;
006460  000610      hFonts[9] := FONT3 ;
006461  000611      hFonts[10] := FONT3 ;
006462  000612      hFonts[11] := FONT3 ;
006463  000613      hFonts[12] := FONT3 ;
006464  000614      hFonts[13] := FONT3 ;
006465  000615      hFonts[14] := FONT3 ;
006466  000616  // Start P4.inc
006467  000617      hstrings := file_Open("TEST_M~2.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
006468  000618      // init comms
006469  000619      com_Init(comRX,CMDLenMAX,0);
006470  000620      com_SetBaud(COM0,20000);
006471  000621      com_TXbuffer(comTX, 100, 0);
006472  000622      snd_BufSize(2) ;
006473  000623      // tag 'real' objects
006474  000624      for (i := 0; i <= MaxTotObjects; i++)
006475  000625          if (   (i != tSounds)
006476  000626              && (i != tTimer)
006477  000627              && (i != tPinOutput)
006478  000628              && (i != tPinInput) )
006479  000629              x := oObjects[i] ;
006480  000630              y := *(x) ;
006481  000631              for (n := 1; n <= y; n++)
006482  000632                  oldn := *(x+n*2) ;
006483  000633                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
006484  000634                  if (oldn != -1)
006485  000635                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
006486  000636                      img_Disable(hndl, oldn) ;
006487  000637                  endif
006488  000638              next
006489  000639          endif
006490  000640      next
006491  000641        
006492  000642      // display initial form
006493  000643      curform := -1 ;
006494  000644      ActivateForm(0) ; // need to change this according to first actual form
006495  000645  // End P4.inc
006496  000646  // Start P5.inc
006497  000647      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
006498  000648      oldn := -1 ;
006499  000649      repeat
006500  000650          // check comms for command, how to NAK invalid command
006501  000651          if (com_Count() != 0)
006502  000652              i := serin() ;
006503  000653              cs ^= i ;               // update checksum
006504  000654              if (   (cmdi > 2)
006505  000655                  && (cmd[0] == WRITE_STRU) )
006506  000656                  j := (cmdi-1) >> 1 + 2 ;
006507  000657                  if (j == CMDLenMAX)    // max length exceeded
006508  000658                      serout(NAK) ;
006509  000659                      cs := 0 ;
006510  000660                      cmdi := -1 ;
006511  000661                  else if (cmdi & 1)
006512  000662                      cmd[j] := i ;
006513  000663                      if (cmd[2] == 0)    // if string complete
006514  000664                          if (cs)
006515  000665                              serout(NAK) ;
006516  000666                              cs := 0 ;
006517  000667                          else
006518  000668                              cmd[j] := 0 ;                     // terminate it
006519  000669                              PrintStrings(cmd[1], &cmd[3], 1) ;
006520  000670                              serout(ACK) ;
006521  000671                          endif
006522  000672                          cmdi := -1 ;
006523  000673                      endif
006524  000674                  else
006525  000675                      cmd[j] := cmd[j] << 8 + i ;
006526  000676                      cmd[2]-- ;          // dec length
006527  000677                  endif
006528  000678                  cmdi++ ;
006529  000679              else // not unicode string
006530  000680                  cmd[cmdi++] := i ;
006531  000681                   if (cmd[0] == WRITE_STR)        // ansi string
006532  000682                      if (cmdi == CMDLenMAX)      // max length exceeded
006533  000683                          serout(NAK) ;
006534  000684                          cs := 0 ;
006535  000685                          cmdi := 0 ;
006536  000686                      else if (cmdi > 2)
006537  000687                          if (cmd[2] == -1)
006538  000688                              if (cs)
006539  000689                                  serout(NAK) ;
006540  000690                                  cs := 0 ;
006541  000691                              else
006542  000692                                  cmd[cmdi-1] := 0 ;                     // terminate it
006543  000693                                  PrintStrings(cmd[1], &cmd[3], 1) ;
006544  000694                                  serout(ACK) ;
006545  000695                              endif
006546  000696                              cmdi := 0 ;
006547  000697                          else
006548  000698                              cmd[2]-- ;          // dec length
006549  000699                          endif
006550  000700                      endif
006551  000701                  else if (   (cmd[0] == READ_OBJ)
006552  000702                           && (cmdi == 4)         )
006553  000703                      if (cs)
006554  000704                          serout(NAK) ;
006555  000705                          cs := 0 ;
006556  000706                      else
006557  000707                          ReadObject(cmd[1], cmd[2]) ;
006558  000708                      endif
006559  000709                      cmdi := 0 ;
006560  000710                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
006561  000711                           && (cmdi == 6)          )
006562  000712                      if (cs)
006563  000713                          serout(NAK) ;
006564  000714                          cs := 0 ;
006565  000715                      else
006566  000716                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
006567  000717                          serout(ACK) ;
006568  000718                      endif
006569  000719                      cmdi := 0 ;
006570  000720                  else if (   (cmd[0] == WRITE_CONTRAST)
006571  000721                           && (cmdi == 3)         )
006572  000722                      if (cs)
006573  000723                          serout(NAK) ;
006574  000724                          cs := 0 ;
006575  000725                      else
006576  000726                          gfx_Contrast(cmd[1]) ;
006577  000727                          serout(ACK) ;
006578  000728                      endif
006579  000729                      cmdi := 0 ;
006580  000730                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
006581  000731                      serout(NAK) ;
006582  000732                      cs := 0 ;
006583  000733                      cmdi := 0 ;
006584  000734                  endif
006585  000735              endif   // not unicode string
006586  000736          endif   // a character is available
006587  000737        
006588  000738        
006589  000739      // touch code processing
006590  000740        
006591  000741          state := touch_Get(TOUCH_STATUS);               // get touchscreen status
006592  000742          n := img_Touched(hndl,-1) ;
006593  000743          if ((state == TOUCH_PRESSED) || (state == TOUCH_RELEASED) || (state == TOUCH_MOVING))
006594  000744              if ((state != TOUCH_RELEASED) && (n != oldn) && (oldn != -1)) 
006595  000745                  state := TOUCH_RELEASED ;       // simulate release if we move off object
006596  000746              endif
006597  000747              if (state != TOUCH_RELEASED)        // if not released
006598  000748                  if (oldn != -1) 
006599  000749                      n := oldn ;
006600  000750                  else 
006601  000751                      oldn := n ;
006602  000752                      state := TOUCH_PRESSED ;
006603  000753                  endif
006604  000754                  x  := touch_Get(TOUCH_GETX);
006605  000755                  y  := touch_Get(TOUCH_GETY);
006606  000756                  TState := IPD_DOWN ;
006607  000757              else
006608  000758                  n := oldn ;                     // simulate release of what we touched
006609  000759                  oldn := -1 ;                    // prevent double release
006610  000760                  TState := IPD_RELEASE ;
006611  000761              endif
006612  000762              if (n != -1)
006613  000763                          input := IPControls[n] + IPData;
006614  000764                          inputtype := *(input) ;
006615  000765                          i := inputtype ;
006616  000766                          if (inputtype >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
006617  000767                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
006618  000768              endif
006619  000769          endif
006620  000770   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
006621  000771        
006622  000772          sys_EventsResume() ;
006623  000773      forever
006624  000774        
006625  000775  cDipswitch:
006626  000776        
006627  000777  cKnob:
006628  000778        
006629  000779  cRockerswitch:
006630  000780        
006631  000781  cRotaryswitch:
006632  000782        
006633  000783  cSlider:
006634  000784  cTrackbar:
006635  000785        
006636  000786  c4DButton:
006637  000787  cUserButton:
006638  000788      object := oUserButtons + *(input+IPD_OBJVidx) ;
006639  000789      goto gbutton ;
006640  000790  cWinbutton:
006641  000791      object := oWinButtons + *(input+IPD_OBJVidx) ;
006642  000792  gbutton:
006643  000793      i := img_GetWord(hndl, *(object), IMAGE_INDEX) ; // current state
006644  000794      if (*(input+IPD_P1))                                 // momentary, reports 0, but should report 1
006645  000795          if (state == TOUCH_RELEASED)
006646  000796              i &= 0xfffe ;
006647  000797              TState == IPD_DOWN ;
006648  000798          else
006649  000799              i |= 1 ;
006650  000800              TState == IPD_RELEASE ;
006651  000801          endif
006652  000802      else if (*(input+IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
006653  000803          if (state == TOUCH_RELEASED)                     // only truly change on release
006654  000804              if ((i & 3) == 3)
006655  000805                  i &= 0xfffc ;
006656  000806              else
006657  000807                  i++ ;
006658  000808              endif
006659  000809          else
006660  000810              i |= 1 ;                                      // make down regardless of current state
006661  000811          endif
006662  000812      else                        // group action, up all other buttons on touch press, reports 0 for button down
006663  000813          if (state == TOUCH_PRESSED)                     // only truly change on release
006664  000814              TurnOffButtons(*(input+IPD_P2)) ;
006665  000815          endif
006666  000816          i := (i & 0xfffc) | 2 ;
006667  000817      endif
006668  000818        
006669  000819      UpdateObjects(i) ;
006670  000820  endsub ;
006671  000821        
006672  000822  cAniButton:
006673  000823        
006674  000824  cColorPicker:
006675  000825        
006676  000826  endfunc
006677  000827  // End P5.inc
Notice: local var 'p' in func 'ActivateForm' is never used (line 433 file:Test_millorat_Intro.4DGenieS)


Symbol Table:
name                 decimal    hex
_1F                                  -40  0xffffffd8 (PmmC func) args[0] r=0  (not used)
__MAXMEM                           14400  0x00003840 (const dword)  (usage 1)
__MAXPROG                          14400  0x00003840 (const dword)  (usage 1)
__PLATFORM                             1  0x00000001 (const dword)  (not used)
ABS                                  -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                        5616  0x000015f0 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ANITIMERS                              0  0x00000000 (const dword)  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                           7  0x00000007 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BACKLITE                               6  0x00000006 (const dword)  (not used)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BGIMAGE                               32  0x00000020 (const dword)  (usage 6)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 39)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 6)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
BUS_0                                  8  0x00000008 (const dword)  (not used)
BUS_1                                  9  0x00000009 (const dword)  (not used)
BUS_2                                 10  0x0000000a (const dword)  (not used)
BUS_3                                 11  0x0000000b (const dword)  (not used)
BUS_4                                 12  0x0000000c (const dword)  (not used)
BUS_5                                 13  0x0000000d (const dword)  (not used)
BUS_6                                 14  0x0000000e (const dword)  (not used)
BUS_7                                 15  0x0000000f (const dword)  (not used)
bus_In                               -45  0xffffffd3 (PmmC func) args[0] r=1  (not used)
bus_Out                              -46  0xffffffd2 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                             -49  0xffffffcf (PmmC func) args[0] r=1  (not used)
bus_Set                              -47  0xffffffd1 (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             5  0x00000005 (const dword)  (not used)
bus_Write                            -48  0xffffffd0 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                            -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS    2710  0x00000a96 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                          -159  0xffffff61 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                           -158  0xffffff62 (PmmC func) args[1] r=1  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
CKMODE_0                               0  0x00000000 (const dword)  (not used)
CKMODE_1                               1  0x00000001 (const dword)  (not used)
CKMODE_2                               2  0x00000002 (const dword)  (not used)
CKMODE_3                               3  0x00000003 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  228  0x000000e4 (mem) word[80] (global)  (usage 78)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COLOUR_MODE                           27  0x0000001b (const dword)  (not used)
COLUMN_ADDRESS_END1                    5  0x00000005 (const dword)  (not used)
COLUMN_ADDRESS_END2                    4  0x00000004 (const dword)  (not used)
COLUMN_ADDRESS_START1                  3  0x00000003 (const dword)  (not used)
COLUMN_ADDRESS_START2                  2  0x00000002 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63496  0x0000f808 (const dword)  (not used)
com1_Count                          -132  0xffffff7c (PmmC func) args[0] r=1  (not used)
com1_Error                          -134  0xffffff7a (PmmC func) args[0] r=1  (not used)
com1_Full                           -133  0xffffff7b (PmmC func) args[0] r=1  (not used)
com1_Init                           -130  0xffffff7e (PmmC func) args[3] r=0  (not used)
com1_Reset                          -131  0xffffff7d (PmmC func) args[0] r=0  (not used)
com1_Sync                           -135  0xffffff79 (PmmC func) args[0] r=1  (not used)
com1_TXbuffer                       -136  0xffffff78 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -139  0xffffff75 (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -137  0xffffff77 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -138  0xffffff76 (PmmC func) args[1] r=1  (not used)
com_Count                           -122  0xffffff86 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -124  0xffffff84 (PmmC func) args[0] r=1  (not used)
com_Full                            -123  0xffffff85 (PmmC func) args[0] r=1  (not used)
com_Init                            -120  0xffffff88 (PmmC func) args[3] r=0  (usage 3)
com_Reset                           -121  0xffffff87 (PmmC func) args[0] r=0  (not used)
com_SetBaud                         -142  0xffffff72 (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -125  0xffffff83 (PmmC func) args[0] r=1  (not used)
com_TXbuffer                        -126  0xffffff82 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -129  0xffffff7f (PmmC func) args[1] r=1  (not used)
com_TXcount                         -127  0xffffff81 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -128  0xffffff80 (PmmC func) args[1] r=1  (not used)
comRX                                148  0x00000094 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -18  0xffffffee (PmmC func) args[1] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cs                                   388  0x00000184 (mem) word (global)  (usage 42)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
curform                              134  0x00000086 (mem) word (global)  (usage 45)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                  -285  0xfffffee3 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
CYCLE_CONTROL_1                       58  0x0000003a (const dword)  (not used)
CYCLE_CONTROL_2                       59  0x0000003b (const dword)  (not used)
CYCLE_CONTROL_3                       60  0x0000003c (const dword)  (not used)
CYCLE_CONTROL_4                       61  0x0000003d (const dword)  (not used)
CYCLE_CONTROL_5                       62  0x0000003e (const dword)  (not used)
CYCLE_CONTROL_6                       64  0x00000040 (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 6)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
disk                                   0  0x00000000 (mem) word (global)  (usage 6)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_Disconnect                     -293  0xfffffedb (PmmC func) args[0] r=0  (not used)
disp_Init                           -143  0xffffff71 (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -149  0xffffff6b (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -145  0xffffff6f (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -144  0xffffff70 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -284  0xfffffee4 (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -147  0xffffff6d (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -148  0xffffff6c (PmmC func) args[1] r=0  (not used)
DISPLAY_CONTROL_1                     38  0x00000026 (const dword)  (not used)
DISPLAY_CONTROL_10                    54  0x00000036 (const dword)  (not used)
DISPLAY_CONTROL_14                    65  0x00000041 (const dword)  (not used)
DISPLAY_CONTROL_2                     39  0x00000027 (const dword)  (not used)
DISPLAY_CONTROL_3                     40  0x00000028 (const dword)  (not used)
DISPLAY_CONTROL_4                     41  0x00000029 (const dword)  (not used)
DISPLAY_CONTROL_5                     42  0x0000002a (const dword)  (not used)
DISPLAY_CONTROL_6                     44  0x0000002c (const dword)  (not used)
DISPLAY_CONTROL_7                     45  0x0000002d (const dword)  (not used)
DISPLAY_CONTROL_8                    144  0x00000090 (const dword)  (not used)
DISPLAY_CONTROL_9                     53  0x00000035 (const dword)  (not used)
DISPLAY_MODE_CONTROL                   1  0x00000001 (const dword)  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        4926  0x0000133e (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                              -282  0xfffffee6 (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                           -283  0xfffffee5 (PmmC func) args[0] r=1  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -232  0xffffff18 (PmmC func) args[1] r=1  (not used)
file_Count                          -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -247  0xffffff09 (PmmC func) args[1] r=1  (not used)
file_Error                          -225  0xffffff1f (PmmC func) args[0] r=1  (not used)
file_Exec                           -251  0xffffff05 (PmmC func) args[2] r=1  (not used)
file_Exists                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
file_FindNext                       -229  0xffffff1b (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -242  0xffffff0e (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -246  0xffffff0a (PmmC func) args[3] r=1  (not used)
file_GetW                           -244  0xffffff0c (PmmC func) args[1] r=1  (usage 3)
file_Image                          -239  0xffffff11 (PmmC func) args[3] r=1  (not used)
file_Index                          -235  0xffffff15 (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -249  0xffffff07 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -252  0xffffff04 (PmmC func) args[3] r=1  (usage 3)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -253  0xffffff03 (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -231  0xffffff19 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -255  0xffffff01 (PmmC func) args[1] r=1  (not used)
file_PutC                           -241  0xffffff0f (PmmC func) args[2] r=1  (not used)
file_PutS                           -245  0xffffff0b (PmmC func) args[2] r=1  (not used)
file_PutW                           -243  0xffffff0d (PmmC func) args[2] r=1  (not used)
file_Read                           -233  0xffffff17 (PmmC func) args[3] r=1  (not used)
file_Rewind                         -248  0xffffff08 (PmmC func) args[1] r=1  (not used)
file_Run                            -250  0xffffff06 (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -240  0xffffff10 (PmmC func) args[5] r=1  (not used)
file_Seek                           -234  0xffffff16 (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_Size                           -238  0xffffff12 (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -236  0xffffff14 (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -254  0xffffff02 (PmmC func) args[0] r=0  (not used)
file_Write                          -237  0xffffff13 (PmmC func) args[3] r=1  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_BlockErase                    -157  0xffffff63 (PmmC func) args[1] r=1  (not used)
flash_BulkErase                     -156  0xffffff64 (PmmC func) args[0] r=0  (not used)
flash_ID                            -155  0xffffff65 (PmmC func) args[0] r=1  (not used)
flash_SIG                           -154  0xffffff66 (PmmC func) args[0] r=1  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
FONT1                                  0  0x00000000 (const dword)  (not used)
FONT2                                  1  0x00000001 (const dword)  (not used)
FONT3                                  2  0x00000002 (const dword)  (usage 45)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
formBGcol                           2829  0x00000b0dformBGcol                           2829  0x00000b0d (mem) word[15] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 8)
formBGcol                         UNRESOLVED  (usage 4)
formenidx                             37  0x00000025formenidx                             37  0x00000025 (mem) word[15] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 6)
formstidx                              7  0x00000007formstidx                              7  0x00000007 (mem) word[15] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 7)
formstidx                         UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
GAMMA_CONTROL_1                       70  0x00000046 (const dword)  (not used)
GAMMA_CONTROL_10                      79  0x0000004f (const dword)  (not used)
GAMMA_CONTROL_11                      80  0x00000050 (const dword)  (not used)
GAMMA_CONTROL_12                      81  0x00000051 (const dword)  (not used)
GAMMA_CONTROL_2                       71  0x00000047 (const dword)  (not used)
GAMMA_CONTROL_3                       72  0x00000048 (const dword)  (not used)
GAMMA_CONTROL_4                       73  0x00000049 (const dword)  (not used)
GAMMA_CONTROL_5                       74  0x0000004a (const dword)  (not used)
GAMMA_CONTROL_6                       75  0x0000004b (const dword)  (not used)
GAMMA_CONTROL_7                       76  0x0000004c (const dword)  (not used)
GAMMA_CONTROL_8                       77  0x0000004d (const dword)  (not used)
GAMMA_CONTROL_9                       78  0x0000004e (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                         -85  0xffffffab (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -104  0xffffff98 (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -103  0xffffff99 (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                         -92  0xffffffa4 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                            -74  0xffffffb6 (PmmC func) args[2] r=0  (not used)
gfx_Bullet                           -71  0xffffffb9 (PmmC func) args[1] r=0  (not used)
gfx_Button                           -80  0xffffffb0 (PmmC func) args[9] r=0  (not used)
GFX_BUTTON_BACKGROUND                 64  0x00000040 (const dword)  (not used)
GFX_BUTTON_FOREGROUND                 63  0x0000003f (const dword)  (not used)
GFX_BUTTON_MODE                       65  0x00000041 (const dword)  (not used)
gfx_ChangeColour                     -76  0xffffffb4 (PmmC func) args[2] r=0  (not used)
gfx_Circle                           -61  0xffffffc3 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                     -62  0xffffffc2 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                         -94  0xffffffa2 (PmmC func) args[1] r=0  (usage 6)
gfx_ClipWindow                       -75  0xffffffb5 (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                              -51  0xffffffcd (PmmC func) args[0] r=0  (usage 6)
gfx_ColourMode                      -102  0xffffff9a (PmmC func) args[1] r=1  (not used)
gfx_Contrast                        -100  0xffffff9c (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                              -70  0xffffffba (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                          -78  0xffffffb2 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                    -79  0xffffffb1 (PmmC func) args[5] r=0  (not used)
gfx_FrameDelay                       -97  0xffffff9f (PmmC func) args[1] r=1  (not used)
gfx_Get                              -90  0xffffffa6 (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                         -64  0xffffffc0 (PmmC func) args[2] r=1  (not used)
GFX_HILIGHT_BACKGROUND                61  0x0000003d (const dword)  (not used)
GFX_HILIGHT_FOREGROUND                62  0x0000003e (const dword)  (not used)
GFX_HILITE_LINE                       58  0x0000003a (const dword)  (not used)
gfx_Hline                            -57  0xffffffc7 (PmmC func) args[4] r=1  (not used)
gfx_IncX                             -72  0xffffffb8 (PmmC func) args[0] r=1  (not used)
gfx_IncY                             -73  0xffffffb7 (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_SELECTION                    60  0x0000003c (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
GFX_LEFT_GUTTER_WIDTH                 68  0x00000044 (const dword)  (not used)
gfx_Line                             -56  0xffffffc8 (PmmC func) args[5] r=0  (not used)
GFX_LINE_COUNT                        59  0x0000003b (const dword)  (not used)
gfx_LinePattern                     -101  0xffffff9b (PmmC func) args[1] r=1  (not used)
gfx_LineRel                          -55  0xffffffc9 (PmmC func) args[2] r=0  (not used)
gfx_LineTo                           -54  0xffffffca (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                          -53  0xffffffcb (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                           -52  0xffffffcc (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                     -93  0xffffffa3 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                            -67  0xffffffbd (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                        -66  0xffffffbe (PmmC func) args[2] r=0  (not used)
gfx_Origin                           -89  0xffffffa7 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                    -99  0xffffff9d (PmmC func) args[1] r=1  (not used)
gfx_Panel                            -81  0xffffffaf (PmmC func) args[6] r=0  (usage 3)
gfx_PenSize                          -91  0xffffffa5 (PmmC func) args[1] r=1  (not used)
GFX_PIXEL_SHIFT                       70  0x00000046 (const dword)  (not used)
gfx_Polygon                          -69  0xffffffbb (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                    -88  0xffffffa8 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                         -68  0xffffffbc (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                         -63  0xffffffc1 (PmmC func) args[3] r=0  (not used)
GFX_RECT_X1                           71  0x00000047 (const dword)  (not used)
GFX_RECT_X2                           73  0x00000049 (const dword)  (not used)
GFX_RECT_Y1                           72  0x00000048 (const dword)  (not used)
GFX_RECT_Y2                           74  0x0000004a (const dword)  (not used)
gfx_Rectangle                        -59  0xffffffc5 (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                  -60  0xffffffc4 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                         -84  0xffffffac (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
GFX_RIGHT_GUTTER_WIDTH                69  0x00000045 (const dword)  (not used)
gfx_ScreenCopyPaste                  -83  0xffffffad (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                       -98  0xffffff9e (PmmC func) args[1] r=1  (usage 3)
gfx_Selection                        -86  0xffffffaa (PmmC func) args[3] r=0  (not used)
gfx_Set                              -50  0xffffffce (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                    -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
gfx_Slider                           -82  0xffffffae (PmmC func) args[8] r=1  (not used)
GFX_STATUSBAR_HEIGHT                  67  0x00000043 (const dword)  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOOLBAR_HEIGHT                    66  0x00000042 (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                     -96  0xffffffa0 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour                -95  0xffffffa1 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                         -65  0xffffffbf (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                   -87  0xffffffa9 (PmmC func) args[7] r=0  (not used)
gfx_Vline                            -58  0xffffffc6 (PmmC func) args[4] r=1  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -105  0xffffff97 (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -106  0xffffff96 (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 4  0x00000004 (mem) word[15] (global)  (usage 48)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                              -214  0xffffff2a (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   2  0x00000002 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                              64  0x00000040 (mem) word (global)  (usage 12)
I2C                                63520  0x0000f820 (const dword)  (not used)
I2C_Ack                             -169  0xffffff57 (PmmC func) args[0] r=0  (not used)
I2C_AckPoll                         -172  0xffffff54 (PmmC func) args[1] r=1  (not used)
I2C_AckStatus                       -171  0xffffff55 (PmmC func) args[0] r=0  (not used)
I2C_Close                           -163  0xffffff5d (PmmC func) args[0] r=0  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_Getn                            -175  0xffffff51 (PmmC func) args[2] r=1  (not used)
I2C_Gets                            -174  0xffffff52 (PmmC func) args[2] r=1  (not used)
I2C_Idle                            -173  0xffffff53 (PmmC func) args[0] r=0  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_Nack                            -170  0xffffff56 (PmmC func) args[0] r=0  (not used)
I2C_Open                            -162  0xffffff5e (PmmC func) args[1] r=0  (not used)
I2C_Putn                            -177  0xffffff4f (PmmC func) args[2] r=1  (not used)
I2C_Puts                            -176  0xffffff50 (PmmC func) args[1] r=1  (not used)
I2C_Read                            -167  0xffffff59 (PmmC func) args[0] r=1  (not used)
I2C_Restart                         -166  0xffffff5a (PmmC func) args[0] r=1  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I2C_Start                           -164  0xffffff5c (PmmC func) args[0] r=1  (not used)
I2C_Stop                            -165  0xffffff5b (PmmC func) args[0] r=1  (not used)
I2C_Write                           -168  0xffffff58 (PmmC func) args[1] r=1  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iDigits                                2  0x00000002 (const dword)  (usage 9)
iiLeddigits0                          34  0x00000022 (const ??? 0)  (not used)
iiLeddigits1                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits10                         65  0x00000041 (const ??? 0)  (not used)
iiLeddigits11                         71  0x00000047 (const ??? 0)  (not used)
iiLeddigits12                         73  0x00000049 (const ??? 0)  (not used)
iiLeddigits13                         83  0x00000053 (const ??? 0)  (not used)
iiLeddigits14                         86  0x00000056 (const ??? 0)  (not used)
iiLeddigits15                         89  0x00000059 (const ??? 0)  (not used)
iiLeddigits16                         92  0x0000005c (const ??? 0)  (not used)
iiLeddigits17                         94  0x0000005e (const ??? 0)  (not used)
iiLeddigits18                        104  0x00000068 (const ??? 0)  (not used)
iiLeddigits2                          38  0x00000026 (const ??? 0)  (not used)
iiLeddigits3                          55  0x00000037 (const ??? 0)  (not used)
iiLeddigits4                          46  0x0000002e (const ??? 0)  (not used)
iiLeddigits5                          48  0x00000030 (const ??? 0)  (not used)
iiLeddigits6                          57  0x00000039 (const ??? 0)  (not used)
iiLeddigits7                          59  0x0000003b (const ??? 0)  (not used)
iiLeddigits8                          61  0x0000003d (const ??? 0)  (not used)
iiLeddigits9                          63  0x0000003f (const ??? 0)  (not used)
iImage0                                0  0x00000000 (const ??? 0)  (usage 3)
iImage1                               19  0x00000013 (const ??? 0)  (usage 3)
iLeadingBlanks                         8  0x00000008 (const dword)  (usage 3)
iLeddigits0                           33  0x00000021 (const ??? 0)  (usage 3)
iLeddigits1                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits10                          64  0x00000040 (const ??? 0)  (usage 3)
iLeddigits11                          70  0x00000046 (const ??? 0)  (usage 3)
iLeddigits12                          72  0x00000048 (const ??? 0)  (usage 3)
iLeddigits13                          82  0x00000052 (const ??? 0)  (usage 3)
iLeddigits14                          85  0x00000055 (const ??? 0)  (usage 3)
iLeddigits15                          88  0x00000058 (const ??? 0)  (usage 3)
iLeddigits16                          91  0x0000005b (const ??? 0)  (usage 3)
iLeddigits17                          93  0x0000005d (const ??? 0)  (usage 3)
iLeddigits18                         103  0x00000067 (const ??? 0)  (usage 3)
iLeddigits2                           37  0x00000025 (const ??? 0)  (usage 3)
iLeddigits3                           54  0x00000036 (const ??? 0)  (usage 3)
iLeddigits4                           45  0x0000002d (const ??? 0)  (usage 3)
iLeddigits5                           47  0x0000002f (const ??? 0)  (usage 3)
iLeddigits6                           56  0x00000038 (const ??? 0)  (usage 3)
iLeddigits7                           58  0x0000003a (const ??? 0)  (usage 3)
iLeddigits8                           60  0x0000003c (const ??? 0)  (usage 3)
iLeddigits9                           62  0x0000003e (const ??? 0)  (usage 3)
ileft                                  0  0x00000000 (const dword)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -187  0xffffff45 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -181  0xffffff4b (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -180  0xffffff4c (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -179  0xffffff4d (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -184  0xffffff48 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -182  0xffffff4a (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SetAttributes                   -186  0xffffff46 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -178  0xffffff4e (PmmC func) args[4] r=1  (not used)
img_SetWord                         -183  0xffffff49 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -185  0xffffff47 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -188  0xffffff44 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
iMinDigits                             4  0x00000004 (const dword)  (usage 3)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
input                                144  0x00000090 (mem) word (global)  (usage 27)
INPUT                                  1  0x00000001 (const dword)  (not used)
inputtype                            140  0x0000008c (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IO1_PIN                                1  0x00000001 (const dword)  (not used)
IO2_PIN                                2  0x00000002 (const dword)  (not used)
IO3_PIN                                3  0x00000003 (const dword)  (not used)
IO4_PIN                                4  0x00000004 (const dword)  (not used)
IO5_PIN                                5  0x00000005 (const dword)  (not used)
IPControls                            67  0x00000043IPControls                            67  0x00000043 (mem) word[108] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 9)
IPD_DOWN                              16  0x00000010 (const dword)  (usage 6)
IPD_OBJVidx                           20  0x00000014 (const dword)  (usage 15)
IPD_P1                                 2  0x00000002 (const dword)  (usage 15)
IPD_P2                                 4  0x00000004 (const dword)  (usage 48)
IPD_P3                                 6  0x00000006 (const dword)  (usage 9)
IPD_P4                                 8  0x00000008 (const dword)  (usage 3)
IPD_P5                                10  0x0000000a (const dword)  (usage 6)
IPD_P6                                12  0x0000000c (const dword)  (usage 18)
IPD_P7                                14  0x0000000e (const dword)  (not used)
IPD_RELEASE                           18  0x00000012 (const dword)  (usage 9)
IPData                               283  0x0000011bIPData                               283  0x0000011b (mem) word[924] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 30)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                             -207  0xffffff31 (PmmC func) args[1] r=1  (not used)
isalpha                             -206  0xffffff32 (PmmC func) args[1] r=1  (not used)
isdigit                             -202  0xffffff36 (PmmC func) args[1] r=1  (not used)
islower                             -205  0xffffff33 (PmmC func) args[1] r=1  (not used)
isprint                             -208  0xffffff30 (PmmC func) args[1] r=1  (not used)
isspace                             -209  0xffffff2f (PmmC func) args[1] r=1  (not used)
iStatictext0                           2  0x00000002 (const ??? 0)  (usage 3)
iStatictext1                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext10                         66  0x00000042 (const ??? 0)  (usage 3)
iStatictext11                         67  0x00000043 (const ??? 0)  (usage 3)
iStatictext12                         68  0x00000044 (const ??? 0)  (usage 3)
iStatictext13                         69  0x00000045 (const ??? 0)  (usage 3)
iStatictext14                         74  0x0000004a (const ??? 0)  (usage 3)
iStatictext15                         81  0x00000051 (const ??? 0)  (usage 3)
iStatictext16                         84  0x00000054 (const ??? 0)  (usage 3)
iStatictext17                         87  0x00000057 (const ??? 0)  (usage 3)
iStatictext18                         90  0x0000005a (const ??? 0)  (usage 3)
iStatictext19                         95  0x0000005f (const ??? 0)  (usage 3)
iStatictext2                          40  0x00000028 (const ??? 0)  (usage 3)
iStatictext3                           3  0x00000003 (const ??? 0)  (usage 3)
iStatictext4                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext5                          51  0x00000033 (const ??? 0)  (usage 3)
iStatictext6                          44  0x0000002c (const ??? 0)  (usage 3)
iStatictext7                          49  0x00000031 (const ??? 0)  (usage 3)
iStatictext8                          52  0x00000034 (const ??? 0)  (usage 3)
iStatictext9                          53  0x00000035 (const ??? 0)  (usage 3)
iStrings0                           2131  0x00000853iStrings0                           2131  0x00000853 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings1                           2157  0x0000086diStrings1                           2157  0x0000086d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings10                          2391  0x00000957iStrings10                          2391  0x00000957 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings11                          2417  0x00000971iStrings11                          2417  0x00000971 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings12                          2443  0x0000098biStrings12                          2443  0x0000098b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings13                          2469  0x000009a5iStrings13                          2469  0x000009a5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings14                          2495  0x000009bfiStrings14                          2495  0x000009bf (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings2                           2183  0x00000887iStrings2                           2183  0x00000887 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings3                           2209  0x000008a1iStrings3                           2209  0x000008a1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings4                           2235  0x000008bbiStrings4                           2235  0x000008bb (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings5                           2261  0x000008d5iStrings5                           2261  0x000008d5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings6                           2287  0x000008efiStrings6                           2287  0x000008ef (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings7                           2313  0x00000909iStrings7                           2313  0x00000909 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings8                           2339  0x00000923iStrings8                           2339  0x00000923 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
iStrings9                           2365  0x0000093diStrings9                           2365  0x0000093d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
isupper                             -204  0xffffff34 (PmmC func) args[1] r=1  (not used)
iswhite                             -210  0xffffff2e (PmmC func) args[1] r=1  (not used)
isxdigit                            -203  0xffffff35 (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -198  0xffffff3a (PmmC func) args[1] r=0  (not used)
iThermometer0                          4  0x00000004 (const ??? 0)  (usage 3)
iThermometer1                          1  0x00000001 (const ??? 0)  (usage 3)
iUserbutton0                          22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton1                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton10                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton11                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton12                         20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton13                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton14                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton15                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton16                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton17                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton18                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton19                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton2                          23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton20                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton21                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton22                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton23                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton24                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton25                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton26                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton27                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton28                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton29                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton3                          32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton30                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton31                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton32                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton33                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton34                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton4                           7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton5                           8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton6                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton7                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton8                          15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton9                          16  0x00000010 (const ??? 0)  (usage 3)
iUserimages0                          10  0x0000000a (const ??? 0)  (usage 3)
iVideo0                               12  0x0000000c (const ??? 0)  (usage 3)
iVideo1                               96  0x00000060 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWidthDigit                            6  0x00000006 (const dword)  (usage 3)
iWinbutton0                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton1                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton2                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton3                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton4                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton5                            5  0x00000005 (const ??? 0)  (usage 3)
iWinbutton7                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton8                           31  0x0000001f (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 2859  0x00000b2bkKeyboardKeystrokes                 2859  0x00000b2b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (not used)
LANDSCAPE_R                            1  0x00000001 (const dword)  (usage 3)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                    5968  0x00001750 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                              -213  0xffffff2b (PmmC func) args[1] r=1  (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                3197  0x00000c7d (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -15  0xfffffff1 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
MEDIA_ADDRESS_MW                      92  0x0000005c (const dword)  (not used)
MEDIA_ADDRESS_UW                      93  0x0000005d (const dword)  (not used)
media_Flush                         -118  0xffffff8a (PmmC func) args[0] r=1  (not used)
media_Image                         -117  0xffffff8b (PmmC func) args[2] r=0  (not used)
media_Init                          -119  0xffffff89 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -111  0xffffff91 (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -113  0xffffff8f (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -114  0xffffff8e (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                      124  0x0000007c (const dword)  (not used)
MEDIA_SECTOR_LO                      123  0x0000007b (const dword)  (not used)
media_SetAdd                        -109  0xffffff93 (PmmC func) args[2] r=0  (not used)
media_SetSector                     -110  0xffffff92 (PmmC func) args[2] r=0  (not used)
media_Video                         -107  0xffffff95 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -108  0xffffff94 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -115  0xffffff8d (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
media_WrSector                      -112  0xffffff90 (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -217  0xffffff27 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -218  0xffffff26 (PmmC func) args[1] r=1  (not used)
mem_Compare                         -224  0xffffff20 (PmmC func) args[3] r=1  (not used)
mem_Copy                            -223  0xffffff21 (PmmC func) args[3] r=1  (not used)
mem_Free                            -220  0xffffff24 (PmmC func) args[1] r=1  (not used)
mem_Heap                            -221  0xffffff23 (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -219  0xffffff25 (PmmC func) args[2] r=1  (not used)
mem_Set                             -222  0xffffff22 (PmmC func) args[3] r=1  (not used)
MEMORY_ACCESS_CONTROL                 22  0x00000016 (const dword)  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -14  0xfffffff2 (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 24)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                               84  0x00000054 (const dword)  (usage 3)
nObjects                             108  0x0000006c (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
o4Dbuttons                          2745  0x00000ab9o4Dbuttons                          2745  0x00000ab9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oAngularmeters                      2553  0x000009f9oAngularmeters                      2553  0x000009f9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oAniButtons                         2747  0x00000abboAniButtons                         2747  0x00000abb (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
object                               146  0x00000092 (mem) word (global)  (usage 18)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       2749  0x00000abdoColorPickers                       2749  0x00000abd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oCoolgauges                         2555  0x000009fboCoolgauges                         2555  0x000009fb (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
Ocs                                  390  0x00000186 (mem) word (global)  (usage 9)
oCustomdigitss                      2557  0x000009fdoCustomdigitss                      2557  0x000009fd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oDipSwitchs                         2521  0x000009d9oDipSwitchs                         2521  0x000009d9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              2559  0x000009ffoForms                              2559  0x000009ff (mem) word[16] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oGauges                             2591  0x00000a1foGauges                             2591  0x00000a1f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oGSliders                           2529  0x000009e1oGSliders                           2529  0x000009e1 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oImages                             2593  0x00000a21oImages                             2593  0x00000a21 (mem) word[3] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oKeyboards                          2599  0x00000a27oKeyboards                          2599  0x00000a27 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oKnobs                              2523  0x000009dboKnobs                              2523  0x000009db (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                         2603  0x00000a2boLeddigitss                         2603  0x00000a2b (mem) word[20] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 9)
oLeds                               2601  0x00000a29oLeds                               2601  0x00000a29 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             2643  0x00000a53oMeters                             2643  0x00000a53 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                              66  0x00000042 (mem) word[34] (global)  (usage 108)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
OPDataL                             2861  0x00000b2dOPDataL                             2861  0x00000b2d (mem) word[95] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 6)
oPinInputs                          2743  0x00000ab7oPinInputs                          2743  0x00000ab7 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oPinOutputs                         2827  0x00000b0boPinOutputs                         2827  0x00000b0b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      2525  0x000009ddoRockerSwitchs                      2525  0x000009dd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oRotarySwitchs                      2527  0x000009dfoRotarySwitchs                      2527  0x000009df (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OSC_CONTROL_1                         25  0x00000019 (const dword)  (not used)
OSC_CONTROL_3                        147  0x00000093 (const dword)  (not used)
oScopes                             2735  0x00000aafoScopes                             2735  0x00000aaf (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (not used)
oSoundss                            2825  0x00000b09oSoundss                            2825  0x00000b09 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oSpectrums                          2733  0x00000aadoSpectrums                          2733  0x00000aad (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oStaticTexts                        2691  0x00000a83oStaticTexts                        2691  0x00000a83 (mem) word[21] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oStringss                           2645  0x00000a55oStringss                           2645  0x00000a55 (mem) word[16] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 7)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 54)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 75)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              2737  0x00000ab1oTanks                              2737  0x00000ab1 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oThermometers                       2677  0x00000a75oThermometers                       2677  0x00000a75 (mem) word[3] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oTimers                             2823  0x00000b07oTimers                             2823  0x00000b07 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oTrackbars                          2531  0x000009e3oTrackbars                          2531  0x000009e3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oUserButtons                        2751  0x00000abfoUserButtons                        2751  0x00000abf (mem) word[36] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 12)
oUserImagess                        2739  0x00000ab3oUserImagess                        2739  0x00000ab3 (mem) word[2] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oUserleds                           2683  0x00000a7boUserleds                           2683  0x00000a7b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OUTPUT                                 0  0x00000000 (const dword)  (not used)
OVF                                  -21  0xffffffeb (PmmC func) args[0] r=1  (usage 3)
oVideos                             2685  0x00000a7doVideos                             2685  0x00000a7d (mem) word[3] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 3)
oWinButtons                         2533  0x000009e5oWinButtons                         2533  0x000009e5 (mem) word[10] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\Test_millorat_Intro.4DWork\Test_millorat_Intro.4DGenieS)  (usage 12)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (usage 3)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PICASO                                 1  0x00000001 (const dword)  (usage 3)
PICASO_FUNCTIONS                       0  0x00000000 (const ??? 0)  (not used)
pin_HI                               -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
pin_LO                               -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
pin_Read                             -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
pin_Set                              -41  0xffffffd7 (PmmC func) args[2] r=1  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -12  0xfffffff4 (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
POWER_CONTROL_1                       27  0x0000001b (const dword)  (not used)
POWER_CONTROL_2                       28  0x0000001c (const dword)  (not used)
POWER_CONTROL_3                       29  0x0000001d (const dword)  (not used)
POWER_CONTROL_4                       30  0x0000001e (const dword)  (not used)
POWER_CONTROL_5                       31  0x0000001f (const dword)  (not used)
POWER_CONTROL_6                       32  0x00000020 (const dword)  (not used)
PrintStrings                        7090  0x00001bb2 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
RAND                                 -19  0xffffffed (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
READ_WRITE_DATA                       34  0x00000022 (const dword)  (not used)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                          6836  0x00001ab4 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
reserved                            -294  0xfffffeda (PmmC func) args[0] r=0  (not used)
RGBINT_CONTROL_1                      56  0x00000038 (const dword)  (not used)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROW_ADDRESS_END1                       9  0x00000009 (const dword)  (not used)
ROW_ADDRESS_END2                       8  0x00000008 (const dword)  (not used)
ROW_ADDRESS_START1                     7  0x00000007 (const dword)  (not used)
ROW_ADDRESS_START2                     6  0x00000006 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (usage 3)
RXMODE_0                               0  0x00000000 (const dword)  (not used)
RXMODE_1                               1  0x00000001 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -20  0xffffffec (PmmC func) args[1] r=0  (not used)
SELECT                                 3  0x00000003 (const dword)  (not used)
SELECT_MULTIPLE                        4  0x00000004 (const dword)  (not used)
serin                                 -1  0xffffffff (PmmC func) args[0] r=1  (usage 3)
serin1                              -140  0xffffff74 (PmmC func) args[0] r=1  (not used)
serout                                -3  0xfffffffd (PmmC func) args[1] r=0  (usage 42)
serout1                             -141  0xffffff73 (PmmC func) args[1] r=0  (not used)
seroutCS                            7072  0x00001ba0 (User func) args[1] r=0  (usage 30)
seroutOcs                           7057  0x00001b91 (User func) args[0] r=0  (usage 6)
setbaud                               -4  0xfffffffc (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -17  0xffffffef (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -258  0xfffffefe (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -261  0xfffffefb (PmmC func) args[0] r=0  (not used)
snd_Pause                           -260  0xfffffefc (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -257  0xfffffeff (PmmC func) args[1] r=1  (not used)
snd_Playing                         -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
snd_Stop                            -259  0xfffffefd (PmmC func) args[0] r=0  (not used)
snd_Volume                          -256  0xffffff00 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
spi_Disable                         -153  0xffffff67 (PmmC func) args[0] r=0  (not used)
SPI_FAST                               0  0x00000000 (const dword)  (not used)
spi_Init                            -150  0xffffff6a (PmmC func) args[3] r=0  (not used)
SPI_MED                                1  0x00000001 (const dword)  (not used)
spi_Read                            -151  0xffffff69 (PmmC func) args[0] r=1  (not used)
SPI_SLOW                               2  0x00000002 (const dword)  (not used)
spi_Write                           -152  0xffffff68 (PmmC func) args[1] r=0  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -22  0xffffffea (PmmC func) args[1] r=1  (not used)
STAnsi                                22  0x00000016 (const dword)  (usage 3)
STBGColor                             16  0x00000010 (const dword)  (usage 6)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STFGColor                             14  0x0000000e (const dword)  (usage 3)
STFontAttribs                         18  0x00000012 (const dword)  (usage 3)
STForm                                24  0x00000018 (const dword)  (usage 3)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
str_Cat                             -278  0xfffffeea (PmmC func) args[2] r=1  (not used)
str_CatN                            -279  0xfffffee9 (PmmC func) args[3] r=1  (not used)
str_Copy                            -287  0xfffffee1 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -288  0xfffffee0 (PmmC func) args[3] r=1  (not used)
str_Find                            -274  0xfffffeee (PmmC func) args[2] r=1  (not used)
str_FindI                           -275  0xfffffeed (PmmC func) args[2] r=1  (not used)
str_GetByte                         -268  0xfffffef4 (PmmC func) args[1] r=1  (not used)
str_GetC                            -267  0xfffffef5 (PmmC func) args[2] r=1  (not used)
str_GetD                            -264  0xfffffef8 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -266  0xfffffef6 (PmmC func) args[2] r=1  (not used)
str_GetW                            -265  0xfffffef7 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -269  0xfffffef3 (PmmC func) args[1] r=1  (not used)
str_Length                          -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
str_Match                           -272  0xfffffef0 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -273  0xfffffeef (PmmC func) args[2] r=1  (not used)
str_Printf                          -277  0xfffffeeb (PmmC func) args[2] r=1  (not used)
str_Ptr                             -263  0xfffffef9 (PmmC func) args[1] r=1  (not used)
str_PutByte                         -270  0xfffffef2 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -271  0xfffffef1 (PmmC func) args[2] r=0  (not used)
strheight                           -161  0xffffff5f (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                          28  0x0000001c (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                         0  0x00000000 (const dword)  (usage 3)
Strings10Count                         0  0x00000000 (const dword)  (not used)
Strings10Size                          1  0x00000001 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         25  0x00000019 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         19  0x00000013 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                         25  0x00000019 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                     1536  0x00000600 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      4096  0x00001000 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          13  0x0000000d (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          26  0x0000001a (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      3584  0x00000e00 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      4608  0x00001200 (const dword)  (usage 3)
Strings8Count                          1  0x00000001 (const dword)  (not used)
Strings8Size                          25  0x00000019 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      5120  0x00001400 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                          25  0x00000019 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      2048  0x00000800 (const dword)  (usage 3)
stringsCV                             34  0x00000022 (mem) word[15] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                            -160  0xffffff60 (PmmC func) args[1] r=1  (not used)
STSize                                 4  0x00000004 (const dword)  (usage 3)
STStartH                               0  0x00000000 (const dword)  (usage 3)
STStartL                               2  0x00000002 (const dword)  (usage 3)
STTransparent                         20  0x00000014 (const dword)  (usage 3)
STx1                                   6  0x00000006 (const dword)  (usage 12)
STx2                                  10  0x0000000a (const dword)  (usage 9)
STy1                                   8  0x00000008 (const dword)  (usage 12)
STy2                                  12  0x0000000c (const dword)  (usage 9)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -295  0xfffffed9 (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -194  0xffffff3e (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -195  0xffffff3d (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -196  0xffffff3c (PmmC func) args[0] r=0  (usage 3)
sys_GetTimer                        -192  0xffffff40 (PmmC func) args[1] r=1  (not used)
sys_SetTimer                        -191  0xffffff41 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -193  0xffffff3f (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -280  0xfffffee8 (PmmC func) args[0] r=1  (not used)
sys_T                               -189  0xffffff43 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -190  0xffffff42 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -5  0xfffffffb (PmmC func) args[1] r=1  (not used)
tolower                             -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -199  0xffffff39 (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -201  0xffffff37 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -200  0xffffff38 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
toupper                             -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
translate                             -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
TState                               142  0x0000008e (mem) word (global)  (usage 24)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                      6282  0x0000188a (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 120)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 42)
txt_Attributes                       -38  0xffffffda (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -34  0xffffffde (PmmC func) args[1] r=1  (not used)
txt_Delay                            -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -25  0xffffffe7 (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontID                           -27  0xffffffe5 (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
txt_Italic                           -35  0xffffffdd (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -23  0xffffffe9 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -33  0xffffffdf (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -24  0xffffffe8 (PmmC func) args[2] r=0  (not used)
txt_Underline                        -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
txt_Width                            -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
uadd_3232                           -290  0xfffffede (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                           -292  0xfffffedc (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
ULCD_32PT_GFX                          0  0x00000000 (const ??? 0)  (not used)
umul_1616                           -289  0xfffffedf (PmmC func) args[3] r=1  (usage 3)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                        -281  0xfffffee7 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                       4979  0x00001373 (User func) args[1] r=0  (usage 3)
USER_INITIALIZED_DISPLAY              32  0x00000020 (const dword)  (not used)
usub_3232                           -291  0xfffffedd (PmmC func) args[3] r=1  (not used)
VCOM_CONTROL_1                        67  0x00000043 (const dword)  (not used)
VCOM_CONTROL_2                        68  0x00000044 (const dword)  (not used)
VCOM_CONTROL_3                        69  0x00000045 (const dword)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (usage 3)
WHITE                              65535  0x0000ffff (const dword)  (usage 39)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 3)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 3)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                         6481  0x00001951 (User func) args[3] r=0  (usage 24)
x                                    136  0x00000088 (mem) word (global)  (usage 12)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
y                                    138  0x0000008a (mem) word (global)  (usage 9)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
